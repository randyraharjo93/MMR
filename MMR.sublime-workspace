{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"fa",
				"False	(instance)"
			],
			[
				"s",
				"stokid"
			],
			[
				"list",
				"listproduk2"
			],
			[
				"penjualan",
				"penjualanfaktur"
			],
			[
				"semua",
				"semuahasilsearch	(forstmt)"
			],
			[
				"D",
				"DEFAULT_SERVER_DATE_FORMAT	(instance)"
			],
			[
				"a",
				"akundetil"
			],
			[
				"mut",
				"multi	(function)"
			],
			[
				"tan",
				"tanggalterbit"
			],
			[
				"idak",
				"idakun"
			],
			[
				"akun",
				"akundetil	(statement)"
			],
			[
				"jurnal",
				"jurnaldisesuaikan	(statement)"
			],
			[
				"many2",
				"many2one	(class)"
			],
			[
				"all",
				"all_fixed_days	(forstmt)"
			],
			[
				"fal",
				"fal_ending_date"
			],
			[
				"fal_",
				"fal_fixed_days	(statement)"
			],
			[
				"in_",
				"in_invoice_forecast"
			],
			[
				"in",
				"in_sales_forecast"
			],
			[
				"holiday",
				"holiday_remaining	(statement)"
			],
			[
				"time",
				"timedelta	(class)"
			],
			[
				"job",
				"job_id"
			],
			[
				"contr",
				"contract"
			],
			[
				"empl",
				"employee_id"
			],
			[
				"emp",
				"employee"
			],
			[
				"depar",
				"department_id"
			],
			[
				"pro",
				"probability"
			],
			[
				"team",
				"team_id"
			],
			[
				"com",
				"company_list	(statement)"
			],
			[
				"att",
				"attribute"
			],
			[
				"oppor",
				"opportunity_id"
			],
			[
				"user",
				"user_timezone	(statement)"
			],
			[
				"nama",
				"namaproduk"
			],
			[
				"tim",
				"timesheet_id	(statement)"
			],
			[
				"ti",
				"timesheet_id	(statement)"
			],
			[
				"timeshee",
				"timesheet_id	(statement)"
			],
			[
				"accou",
				"account_analytic_list	(statement)"
			],
			[
				"acco",
				"account_analytic_list	(statement)"
			],
			[
				"selec",
				"selection"
			],
			[
				"parent",
				"parent_id"
			],
			[
				"web",
				"website"
			],
			[
				"re",
				"record_options"
			],
			[
				"recor",
				"record_options"
			],
			[
				"vale",
				"values	(param)"
			],
			[
				"tracking",
				"tracking_value_ids"
			],
			[
				"c",
				"company_ids"
			],
			[
				"Many2",
				"Many2many"
			],
			[
				"fal_cem",
				"fal_crm_project"
			],
			[
				"gleize",
				"gleize_field_ext"
			],
			[
				"st",
				"string"
			],
			[
				"attrib",
				"attributes"
			],
			[
				"fal_tech",
				"fal_technical_contact"
			],
			[
				"fal_t",
				"fal_technical_contact"
			],
			[
				"par",
				"partner_id"
			],
			[
				"at",
				"attrs"
			],
			[
				"req",
				"required"
			],
			[
				"child",
				"child_ids"
			],
			[
				"paren",
				"parent_id"
			],
			[
				"pa",
				"parent_id"
			],
			[
				"l",
				"log"
			],
			[
				"cons",
				"console"
			],
			[
				"get",
				"get_context"
			],
			[
				"partner",
				"partner_id"
			],
			[
				"parnter",
				"partner_id"
			],
			[
				"le",
				"margin-left"
			],
			[
				"col",
				"col-md-3"
			],
			[
				"survey",
				"survey_form_question"
			],
			[
				"t-",
				"t-call"
			],
			[
				"id",
				"parent_id"
			],
			[
				"mu",
				"multi"
			],
			[
				"fal_account_per",
				"fal_account_periods_lock	(class)"
			],
			[
				"fis",
				"fiscalyear_id"
			],
			[
				"compan",
				"company_id"
			],
			[
				"g",
				"gleize_web_ext"
			],
			[
				"field",
				"field_name	(forstmt)"
			],
			[
				"margin",
				"margin-left"
			],
			[
				"bor",
				"border-style"
			],
			[
				"border-riht",
				"border-right-width"
			],
			[
				"va",
				"value"
			],
			[
				"form",
				"form_two"
			],
			[
				"back",
				"background-color"
			],
			[
				"mar",
				"margin-left"
			],
			[
				"r",
				"row"
			],
			[
				"text-al",
				"text-align"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "Searching 3083 files for \"laporanmarketing\" (whole word)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\menu\\menu_master.xml:\n  284  		<record id=\"multi_action_master_mmr_laporanmarketing\" model=\"ir.actions.act_window\">\n  285  			<field name=\"name\">Laporan Marketing</field>\n  286: 			<field name=\"res_model\">mmr.laporanmarketing</field>\n  287  			<field name=\"view_type\">form</field>\n  288  			<field name=\"view_mode\">form</field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\penjualan.py:\n  351          'waktudisetujuisupervisor': fields.datetime(\"Waktu Disetujui Supervisor / Gudang\", readonly=True, help=\"Apabila via PO adalah tukar, maka penyetuju adalah gudang\"), \n  352          'dibatalkan': fields.char(\"Dibatalkan\", readonly=True), \n  353:         'laporanmarketing': fields.many2one(\"mmr.laporanmarketing\", \"Laporan Marketing\"), \n  354          'pokhusus': fields.boolean(\"PO Khusus\"), \n  355          'hargabebas': fields.boolean(\"Harga Bebas\"), \n  ...\n  923          'namamodel': fields.char(\"NamaModel\"), \n  924          'notes': fields.text(\"Notes\"), \n  925:         'laporanmarketing': fields.many2one(\"mmr.laporanmarketing\", \"Laporan Marketing\"), \n  926      }    \n  927      \n  ...\n 1081          'trigger': fields.char(\"Trigger\", compute=\"_isi_barang\"), \n 1082          'status': fields.function(_set_status, type=\"char\", method=True, string=\"Status\"), \n 1083:         'laporanmarketing': fields.many2one(\"mmr.laporanmarketing\", \"Laporan Marketing\"), \n 1084          'teknisi': fields.boolean(\"Teknisi(P)\", help=\"Centang apabila retur ini mempengaruhi omzet teknisi\"), \n 1085  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\sales.py:\n  117  # Dapat melihat rata - rata faktur\n  118  class mmr_laporanmarketing(osv.osv):\n  119:     _name = \"mmr.laporanmarketing\"\n  120      _description = \"Modul Laporan Marketing untuk PT. MMR.\"\n  121      \n  ...\n  331              for semuaberdasarkan in listberdasarkan:\n  332                  isigrafikpenjualan = {}\n  333:                 isigrafikpenjualan['laporanmarketing'] = self.id\n  334                  isigrafikpenjualan['berdasarkan'] = semuaberdasarkan\n  335                  jumlah = 0\n  ...\n  344                  \n  345                  self.grafikpenjualan += self.env['mmr.grafikpenjualan'].new(isigrafikpenjualan)\n  346:             listbulan['laporanmarketing'] = self.id\n  347              listbulan['berdasarkan'] = \"~Total\"\n  348              listbulan['rerata'] = round(listbulan['jumlah'] / jumlahbulan,2)\n  ...\n  359          'endtanggal' : fields.date(\"End\"),\n  360          'teknisi': fields.boolean(\"Teknisi(P)\"),\n  361:         'penjualanpo': fields.one2many(\"mmr.penjualanpo\", \"laporanmarketing\", \"Penjualan PO\"),\n  362:         'penjualanfaktur' : fields.one2many(\"mmr.penjualanfaktur\", \"laporanmarketing\", \"Penjualan Faktur\"),\n  363:         'penjualanretur' : fields.one2many(\"mmr.penjualanretur\", \"laporanmarketing\", \"Penjualan Retur\"),\n  364:         'grafikpenjualan' : fields.one2many(\"mmr.grafikpenjualan\", \"laporanmarketing\", \"Grafik Penjualan\", compute=\"_isi_grafik\"),\n  365          'berdasarkan' : fields.selection([('rayon','Rayon'), ('customer','Customer'), ('kota','Kota')], \"Berdasarkan\"),\n  366          'berdasarkantampilan' : fields.char(\"Berdasarkan\", readonly=True),\n  ...\n  376      \n  377      _columns = {\n  378:         'laporanmarketing' : fields.many2one(\"mmr.laporanmarketing\"),    \n  379          'berdasarkan': fields.char(\"Berdasarkan\"),\n  380          '1' : fields.float(\"Januari\", digits=(12,2)),\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\view\\sales.xml:\n  121  		-----------Laporan Marketing----------\n  122  		<record id=\"mmr_laporanmarketing_list\" model=\"ir.ui.view\">\n  123: 			<field name=\"name\">mmr.laporanmarketing.list</field>\n  124: 			<field name=\"model\">mmr.laporanmarketing</field>\n  125  			<field name=\"arch\" type=\"xml\">\n  126  				<tree string=\"Laporan Marketing\" version=\"7.0\">\n  ...\n  133  		\n  134  		<record id=\"mmr_laporanmarketing_form\" model=\"ir.ui.view\">\n  135: 			<field name=\"name\">mmr.laporanmarketing.form</field>\n  136: 			<field name=\"model\">mmr.laporanmarketing</field>\n  137  			<field name=\"arch\" type=\"xml\">\n  138  				<form string=\"Laporan Marketing\" version=\"7.0\" >\n\n20 matches across 4 files\n\n\nSearching 3083 files for \"mmr.biaya\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\akun.py:\n  225          'sumberpembayaranpenjualan': fields.many2one(\"mmr.pembayaranpenjualan\", \"Sumber Pembayaran Penjualan\", ondelete='cascade'),\n  226          'sumberkegiatanakunting': fields.many2one(\"mmr.kegiatanakunting\", \"Sumber Kegiatan Akunting\", ondelete='cascade'),\n  227:         'sumberbiaya': fields.many2one(\"mmr.biaya\", \"Sumber Biaya\", ondelete='cascade'),\n  228          'sumberinventaris': fields.many2one(\"mmr.inventaris\", \"Sumber Inventaris\", ondelete='cascade'),\n  229          'sumberjurnalpenyesuaian': fields.many2one(\"mmr.jurnalpenyesuaian\", \"Sumber Jurnal Penyesuaian\", ondelete='cascade'),\n  ...\n  771                  elif objini.model.model == \"mmr.pembayaranpenjualan\":\n  772                      akunClass.create(cr, uid, {\"idakun\":semuaakundetil.noakun.id, \"sumberpembayaranpenjualan\": semuahasilsearch, \"tanggal\":modelobj.write_date})\n  773:                 elif objini.model.model == \"mmr.biaya\":\n  774                      akunClass.create(cr, uid, {\"idakun\":semuaakundetil.noakun.id, \"sumberbiaya\": semuahasilsearch, \"tanggal\":modelobj.write_date})\n  775  \n  ...\n  852      # Wadah Pencatatn jurnal biaya\n  853      \n  854:     _name = \"mmr.biaya\"\n  855      _description = \"Modul biaya untuk PT. MMR.\"\n  856      \n  ...\n  944      \n  945      _defaults = {\n  946:                 'namamodel' : \"mmr.biaya\", \n  947                  'akunotomatis' : True, \n  948                  }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\menu\\menu_master.xml:\n  139  		<record id=\"multi_action_master_mmr_biaya\" model=\"ir.actions.act_window\">\n  140  			<field name=\"name\">Biaya</field>\n  141: 			<field name=\"res_model\">mmr.biaya</field>\n  142  			<field name=\"view_type\">form</field>\n  143  			<field name=\"view_mode\">tree,form</field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\smart.py:\n  172  \n  173  			#1.5. Biaya	\n  174: 			for semuabiaya in self.env['mmr.biaya'].search([]):		\n  175  				total = 0\n  176  				for semuaakundetil in semuabiaya.akunterkena:\n  ...\n  526  			text += \"Biaya Dihapus: \\n\"		\n  527  			# Hapus Record yang hanya berhubungan lgsg dengan akunting (Biaya, Kegiatan Akunting, Penutup, Penyesuaian)\n  528: 			biayaClass = self.pool.get(\"mmr.biaya\")\n  529  			kegiatanakuntingClass = self.pool.get(\"mmr.kegiatanakunting\")\n  530  			jurnalpenyesuaianClass = self.pool.get(\"mmr.jurnalpenyesuaian\")\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\view\\akun.xml:\n  717  				-----------Biaya---------\n  718  		<record id=\"mmr_biaya_list\" model=\"ir.ui.view\">\n  719: 			<field name=\"name\">mmr.biaya.list</field>\n  720: 			<field name=\"model\">mmr.biaya</field>\n  721  			<field name=\"arch\" type=\"xml\">\n  722  				<tree string=\"Biaya\" version=\"7.0\" colors=\"red:status!='Normal'\" default_order=\"tanggal desc\">\n  ...\n  733  		\n  734  		<record id=\"mmr_biaya_form\" model=\"ir.ui.view\">\n  735: 			<field name=\"name\">mmr.biaya.form</field>\n  736: 			<field name=\"model\">mmr.biaya</field>\n  737  			<field name=\"arch\" type=\"xml\">\n  738  				<form string=\"Biaya\" version=\"7.0\" >\n\n11 matches across 4 files\n\n\nSearching 3083 files for \"execute\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\account.py:\n   46      level = 100\n   47      while len(ids):\n   48:         cr.execute('SELECT DISTINCT parent_id '\\\n   49                      'FROM '+self._table+' '\\\n   50                      'WHERE id IN %s '\\\n   ..\n  329                         \" GROUP BY l.account_id\")\n  330              params = (tuple(children_and_consolidated),) + query_params\n  331:             cr.execute(request, params)\n  332  \n  333              for row in cr.dictfetchall():\n  ...\n  526              return False\n  527          while(ids):\n  528:             cr.execute('SELECT DISTINCT child_id '\\\n  529                         'FROM account_account_consol_rel '\\\n  530                         'WHERE parent_id IN %s', (tuple(ids),))\n  ...\n 1046              if period.fiscalyear_id.state == 'done':\n 1047                  raise osv.except_osv(_('Warning!'), _('You can not re-open a period which belongs to closed fiscal year'))\n 1048:         cr.execute('update account_journal_period set state=%s where period_id in %s', (mode, tuple(ids),))\n 1049:         cr.execute('update account_period set state=%s where id in %s', (mode, tuple(ids),))\n 1050          self.invalidate_cache(cr, uid, context=context)\n 1051          return True\n ....\n 1119      def _check(self, cr, uid, ids, context=None):\n 1120          for obj in self.browse(cr, uid, ids, context=context):\n 1121:             cr.execute('select * from account_move_line where journal_id=%s and period_id=%s limit 1', (obj.journal_id.id, obj.period_id.id))\n 1122              res = cr.fetchall()\n 1123              if res:\n ....\n 1155  \n 1156      def account_assert_balanced(self, cr, uid, context=None):\n 1157:         cr.execute(\"\"\"\\\n 1158              SELECT      move_id\n 1159              FROM        account_move_line\n ....\n 1212      def _amount_compute(self, cr, uid, ids, name, args, context, where =''):\n 1213          if not ids: return {}\n 1214:         cr.execute( 'SELECT move_id, SUM(debit) '\\\n 1215                      'FROM account_move_line '\\\n 1216                      'WHERE move_id IN %s '\\\n ....\n 1234                      continue\n 1235  \n 1236:             cr.execute(\"select move_id from account_move_line group by move_id having sum(debit) %s %%s\" % (cond[1]),(amount,))\n 1237              res_ids = set(id[0] for id in cr.fetchall())\n 1238              ids = ids and (ids & res_ids) or res_ids\n ....\n 1324                      self.write(cr, uid, [move.id], {'name':new_name})\n 1325  \n 1326:         cr.execute('UPDATE account_move '\\\n 1327                     'SET state=%s '\\\n 1328                     'WHERE id IN %s',\n ....\n 1352                  raise osv.except_osv(_('Error!'), _('You cannot modify a posted entry of this journal.\\nFirst you should set the journal to allow cancelling entries.'))\n 1353          if ids:\n 1354:             cr.execute('UPDATE account_move '\\\n 1355                         'SET state=%s '\\\n 1356                         'WHERE id IN %s', ('draft', tuple(ids),))\n ....\n 1459          # find the first line of this move with the current mode\n 1460          # or create it if it doesn't exist\n 1461:         cr.execute('select id from account_move_line where move_id=%s and centralisation=%s limit 1', (move.id, mode))\n 1462          res = cr.fetchone()\n 1463          if res:\n ....\n 1480          # find the first line of this move with the other mode\n 1481          # so that we can exclude it from our calculation\n 1482:         cr.execute('select id from account_move_line where move_id=%s and centralisation=%s limit 1', (move.id, mode2))\n 1483          res = cr.fetchone()\n 1484          if res:\n ....\n 1487              line_id2 = 0\n 1488  \n 1489:         cr.execute('SELECT SUM(%s) FROM account_move_line WHERE move_id=%%s AND id!=%%s' % (mode,), (move.id, line_id2))\n 1490          result = cr.fetchone()[0] or 0.0\n 1491:         cr.execute('update account_move_line set '+mode2+'=%s where id=%s', (result, line_id))\n 1492          account_move_line_obj.invalidate_cache(cr, uid, [mode2], [line_id], context=context)\n 1493  \n 1494          #adjust also the amount in currency if needed\n 1495:         cr.execute(\"select currency_id, sum(amount_currency) as amount_currency from account_move_line where move_id = %s and currency_id is not null group by currency_id\", (move.id,))\n 1496          for row in cr.dictfetchall():\n 1497              currency_id = currency_obj.browse(cr, uid, row['currency_id'], context=context)\n ....\n 1499                  amount_currency = row['amount_currency'] * -1\n 1500                  account_id = amount_currency > 0 and move.journal_id.default_debit_account_id.id or move.journal_id.default_credit_account_id.id\n 1501:                 cr.execute('select id from account_move_line where move_id=%s and centralisation=\\'currency\\' and currency_id = %slimit 1', (move.id, row['currency_id']))\n 1502                  res = cr.fetchone()\n 1503                  if res:\n 1504:                     cr.execute('update account_move_line set amount_currency=%s , account_id=%s where id=%s', (amount_currency, account_id, res[0]))\n 1505                      account_move_line_obj.invalidate_cache(cr, uid, ['amount_currency', 'account_id'], [res[0]], context=context)\n 1506                  else:\n ....\n 1709          parent_ids = tuple(self.search(cr, uid, [('parent_id', 'child_of', ids)]))\n 1710          if context.get('based_on', 'invoices') == 'payments':\n 1711:             cr.execute('SELECT line.tax_code_id, sum(line.tax_amount) \\\n 1712                      FROM account_move_line AS line, \\\n 1713                          account_move AS move \\\n ....\n 1721                                  (parent_ids,) + where_params)\n 1722          else:\n 1723:             cr.execute('SELECT line.tax_code_id, sum(line.tax_amount) \\\n 1724                      FROM account_move_line AS line, \\\n 1725                      account_move AS move \\\n ....\n 1851          FIXED: tax = price + amount\n 1852          NONE: no tax line\n 1853:         CODE: execute python code. localcontext = {'price_unit':pu}\n 1854              return result in the context\n 1855              Ex: result=round(price_unit*0.21,4)\n ....\n 3118          company_ids = company_obj.search(cr, uid, [], context=context)\n 3119          #display in the widget selection of companies, only the companies that haven't been configured yet (but don't care about the demo chart of accounts)\n 3120:         cr.execute(\"SELECT company_id FROM account_account WHERE active = 't' AND account_account.parent_id IS NULL AND name != %s\", (\"Chart For Automated Tests\",))\n 3121          configured_cmp = [r[0] for r in cr.fetchall()]\n 3122          unconfigured_cmp = list(set(company_ids)-set(configured_cmp))\n ....\n 3383          return True\n 3384  \n 3385:     def execute(self, cr, uid, ids, context=None):\n 3386          '''\n 3387          This function is called at the confirmation of the wizard to generate the COA from the templates. It will read\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\account_analytic_line.py:\n  143          if context.get('account_id', False):\n  144              # account_id in context may also be pointing to an account.account.id\n  145:             cr.execute('select name from account_analytic_account where id=%s', (context['account_id'],))\n  146              res = cr.fetchone()\n  147              if res:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\account_bank_statement.py:\n  366              journal = self.pool.get('account.journal').browse(cr, uid, journal_id, context=context)\n  367              if journal.with_last_closing_balance:\n  368:                 cr.execute('SELECT balance_end_real \\\n  369                        FROM account_bank_statement \\\n  370                        WHERE journal_id = %s AND NOT state = %s \\\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\account_invoice.py:\n  621                      WHERE i.id = %s AND l.move_id = i.move_id AND l.account_id = i.account_id\n  622                  \"\"\"\n  623:         self._cr.execute(query, (self.id,))\n  624          return [row[0] for row in self._cr.fetchall()]\n  625  \n  ...\n  631              return False\n  632          query = \"SELECT reconcile_id FROM account_move_line WHERE id IN %s\"\n  633:         self._cr.execute(query, (tuple(line_ids),))\n  634          return all(row[0] for row in self._cr.fetchall())\n  635  \n  ...\n  639          ctx = dict(self._context)\n  640          for invoice in self:\n  641:             self._cr.execute(\"DELETE FROM account_invoice_tax WHERE invoice_id=%s AND manual is False\", (invoice.id,))\n  642              self.invalidate_cache()\n  643              partner = invoice.partner_id\n  ...\n  970                  ref = inv.number\n  971  \n  972:             self._cr.execute(\"\"\" UPDATE account_move SET ref=%s\n  973                             WHERE id=%s AND (ref IS NULL OR ref = '')\"\"\",\n  974                          (ref, inv.move_id.id))\n  975:             self._cr.execute(\"\"\" UPDATE account_move_line SET ref=%s\n  976                             WHERE move_id=%s AND (ref IS NULL OR ref = '')\"\"\",\n  977                          (ref, inv.move_id.id))\n  978:             self._cr.execute(\"\"\" UPDATE account_analytic_line SET ref=%s\n  979                             FROM account_move_line\n  980                             WHERE account_move_line.move_id = %s AND\n  ...\n 1177  \n 1178          move_ids = (move | self.move_id).ids\n 1179:         self._cr.execute(\"SELECT id FROM account_move_line WHERE move_id IN %s\",\n 1180                           (tuple(move_ids),))\n 1181          lines = self.env['account.move.line'].browse([r[0] for r in self._cr.fetchall()])\n ....\n 1595      def move_line_get(self, invoice_id):\n 1596          res = []\n 1597:         self._cr.execute(\n 1598              'SELECT * FROM account_invoice_tax WHERE invoice_id = %s',\n 1599              (invoice_id,)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\account_move_line.py:\n  251                  #find the date and the ID of the last unbalanced account.move encoded by the current user in that journal and period\n  252                  move_id = False\n  253:                 cr.execute('''SELECT move_id, date FROM account_move_line\n  254                      WHERE journal_id = %s AND period_id = %s AND create_uid = %s AND state = %s\n  255                      ORDER BY id DESC limit 1''', (context['journal_id'], context['period_id'], uid, 'draft'))\n  ...\n  321                  \") WHERE l1.id IN %s GROUP BY l1.id\"\n  322  \n  323:         cr.execute(sql, [tuple(ids)])\n  324          return dict(cr.fetchall())\n  325  \n  ...\n  329          for line_id in ids:\n  330              res[line_id] = False\n  331:         cursor.execute('SELECT l.id, i.id ' \\\n  332                          'FROM account_move_line l, account_invoice i ' \\\n  333                          'WHERE l.move_id = i.move_id ' \\\n  ...\n  363              return []\n  364          where = ' AND '.join(map(lambda x: '(abs(sum(debit-credit))'+x[1]+str(x[2])+')',args))\n  365:         cursor.execute('SELECT id, SUM(debit-credit) FROM account_move_line \\\n  366                       GROUP BY id, debit, credit having '+where)\n  367          res = cursor.fetchall()\n  ...\n  407          else:\n  408              qu1 = ''\n  409:         cursor.execute('SELECT l.id ' \\\n  410                  'FROM account_move_line l, account_invoice i ' \\\n  411                  'WHERE l.move_id = i.move_id ' + qu1, qu2)\n  ...\n  501          dt = time.strftime('%Y-%m-%d')\n  502          if context.get('journal_id') and context.get('period_id'):\n  503:             cr.execute('SELECT date FROM account_move_line ' \\\n  504                      'WHERE journal_id = %s AND period_id = %s ' \\\n  505                      'ORDER BY id DESC limit 1',\n  ...\n  578      def _auto_init(self, cr, context=None):\n  579          res = super(account_move_line, self)._auto_init(cr, context=context)\n  580:         cr.execute('SELECT indexname FROM pg_indexes WHERE indexname = \\'account_move_line_journal_id_period_id_index\\'')\n  581          if not cr.fetchone():\n  582:             cr.execute('CREATE INDEX account_move_line_journal_id_period_id_index ON account_move_line (journal_id, period_id)')\n  583:         cr.execute('SELECT indexname FROM pg_indexes WHERE indexname = %s', ('account_move_line_date_id_index',))\n  584          if not cr.fetchone():\n  585:             cr.execute('CREATE INDEX account_move_line_date_id_index ON account_move_line (date DESC, id desc)')\n  586          return res\n  587  \n  ...\n  844  \n  845      def list_partners_to_reconcile(self, cr, uid, context=None):\n  846:         cr.execute(\n  847               \"\"\"SELECT partner_id FROM (\n  848                  SELECT l.partner_id, p.last_reconciliation_date, SUM(l.debit) AS debit, SUM(l.credit) AS credit, MAX(l.create_date) AS max_date\n  ...\n  954              date = time.strftime('%Y-%m-%d')\n  955  \n  956:         cr.execute('SELECT account_id, reconcile_id '\\\n  957                     'FROM account_move_line '\\\n  958                     'WHERE id IN %s '\\\n  ...\n 1064          context = self.convert_to_period(cr, user, context=context)\n 1065          if context.get('account_id', False):\n 1066:             cr.execute('SELECT code FROM account_account WHERE id = %s', (context['account_id'], ))\n 1067              res = cr.fetchone()\n 1068              if res:\n ....\n 1073          if context.get('search_default_journal_id', False):\n 1074              context['journal_id'] = context.get('search_default_journal_id')\n 1075:         cr.execute('SELECT code FROM account_journal WHERE id = %s', (context['journal_id'], ))\n 1076          j = cr.fetchone()[0] or ''\n 1077:         cr.execute('SELECT code FROM account_period WHERE id = %s', (context['period_id'], ))\n 1078          p = cr.fetchone()[0] or ''\n 1079          if j or p:\n ....\n 1108          if context is None:\n 1109              context = {}\n 1110:         cr.execute('SELECT id, state, name FROM account_move WHERE journal_id = %s AND period_id = %s ORDER BY id limit 1', (context['journal_id'],context['period_id']))\n 1111          res = cr.fetchone()\n 1112          if res:\n ....\n 1212          period_obj = self.pool.get('account.period')\n 1213          jour_period_obj = self.pool.get('account.journal.period')\n 1214:         cr.execute('SELECT state FROM account_journal_period WHERE journal_id = %s AND period_id = %s', (journal_id, period_id))\n 1215          result = cr.fetchall()\n 1216          journal = journal_obj.browse(cr, uid, journal_id, context=context)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\account_view.xml:\n 1625                      <separator string=\"Legend\"/>\n 1626                      <field name=\"legend\"/>\n 1627:                     <button name=\"%(action_account_use_model_create_entry)d\" string=\"Create entries\" type=\"action\" icon=\"gtk-execute\"/>\n 1628                  </form>\n 1629              </field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\installer.py:\n  105          but don't care about the demo chart of accounts \"\"\"\n  106          company_ids = self.pool.get('res.company').search(cr, uid, [], context=context)\n  107:         cr.execute(\"SELECT company_id FROM account_account WHERE active = 't' AND account_account.parent_id IS NULL AND name != %s\", (\"Chart For Automated Tests\",))\n  108          configured_cmp = [r[0] for r in cr.fetchall()]\n  109          return list(set(company_ids)-set(configured_cmp))\n  ...\n  112          \"\"\" check if there are still unconfigured companies \"\"\"\n  113          if not self.get_unconfigured_cmp(cr, uid, context=context):\n  114:             raise osv.except_osv(_('No Unconfigured Company!'), _(\"There is currently no company without chart of account. The wizard will therefore not be executed.\"))\n  115  \n  116      def fields_view_get(self, cr, uid, view_id=None, view_type='form', context=None, toolbar=False, submenu=False):\n  ...\n  136          return {}\n  137  \n  138:     def execute(self, cr, uid, ids, context=None):\n  139:         self.execute_simple(cr, uid, ids, context)\n  140:         return super(account_installer, self).execute(cr, uid, ids, context=context)\n  141  \n  142:     def execute_simple(self, cr, uid, ids, context=None):\n  143          if context is None:\n  144              context = {}\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\partner.py:\n  185          ctx['all_fiscalyear'] = True\n  186          query = self.pool.get('account.move.line')._query_get(cr, uid, context=ctx)\n  187:         cr.execute(\"\"\"SELECT l.partner_id, a.type, SUM(l.debit-l.credit)\n  188                        FROM account_move_line l\n  189                        LEFT JOIN account_account a ON (l.account_id=a.id)\n  ...\n  212                                  'operator':x[1]},args))\n  213          query = self.pool.get('account.move.line')._query_get(cr, uid, context=context)\n  214:         cr.execute(('SELECT pid AS partner_id, SUM(bal2) FROM ' \\\n  215                      '(SELECT CASE WHEN bal IS NOT NULL THEN bal ' \\\n  216                      'ELSE 0.0 END AS bal2, p.id as pid FROM ' \\\n  ...\n  262          at least a debit, a credit and a line older than the last reconciliation date of the partner\n  263          '''\n  264:         cr.execute('''\n  265              SELECT l.partner_id, SUM(l.debit) AS debit, SUM(l.credit) AS credit\n  266              FROM account_move_line l\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\project\\report\\analytic_balance.py:\n   69          ids = account_analytic_obj.search(self.cr, self.uid,\n   70                  [('parent_id', 'child_of', [account_id])])\n   71:         self.cr.execute(\"SELECT aa.name AS name, aa.code AS code, \\\n   72                      sum(aal.amount) AS balance, sum(aal.unit_amount) AS quantity \\\n   73                  FROM account_analytic_line AS aal, account_account AS aa \\\n   ..\n  102          query_params = (tuple(ids), date1, date2)\n  103          if option == \"credit\":\n  104:             self.cr.execute(\"SELECT COALESCE(-sum(amount),0.0) FROM account_analytic_line \\\n  105                      WHERE account_id IN %s AND date>=%s AND date<=%s AND amount<0\",query_params)\n  106          elif option == \"debit\":\n  107:             self.cr.execute(\"SELECT COALESCE(sum(amount),0.0) FROM account_analytic_line \\\n  108                      WHERE account_id IN %s\\\n  109                          AND date>=%s AND date<=%s AND amount>0\",query_params)\n  110          elif option == \"quantity\":\n  111:             self.cr.execute(\"SELECT COALESCE(sum(unit_amount),0.0) FROM account_analytic_line \\\n  112                  WHERE account_id IN %s\\\n  113                      AND date>=%s AND date<=%s\",query_params)\n  ...\n  133          query_params = (tuple(ids2), date1, date2)\n  134          if option == \"debit\":\n  135:             self.cr.execute(\"SELECT COALESCE(sum(amount),0.0) FROM account_analytic_line \\\n  136                      WHERE account_id IN %s AND date>=%s AND date<=%s AND amount>0\",query_params)\n  137          elif option == \"credit\":\n  138:             self.cr.execute(\"SELECT COALESCE(-sum(amount),0.0) FROM account_analytic_line \\\n  139                      WHERE account_id IN %s AND date>=%s AND date<=%s AND amount<0\",query_params)\n  140          elif option == \"quantity\":\n  141:             self.cr.execute(\"SELECT COALESCE(sum(unit_amount),0.0) FROM account_analytic_line \\\n  142                      WHERE account_id IN %s AND date>=%s AND date<=%s\",query_params)\n  143          return self.cr.fetchone()[0] or 0.0\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\project\\report\\analytic_journal.py:\n   40  \n   41      def _lines(self, journal_id, date1, date2):\n   42:         self.cr.execute('SELECT DISTINCT move_id FROM account_analytic_line WHERE (date>=%s) AND (date<=%s) AND (journal_id=%s) AND (move_id is not null)', (date1, date2, journal_id,))\n   43          ids = map(lambda x: x[0], self.cr.fetchall())\n   44          return self.pool.get('account.move.line').browse(self.cr, self.uid, ids)\n   ..\n   51          \n   52      def _sum_general(self, journal_id, date1, date2):\n   53:         self.cr.execute('SELECT SUM(debit-credit) FROM account_move_line WHERE id IN (SELECT move_id FROM account_analytic_line WHERE (date>=%s) AND (date<=%s) AND (journal_id=%s) AND (move_id is not null))', (date1, date2, journal_id,))\n   54          return self.cr.fetchall()[0][0] or 0\n   55  \n   56      def _sum_analytic(self, journal_id, date1, date2):\n   57:         self.cr.execute(\"SELECT SUM(amount) FROM account_analytic_line WHERE date>=%s AND date<=%s AND journal_id=%s\", (date1, date2, journal_id))\n   58          res = self.cr.dictfetchone()\n   59          return res['sum'] or 0\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\project\\report\\cost_ledger.py:\n   55  \n   56      def _lines_g(self, account, date1, date2):\n   57:         self.cr.execute(\"SELECT sum(aal.amount) AS balance, aa.code AS code, aa.name AS name, aa.id AS id \\\n   58                  FROM account_account AS aa, account_analytic_line AS aal \\\n   59                  WHERE (aal.account_id IN %s) AND (aal.date>=%s) AND (aal.date<=%s) AND (aal.general_account_id=aa.id) AND aa.active \\\n   ..\n   66  \n   67      def _lines_a(self, general_account, account, date1, date2):\n   68:         self.cr.execute(\"SELECT aal.name AS name, aal.code AS code, aal.amount AS balance, aal.date AS date, aaj.code AS cj FROM account_analytic_line AS aal, account_analytic_journal AS aaj \\\n   69                  WHERE (aal.general_account_id=%s) AND (aal.account_id IN %s) AND (aal.date>=%s) AND (aal.date<=%s) \\\n   70                  AND (aal.journal_id=aaj.id) \\\n   ..\n   88  \n   89      def _sum_debit(self, accounts, date1, date2):\n   90:         self.cr.execute(\"SELECT sum(amount) FROM account_analytic_line WHERE account_id IN %s AND date>=%s AND date<=%s AND amount>0\",\n   91              (self._get_children(accounts), date1, date2,))\n   92          return self.cr.fetchone()[0] or 0.0\n   93  \n   94      def _sum_credit(self, accounts, date1, date2):\n   95:         self.cr.execute(\"SELECT -sum(amount) FROM account_analytic_line WHERE account_id IN %s AND date>=%s AND date<=%s AND amount<0\",\n   96              (self._get_children(accounts), date1, date2,))\n   97          return self.cr.fetchone()[0] or 0.0\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\project\\report\\inverted_analytic_balance.py:\n   39      def _lines_g(self, accounts, date1, date2):\n   40          ids = map(lambda x: x.id, accounts)\n   41:         self.cr.execute(\"SELECT aa.name AS name, aa.code AS code, \"\n   42                          \"sum(aal.amount) AS balance, \"\n   43                          \"sum(aal.unit_amount) AS quantity, aa.id AS id \\\n   ..\n   64      def _lines_a(self, accounts, general_account_id, date1, date2):\n   65          ids = map(lambda x: x.id, accounts)\n   66:         self.cr.execute(\"SELECT sum(aal.amount) AS balance, \"\n   67                          \"sum(aal.unit_amount) AS quantity, \"\n   68                          \"aaa.code AS code, aaa.name AS name, account_id \\\n   ..\n   97      def _sum_debit(self, accounts, date1, date2):\n   98          ids = map(lambda x: x.id, accounts)\n   99:         self.cr.execute(\"SELECT sum(amount) \\\n  100                  FROM account_analytic_line \\\n  101                  WHERE account_id IN %s AND date>=%s AND date<=%s AND amount>0\", (tuple(ids),date1, date2,))\n  ...\n  104      def _sum_credit(self, accounts, date1, date2):\n  105          ids = map(lambda x: x.id, accounts)\n  106:         self.cr.execute(\"SELECT -sum(amount) \\\n  107                  FROM account_analytic_line \\\n  108                  WHERE account_id IN %s AND date>=%s AND date<=%s AND amount<0\", (tuple(ids),date1, date2,))\n  ...\n  116      def _sum_quantity(self, accounts, date1, date2):\n  117          ids = map(lambda x: x.id, accounts)\n  118:         self.cr.execute(\"SELECT sum(unit_amount) \\\n  119                  FROM account_analytic_line \\\n  120                  WHERE account_id IN %s AND date>=%s AND date<=%s\", (tuple(ids),date1, date2,))\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\project\\report\\quantity_cost_ledger.py:\n   37      def _lines_g(self, account_id, date1, date2, journals):\n   38          if not journals:\n   39:             self.cr.execute(\"SELECT sum(aal.unit_amount) AS quantity, \\\n   40                          aa.code AS code, aa.name AS name, aa.id AS id \\\n   41                      FROM account_account AS aa, account_analytic_line AS aal \\\n   ..\n   47          else:\n   48              journal_ids = journals\n   49:             self.cr.execute(\"SELECT sum(aal.unit_amount) AS quantity, \\\n   50                          aa.code AS code, aa.name AS name, aa.id AS id \\\n   51                      FROM account_account AS aa, account_analytic_line AS aal \\\n   ..\n   61      def _lines_a(self, general_account_id, account_id, date1, date2, journals):\n   62          if not journals:\n   63:             self.cr.execute(\"SELECT aal.name AS name, aal.code AS code, \\\n   64                          aal.unit_amount AS quantity, aal.date AS date, \\\n   65                          aaj.code AS cj \\\n   ..\n   73          else:\n   74              journal_ids = journals\n   75:             self.cr.execute(\"SELECT aal.name AS name, aal.code AS code, \\\n   76                          aal.unit_amount AS quantity, aal.date AS date, \\\n   77                          aaj.code AS cj \\\n   ..\n   88      def _account_sum_quantity(self, account_id, date1, date2, journals):\n   89          if not journals:\n   90:             self.cr.execute(\"SELECT sum(unit_amount) \\\n   91                      FROM account_analytic_line \\\n   92                      WHERE account_id=%s AND date>=%s AND date<=%s\",\n   ..\n   94          else:\n   95              journal_ids = journals\n   96:             self.cr.execute(\"SELECT sum(unit_amount) \\\n   97                      FROM account_analytic_line \\\n   98                      WHERE account_id = %s AND date >= %s AND date <= %s \\\n   ..\n  106              return 0.0\n  107          if not journals:\n  108:             self.cr.execute(\"SELECT sum(unit_amount) \\\n  109                      FROM account_analytic_line \\\n  110                      WHERE account_id IN %s AND date>=%s AND date<=%s\",\n  ...\n  112          else:\n  113              journal_ids = journals\n  114:             self.cr.execute(\"SELECT sum(unit_amount) \\\n  115                      FROM account_analytic_line \\\n  116                      WHERE account_id IN %s AND date >= %s AND date <= %s \\\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\report\\account_aged_partner_balance.py:\n   67          if self.target_move == 'posted':\n   68              move_state = ['posted']\n   69:         self.cr.execute('SELECT DISTINCT res_partner.id AS id,\\\n   70                      res_partner.name AS name \\\n   71                  FROM res_partner,account_move_line AS l, account_account, account_move am\\\n   ..\n   93  \n   94          totals = {}\n   95:         self.cr.execute('SELECT l.partner_id, SUM(l.debit-l.credit) \\\n   96                      FROM account_move_line AS l, account_account, account_move am \\\n   97                      WHERE (l.account_id = account_account.id) AND (l.move_id=am.id) \\\n   ..\n  112          future_past = {}\n  113          if self.direction_selection == 'future':\n  114:             self.cr.execute('SELECT l.partner_id, SUM(l.debit-l.credit) \\\n  115                          FROM account_move_line AS l, account_account, account_move am \\\n  116                          WHERE (l.account_id=account_account.id) AND (l.move_id=am.id) \\\n  ...\n  129                  future_past[i[0]] = i[1]\n  130          elif self.direction_selection == 'past': # Using elif so people could extend without this breaking\n  131:             self.cr.execute('SELECT l.partner_id, SUM(l.debit-l.credit) \\\n  132                      FROM account_move_line AS l, account_account, account_move am \\\n  133                      WHERE (l.account_id=account_account.id) AND (l.move_id=am.id)\\\n  ...\n  162                  args_list += (form[str(i)]['stop'],)\n  163              args_list += (self.date_from,)\n  164:             self.cr.execute('''SELECT l.partner_id, SUM(l.debit-l.credit), l.reconcile_partial_id\n  165                      FROM account_move_line AS l, account_account, account_move am \n  166                      WHERE (l.account_id = account_account.id) AND (l.move_id=am.id)\n  ...\n  180                  if partner_info[2]:\n  181                      # in case of partial reconciliation, we want to keep the left amount in the oldest period\n  182:                     self.cr.execute('''SELECT MIN(COALESCE(date_maturity,date)) FROM account_move_line WHERE reconcile_partial_id = %s''', (partner_info[2],))\n  183                      date = self.cr.fetchall()\n  184                      partial = False\n  ...\n  192                          # partial reconcilation\n  193                          limit_date = 'COALESCE(l.date_maturity,l.date) %s %%s' % '<=' if self.direction_selection == 'past' else '>='\n  194:                         self.cr.execute('''SELECT SUM(l.debit-l.credit)\n  195                                             FROM account_move_line AS l, account_move AS am\n  196                                             WHERE l.move_id = am.id AND am.state in %s\n  ...\n  258              self.total_account.append(0)\n  259          totals = {}\n  260:         self.cr.execute('SELECT SUM(l.debit-l.credit) \\\n  261                      FROM account_move_line AS l, account_account, account_move am \\\n  262                      WHERE (l.account_id = account_account.id) AND (l.move_id=am.id)\\\n  ...\n  274          future_past = {}\n  275          if self.direction_selection == 'future':\n  276:             self.cr.execute('SELECT SUM(l.debit-l.credit) \\\n  277                          FROM account_move_line AS l, account_account, account_move am\\\n  278                          WHERE (l.account_id=account_account.id) AND (l.move_id=am.id)\\\n  ...\n  289                  future_past['Unknown Partner'] = i[0]\n  290          elif self.direction_selection == 'past': # Using elif so people could extend without this breaking\n  291:             self.cr.execute('SELECT SUM(l.debit-l.credit) \\\n  292                      FROM account_move_line AS l, account_account, account_move am \\\n  293                      WHERE (l.account_id=account_account.id) AND (l.move_id=am.id)\\\n  ...\n  318                  args_list += (form[str(i)]['stop'],)\n  319              args_list += (self.date_from,)\n  320:             self.cr.execute('SELECT SUM(l.debit-l.credit)\\\n  321                      FROM account_move_line AS l, account_account, account_move am \\\n  322                      WHERE (l.account_id = account_account.id) AND (l.move_id=am.id)\\\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\report\\account_analytic_entries_report.py:\n   46      def init(self, cr):\n   47          tools.drop_view_if_exists(cr, 'analytic_entries_report')\n   48:         cr.execute(\"\"\"\n   49              create or replace view analytic_entries_report as (\n   50                   select\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\report\\account_central_journal.py:\n   65              objects = self.pool.get('account.journal.period').browse(self.cr, self.uid, new_ids)\n   66          if new_ids:\n   67:             self.cr.execute('SELECT period_id, journal_id FROM account_journal_period WHERE id IN %s', (tuple(new_ids),))\n   68              res = self.cr.fetchall()\n   69              self.period_ids, self.journal_ids = zip(*res)\n   ..\n   75              move_state = ['posted']\n   76  \n   77:         self.cr.execute('SELECT a.currency_id, a.code, a.name, c.symbol AS currency_code, l.currency_id, l.amount_currency, SUM(debit) AS debit, SUM(credit) AS credit  \\\n   78                          from account_move_line l  \\\n   79                          LEFT JOIN account_move am ON (l.move_id=am.id) \\\n   ..\n   83  \n   84      def _set_get_account_currency_code(self, account_id):\n   85:         self.cr.execute(\"SELECT c.symbol as code \"\\\n   86                  \"FROM res_currency c,account_account as ac \"\\\n   87                  \"WHERE ac.id = %s AND ac.currency_id = c.id\"%(account_id))\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\report\\account_entries_report.py:\n  107      def init(self, cr):\n  108          tools.drop_view_if_exists(cr, 'account_entries_report')\n  109:         cr.execute(\"\"\"\n  110              create or replace view account_entries_report as (\n  111              select\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\report\\account_general_journal.py:\n   66              objects = self.pool.get('account.journal.period').browse(self.cr, self.uid, new_ids)\n   67          if new_ids:\n   68:             self.cr.execute('SELECT period_id, journal_id FROM account_journal_period WHERE id IN %s', (tuple(new_ids),))\n   69              res = self.cr.fetchall()\n   70              self.period_ids, self.journal_ids = zip(*res)\n   ..\n   89          if self.target_move == 'posted':\n   90              move_state = ['posted']\n   91:         self.cr.execute('SELECT j.code, j.name, l.amount_currency,c.symbol AS currency_code,l.currency_id, '\n   92                          'SUM(l.debit) AS debit, SUM(l.credit) AS credit '\n   93                          'FROM account_move_line l '\n   ..\n  101  \n  102      def _set_get_account_currency_code(self, account_id):\n  103:         self.cr.execute(\"SELECT c.symbol AS code \"\\\n  104                          \"FROM res_currency c, account_account AS ac \"\\\n  105                          \"WHERE ac.id = %s AND ac.currency_id = c.id\" % (account_id))\n  ...\n  135          if self.target_move == 'posted':\n  136              move_state = ['posted']\n  137:         self.cr.execute('SELECT SUM(l.debit) FROM account_move_line l '\n  138                          'LEFT JOIN account_move am ON (l.move_id=am.id) '\n  139                          'WHERE am.state IN %s AND l.period_id=%s AND l.journal_id IN %s ' + self.query_get_clause + ' ' \\\n  ...\n  152          if not journals:\n  153              return 0.0\n  154:         self.cr.execute('SELECT SUM(l.credit) FROM account_move_line l '\n  155                          'LEFT JOIN account_move am ON (l.move_id=am.id) '\n  156                          'WHERE am.state IN %s AND l.period_id=%s AND l.journal_id IN %s '+ self.query_get_clause + ' ' \\\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\report\\account_general_ledger.py:\n   94  \n   95      def _sum_currency_amount_account(self, account):\n   96:         self.cr.execute('SELECT sum(l.amount_currency) AS tot_currency \\\n   97                  FROM account_move_line l \\\n   98                  WHERE l.account_id = %s AND %s' %(account.id, self.query))\n   99          sum_currency = self.cr.fetchone()[0] or 0.0\n  100          if self.init_balance:\n  101:             self.cr.execute('SELECT sum(l.amount_currency) AS tot_currency \\\n  102                              FROM account_move_line l \\\n  103                              WHERE l.account_id = %s AND %s '%(account.id, self.init_query))\n  ...\n  116                  WHERE %s AND l.account_id = %%s\n  117              \"\"\" % (self.query)\n  118:             self.cr.execute(sql, (child_account.id,))\n  119              num_entry = self.cr.fetchone()[0] or 0\n  120              sold_account = self._sum_balance_account(child_account)\n  ...\n  152                          WHERE am.state IN %s and %s AND l.account_id = %%s GROUP BY move_id) m1\n  153          \"\"\"% (tuple(move_state), self.query)\n  154:         self.cr.execute(sql, (account.id, account.id))\n  155          counterpart_res = self.cr.dictfetchall()\n  156          counterpart_accounts = {}\n  ...\n  179              WHERE %s AND m.state IN %s AND l.account_id = %%s ORDER by %s\n  180          \"\"\" %(self.query, tuple(move_state), sql_sort)\n  181:         self.cr.execute(sql, (account.id,))\n  182          res_lines = self.cr.dictfetchall()\n  183          res_init = []\n  ...\n  199                  WHERE %s AND m.state IN %s AND l.account_id = %%s\n  200              \"\"\" %(self.init_query, tuple(move_state))\n  201:             self.cr.execute(sql, (account.id,))\n  202              res_init = self.cr.dictfetchall()\n  203          res = res_init + res_lines\n  ...\n  223          if self.target_move == 'posted':\n  224              move_state = ['posted','']\n  225:         self.cr.execute('SELECT sum(debit) \\\n  226                  FROM account_move_line l \\\n  227                  JOIN account_move am ON (am.id = l.move_id) \\\n  ...\n  232          sum_debit = self.cr.fetchone()[0] or 0.0\n  233          if self.init_balance:\n  234:             self.cr.execute('SELECT sum(debit) \\\n  235                      FROM account_move_line l \\\n  236                      JOIN account_move am ON (am.id = l.move_id) \\\n  ...\n  249          if self.target_move == 'posted':\n  250              move_state = ['posted','']\n  251:         self.cr.execute('SELECT sum(credit) \\\n  252                  FROM account_move_line l \\\n  253                  JOIN account_move am ON (am.id = l.move_id) \\\n  ...\n  258          sum_credit = self.cr.fetchone()[0] or 0.0\n  259          if self.init_balance:\n  260:             self.cr.execute('SELECT sum(credit) \\\n  261                      FROM account_move_line l \\\n  262                      JOIN account_move am ON (am.id = l.move_id) \\\n  ...\n  275          if self.target_move == 'posted':\n  276              move_state = ['posted','']\n  277:         self.cr.execute('SELECT (sum(debit) - sum(credit)) as tot_balance \\\n  278                  FROM account_move_line l \\\n  279                  JOIN account_move am ON (am.id = l.move_id) \\\n  ...\n  284          sum_balance = self.cr.fetchone()[0] or 0.0\n  285          if self.init_balance:\n  286:             self.cr.execute('SELECT (sum(debit) - sum(credit)) as tot_balance \\\n  287                      FROM account_move_line l \\\n  288                      JOIN account_move am ON (am.id = l.move_id) \\\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\report\\account_invoice_report.py:\n  213          # self._table = account_invoice_report\n  214          tools.drop_view_if_exists(cr, self._table)\n  215:         cr.execute(\"\"\"CREATE or REPLACE VIEW %s as (\n  216              %s\n  217              FROM (\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\report\\account_journal.py:\n   73          elif new_ids:\n   74              #in case of direct access from account.journal.period object, we need to set the journal_ids and periods_ids\n   75:             self.cr.execute('SELECT period_id, journal_id FROM account_journal_period WHERE id IN %s', (tuple(new_ids),))\n   76              res = self.cr.fetchall()\n   77              self.period_ids, self.journal_ids = zip(*res)\n   ..\n   92          ids_journal_period = self.pool.get('account.journal.period').search(self.cr, self.uid, \n   93              [('journal_id', '=', journal_id), ('period_id', '=', period_id)])\n   94:         self.cr.execute(\n   95              'select distinct tax_code_id from account_move_line ' \\\n   96              'where period_id=%s and journal_id=%s and tax_code_id is not null and state<>\\'draft\\'',\n   ..\n  100          tax_code_ids = []\n  101          if ids:\n  102:             self.cr.execute('select id from account_tax_code where id in %s order by code', (tuple(ids),))\n  103              tax_code_ids = map(lambda x: x[0], self.cr.fetchall())\n  104          tax_codes = self.pool.get('account.tax.code').browse(self.cr, self.uid, tax_code_ids)\n  ...\n  106  \n  107      def _sum_vat(self, period_id, journal_id, tax_code_id):\n  108:         self.cr.execute('select sum(tax_amount) from account_move_line where ' \\\n  109                          'period_id=%s and journal_id=%s and tax_code_id=%s and state<>\\'draft\\'',\n  110                          (period_id, journal_id, tax_code_id))\n  ...\n  126              move_state = ['posted']\n  127  \n  128:         self.cr.execute('SELECT SUM(debit) FROM account_move_line l, account_move am '\n  129                          'WHERE l.move_id=am.id AND am.state IN %s AND l.period_id IN %s AND l.journal_id IN %s ' + self.query_get_clause + ' ',\n  130                          (tuple(move_state), tuple(period_id), tuple(journal_id)))\n  ...\n  146              move_state = ['posted']\n  147  \n  148:         self.cr.execute('SELECT SUM(l.credit) FROM account_move_line l, account_move am '\n  149                          'WHERE l.move_id=am.id AND am.state IN %s AND l.period_id IN %s AND l.journal_id IN %s '+ self.query_get_clause+'',\n  150                          (tuple(move_state), tuple(period_id), tuple(journal_id)))\n  ...\n  157              journal_id = [journal_id]\n  158          obj_mline = self.pool.get('account.move.line')\n  159:         self.cr.execute('update account_journal_period set state=%s where journal_id IN %s and period_id=%s and state=%s', ('printed', self.journal_ids, period_id, 'draft'))\n  160          self.pool.get('account.journal.period').invalidate_cache(self.cr, self.uid, ['state'], context=self.context)\n  161  \n  ...\n  164              move_state = ['posted']\n  165  \n  166:         self.cr.execute('SELECT l.id FROM account_move_line l, account_move am WHERE l.move_id=am.id AND am.state IN %s AND l.period_id=%s AND l.journal_id IN %s ' + self.query_get_clause + ' ORDER BY '+ self.sort_selection + ', l.move_id',(tuple(move_state), period_id, tuple(journal_id) ))\n  167          ids = map(lambda x: x[0], self.cr.fetchall())\n  168          return obj_mline.browse(self.cr, self.uid, ids)\n  169  \n  170      def _set_get_account_currency_code(self, account_id):\n  171:         self.cr.execute(\"SELECT c.symbol AS code \"\\\n  172                  \"FROM res_currency c,account_account AS ac \"\\\n  173                  \"WHERE ac.id = %s AND ac.currency_id = c.id\" % (account_id))\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\report\\account_partner_balance.py:\n   60              self.ACCOUNT_TYPE = ('payable', 'receivable')\n   61  \n   62:         self.cr.execute(\"SELECT a.id \" \\\n   63                  \"FROM account_account a \" \\\n   64                  \"LEFT JOIN account_account_type t \" \\\n   ..\n   88  \n   89          full_account = []\n   90:         self.cr.execute(\n   91              \"SELECT p.ref,l.account_id,ac.name AS account_name,ac.code AS code,p.name, sum(debit) AS debit, sum(credit) AS credit, \" \\\n   92                      \"CASE WHEN sum(debit) > sum(credit) \" \\\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\report\\account_partner_ledger.py:\n   84              self.ACCOUNT_TYPE = ['payable','receivable']\n   85  \n   86:         self.cr.execute(\n   87              \"SELECT a.id \" \\\n   88              \"FROM account_account a \" \\\n   ..\n   97              PARTNER_REQUEST =  \"AND l.partner_id IN %s\"\n   98              params += [tuple(ids)]\n   99:         self.cr.execute(\n  100                  \"SELECT DISTINCT l.partner_id \" \\\n  101                  \"FROM account_move_line AS l, account_account AS account, \" \\\n  ...\n  124          else:\n  125              RECONCILE_TAG = \"AND l.reconcile_id IS NULL\"\n  126:         self.cr.execute(\n  127              \"SELECT l.id, l.date, j.code, acc.code as a_code, acc.name as a_name, l.ref, m.name as move_name, l.name, l.debit, l.credit, l.amount_currency,l.currency_id, c.symbol AS currency_code \" \\\n  128              \"FROM account_move_line l \" \\\n  ...\n  157          else:\n  158              RECONCILE_TAG = \"AND l.reconcile_id IS NULL\"\n  159:         self.cr.execute(\n  160              \"SELECT COALESCE(SUM(l.debit),0.0), COALESCE(SUM(l.credit),0.0), COALESCE(sum(debit-credit), 0.0) \" \\\n  161              \"FROM account_move_line AS l,  \" \\\n  ...\n  184              RECONCILE_TAG = \"AND reconcile_id IS NULL\"\n  185          if self.initial_balance:\n  186:             self.cr.execute(\n  187                      \"SELECT sum(debit) \" \\\n  188                      \"FROM account_move_line AS l, \" \\\n  ...\n  201                  result_init = result_tmp + 0.0\n  202  \n  203:         self.cr.execute(\n  204                  \"SELECT sum(debit) \" \\\n  205                  \"FROM account_move_line AS l, \" \\\n  ...\n  233              RECONCILE_TAG = \"AND reconcile_id IS NULL\"\n  234          if self.initial_balance:\n  235:             self.cr.execute(\n  236                      \"SELECT sum(credit) \" \\\n  237                      \"FROM account_move_line AS l, \" \\\n  ...\n  250                  result_init = result_tmp + 0.0\n  251  \n  252:         self.cr.execute(\n  253                  \"SELECT sum(credit) \" \\\n  254                  \"FROM account_move_line AS l, \" \\\n  ...\n  281      def _sum_currency_amount_account(self, account, form):\n  282          self._set_get_account_currency_code(account.id)\n  283:         self.cr.execute(\"SELECT sum(aml.amount_currency) FROM account_move_line as aml,res_currency as rc WHERE aml.currency_id = rc.id AND aml.account_id= %s \", (account.id,))\n  284          total = self.cr.fetchone()\n  285          if self.account_currency:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\report\\account_report.py:\n   49      def init(self, cr):\n   50          tools.drop_view_if_exists(cr, 'report_account_receivable')\n   51:         cr.execute(\"\"\"\n   52              create or replace view report_account_receivable as (\n   53                  select\n   ..\n  102          for period in self.read(cr, uid, ids, ['name'], context=context):\n  103              date1,date2 = period['name'].split(' to ')\n  104:             cr.execute(\"SELECT SUM(credit-debit) FROM account_move_line AS line, account_account as ac  \\\n  105                          WHERE (line.account_id=ac.id) AND ac.type='receivable' \\\n  106                              AND (COALESCE(line.date,date) BETWEEN %s AND  %s) \\\n  ...\n  144  \n  145                  add(names, current_date, fy_start_date)\n  146:             cr.execute('delete from temp_range')\n  147  \n  148              for name in names:\n  149                  self.pool['temp.range'].create(cr, uid, {'name':name})\n  150  \n  151:         cr.execute(\"\"\"\n  152              create or replace view report_aged_receivable as (\n  153                  select id,name from temp_range\n  ...\n  190      def init(self, cr):\n  191          tools.drop_view_if_exists(cr, 'report_invoice_created')\n  192:         cr.execute(\"\"\"create or replace view report_invoice_created as (\n  193              select\n  194                 inv.id as id, inv.name as name, inv.type as type,\n  ...\n  226      def init(self, cr):\n  227          tools.drop_view_if_exists(cr, 'report_account_type_sales')\n  228:         cr.execute(\"\"\"create or replace view report_account_type_sales as (\n  229              select\n  230                 min(inv_line.id) as id,\n  ...\n  267      def init(self, cr):\n  268          tools.drop_view_if_exists(cr, 'report_account_sales')\n  269:         cr.execute(\"\"\"create or replace view report_account_sales as (\n  270              select\n  271                 min(inv_line.id) as id,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\report\\account_treasury_report.py:\n   58      def init(self, cr):\n   59          tools.drop_view_if_exists(cr, 'account_treasury_report')\n   60:         cr.execute(\"\"\"\n   61              create or replace view account_treasury_report as (\n   62              select\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\report\\common_report_header.py:\n   36          if not (period_id and journal_id):\n   37              return 0.0\n   38:         self.cr.execute('SELECT SUM(debit) FROM account_move_line l '\n   39                          'WHERE period_id IN %s AND journal_id IN %s ' + self.query_get_clause + ' ',\n   40                          (tuple(period_id), tuple(journal_id)))\n   ..\n   52          if not (period_id and journal_id):\n   53              return 0.0\n   54:         self.cr.execute('SELECT SUM(credit) FROM account_move_line l '\n   55                          'WHERE period_id IN %s AND journal_id IN %s '+ self.query_get_clause+'',\n   56                          (tuple(period_id), tuple(journal_id)))\n   ..\n  104          if not journals:\n  105              return 0.0\n  106:         self.cr.execute('SELECT SUM(debit) FROM account_move_line l '\n  107                          'WHERE period_id=%s AND journal_id IN %s '+ self.query_get_clause +'',\n  108                          (period_id, tuple(journals)))\n  ...\n  114          if not journals:\n  115              return 0.0\n  116:         self.cr.execute('SELECT SUM(credit) FROM account_move_line l '\n  117                          'WHERE period_id=%s AND journal_id IN %s ' + self.query_get_clause +' ',\n  118                          (period_id, tuple(journals)))\n  ...\n  132          codes = []\n  133          if data.get('form', False) and data['form'].get('journal_ids', False):\n  134:             self.cr.execute('select code from account_journal where id IN %s',(tuple(data['form']['journal_ids']),))\n  135              codes = [x for x, in self.cr.fetchall()]\n  136          return codes\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\report\\report_vat.py:\n   72              res = self._add_codes(based_on, res, period_list, context=context)\n   73          else:\n   74:             self.cr.execute (\"select id from account_fiscalyear\")\n   75              fy = self.cr.fetchall()\n   76:             self.cr.execute (\"select id from account_period where fiscalyear_id = %s\",(fy[0][0],))\n   77              periods = self.cr.fetchall()\n   78              for p in periods:\n   ..\n  112          periods_ids = tuple(period_list)\n  113          if based_on == 'payments':\n  114:             self.cr.execute('SELECT SUM(line.tax_amount) AS tax_amount, \\\n  115                          SUM(line.debit) AS debit, \\\n  116                          SUM(line.credit) AS credit, \\\n  ...\n  136  \n  137          else:\n  138:             self.cr.execute('SELECT SUM(line.tax_amount) AS tax_amount, \\\n  139                          SUM(line.debit) AS debit, \\\n  140                          SUM(line.credit) AS credit, \\\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\res_config.py:\n  328                  'currency_id': config.currency_id.id,\n  329              }, context)\n  330:             wizard.execute(cr, uid, [wizard_id], context)\n  331  \n  332      def set_fiscalyear(self, cr, uid, ids, context=None):\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\res_config_view.xml:\n   17                  <form string=\"Configure Accounting\" class=\"oe_form_configuration\">\n   18                      <header>\n   19:                         <button string=\"Apply\" type=\"object\" name=\"execute\" class=\"oe_highlight\"/>\n   20                          or\n   21                          <button string=\"Cancel\" type=\"object\" name=\"cancel\" class=\"oe_link\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\res_currency.py:\n   35          if account and account.currency_mode == 'average' and account.currency_id:\n   36              query = self.pool.get('account.move.line')._query_get(cr, uid, context=context)\n   37:             cr.execute('select sum(debit-credit),sum(amount_currency) from account_move_line l ' \\\n   38                'where l.currency_id=%s and l.account_id=%s and '+query, (account.currency_id.id,account.id,))\n   39              tot1,tot2 = cr.fetchone()\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\test\\test_parent_structure.py:\n   33  sock = xmlrpclib.ServerProxy('http://%s:%s/xmlrpc/object' % ('localhost',8069))\n   34  \n   35: ids = sock.execute(DB, USERID, USERPASS, 'account.account', 'search', [], {})\n   36: account_lists = sock.execute(DB, USERID, USERPASS, 'account.account', 'read', ids, ['parent_id','parent_left','parent_right'])\n   37  \n   38  accounts = dict(map(lambda x: (x['id'],x), account_lists))\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_automatic_reconcile.py:\n  165                  params += (max_amount,)\n  166              # reconcile automatically all transactions from partners whose balance is 0\n  167:             cr.execute(query, params)\n  168              partner_ids = [id for (id,) in cr.fetchall()]\n  169              for partner_id in partner_ids:\n  170:                 cr.execute(\n  171                      \"SELECT id \" \\\n  172                      \"FROM account_move_line \" \\\n  ...\n  185  \n  186              # get the list of partners who have more than one unreconciled transaction\n  187:             cr.execute(\n  188                  \"SELECT partner_id \" \\\n  189                  \"FROM account_move_line \" \\\n  ...\n  199              for partner_id in partner_ids:\n  200                  # get the list of unreconciled 'debit transactions' for this partner\n  201:                 cr.execute(\n  202                      \"SELECT id, debit \" \\\n  203                      \"FROM account_move_line \" \\\n  ...\n  212  \n  213                  # get the list of unreconciled 'credit transactions' for this partner\n  214:                 cr.execute(\n  215                      \"SELECT id, credit \" \\\n  216                      \"FROM account_move_line \" \\\n  ...\n  231              # unreconciled transactions to the unreconciled count\n  232              partner_filter = partner_ids and 'AND partner_id not in (%s)' % ','.join(map(str, filter(None, partner_ids))) or ''\n  233:             cr.execute(\n  234                  \"SELECT count(*) \" \\\n  235                  \"FROM account_move_line \" \\\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_automatic_reconcile_view.xml:\n   42  \n   43          <menuitem\n   44:             icon=\"STOCK_EXECUTE\"\n   45              name=\"Automatic Reconciliation\"\n   46              action=\"action_account_automatic_reconcile\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_chart.py:\n   47          if fiscalyear_id:\n   48              start_period = end_period = False\n   49:             cr.execute('''\n   50                  SELECT * FROM (SELECT p.id\n   51                                 FROM account_period p\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_fiscalyear_close.py:\n   58              \"\"\"\n   59              #check that the reconcilation concern journal entries from only one company\n   60:             cr.execute('select distinct(company_id) from account_move_line where id in %s',(tuple(ids),))\n   61              if len(cr.fetchall()) > 1:\n   62                  raise osv.except_osv(_('Warning!'), _('The entries to reconcile should belong to the same company.'))\n   63              r_id = self.pool.get('account.move.reconcile').create(cr, uid, {'type': 'auto', 'opening_reconciliation': True})\n   64:             cr.execute('update account_move_line set reconcile_id = %s where id in %s',(r_id, tuple(ids),))\n   65              obj_acc_move_line.invalidate_cache(cr, uid, ['reconcile_id'], ids, context=context)\n   66              return r_id\n   ..\n   81          fy_id = data[0].fy_id.id\n   82  \n   83:         cr.execute(\"SELECT id FROM account_period WHERE date_stop < (SELECT date_start FROM account_fiscalyear WHERE id = %s)\", (str(data[0].fy2_id.id),))\n   84          fy_period_set = ','.join(map(lambda id: str(id[0]), cr.fetchall()))\n   85:         cr.execute(\"SELECT id FROM account_period WHERE date_start > (SELECT date_stop FROM account_fiscalyear WHERE id = %s)\", (str(fy_id),))\n   86          fy2_period_set = ','.join(map(lambda id: str(id[0]), cr.fetchall()))\n   87  \n   ..\n  113              obj_acc_move.unlink(cr, uid, move_ids, context=context)\n  114  \n  115:         cr.execute(\"SELECT id FROM account_fiscalyear WHERE date_stop < %s\", (str(new_fyear.date_start),))\n  116          result = cr.dictfetchall()\n  117          fy_ids = ','.join([str(x['id']) for x in result])\n  ...\n  129  \n  130          #1. report of the accounts with defferal method == 'unreconciled'\n  131:         cr.execute('''\n  132              SELECT a.id\n  133              FROM account_account a\n  ...\n  139          account_ids = map(lambda x: x[0], cr.fetchall())\n  140          if account_ids:\n  141:             cr.execute('''\n  142                  INSERT INTO account_move_line (\n  143                       name, create_uid, create_date, write_uid, write_date,\n  ...\n  157              #We have also to consider all move_lines that were reconciled\n  158              #on another fiscal year, and report them too\n  159:             cr.execute('''\n  160                  INSERT INTO account_move_line (\n  161                       name, create_uid, create_date, write_uid, write_date,\n  ...\n  180  \n  181          #2. report of the accounts with defferal method == 'detail'\n  182:         cr.execute('''\n  183              SELECT a.id\n  184              FROM account_account a\n  ...\n  191  \n  192          if account_ids:\n  193:             cr.execute('''\n  194                  INSERT INTO account_move_line (\n  195                       name, create_uid, create_date, write_uid, write_date,\n  ...\n  209  \n  210          #3. report of the accounts with defferal method == 'balance'\n  211:         cr.execute('''\n  212              SELECT a.id\n  213              FROM account_account a\n  ...\n  245                         'draft')\n  246          if query_2nd_part:\n  247:             cr.execute(query_1st_part + query_2nd_part, tuple(query_2nd_part_args))\n  248              self.invalidate_cache(cr, uid, context=context)\n  249  \n  ...\n  268                     'period_id': period.id\n  269                 })]\n  270:         cr.execute('UPDATE account_fiscalyear ' \\\n  271                      'SET end_journal_period_id = %s ' \\\n  272                      'WHERE id = %s', (ids[0], old_fyear.id))\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_fiscalyear_close_state.py:\n   54                  raise osv.except_osv(_('Invalid Action!'), _('In order to close a fiscalyear, you must first post related journal entries.'))\n   55  \n   56:             cr.execute('UPDATE account_journal_period ' \\\n   57                          'SET state = %s ' \\\n   58                          'WHERE period_id IN (SELECT id FROM account_period \\\n   59                          WHERE fiscalyear_id = %s)',\n   60                      ('done', fy_id))\n   61:             cr.execute('UPDATE account_period SET state = %s ' \\\n   62                      'WHERE fiscalyear_id = %s', ('done', fy_id))\n   63:             cr.execute('UPDATE account_fiscalyear ' \\\n   64                      'SET state = %s WHERE id = %s', ('done', fy_id))\n   65              self.invalidate_cache(cr, uid, context=context)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_invoice_refund.py:\n  128                      date = form.date\n  129                      if not form.period.id:\n  130:                             cr.execute(\"select name from ir_model_fields \\\n  131                                              where model = 'account.period' \\\n  132                                              and name = 'company_id'\")\n  133                              result_query = cr.fetchone()\n  134                              if result_query:\n  135:                                 cr.execute(\"\"\"select p.id from account_fiscalyear y, account_period p where y.id=p.fiscalyear_id \\\n  136                                      and date(%s) between p.date_start AND p.date_stop and y.company_id = %s limit 1\"\"\", (date, company.id,))\n  137                              else:\n  138:                                 cr.execute(\"\"\"SELECT id\n  139                                          from account_period where date(%s)\n  140                                          between date_start AND  date_stop  \\\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_journal_select.py:\n   38          id = result and result[1] or False\n   39          result = act_obj.read(cr, uid, [id])[0]\n   40:         cr.execute('select journal_id, period_id from account_journal_period where id=%s', (context['active_id'],))\n   41          res = cr.fetchone()\n   42          if res:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_move_bank_reconcile.py:\n   43              context = {}\n   44          data = self.read(cr, uid, ids, context=context)[0]\n   45:         cr.execute('select default_credit_account_id \\\n   46                          from account_journal where id=%s', (data['journal_id'],))\n   47          account_id = cr.fetchone()[0]\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_open_closed_fiscalyear.py:\n   41          ids_move = move_obj.search(cr, uid, [('journal_id','=',period_journal.journal_id.id),('period_id','=',period_journal.period_id.id)])\n   42          if ids_move:\n   43:             cr.execute('delete from account_move where id IN %s', (tuple(ids_move),))\n   44              self.invalidate_cache(cr, uid, context=context)\n   45          return {'type': 'ir.actions.act_window_close'}\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_period_close.py:\n   52                          raise osv.except_osv(_('Invalid Action!'), _('In order to close a period, you must first post related journal entries.'))\n   53  \n   54:                     cr.execute('update account_journal_period set state=%s where period_id=%s', (mode, id))\n   55:                     cr.execute('update account_period set state=%s where id=%s', (mode, id))\n   56                      self.invalidate_cache(cr, uid, context=context)\n   57  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_reconcile_partner_process.py:\n   29  \n   30      def _get_to_reconcile(self, cr, uid, context=None):\n   31:         cr.execute(\"\"\"\n   32                    SELECT p_id FROM (SELECT l.partner_id as p_id, SUM(l.debit) AS debit, SUM(l.credit) AS credit\n   33                                      FROM account_move_line AS l LEFT JOIN account_account a ON (l.account_id = a.id)\n   ..\n   45  \n   46      def _get_today_reconciled(self, cr, uid, context=None):\n   47:         cr.execute(\n   48                  \"SELECT l.partner_id \" \\\n   49                  \"FROM account_move_line AS l LEFT JOIN res_partner p ON (p.id = l.partner_id) \" \\\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_report_common.py:\n   93          if filter == 'filter_period' and fiscalyear_id:\n   94              start_period = end_period = False\n   95:             cr.execute('''\n   96                  SELECT * FROM (SELECT p.id\n   97                                 FROM account_period p\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_report_common_journal.py:\n   36  \n   37          if data['form']['filter'] == 'filter_date':\n   38:             cr.execute('SELECT period_id FROM account_move_line WHERE date >= %s AND date <= %s', (data['form']['date_from'], data['form']['date_to']))\n   39              result['periods'] = map(lambda x: x[0], cr.fetchall())\n   40          elif data['form']['filter'] == 'filter_period':\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_analytic_analysis\\account_analytic_analysis.py:\n  106          for f in fields:\n  107              if f == 'user_ids':\n  108:                 cr.execute('SELECT MAX(id) FROM res_users')\n  109                  max_user = cr.fetchone()[0]\n  110                  if parent_ids:\n  111:                     cr.execute('SELECT DISTINCT(\"user\") FROM account_analytic_analysis_summary_user ' \\\n  112                                 'WHERE account_id IN %s AND unit_amount <> 0.0', (parent_ids,))\n  113                      result = cr.fetchall()\n  ...\n  118              elif f == 'month_ids':\n  119                  if parent_ids:\n  120:                     cr.execute('SELECT DISTINCT(month_id) FROM account_analytic_analysis_summary_month ' \\\n  121                                 'WHERE account_id IN %s AND unit_amount <> 0.0', (parent_ids,))\n  122                      result = cr.fetchall()\n  ...\n  129                      res[id][f] = False\n  130                  if parent_ids:\n  131:                     cr.execute(\"SELECT account_analytic_line.account_id, MAX(date) \\\n  132                              FROM account_analytic_line \\\n  133                              WHERE account_id IN %s \\\n  ...\n  143                  res2 = {}\n  144                  for account in accounts:\n  145:                     cr.execute(\"\"\"\n  146                          SELECT product_id, sum(amount), user_id, to_invoice, sum(unit_amount), product_uom_id, line.name\n  147                          FROM account_analytic_line line\n  ...\n  168                      res[id][f] = False\n  169                  if parent_ids:\n  170:                     cr.execute (\"SELECT account_analytic_line.account_id, \\\n  171                                  DATE(MAX(account_invoice.date_invoice)) \\\n  172                              FROM account_analytic_line \\\n  ...\n  182                      res[id][f] = False\n  183                  if parent_ids:\n  184:                     cr.execute(\"SELECT account_analytic_line.account_id, MAX(date) \\\n  185                              FROM account_analytic_line \\\n  186                              WHERE account_id IN %s \\\n  ...\n  195                      res[id][f] = 0.0\n  196                  if parent_ids:\n  197:                     cr.execute(\"SELECT account_analytic_line.account_id, COALESCE(SUM(unit_amount), 0.0) \\\n  198                              FROM account_analytic_line \\\n  199                              JOIN account_analytic_journal \\\n  ...\n  214                      res[id][f] = 0.0\n  215                  if parent_ids:\n  216:                     cr.execute(\"SELECT account_analytic_line.account_id, COALESCE(SUM(unit_amount), 0.0) \\\n  217                              FROM account_analytic_line \\\n  218                              JOIN account_analytic_journal \\\n  ...\n  236                  # Just consider list_price\n  237                  if parent_ids:\n  238:                     cr.execute(\"\"\"SELECT account_analytic_line.account_id AS account_id, \\\n  239                                  COALESCE(SUM((account_analytic_line.unit_amount * pt.list_price) \\\n  240                                      - (account_analytic_line.unit_amount * pt.list_price \\\n  ...\n  293              return res\n  294          if child_ids:\n  295:             cr.execute(\"\"\"SELECT account_analytic_line.account_id, COALESCE(SUM(amount), 0.0) \\\n  296                      FROM account_analytic_line \\\n  297                      JOIN account_analytic_journal \\\n  ...\n  755              contract_ids = self.search(cr, uid, [('recurring_next_date','<=', current_date), ('state','=', 'open'), ('recurring_invoices','=', True), ('type', '=', 'contract')])\n  756          if contract_ids:\n  757:             cr.execute('SELECT company_id, array_agg(id) as ids FROM account_analytic_account WHERE id IN %s GROUP BY company_id', (tuple(contract_ids),))\n  758              for company_id, ids in cr.fetchall():\n  759                  for contract in self.browse(cr, uid, ids, context=dict(context, company_id=company_id, force_company=company_id)):\n  ...\n  792          res = {}\n  793          account_obj = self.pool.get('account.analytic.account')\n  794:         cr.execute('SELECT MAX(id) FROM res_users')\n  795          max_user = cr.fetchone()[0]\n  796          account_ids = [int(str(x/max_user - (x%max_user == 0 and 1 or 0))) for x in ids]\n  ...\n  798          parent_ids = tuple(account_ids) #We don't want consolidation for each of these fields because those complex computation is resource-greedy.\n  799          if parent_ids:\n  800:             cr.execute('SELECT id, unit_amount ' \\\n  801                      'FROM account_analytic_analysis_summary_user ' \\\n  802                      'WHERE account_id IN %s ' \\\n  ...\n  822      def init(self, cr):\n  823          openerp.tools.sql.drop_view_if_exists(cr, 'account_analytic_analysis_summary_user')\n  824:         cr.execute('''CREATE OR REPLACE VIEW account_analytic_analysis_summary_user AS (\n  825              with mu as\n  826                  (select max(id) as max_user from res_users)\n  ...\n  860      def init(self, cr):\n  861          openerp.tools.sql.drop_view_if_exists(cr, 'account_analytic_analysis_summary_month')\n  862:         cr.execute('CREATE VIEW account_analytic_analysis_summary_month AS (' \\\n  863                  'SELECT ' \\\n  864                      '(TO_NUMBER(TO_CHAR(d.month, \\'YYYYMM\\'), \\'999999\\') + (d.account_id  * 1000000::bigint))::bigint AS id, ' \\\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_analytic_plans\\report\\crossovered_analytic.py:\n   79          query_general = \"SELECT id FROM account_analytic_line WHERE (journal_id \" + journal +\") AND date>='\"+ str(form['date1']) +\"'\"\" AND date<='\" + str(form['date2']) + \"'\"\n   80  \n   81:         self.cr.execute(query_general)\n   82          l_ids = self.cr.fetchall()\n   83          line_ids = [x[0] for x in l_ids]\n   ..\n  107                      WHERE aal.account_id = aaa.id AND aal.id IN (\"+','.join(map(str,selected_ids))+\") AND (aal.journal_id \" + journal +\") AND aal.date>='\"+ str(form['date1']) +\"'\"\" AND aal.date<='\" + str(form['date2']) + \"'\"\n  108  \n  109:             self.cr.execute(query)\n  110              info=self.cr.dictfetchall()\n  111              res['ref_qty'] = info[0]['qty']\n  ...\n  140                  WHERE aal.account_id=aaa.id AND aal.id IN (\"+','.join(map(str,selected_ids))+\") AND (aal.journal_id \" + journal +\") AND aal.date>='\"+ str(form['date1']) +\"'\"\" AND aal.date<='\" + str(form['date2']) + \"'\"\" GROUP BY aal.account_id,aaa.name,aaa.code ORDER BY aal.account_id\"\n  141  \n  142:                 self.cr.execute(query)\n  143                  res = self.cr.dictfetchall()\n  144                  if res:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_analytic_plans\\wizard\\account_crossovered_analytic.py:\n   42  \n   43      def print_report(self, cr, uid, ids, context=None):\n   44:         cr.execute('SELECT account_id FROM account_analytic_line')\n   45          res = cr.fetchall()\n   46          acc_ids = [x[0] for x in res]\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_asset\\account_asset.py:\n   94          @return: Returns a dictionary of the effective dates of the last depreciation entry made for given asset ids. If there isn't any, return the purchase date of this asset\n   95          \"\"\"\n   96:         cr.execute(\"\"\"\n   97              SELECT a.id as id, COALESCE(MAX(l.date),a.purchase_date) AS date\n   98              FROM account_asset_asset a\n   ..\n  207  \n  208      def _amount_residual(self, cr, uid, ids, name, args, context=None):\n  209:         cr.execute(\"\"\"SELECT\n  210                  l.asset_id as id, SUM(abs(l.debit-l.credit)) AS amount\n  211              FROM\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_asset\\account_asset_view.xml:\n  141                                      <field name=\"move_check\"/>\n  142                                      <field name=\"parent_state\" invisible=\"1\"/>\n  143:                                     <button name=\"create_move\" attrs=\"{'invisible':['|',('move_check','!=',False),('parent_state','!=','open')]}\" icon=\"gtk-execute\" string=\"Create Move\" type=\"object\"/>\n  144                                  </tree>\n  145                                  <form string=\"Depreciation Lines\"> \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_asset\\report\\account_asset_report.py:\n   46      def init(self, cr):\n   47      	tools.drop_view_if_exists(cr, 'asset_asset_report')\n   48:      	cr.execute(\"\"\"\n   49      	    create or replace view asset_asset_report as (\n   50                  select \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_bank_statement_extensions\\account_bank_statement.py:\n   45              if st.line_ids:\n   46                  line_ids = [l.id for l in st.line_ids]\n   47:                 cr.execute(\"UPDATE account_bank_statement_line  \\\n   48                      SET state='confirm' WHERE id in %s \",\n   49                      (tuple(line_ids),))\n   ..\n   57              if st.line_ids:\n   58                  line_ids = [l.id for l in st.line_ids]\n   59:                 cr.execute(\"UPDATE account_bank_statement_line  \\\n   60                      SET state='draft' WHERE id in %s \",\n   61                      (tuple(line_ids),))\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_bank_statement_extensions\\report\\bank_statement_balance_report.py:\n   31          cr = self.cr\n   32  \n   33:         cr.execute('SELECT s.name as s_name, s.date AS s_date, j.code as j_code, s.balance_end_real as s_balance ' \\\n   34                          'FROM account_bank_statement s ' \\\n   35                          'INNER JOIN account_journal j on s.journal_id = j.id ' \\\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_bank_statement_extensions\\wizard\\cancel_statement_line_wizard.xml:\n   11          <form string=\"Cancel selected statement lines\">\n   12              <header>\n   13:                 <button icon=\"gtk-execute\" string=\"Cancel Lines\" name=\"cancel_lines\" type=\"object\"/>\n   14              </header>\n   15              <label string=\"Are you sure you want to cancel the selected Bank Statement lines ?\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_budget\\account_budget.py:\n  126              date_from = line.date_from\n  127              if line.analytic_account_id.id:\n  128:                 cr.execute(\"SELECT SUM(amount) FROM account_analytic_line WHERE account_id=%s AND (date \"\n  129                         \"between to_date(%s,'yyyy-mm-dd') AND to_date(%s,'yyyy-mm-dd')) AND \"\n  130                         \"general_account_id=ANY(%s)\", (line.analytic_account_id.id, date_from, date_to,acc_ids,))\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_budget\\report\\analytic_account_budget_report.py:\n   65              d_to = form['date_to']\n   66  \n   67:             self.cr.execute('SELECT DISTINCT(crossovered_budget_id) FROM crossovered_budget_lines WHERE id =ANY(%s)',(b_line_ids,))\n   68              budget_ids = self.cr.fetchall()\n   69  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_budget\\report\\budget_report.py:\n   66              if not budget_ids:\n   67                  return []\n   68:             self.cr.execute('SELECT DISTINCT(analytic_account_id) FROM crossovered_budget_lines WHERE id = ANY(%s)',(budget_ids,))\n   69              an_ids = self.cr.fetchall()\n   70  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_budget\\report\\crossovered_budget_report.py:\n   67                  return []\n   68  \n   69:             self.cr.execute('SELECT DISTINCT(analytic_account_id) FROM crossovered_budget_lines WHERE id = ANY(%s)',(budget_ids,))\n   70              an_ids = self.cr.fetchall()\n   71  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_followup\\account_followup.py:\n  359          :param overdue_only: option to add the extra argument to filter on overdue accounting entries or not\n  360          :returns: a tuple with\n  361:             * the query to execute as first element\n  362              * the arguments for the execution of this query\n  363          :rtype: (string, [])\n  ...\n  388              return []\n  389          query, query_args = self._get_followup_overdue_query(cr, uid, args, overdue_only=True, context=context)\n  390:         cr.execute(query, query_args)\n  391          res = cr.fetchall()\n  392          if not res:\n  ...\n  401          having_values = [x[2] for x in args]\n  402          query = self.pool.get('account.move.line')._query_get(cr, uid, context=context)\n  403:         cr.execute('SELECT partner_id FROM account_move_line l '\\\n  404                      'WHERE account_id IN '\\\n  405                          '(SELECT id FROM account_account '\\\n  ...\n  420              return []\n  421          query, query_args = self._get_followup_overdue_query(cr, uid, args, overdue_only=False, context=context)\n  422:         cr.execute(query, query_args)\n  423          res = cr.fetchall()\n  424          if not res:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_followup\\account_followup_view.xml:\n   83                          number of days. If there are other overdue invoices for the \n   84                          same customer, the actions of the most \n   85:                         overdue invoice will be executed. \n   86                      </p>\n   87                      <field name=\"followup_line\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_followup\\report\\account_followup_report.py:\n   66      def init(self, cr):\n   67          tools.drop_view_if_exists(cr, 'account_followup_stat')\n   68:         cr.execute(\"\"\"\n   69              create or replace view account_followup_stat as (\n   70                  SELECT\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_followup\\wizard\\account_followup_print.py:\n   58          # to send him follow-ups separately . An assumption that the number of companies will not\n   59          # reach 10 000 records is made, what should be enough for a time.\n   60:         cr.execute(\"\"\"\n   61              create view account_followup_stat_by_partner as (\n   62                  SELECT\n   ..\n  265          company_id = data.company_id.id\n  266  \n  267:         cr.execute(\n  268              \"SELECT l.partner_id, l.followup_line_id,l.date_maturity, l.date, l.id \"\\\n  269              \"FROM account_move_line AS l \"\\\n  ...\n  287          current_date = datetime.date(*time.strptime(date,\n  288              '%Y-%m-%d')[:3])\n  289:         cr.execute(\n  290              \"SELECT * \"\\\n  291              \"FROM account_followup_followup_line \"\\\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_payment\\account_payment.py:\n   49          if not payment_code:\n   50              return []\n   51:         cr.execute(\"\"\" SELECT pb.state\n   52              FROM res_partner_bank pb\n   53              JOIN payment_mode pm ON (pm.bank_id = pb.id)\n   ..\n  202          partner_obj = self.pool.get('res.partner')\n  203  \n  204:         cr.execute(\"\"\"SELECT pl.id, ml.%s\n  205              FROM account_move_line ml\n  206                  INNER JOIN payment_line pl\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_sequence\\account_sequence_installer.py:\n   43      }\n   44  \n   45:     def execute(self, cr, uid, ids, context=None):\n   46          if context is None:\n   47              context = {}\n   ..\n   68          obj_sequence = self.pool.get('ir.sequence')\n   69          ir_seq = obj_sequence.create(cr, uid, vals, context)\n   70:         res =  super(account_sequence_installer, self).execute(cr, uid, ids, context=context)\n   71          jou_obj = self.pool.get('account.journal')\n   72          journal_ids = jou_obj.search(cr, uid, search_criteria, context=context)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_test\\account_test.py:\n   33  CODE_EXEC_DEFAULT = '''\\\n   34  res = []\n   35: cr.execute(\"select id, code from account_journal\")\n   36  for record in cr.dictfetchall():\n   37      res.append(record['code'])\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_test\\account_test_data.xml:\n   11  FROM  account_move_line \n   12  \"\"\"\n   13: cr.execute(sql)\n   14  result=[]\n   15  res= cr.dictfetchall()\n   ..\n   25          <field name=\"desc\">Check if the balance of the new opened fiscal year matches with last year's balance</field>\n   26          <field name=\"code_exec\"><![CDATA[result = []\n   27: cr.execute(\"select coalesce(sum(debit),0) as debit_new_fyear,coalesce(sum(credit),0) as credit_new_fyear from account_move_line where period_id in (select id from account_period where state='draft' and special order by id desc limit 1);\")\n   28  rec =  cr.dictfetchall()\n   29: cr.execute(\"select coalesce(sum(debit),0) as debit_last_fyear,coalesce(sum(credit),0) as credit_last_fyear from account_move_line where period_id in (select period_id from account_fiscalyear where state='done' order by id desc limit 1);\")\n   30  rec2= cr.dictfetchall()\n   31  if (rec2[0]['credit_last_fyear']-rec[0]['credit_new_fyear']!=0) or (rec2[0]['debit_last_fyear']-rec[0]['debit_new_fyear']!=0) :\n   ..\n   56  HAVING abs(sum(ml.debit-ml.credit)) <> 0 or am.period_id!=ml.period_id or (am.date!=ml.date)\n   57  \"\"\"\n   58: cr.execute(sql)\n   59  res = cr.dictfetchall()\n   60  if res:\n   ..\n   70          <field name=\"desc\">Check if the totally reconciled movements are balanced</field>\n   71          <field name=\"code_exec\"><![CDATA[res = []\n   72: cr.execute(\"SELECT distinct reconcile_id from account_move_line where reconcile_id is not null\")\n   73  rec_ids = cr.dictfetchall()\n   74  for record in rec_ids :\n   75:   cr.execute(\"SELECT distinct r.name,r.id from account_journal j,account_period p, account_move_reconcile r,account_move m, account_move_line ml where m.journal_id=j.id and m.period_id=p.id and ml.reconcile_id=%s and ml.move_id=m.id and ml.reconcile_id=r.id group by r.id,r.name having sum(ml.debit)-sum(ml.credit)<>0\", (record['reconcile_id'],))\n   76    reconcile_ids=cr.dictfetchall()\n   77    if reconcile_ids:\n   ..\n   88          <field name=\"desc\">Check that reconciled invoice for Sales/Purchases has reconciled entries for Payable and Receivable Accounts</field>\n   89          <field name=\"code_exec\"><![CDATA[res = []\n   90: cr.execute(\"SELECT distinct inv.number,inv.id from account_invoice inv, account_move m, account_move_line ml, account_account a where m.id=ml.move_id and ml.account_id=a.id and a.type in ('receivable','payable') and inv.move_id=m.id and ml.reconcile_id is not null;\")\n   91  records= cr.dictfetchall()\n   92  rec = [r['id'] for r in records]\n   ..\n  106  result=[]\n  107  if res:\n  108:     cr.execute(\"SELECT distinct inv.number,inv.id from account_invoice inv, account_move_line ml, account_account a, account_move m where m.id=ml.move_id and inv.move_id=m.id and inv.id=inv.move_id and ml.reconcile_id is null and a.type in ('receivable','payable') and ml.account_id=a.id and inv.id in %s\",(tuple(res),))\n  109      records = cr.dictfetchall()\n  110      result = [rec for rec in records]\n  ...\n  122  column_order = ['number','id','name','state']\n  123  if reconciled_inv():\n  124:   cr.execute(\"select inv.name,inv.state,inv.id,inv.number from account_invoice inv where inv.state!='paid' and id in %s\", (tuple(reconciled_inv()),))\n  125    res = cr.dictfetchall()\n  126  result = res\n  ...\n  137          <field name=\"code_exec\"><![CDATA[column_order=['name','ref','id','date']\n  138  sql = \"select id, name, ref, date from account_move_line where account_id in (select id from account_account where type = 'view')\"\n  139: cr.execute(sql)\n  140  result = cr.dictfetchall()\n  141  if result:\n  ...\n  149          <field name=\"desc\">Check on bank statement that the Closing Balance = Starting Balance + sum of statement lines</field>\n  150          <field name=\"code_exec\"><![CDATA[column_order = ['name','difference']\n  151: cr.execute(\"SELECT s.balance_start+sum(m.amount)-s.balance_end_real as difference, s.name from account_bank_statement s inner join account_bank_statement_line m on m.statement_id=s.id group by s.id, s.balance_start, s.balance_end_real,s.name having abs(s.balance_start+sum(m.amount)-s.balance_end_real) > 0.000000001;\")\n  152  result = cr.dictfetchall()\n  153  if result:\n  ...\n  162          <field name=\"code_exec\"><![CDATA[column_order=['partner_name','partner_active','account_name','move_line_id','period']\n  163  res = []\n  164: cr.execute(\"SELECT l.id as move_line_id,a.name as account_name,a.code as account_code,r.name as partner_name,r.active as partner_active,p.name as period from account_period p,res_partner r, account_account a,account_move_line l where l.account_id=a.id and l.partner_id=r.id and (not r.active or not a.active) and l.period_id=p.id\")\n  165  res = cr.dictfetchall()\n  166  result = res\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_test\\account_test_view.xml:\n   58               WHERE account_id IN (SELECT id FROM account_account WHERE type = 'view')\n   59            '''\n   60:     cr.execute(sql)\n   61      result = cr.dictfetchall()\n   62                                      </pre>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_test\\report\\account_test_report.py:\n   38              'time': time,\n   39              'datetime': datetime,\n   40:             'execute_code': self.execute_code,\n   41          })\n   42  \n   43:     def execute_code(self, code_exec):\n   44          def reconciled_inv():\n   45              \"\"\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_test\\views\\report_accounttest.xml:\n   12                          <strong>Description:</strong> <span t-field=\"o.desc\"/>\n   13                      </p>\n   14:                     <p t-foreach=\"execute_code(o.code_exec)\" t-as=\"test_result\">\n   15                          <span t-esc=\"test_result\"/>\n   16                      </p>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_voucher\\report\\account_voucher_sales_receipt.py:\n   61      def init(self, cr):\n   62          tools.drop_view_if_exists(cr, 'sale_receipt_report')\n   63:         cr.execute(\"\"\"\n   64              create or replace view sale_receipt_report as (\n   65                  select min(avl.id) as id,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\analytic\\analytic.py:\n   79              where_date += \" AND l.date <= %s\"\n   80              where_clause_args += [context['to_date']]\n   81:         cr.execute(\"\"\"\n   82                SELECT a.id,\n   83                       sum(\n   ..\n  160                      raise osv.except_osv(_('Error!'), _(\"If you set a company, the currency selected has to be the same as it's currency. \\nYou can remove the company belonging, and thus change the currency, only on analytic account of type 'view'. This can be really useful for consolidation purposes of several companies charts with different currencies, for example.\"))\n  161          if value:\n  162:             cr.execute(\"\"\"update account_analytic_account set currency_id=%s where id=%s\"\"\", (value, account.id))\n  163              self.invalidate_cache(cr, uid, ['currency_id'], [account.id], context=context)\n  164  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\analytic_contract_hr_expense\\analytic_contract_hr_expense.py:\n   65          #We don't want consolidation for each of these fields because those complex computation is resource-greedy.\n   66          for account in self.pool.get('account.analytic.account').browse(cr, uid, ids, context=context):\n   67:             cr.execute(\"\"\"\n   68                  SELECT product_id, sum(amount), user_id, to_invoice, sum(unit_amount), product_uom_id, line.name\n   69                  FROM account_analytic_line line\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\anonymization\\anonymization.py:\n  416              # get the current value\n  417              sql = \"select id, %s from %s\" % (field_name, table_name)\n  418:             cr.execute(sql)\n  419              records = cr.dictfetchall()\n  420              for record in records:\n  ...\n  452                      'field': field_name,\n  453                  }\n  454:                 cr.execute(sql, {\n  455                      'anonymized_value': anonymized_value,\n  456                      'id': record['id']\n  ...\n  562                      if query[1] == 'sql':\n  563                          sql = query[0]\n  564:                         cr.execute(sql, {\n  565                              'value': line['value'],\n  566                              'id': line['id']\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\auth_crypt\\auth_crypt.py:\n   24      def init(self, cr):\n   25          _logger.info(\"Hashing passwords, may be slow for databases with many users...\")\n   26:         cr.execute(\"SELECT id, password FROM res_users\"\n   27                     \" WHERE password IS NOT NULL\"\n   28                     \"   AND password != ''\")\n   ..\n   36  \n   37      def get_pw( self, cr, uid, ids, name, args, context ):\n   38:         cr.execute('select id, password from res_users where id in %s', (tuple(map(int, ids)),))\n   39          return dict(cr.fetchall())\n   40  \n   ..\n   46      def check_credentials(self, cr, uid, password):\n   47          # convert to base_crypt if needed\n   48:         cr.execute('SELECT password, password_crypt FROM res_users WHERE id=%s AND active', (uid,))\n   49          encrypted = None\n   50          if cr.rowcount:\n   ..\n   80          :param id: id of the user on which the password should be set\n   81          \"\"\"\n   82:         cr.execute(\n   83              \"UPDATE res_users SET password='', password_crypt=%s WHERE id=%s\",\n   84              (encrypted, id))\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\auth_ldap\\users_ldap.py:\n   52              id_clause = ''\n   53              args = []\n   54:         cr.execute(\"\"\"\n   55              SELECT id, company, ldap_server, ldap_server_port, ldap_binddn,\n   56                     ldap_password, ldap_filter, ldap_base, \"user\", create_user,\n   ..\n  185          user_id = False\n  186          login = tools.ustr(login.lower().strip())\n  187:         cr.execute(\"SELECT id, active FROM res_users WHERE lower(login)=%s\", (login,))\n  188          res = cr.fetchone()\n  189          if res:\n  ...\n  250          registry = RegistryManager.get(db)\n  251          with registry.cursor() as cr:\n  252:             cr.execute(\"SELECT id FROM res_users WHERE lower(login)=%s\", (login,))\n  253              res = cr.fetchone()\n  254              if res:\n  ...\n  269          except openerp.exceptions.AccessDenied:\n  270  \n  271:             cr.execute('SELECT login FROM res_users WHERE id=%s AND active=TRUE',\n  272                         (int(uid),))\n  273              res = cr.fetchone()\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\auth_openid\\res_users.py:\n   55          else:\n   56              with RegistryManager.get(db).cursor() as cr:\n   57:                 cr.execute(\"\"\"UPDATE res_users\n   58                                  SET login_date=now() AT TIME ZONE 'UTC'\n   59                                  WHERE login=%s AND openid_key=%s AND active=%s RETURNING id\"\"\",\n   ..\n   71                  raise\n   72              with RegistryManager.get(db).cursor() as cr:\n   73:                 cr.execute('''SELECT COUNT(1)\n   74                                  FROM res_users\n   75                                 WHERE id=%s\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_actions.py:\n  115              new_report = openerp.report.interface.report_int._reports['report.' + name]\n  116          else:\n  117:             cr.execute(\"SELECT * FROM ir_act_report_xml WHERE report_name=%s\", (name,))\n  118              r = cr.dictfetchone()\n  119              if r:\n  ...\n  385      def _auto_init(self, cr, context=None):\n  386          super(ir_actions_act_window_view, self)._auto_init(cr, context)\n  387:         cr.execute('SELECT indexname FROM pg_indexes WHERE indexname = \\'act_window_view_unique_mode_per_action\\'')\n  388          if not cr.fetchone():\n  389:             cr.execute('CREATE UNIQUE INDEX act_window_view_unique_mode_per_action ON ir_act_window_view (act_window_id, view_mode)')\n  390  \n  391  \n  ...\n  423  class ir_actions_server(osv.osv):\n  424      \"\"\" Server actions model. Server action work on a base model and offer various\n  425:     type of actions that can be executed automatically, for example using base\n  426      action rules, of manually, by adding the action in the 'More' contextual\n  427      menu.\n  ...\n  434      The available actions are :\n  435  \n  436:     - 'Execute Python Code': a block of python code that will be executed\n  437      - 'Trigger a Workflow Signal': send a signal to a workflow\n  438      - 'Run a Client Action': choose a client action to launch\n  ...\n  440        copy an existing record in your database\n  441      - 'Write on a Record': update the values of a record\n  442:     - 'Execute several actions': define an action that triggers several other\n  443        server actions\n  444      \"\"\"\n  ...\n  459          note that the added key length should not be higher than already-existing\n  460          ones. \"\"\"\n  461:         return [('code', 'Execute Python Code'),\n  462                  ('trigger', 'Trigger a Workflow Signal'),\n  463                  ('client_action', 'Run a Client Action'),\n  464                  ('object_create', 'Create or Copy a new Record'),\n  465                  ('object_write', 'Write on a Record'),\n  466:                 ('multi', 'Execute several actions')]\n  467  \n  468      def _get_states_wrapper(self, cr, uid, context=None):\n  ...\n  473          'condition': fields.char('Condition',\n  474                                   help=\"Condition verified before executing the server action. If it \"\n  475:                                  \"is not verified, the action will not be executed. The condition is \"\n  476                                   \"a Python expression, like 'object.list_price > 5000'. A void \"\n  477                                   \"condition is considered as always True. Help about python expression \"\n  ...\n  479          'state': fields.selection(_get_states_wrapper, 'Action To Do', required=True,\n  480                                    help=\"Type of server action. The following values are available:\\n\"\n  481:                                   \"- 'Execute Python Code': a block of python code that will be executed\\n\"\n  482                                    \"- 'Trigger a Workflow Signal': send a signal to a workflow\\n\"\n  483                                    \"- 'Run a Client Action': choose a client action to launch\\n\"\n  484                                    \"- 'Create or Copy a new Record': create a new record with new values, or copy an existing record in your database\\n\"\n  485                                    \"- 'Write on a Record': update the values of a record\\n\"\n  486:                                   \"- 'Execute several actions': define an action that triggers several other server actions\\n\"\n  487                                    \"- 'Send Email': automatically send an email (available in email_template)\"),\n  488          'usage': fields.char('Action Usage'),\n  ...\n  500          # Client Action\n  501          'action_id': fields.many2one('ir.actions.actions', 'Client Action',\n  502:                                      help=\"Select the client action that has to be executed.\"),\n  503          # Python code\n  504          'code': fields.text('Python Code',\n  505:                             help=\"Write Python code that the action will execute. Some variables are \"\n  506                              \"available for use; help about pyhon expression is given in the help tab.\"),\n  507          # Workflow signal\n  ...\n  521                                        'server_id', 'action_id',\n  522                                        string='Child Actions',\n  523:                                       help='Child server actions that will be executed. Note that the last return returned action value will be used as global return value.'),\n  524          # Create/Copy/Write\n  525          'use_create': fields.selection([('new', 'Create a new record in the Base Model'),\n  ...\n  985                                 and active_id are present, active_ids is given precedence.\n  986  \n  987:         :return: an action_id to be executed, or False is finished correctly without\n  988                   return action\n  989          \"\"\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_actions.xml:\n  389                              </page>\n  390  \n  391:                             <page string=\"Execute several actions\" autofocus=\"autofocus\"\n  392                                      attrs=\"{'invisible': [('state', '!=', 'multi')]}\">\n  393                                  <p class=\"oe_grey\">\n  394:                                     If several child actions return an action, only the last one will be executed.\n  395                                      This may happen when having server actions executing code that returns an action, or server actions returning a client action.\n  396                                  </p>\n  ...\n  507                      <field name=\"type\"/>\n  508                      <field name=\"state\" readonly=\"1\"/>\n  509:                     <button name=\"action_launch\" states=\"open\" string=\"Launch\" type=\"object\" icon=\"gtk-execute\" help=\"Launch Configuration Wizard\"/>\n  510                      <button name=\"action_open\" states=\"done\"\n  511                              string=\"Todo\" type=\"object\" help=\"Set as Todo\"\n  ...\n  522                          <button name=\"action_launch\"\n  523                              states=\"open\" string=\"Launch\"\n  524:                             type=\"object\" icon=\"gtk-execute\" class=\"oe_highlight\" \n  525                              help=\"Launch Configuration Wizard\"/>\n  526                          <button name=\"action_open\" states=\"done\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_attachment.py:\n   79          \"\"\"Force all attachments to be stored in the currently configured storage\"\"\"\n   80          if not self.pool['res.users'].has_group(cr, uid, 'base.group_erp_manager'):\n   81:             raise AccessError(_('Only administrators can execute this action.'))\n   82  \n   83          location = self._storage(cr, uid, context)\n   ..\n  216      def _auto_init(self, cr, context=None):\n  217          super(ir_attachment, self)._auto_init(cr, context)\n  218:         cr.execute('SELECT indexname FROM pg_indexes WHERE indexname = %s', ('ir_attachment_res_idx',))\n  219          if not cr.fetchone():\n  220:             cr.execute('CREATE INDEX ir_attachment_res_idx ON ir_attachment (res_model, res_id)')\n  221              cr.commit()\n  222  \n  ...\n  231              if isinstance(ids, (int, long)):\n  232                  ids = [ids]\n  233:             cr.execute('SELECT DISTINCT res_model, res_id FROM ir_attachment WHERE id = ANY (%s)', (ids,))\n  234              for rmod, rid in cr.fetchall():\n  235                  if not (rmod and rid):\n  ...\n  277          # Use pure SQL rather than read() as it is about 50% faster for large dbs (100k+ docs),\n  278          # and the permissions are checked in super() and below anyway.\n  279:         cr.execute(\"\"\"SELECT id, res_model, res_id FROM ir_attachment WHERE id = ANY(%s)\"\"\", (list(ids),))\n  280          targets = cr.dictfetchall()\n  281          model_attachments = {}\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_cron.py:\n   70              ('hours', 'Hours'), ('work_days','Work Days'), ('days', 'Days'),('weeks', 'Weeks'), ('months', 'Months')], 'Interval Unit'),\n   71          'numbercall': fields.integer('Number of Calls', help='How many times the method is called,\\na negative number indicates no limit.'),\n   72:         'doall' : fields.boolean('Repeat Missed', help=\"Specify if missed occurrences should be executed when the server restarts.\"),\n   73          'nextcall' : fields.datetime('Next Execution Date', required=True, help=\"Next planned execution date for this job.\"),\n   74          'model': fields.char('Object', help=\"Model name on which the method to be called is located, e.g. 'res.partner'.\"),\n   ..\n  133                  if hasattr(model, method_name):\n  134                      log_depth = (None if _logger.isEnabledFor(logging.DEBUG) else 1)\n  135:                     netsvc.log(_logger, logging.DEBUG, 'cron.object.execute', (cr.dbname,uid,'*',model_name,method_name)+tuple(args), depth=log_depth)\n  136                      if _logger.isEnabledFor(logging.DEBUG):\n  137                          start_time = time.time()\n  ...\n  153          \"\"\" Run a given job taking care of the repetition.\n  154  \n  155:         :param job_cr: cursor to use to execute the job, safe to commit/rollback\n  156          :param job: job to be run (as a dictionary).\n  157          :param cron_cr: cursor holding lock on the cron job row, to use to update the next exec date,\n  ...\n  176                  if not numbercall:\n  177                      addsql = ', active=False'\n  178:                 cron_cr.execute(\"UPDATE ir_cron SET nextcall=%s, numbercall=%s\"+addsql+\" WHERE id=%s\",\n  179                             (nextcall.astimezone(pytz.UTC).strftime(DEFAULT_SERVER_DATETIME_FORMAT), numbercall, job['id']))\n  180                  self.invalidate_cache(job_cr, SUPERUSER_ID)\n  ...\n  202          try:\n  203              # Make sure the database we poll has the same version as the code of base\n  204:             cr.execute(\"SELECT 1 FROM ir_module_module WHERE name=%s AND latest_version=%s\", ('base', BASE_VERSION))\n  205              if cr.fetchone():\n  206                  # Careful to compare timestamps with 'UTC' - everything is UTC as of v6.1.\n  207:                 cr.execute(\"\"\"SELECT * FROM ir_cron\n  208                                WHERE numbercall != 0\n  209                                    AND active AND nextcall <= (now() at time zone 'UTC')\n  ...\n  230                  # Restrict to the same conditions as for the search since the job may have already\n  231                  # been run by an other thread when cron is running in multi thread\n  232:                 lock_cr.execute(\"\"\"SELECT *\n  233                                     FROM ir_cron\n  234                                     WHERE numbercall != 0\n  ...\n  241                  locked_job = lock_cr.fetchone()\n  242                  if not locked_job:\n  243:                     _logger.debug(\"Job `%s` already executed by another process/thread. skipping it\", job['name'])\n  244                      continue\n  245                  # Got the lock on the job row, run its code\n  ...\n  274             to a process currently executing those cron tasks\"\"\"\n  275          try:\n  276:             cr.execute(\"\"\"SELECT id FROM \"%s\" WHERE id IN %%s FOR UPDATE NOWAIT\"\"\" % self._table,\n  277                         (tuple(ids),), log_exceptions=False)\n  278          except psycopg2.OperationalError:\n  279              cr.rollback() # early rollback to allow translations to work for the user feedback\n  280              raise osv.except_osv(_(\"Record cannot be modified right now\"),\n  281:                                  _(\"This cron task is currently being executed and may not be modified, \"\n  282                                    \"please try again in a few minutes\"))\n  283  \n  ...\n  299          try:\n  300              with cr.savepoint():\n  301:                 cr.execute(\"\"\"SELECT id FROM \"%s\" WHERE id IN %%s FOR UPDATE NOWAIT\"\"\" % self._table,\n  302                             (tuple(ids),), log_exceptions=False)\n  303          except psycopg2.OperationalError:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_filters.py:\n   29  \n   30      def _list_all_models(self, cr, uid, context=None):\n   31:         cr.execute(\"SELECT model, name FROM ir_model ORDER BY name\")\n   32          return cr.fetchall()\n   33  \n   ..\n  143          super(ir_filters, self)._auto_init(cr, context)\n  144          # Use unique index to implement unique constraint on the lowercase name (not possible using a constraint)\n  145:         cr.execute(\"DROP INDEX IF EXISTS ir_filters_name_model_uid_unique_index\") # drop old index w/o action\n  146:         cr.execute(\"SELECT indexname FROM pg_indexes WHERE indexname = 'ir_filters_name_model_uid_unique_action_index'\")\n  147          if not cr.fetchone():\n  148:             cr.execute(\"\"\"CREATE UNIQUE INDEX \"ir_filters_name_model_uid_unique_action_index\" ON ir_filters\n  149                              (lower(name), model_id, COALESCE(user_id,-1), COALESCE(action_id,-1))\"\"\")\n  150  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_http.py:\n  121  \n  122  \n  123:         # set and execute handler\n  124          try:\n  125              request.set_handler(func, arguments, auth_method)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_model.py:\n  165          for model in self.browse(cr, uid, ids, context):\n  166              model_pool = self.pool[model.model]\n  167:             cr.execute('select relkind from pg_class where relname=%s', (model_pool._table,))\n  168              result = cr.fetchone()\n  169              if result and result[0] == 'v':\n  170:                 cr.execute('DROP view %s' % (model_pool._table,))\n  171              elif result and result[0] == 'r':\n  172:                 cr.execute('DROP TABLE %s CASCADE' % (model_pool._table,))\n  173          return True\n  174  \n  ...\n  327                  continue\n  328              model = self.pool[field.model]\n  329:             cr.execute('select relkind from pg_class where relname=%s', (model._table,))\n  330              result = cr.fetchone()\n  331:             cr.execute(\"SELECT column_name FROM information_schema.columns WHERE table_name ='%s' and column_name='%s'\" %(model._table, field.name))\n  332              column_name = cr.fetchone()\n  333              if column_name and (result and result[0] == 'r'):\n  334:                 cr.execute('ALTER table \"%s\" DROP column \"%s\" cascade' % (model._table, field.name))\n  335              # remove m2m relation table for custom fields\n  336              # we consider the m2m relation is only one way as it's not possible\n  ...\n  339              if field.state == 'manual' and field.ttype == 'many2many':\n  340                  rel_name = model._fields[field.name].relation\n  341:                 cr.execute('DROP table \"%s\"' % (rel_name))\n  342              model._pop_field(field.name)\n  343  \n  ...\n  390  \n  391                  if self.pool.fields_by_model is not None:\n  392:                     cr.execute('SELECT * FROM ir_model_fields WHERE id=%s', (res,))\n  393                      self.pool.fields_by_model.setdefault(vals['model'], []).append(cr.dictfetchone())\n  394  \n  ...\n  500          if column_rename:\n  501              obj, rename = column_rename\n  502:             cr.execute('ALTER TABLE \"%s\" RENAME COLUMN \"%s\" TO \"%s\"' % rename)\n  503              # This is VERY risky, but let us have this feature:\n  504              # we want to change the key of field in obj._fields and obj._columns\n  ...\n  580  \n  581              # double-check we are really going to delete all the owners of this schema element\n  582:             cr.execute(\"\"\"SELECT id from ir_model_constraint where name=%s\"\"\", (data.name,))\n  583              external_ids = [x[0] for x in cr.fetchall()]\n  584              if set(external_ids)-ids_set:\n  ...\n  588              if typ == 'f':\n  589                  # test if FK exists on this table (it could be on a related m2m table, in which case we ignore it)\n  590:                 cr.execute(\"\"\"SELECT 1 from pg_constraint cs JOIN pg_class cl ON (cs.conrelid = cl.oid)\n  591                                WHERE cs.contype=%s and cs.conname=%s and cl.relname=%s\"\"\", ('f', name, model_obj._table))\n  592                  if cr.fetchone():\n  593:                     cr.execute('ALTER TABLE \"%s\" DROP CONSTRAINT \"%s\"' % (model_obj._table, name),)\n  594                      _logger.info('Dropped FK CONSTRAINT %s@%s', name, model)\n  595  \n  596              if typ == 'u':\n  597                  # test if constraint exists\n  598:                 cr.execute(\"\"\"SELECT 1 from pg_constraint cs JOIN pg_class cl ON (cs.conrelid = cl.oid)\n  599                                WHERE cs.contype=%s and cs.conname=%s and cl.relname=%s\"\"\", ('u', name, model_obj._table))\n  600                  if cr.fetchone():\n  601:                     cr.execute('ALTER TABLE \"%s\" DROP CONSTRAINT \"%s\"' % (model_obj._table, name),)\n  602                      _logger.info('Dropped CONSTRAINT %s@%s', name, model)\n  603  \n  ...\n  638  \n  639              # double-check we are really going to delete all the owners of this schema element\n  640:             cr.execute(\"\"\"SELECT id from ir_model_relation where name = %s\"\"\", (data.name,))\n  641              external_ids = [x[0] for x in cr.fetchall()]\n  642              if set(external_ids)-ids_set:\n  ...\n  644                  continue\n  645  \n  646:             cr.execute(\"SELECT 1 FROM information_schema.tables WHERE table_name=%s\", (name,))\n  647              if cr.fetchone() and not name in to_drop_table:\n  648                  to_drop_table.append(name)\n  ...\n  652          # drop m2m relation tables\n  653          for table in to_drop_table:\n  654:             cr.execute('DROP TABLE %s CASCADE'% table,)\n  655              _logger.info('Dropped table %s', table)\n  656  \n  ...\n  677          if not grouparr:\n  678              return False\n  679:         cr.execute(\"select 1 from res_groups_users_rel where uid=%s and gid IN (select res_id from ir_model_data where module=%s and name=%s)\", (uid, grouparr[0], grouparr[1],))\n  680          return bool(cr.fetchone())\n  681  \n  ...\n  693              group_ids = [group_ids]\n  694          for group_id in group_ids:\n  695:             cr.execute(\"SELECT perm_\" + mode + \" \"\n  696                     \"  FROM ir_model_access a \"\n  697                     \"  JOIN ir_model m ON (m.id = a.model_id) \"\n  ...\n  701              r = cr.fetchone()\n  702              if r is None:\n  703:                 cr.execute(\"SELECT perm_\" + mode + \" \"\n  704                         \"  FROM ir_model_access a \"\n  705                         \"  JOIN ir_model m ON (m.id = a.model_id) \"\n  ...\n  721          \"\"\"\n  722          assert access_mode in ['read','write','create','unlink'], 'Invalid access mode: %s' % access_mode\n  723:         cr.execute('''SELECT\n  724                          c.name, g.name\n  725                        FROM\n  ...\n  756  \n  757          # We check if a specific rule exists\n  758:         cr.execute('SELECT MAX(CASE WHEN perm_' + mode + ' THEN 1 ELSE 0 END) '\n  759                     '  FROM ir_model_access a '\n  760                     '  JOIN ir_model m ON (m.id = a.model_id) '\n  ...\n  769          if r is None:\n  770              # there is no specific rule. We check the generic rule\n  771:             cr.execute('SELECT MAX(CASE WHEN perm_' + mode + ' THEN 1 ELSE 0 END) '\n  772                         '  FROM ir_model_access a '\n  773                         '  JOIN ir_model m ON (m.id = a.model_id) '\n  ...\n  909      def _auto_init(self, cr, context=None):\n  910          super(ir_model_data, self)._auto_init(cr, context)\n  911:         cr.execute('SELECT indexname FROM pg_indexes WHERE indexname = \\'ir_model_data_module_name_index\\'')\n  912          if not cr.fetchone():\n  913:             cr.execute('CREATE INDEX ir_model_data_module_name_index ON ir_model_data (module, name)')\n  914  \n  915      # NEW V8 API\n  ...\n 1019          action_id = False\n 1020          if xml_id:\n 1021:             cr.execute('''SELECT imd.id, imd.res_id, md.id, imd.model, imd.noupdate\n 1022                            FROM ir_model_data imd LEFT JOIN %s md ON (imd.res_id = md.id)\n 1023                            WHERE imd.module=%%s AND imd.name=%%s''' % model_obj._table,\n ....\n 1030                  if not real_id2:\n 1031                      self.clear_caches()\n 1032:                     cr.execute('delete from ir_model_data where id=%s', (imd_id2,))\n 1033                      res_id = False\n 1034                  else:\n ....\n 1110              where += ' and (key2 is null)'\n 1111  \n 1112:         cr.execute('select * from ir_values where model=%s and key=%s and name=%s'+where,(model, key, name))\n 1113          res = cr.fetchone()\n 1114          ir_values_obj = openerp.registry(cr.dbname)['ir.values']\n ....\n 1116              ir_values_obj.set(cr, uid, key, key2, name, models, value, replace, isobject, meta)\n 1117          elif xml_id:\n 1118:             cr.execute('UPDATE ir_values set value=%s WHERE model=%s and key=%s and name=%s'+where,(value, model, key, name))\n 1119              ir_values_obj.invalidate_cache(cr, uid, ['value'])\n 1120          return True\n ....\n 1156                  # incoming transition and trigger an update to force all workflow items\n 1157                  # to move out before deleting them\n 1158:                 cr.execute('select res_type,res_id from wkf_instance where id IN (select inst_id from wkf_workitem where act_id=%s)', (res_id,))\n 1159                  wkf_todo.extend(cr.fetchall())\n 1160:                 cr.execute(\"update wkf_transition set condition='True', group_id=NULL, signal=NULL,act_to=act_from,act_from=%s where act_to=%s\", (res_id,res_id))\n 1161                  self.invalidate_cache(cr, uid, context=context)\n 1162  \n ....\n 1187                  _logger.info('Deleting %s@%s', res_id, model)\n 1188                  try:\n 1189:                     cr.execute('SAVEPOINT record_unlink_save')\n 1190                      self.pool[model].unlink(cr, uid, [res_id], context=context)\n 1191                  except Exception:\n 1192                      _logger.info('Unable to delete %s@%s', res_id, model, exc_info=True)\n 1193:                     cr.execute('ROLLBACK TO SAVEPOINT record_unlink_save')\n 1194                  else:\n 1195:                     cr.execute('RELEASE SAVEPOINT record_unlink_save')\n 1196  \n 1197          # Remove non-model records first, then model fields, and finish with models\n ....\n 1232              return True\n 1233          to_unlink = []\n 1234:         cr.execute(\"\"\"SELECT id,name,model,res_id,module FROM ir_model_data\n 1235                        WHERE module IN %s AND res_id IS NOT NULL AND noupdate=%s ORDER BY id DESC\"\"\",\n 1236                        (tuple(modules), False))\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_rule.py:\n   36             ir.rule domains, when the goal is to obtain python lists\n   37             that are easier to parse and combine, but not to\n   38:            actually execute them.\"\"\"\n   39          return {'user': unquote('user'),\n   40                  'time': unquote('time')}\n   ..\n  111          if uid == SUPERUSER_ID:\n  112              return None\n  113:         cr.execute(\"\"\"SELECT r.id\n  114                  FROM ir_rule r\n  115                  JOIN ir_model m ON (r.model_id = m.id)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_sequence.py:\n   42  \n   43  def _code_get(self, cr, uid, context=None):\n   44:     cr.execute('select code, name from ir_sequence_type')\n   45      return cr.fetchall()\n   46  \n   ..\n   71                      \" FROM ir_sequence_%03d\"\n   72                      % element.id)\n   73:                 cr.execute(statement)\n   74                  (last_value, increment_by, is_called) = cr.fetchone()\n   75                  if is_called:\n   ..\n  118          # we need to special-case company_id to treat all NULL company_id as equal, otherwise\n  119          # we would allow duplicate (code, NULL) ir_sequences.\n  120:         cr.execute(\"\"\"\n  121              SELECT indexname FROM pg_indexes WHERE indexname =\n  122              'ir_sequence_unique_code_company_id_idx'\"\"\")\n  123          if not cr.fetchone():\n  124:             cr.execute(\"\"\"\n  125                  CREATE UNIQUE INDEX ir_sequence_unique_code_company_id_idx\n  126                  ON ir_sequence (code, (COALESCE(company_id,-1)))\"\"\")\n  ...\n  135          assert isinstance(id, (int, long))\n  136          sql = \"CREATE SEQUENCE ir_sequence_%03d INCREMENT BY %%s START WITH %%s\" % id\n  137:         cr.execute(sql, (number_increment, number_next))\n  138  \n  139      def _drop_sequence(self, cr, ids):\n  ...\n  150          # RESTRICT is the default; it prevents dropping the sequence if an\n  151          # object depends on it.\n  152:         cr.execute(\"DROP SEQUENCE IF EXISTS %s RESTRICT \" % names)\n  153  \n  154      def _alter_sequence(self, cr, id, number_increment, number_next=None):\n  ...\n  161          assert isinstance(id, (int, long))\n  162          seq_name = 'ir_sequence_%03d' % (id,)\n  163:         cr.execute(\"SELECT relname FROM pg_class WHERE relkind = %s AND relname=%s\", ('S', seq_name))\n  164          if not cr.fetchone():\n  165              # sequence is not created yet, we're inside create() so ignore it, will be set later\n  ...\n  168          if number_next is not None:\n  169              statement += \" RESTART WITH %d\" % (number_next, )\n  170:         cr.execute(statement)\n  171  \n  172      def create(self, cr, uid, values, context=None):\n  ...\n  247          seq = preferred_sequences[0] if preferred_sequences else sequences[0]\n  248          if seq['implementation'] == 'standard':\n  249:             cr.execute(\"SELECT nextval('ir_sequence_%03d')\" % seq['id'])\n  250              seq['number_next'] = cr.fetchone()\n  251          else:\n  252:             cr.execute(\"SELECT number_next FROM ir_sequence WHERE id=%s FOR UPDATE NOWAIT\", (seq['id'],))\n  253:             cr.execute(\"UPDATE ir_sequence SET number_next=number_next+number_increment WHERE id=%s \", (seq['id'],))\n  254              self.invalidate_cache(cr, uid, ['number_next'], [seq['id']], context=context)\n  255          d = self._interpolation_dict()\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_translation.py:\n   70          # Note that Postgres will NOT inherit the constraints or indexes\n   71          # of ir_translation, so this copy will be much faster.\n   72:         cr.execute('''CREATE TEMP TABLE %s(\n   73              imd_model VARCHAR(64),\n   74              imd_name VARCHAR(128)\n   ..\n   88                  params['res_id'] = 0\n   89  \n   90:         self._cr.execute(\"\"\"INSERT INTO %s (name, lang, res_id, src, type, imd_model, module, imd_name, value, state, comments)\n   91                              VALUES (%%(name)s, %%(lang)s, %%(res_id)s, %%(src)s, %%(type)s, %%(imd_model)s, %%(module)s,\n   92                                      %%(imd_name)s, %%(value)s, %%(state)s, %%(comments)s)\"\"\" % self._table_name,\n   ..\n   98          cr = self._cr\n   99          if self._debug:\n  100:             cr.execute(\"SELECT count(*) FROM %s\" % self._table_name)\n  101              c = cr.fetchone()[0]\n  102              _logger.debug(\"ir.translation.cursor: We have %d entries to process\", c)\n  103  \n  104          # Step 1: resolve ir.model.data references to res_ids\n  105:         cr.execute(\"\"\"UPDATE %s AS ti\n  106              SET res_id = imd.res_id\n  107              FROM ir_model_data AS imd\n  ...\n  112  \n  113          if self._debug:\n  114:             cr.execute(\"SELECT module, imd_name, imd_model FROM %s \" \\\n  115                  \"WHERE res_id IS NULL AND module IS NOT NULL\" % self._table_name)\n  116              for row in cr.fetchall():\n  ...\n  119          # Records w/o res_id must _not_ be inserted into our db, because they are\n  120          # referencing non-existent data.\n  121:         cr.execute(\"DELETE FROM %s WHERE res_id IS NULL AND module IS NOT NULL\" % \\\n  122              self._table_name)\n  123  \n  ...\n  133          # Step 2: update existing (matching) translations\n  134          if self._overwrite:\n  135:             cr.execute(\"\"\"UPDATE ONLY %s AS irt\n  136                  SET value = ti.value,\n  137                  state = 'translated'\n  ...\n  141  \n  142          # Step 3: insert new translations\n  143:         cr.execute(\"\"\"INSERT INTO %s(name, lang, res_id, src, type, value, module, state, comments)\n  144              SELECT name, lang, res_id, src, type, value, module, state, comments\n  145                FROM %s AS ti\n  ...\n  148  \n  149          if self._debug:\n  150:             cr.execute('SELECT COUNT(*) FROM ONLY %s' % self._parent_table)\n  151              c1 = cr.fetchone()[0]\n  152:             cr.execute('SELECT COUNT(*) FROM ONLY %s AS irt, %s AS ti WHERE %s' % \\\n  153                  (self._parent_table, self._table_name, find_expr))\n  154              c = cr.fetchone()[0]\n  ...\n  156  \n  157          # Step 4: cleanup\n  158:         cr.execute(\"DROP TABLE %s\" % self._table_name)\n  159          return True\n  160  \n  ...\n  240  \n  241          # FIXME: there is a size limit on btree indexed values so we can't index src column with normal btree.\n  242:         cr.execute('SELECT indexname FROM pg_indexes WHERE indexname = %s', ('ir_translation_ltns',))\n  243          if cr.fetchone():\n  244:             #temporarily removed: cr.execute('CREATE INDEX ir_translation_ltns ON ir_translation (name, lang, type, src)')\n  245:             cr.execute('DROP INDEX ir_translation_ltns')\n  246              cr.commit()\n  247:         cr.execute('SELECT indexname FROM pg_indexes WHERE indexname = %s', ('ir_translation_lts',))\n  248          if cr.fetchone():\n  249:             #temporarily removed: cr.execute('CREATE INDEX ir_translation_lts ON ir_translation (lang, type, src)')\n  250:             cr.execute('DROP INDEX ir_translation_lts')\n  251              cr.commit()\n  252  \n  253          # add separate hash index on src (no size limit on values), as postgres 8.1+ is able to combine separate indexes\n  254:         cr.execute('SELECT indexname FROM pg_indexes WHERE indexname = %s', ('ir_translation_src_hash_idx',))\n  255          if not cr.fetchone():\n  256:             cr.execute('CREATE INDEX ir_translation_src_hash_idx ON ir_translation using hash (src)')\n  257  \n  258:         cr.execute('SELECT indexname FROM pg_indexes WHERE indexname = %s', ('ir_translation_ltn',))\n  259          if not cr.fetchone():\n  260:             cr.execute('CREATE INDEX ir_translation_ltn ON ir_translation (name, lang, type)')\n  261              cr.commit()\n  262  \n  ...\n  270          translations = dict.fromkeys(ids, False)\n  271          if ids:\n  272:             cr.execute('select res_id,value '\n  273                      'from ir_translation '\n  274                      'where lang=%s '\n  ...\n  285          self._get_source.clear_cache(self)\n  286  \n  287:         cr.execute('delete from ir_translation '\n  288                  'where lang=%s '\n  289                      'and type=%s '\n  ...\n  352          query, params = self._get_source_query(cr, uid, name, types, lang, source, res_id)\n  353          \n  354:         cr.execute(query, params)\n  355          res = cr.fetchone()\n  356          trad = res and res[0] or u''\n  ...\n  425                      src = record[f['name']] or None\n  426                      name = \"%s,%s\" % (f['model'], f['name'])\n  427:                     cr.execute(sql, (lg, src , name, f['id'], src, lg, name, f['id'], src, lg, name, id))\n  428  \n  429          action = {\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_ui_view.py:\n   95      def _auto_init(self, cr, context=None):\n   96          super(view_custom, self)._auto_init(cr, context)\n   97:         cr.execute('SELECT indexname FROM pg_indexes WHERE indexname = \\'ir_ui_view_custom_user_id_ref_id\\'')\n   98          if not cr.fetchone():\n   99:             cr.execute('CREATE INDEX ir_ui_view_custom_user_id_ref_id ON ir_ui_view_custom (user_id, ref_id)')\n  100  \n  101  def _hasclass(context, *cls):\n  ...\n  238      def _auto_init(self, cr, context=None):\n  239          super(view, self)._auto_init(cr, context)\n  240:         cr.execute('SELECT indexname FROM pg_indexes WHERE indexname = \\'ir_ui_view_model_type_inherit_id\\'')\n  241          if not cr.fetchone():\n  242:             cr.execute('CREATE INDEX ir_ui_view_model_type_inherit_id ON ir_ui_view (model, inherit_id)')\n  243  \n  244      def _compute_defaults(self, cr, uid, values, context=None):\n  ...\n  769          for button in buttons:\n  770              user_groups = usersobj.read(cr, user, [user], ['groups_id'])[0]['groups_id']\n  771:             cr.execute(\"\"\"SELECT DISTINCT t.group_id\n  772                          FROM wkf\n  773                    INNER JOIN wkf_activity a ON a.wkf_id = wkf.id\n  ...\n 1089              This method is called at the end of registry update.\n 1090          \"\"\"\n 1091:         cr.execute(\"\"\"SELECT max(v.id)\n 1092                          FROM ir_ui_view v\n 1093                     LEFT JOIN ir_model_data md ON (md.model = 'ir.ui.view' AND md.res_id = v.id)\n ....\n 1113                  return\n 1114              params += (names,)\n 1115:         cr.execute(\"\"\"SELECT max(v.id)\n 1116                          FROM ir_ui_view v\n 1117                     LEFT JOIN ir_model_data md ON (md.model = 'ir.ui.view' AND md.res_id = v.id)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_values.py:\n   80         The content of the entry is defined by the ``value`` column, which may either\n   81         contain an arbitrary value, or a reference string defining the action that\n   82:        should be executed.\n   83  \n   84         .. rubric:: Usage: default values\n   ..\n  186      def _auto_init(self, cr, context=None):\n  187          super(ir_values, self)._auto_init(cr, context)\n  188:         cr.execute('SELECT indexname FROM pg_indexes WHERE indexname = \\'ir_values_key_model_key2_res_id_user_id_idx\\'')\n  189          if not cr.fetchone():\n  190:             cr.execute('CREATE INDEX ir_values_key_model_key2_res_id_user_id_idx ON ir_values (key, model, key2, res_id, user_id)')\n  191  \n  192      def create(self, cr, uid, vals, context=None):\n  ...\n  327          else:\n  328              query %= 'AND v.key2 is NULL'\n  329:         cr.execute(query, params)\n  330  \n  331          # keep only the highest priority default for each field\n  ...\n  415                               OR v.res_id = 0)\n  416                     ORDER BY v.id\"\"\"\n  417:         cr.execute(query, ('action', action_slot, model, res_id or None))\n  418          results = {}\n  419          for action in cr.dictfetchall():\n  ...\n  432                          groups = action_def.get('groups_id')\n  433                          if groups:\n  434:                             cr.execute('SELECT 1 FROM res_groups_users_rel WHERE gid IN %s AND uid=%s',\n  435                                         (tuple(groups), uid))\n  436                              if not cr.fetchone():\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\module\\module.py:\n   83  \n   84      def _module_nbr(self, cr, uid, ids, prop, unknow_none, context):\n   85:         cr.execute('SELECT category_id, COUNT(*) \\\n   86                        FROM ir_module_module \\\n   87                       WHERE category_id IN %(ids)s \\\n   ..\n   93          result = dict(cr.fetchall())\n   94          for id in ids:\n   95:             cr.execute('select id from ir_module_category where parent_id=%s', (id,))\n   96              result[id] = sum([result.get(c, 0) for (c,) in cr.fetchall()],\n   97                               result.get(id, 0))\n   ..\n  442      def button_immediate_install(self, cr, uid, ids, context=None):\n  443          \"\"\" Installs the selected module(s) immediately and fully,\n  444:         returns the next res.config action to execute\n  445  \n  446          :param ids: identifiers of the modules to install\n  447:         :returns: next res.config item to execute\n  448          :rtype: dict[str, object]\n  449          \"\"\"\n  ...\n  473              return []\n  474          known_dep_ids = set(known_dep_ids or [])\n  475:         cr.execute('''SELECT DISTINCT m.id\n  476                          FROM\n  477                              ir_module_module_dependency d\n  ...\n  515          \"\"\"\n  516          Uninstall the selected module(s) immediately and fully,\n  517:         returns the next res.config action to execute\n  518          \"\"\"\n  519          return self._button_immediate_function(cr, uid, ids, self.button_uninstall, context=context)\n  ...\n  533          \"\"\"\n  534          Upgrade the selected module(s) immediately and fully,\n  535:         return the next res.config action to execute\n  536          \"\"\"\n  537          return self._button_immediate_function(cr, uid, ids, self.button_upgrade, context=context)\n  ...\n  751          needed = set(depends)\n  752          for dep in (needed - existing):\n  753:             cr.execute('INSERT INTO ir_module_module_dependency (module_id, name) values (%s, %s)', (mod_browse.id, dep))\n  754          for dep in (existing - needed):\n  755:             cr.execute('DELETE FROM ir_module_module_dependency WHERE module_id = %s and name = %s', (mod_browse.id, dep))\n  756          self.invalidate_cache(cr, uid, ['dependencies_id'], [mod_browse.id])\n  757  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\module\\wizard\\base_module_configuration_view.xml:\n    8              <field name=\"arch\" type=\"xml\">\n    9                  <form string=\"System Configuration Done\">\n   10:                     <label string=\"All pending configuration wizards have been executed. You may restart individual wizards via the list of configuration wizards.\"/>\n   11                      <footer>\n   12                          <button string=\"Close\" class=\"oe_link\" special=\"cancel\" />\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\module\\wizard\\base_module_upgrade.py:\n   89          ids = ir_module.search(cr, uid, [('state', 'in', ['to upgrade', 'to install'])])\n   90          if ids:\n   91:             cr.execute(\"\"\"SELECT d.name FROM ir_module_module m\n   92                                          JOIN ir_module_module_dependency d ON (m.id = d.module_id)\n   93                                          LEFT JOIN ir_module_module m2 ON (d.name = m2.name)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\res\\ir_property.py:\n  160      def _get_domain(self, cr, uid, prop_name, model, context=None):\n  161          context = context or {}\n  162:         cr.execute('select id from ir_model_fields where name=%s and model=%s', (prop_name, model))\n  163          res = cr.fetchone()\n  164          if not res:\n  ...\n  225  \n  226          # retrieve the properties corresponding to the given record ids\n  227:         self._cr.execute(\"SELECT id FROM ir_model_fields WHERE name=%s AND model=%s\", (name, model))\n  228          field_id = self._cr.fetchone()[0]\n  229          company_id = self.env['res.company']._company_default_get(model, field_id)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\res\\res_config.py:\n   37      def _install_modules(self, cr, uid, modules, context):\n   38          \"\"\"Install the requested modules.\n   39:             return the next action to execute\n   40  \n   41            modules is a list of tuples\n   ..\n   68  \n   69      Configuration items should inherit from this class, implement\n   70:     the execute method (and optionally the cancel one) and have\n   71      their view inherit from the related res_config_view_base view.\n   72      '''\n   ..\n  114  \n  115      def next(self, cr, uid, ids, context=None):\n  116:         \"\"\" Returns the next todo action to execute (using the default\n  117          sort order)\n  118          \"\"\"\n  119          return self._next(cr, uid, context=context)\n  120  \n  121:     def execute(self, cr, uid, ids, context=None):\n  122          \"\"\" Method called when the user clicks on the ``Next`` button.\n  123  \n  124:         Execute *must* be overloaded unless ``action_next`` is overloaded\n  125          (which is something you generally don't need to do).\n  126  \n  127:         If ``execute`` returns an action dictionary, that action is executed\n  128          rather than just going to the next configuration item.\n  129          \"\"\"\n  130          raise NotImplementedError(\n  131:             'Configuration items need to implement execute')\n  132  \n  133      def cancel(self, cr, uid, ids, context=None):\n  ...\n  135  \n  136          ``cancel`` should be overloaded instead of ``action_skip``. As with\n  137:         ``execute``, if it returns an action dictionary that action is\n  138:         executed in stead of the default (going to the next configuration item)\n  139  \n  140          The default implementation is a NOOP.\n  ...\n  149  \n  150          Sets the status of the todo the event was sent from to\n  151:         ``done``, calls ``execute`` and -- unless ``execute`` returned\n  152:         an action dictionary -- executes the action provided by calling\n  153          ``next``.\n  154          \"\"\"\n  155:         next = self.execute(cr, uid, ids, context=context)\n  156          if next: return next\n  157          return self.next(cr, uid, ids, context=context)\n  ...\n  162          Sets the status of the todo the event was sent from to\n  163          ``skip``, calls ``cancel`` and -- unless ``cancel`` returned\n  164:         an action dictionary -- executes the action provided by calling\n  165          ``next``.\n  166          \"\"\"\n  ...\n  177          Sets the status of the todo the event was sent from to\n  178          ``cancel``, calls ``cancel`` and -- unless ``cancel`` returned\n  179:         an action dictionary -- executes the action provided by calling\n  180          ``next``.\n  181          \"\"\"\n  ...\n  237      name of a boolean field. If the field is selected, then the\n  238      corresponding module will be marked for installation *and* the\n  239:     hook method will be executed.\n  240  \n  241      Hook methods take the usual set of parameters (cr, uid, ids,\n  ...\n  273      .. [#] because the already-installed modules are only pruned at\n  274             the very end of ``modules_to_install``, additionals and\n  275:            hooks depending on them *are guaranteed to execute*. Setup\n  276             your hooks accordingly.\n  277      \"\"\"\n  ...\n  380          return fields\n  381  \n  382:     def execute(self, cr, uid, ids, context=None):\n  383          to_install = list(self.modules_to_install(\n  384              cr, uid, ids, context=context))\n  ...\n  409                  }\n  410  \n  411:         The method ``execute`` provides some support based on a naming convention:\n  412  \n  413:         *   For a field like 'default_XXX', ``execute`` sets the (global) default value of\n  414              the field 'XXX' in the model named by ``default_model`` to the field's value.\n  415  \n  416:         *   For a boolean field like 'group_XXX', ``execute`` adds/removes 'implied_group'\n  417              to/from the implied groups of 'group', depending on the field's value.\n  418              By default 'group' is the group Employee.  Groups are given by their xml id.\n  419              The attribute 'group' may contain several xml ids, separated by commas.\n  420  \n  421:         *   For a boolean field like 'module_XXX', ``execute`` triggers the immediate\n  422              installation of the module named 'XXX' if the field has value ``True``.\n  423  \n  424:         *   For the other fields, the method ``execute`` invokes all methods with a name\n  425              that starts with 'set_'; such methods can be defined to implement the effect\n  426              of those fields.\n  ...\n  533          return res\n  534  \n  535:     def execute(self, cr, uid, ids, context=None):\n  536          if context is None:\n  537              context = {}\n  ...\n  565                  implied_group.write({'users': [(3, u) for u in uids]})\n  566  \n  567:         # other fields: execute all methods that start with 'set_'\n  568          for method in dir(self):\n  569              if method.startswith('set_'):\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\res\\res_currency.py:\n   46          date = context.get('date') or time.strftime('%Y-%m-%d')\n   47          for id in ids:\n   48:             cr.execute('SELECT rate FROM res_currency_rate '\n   49                         'WHERE currency_id = %s '\n   50                           'AND name <= %s '\n   ..\n  102          # we need to special-case company_id to treat all NULL company_id as equal, otherwise\n  103          # we would allow duplicate \"global\" currencies (all having company_id == NULL) \n  104:         cr.execute(\"\"\"SELECT indexname FROM pg_indexes WHERE indexname = 'res_currency_unique_name_company_id_idx'\"\"\")\n  105          if not cr.fetchone():\n  106:             cr.execute(\"\"\"CREATE UNIQUE INDEX res_currency_unique_name_company_id_idx\n  107                            ON res_currency\n  108                            (name, (COALESCE(company_id,-1)))\"\"\")\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\res\\res_partner.py:\n  686                  query += ' limit %s'\n  687                  where_clause_params.append(limit)\n  688:             cr.execute(query, where_clause_params)\n  689              ids = map(lambda x: x[0], cr.fetchall())\n  690  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\res\\res_users.py:\n  417              # autocommit: our single update request will be performed atomically.\n  418              # (In this way, there is no opportunity to have two transactions\n  419:             # interleaving their cr.execute()..cr.commit() calls and have one\n  420              # of them rolled back due to a concurrent access.)\n  421              cr.autocommit(True)\n  ...\n  438                      # NO KEY introduced in PostgreSQL 9.3 http://www.postgresql.org/docs/9.3/static/release-9-3.html#AEN115299\n  439                      update_clause = 'NO KEY UPDATE' if cr._cnx.server_version >= 90300 else 'UPDATE'\n  440:                     cr.execute(\"SELECT id FROM res_users WHERE id=%%s FOR %s NOWAIT\" % update_clause, (user_id,), log_exceptions=False)\n  441:                     cr.execute(\"UPDATE res_users SET login_date = now() AT TIME ZONE 'UTC' WHERE id=%s\", (user_id,))\n  442                      self.invalidate_cache(cr, user_id, ['login_date'], [user_id])\n  443                  except Exception:\n  ...\n  537          assert group_ext_id and '.' in group_ext_id, \"External ID must be fully qualified\"\n  538          module, ext_id = group_ext_id.split('.')\n  539:         cr.execute(\"\"\"SELECT 1 FROM res_groups_users_rel WHERE uid=%s AND gid IN\n  540                          (SELECT res_id FROM ir_model_data WHERE module=%s AND name=%s)\"\"\",\n  541                     (uid, module, ext_id))\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\tests\\test_db_cursor.py:\n   14  \n   15  \n   16: class test_cr_execute(unittest2.TestCase):\n   17:     \"\"\" Try cr.execute with wrong parameters \"\"\"\n   18  \n   19      @mute_logger('openerp.sql_db')\n   20:     def test_execute_bad_params(self):\n   21          \"\"\"\n   22          Try to use iterable but non-list or int params in query parameters.\n   ..\n   24          with registry().cursor() as cr:\n   25              with self.assertRaises(ValueError):\n   26:                 cr.execute(\"SELECT id FROM res_users WHERE login=%s\", 'admin')\n   27              with self.assertRaises(ValueError):\n   28:                 cr.execute(\"SELECT id FROM res_users WHERE id=%s\", 1)\n   29              with self.assertRaises(ValueError):\n   30:                 cr.execute(\"SELECT id FROM res_users WHERE id=%s\", '1')\n   31  \n   32  # vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\tests\\test_views.py:\n  650  \n  651          query = 'INSERT INTO ir_ui_view(%s) VALUES(%s) RETURNING id' % (fields, params)\n  652:         self.cr.execute(query, kw)\n  653          return self.cr.fetchone()[0]\n  654  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\tests\\test_xmlrpc.py:\n   16          \"\"\" Try a search on the object service. \"\"\"\n   17          o = self.xmlrpc_object\n   18:         ids = o.execute(DB, 1, 'admin', 'ir.model', 'search', [])\n   19          self.assertIsInstance(ids, list)\n   20:         ids = o.execute(DB, 1, 'admin', 'ir.model', 'search', [], {})\n   21          self.assertIsInstance(ids, list)\n   22  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\workflow\\workflow.py:\n   49  \n   50      def get_active_workitems(self, cr, uid, res, res_id, context=None):\n   51:         cr.execute('select * from wkf where osv=%s limit 1',(res,))\n   52          wkfinfo = cr.dictfetchone()\n   53          workitems = []\n   54          if wkfinfo:\n   55:             cr.execute('SELECT id FROM wkf_instance \\\n   56                              WHERE res_id=%s AND wkf_id=%s \\\n   57                              ORDER BY state LIMIT 1',\n   ..\n   59              inst_id = cr.fetchone()\n   60  \n   61:             cr.execute('select act_id,count(*) from wkf_workitem where inst_id=%s group by act_id', (inst_id,))\n   62              workitems = dict(cr.fetchall())\n   63          return {'wkf': wkfinfo, 'workitems':  workitems}\n   ..\n  162      def _auto_init(self, cr, context=None):\n  163          super(wkf_instance, self)._auto_init(cr, context)\n  164:         cr.execute('SELECT indexname FROM pg_indexes WHERE indexname = \\'wkf_instance_res_type_res_id_state_index\\'')\n  165          if not cr.fetchone():\n  166:             cr.execute('CREATE INDEX wkf_instance_res_type_res_id_state_index ON wkf_instance (res_type, res_id, state)')\n  167:         cr.execute('SELECT indexname FROM pg_indexes WHERE indexname = \\'wkf_instance_res_id_wkf_id_index\\'')\n  168          if not cr.fetchone():\n  169:             cr.execute('CREATE INDEX wkf_instance_res_id_wkf_id_index ON wkf_instance (res_id, wkf_id)')\n  170  \n  171  wkf_instance()\n  ...\n  197      def _auto_init(self, cr, context=None):\n  198          super(wkf_triggers, self)._auto_init(cr, context)\n  199:         cr.execute('SELECT indexname FROM pg_indexes WHERE indexname = \\'wkf_triggers_res_id_model_index\\'')\n  200          if not cr.fetchone():\n  201:             cr.execute('CREATE INDEX wkf_triggers_res_id_model_index ON wkf_triggers (res_id, model)')\n  202  wkf_triggers()\n  203  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\workflow\\workflow_report.py:\n   29  def graph_get(cr, graph, wkf_ids, nested, workitem, witm_trans, processed_subflows):\n   30      import pydot\n   31:     cr.execute('select * from wkf_activity where wkf_id in ('+','.join(['%s']*len(wkf_ids))+')', wkf_ids)\n   32      nodes = cr.dictfetchall()\n   33      activities = {}\n   ..\n   38          if n['subflow_id'] and nested and n['subflow_id'] not in processed_subflows:\n   39              processed_subflows.add(n['subflow_id']) # don't create multiple times the same cluster.\n   40:             cr.execute('select * from wkf where id=%s', (n['subflow_id'],))\n   41              wkfinfo = cr.dictfetchone()\n   42              graph2 = pydot.Cluster('subflow'+str(n['subflow_id']), fontsize='12', label = \"\\\"Subflow: %s\\\\nOSV: %s\\\"\" % ( n['name'], wkfinfo['osv']) )\n   ..\n   60                  args['shape'] = 'box'\n   61                  if nested and n['subflow_id'] in processed_subflows:\n   62:                     cr.execute('select * from wkf where id=%s', (n['subflow_id'],))\n   63                      wkfinfo = cr.dictfetchone()\n   64                      args['label'] = \\\n   ..\n   71              actto[n['id']] = (n['id'],{})\n   72              node_ids = tuple(map(itemgetter('id'), nodes))\n   73:     cr.execute('select * from wkf_transition where act_from IN %s ORDER BY sequence,id', (node_ids,))\n   74      transitions = cr.dictfetchall()\n   75      for t in transitions:\n   ..\n   98          graph.add_edge(pydot.Edge( str(activity_from) ,str(activity_to), fontsize='10', **args))\n   99  \n  100:     cr.execute('select * from wkf_activity where flow_start=True and wkf_id in ('+','.join(['%s']*len(wkf_ids))+')', wkf_ids)\n  101      start = cr.fetchone()[0]\n  102:     cr.execute(\"select 'subflow.'||name,id from wkf_activity where flow_stop=True and wkf_id in (\"+','.join(['%s']*len(wkf_ids))+')', wkf_ids)\n  103      stop = cr.fetchall()\n  104      if stop:\n  ...\n  110  \n  111  def graph_instance_get(cr, graph, inst_id, nested=False):\n  112:     cr.execute('select wkf_id from wkf_instance where id=%s', (inst_id,))\n  113      inst = cr.fetchall()\n  114  \n  115      def workitem_get(instance):\n  116:         cr.execute('select act_id,count(*) from wkf_workitem where inst_id=%s group by act_id', (instance,))\n  117          workitems = dict(cr.fetchall())\n  118  \n  119:         cr.execute('select subflow_id from wkf_workitem where inst_id=%s', (instance,))\n  120          for (subflow_id,) in cr.fetchall():\n  121              workitems.update(workitem_get(subflow_id))\n  ...\n  123  \n  124      def witm_get(instance):\n  125:         cr.execute(\"select trans_id from wkf_witm_trans where inst_id=%s\", (instance,))\n  126          return set(t[0] for t in cr.fetchall())\n  127  \n  ...\n  145  \n  146          try:\n  147:             cr.execute('select * from wkf where osv=%s limit 1',\n  148                      (data['model'],))\n  149              wkfinfo = cr.dictfetchone()\n  ...\n  156  showpage'''\n  157              else:\n  158:                 cr.execute('select i.id from wkf_instance i left join wkf w on (i.wkf_id=w.id) where res_id=%s and osv=%s',(data['id'],data['model']))\n  159                  inst_ids = cr.fetchall()\n  160                  if not inst_ids:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_action_rule\\base_action_rule.py:\n   61          'create_date': fields.datetime('Create Date', readonly=1),\n   62          'active': fields.boolean('Active',\n   63:             help=\"When unchecked, the rule is hidden and will not be executed.\"),\n   64          'sequence': fields.integer('Sequence',\n   65              help=\"Gives the sequence order when displaying a list of rules.\"),\n   ..\n  143              model.message_subscribe(cr, uid, record_ids, follower_ids, context=context)\n  144  \n  145:         # execute server actions\n  146          if action.server_action_ids:\n  147              server_action_ids = map(int, action.server_action_ids)\n  ...\n  183                  action_ids = action_model.search(cr, uid, action_dom, context=context)\n  184  \n  185:                 # check postconditions, and execute actions on the records that satisfy them\n  186                  for action in action_model.browse(cr, uid, action_ids, context=context):\n  187                      if action_model._filter(cr, uid, action, action.filter_id, [new_id], context=context):\n  ...\n  202                  ids = [ids] if isinstance(ids, (int, long, str)) else ids\n  203  \n  204:                 # retrieve the action rules to possibly execute\n  205                  action_model = self.pool.get('base.action.rule')\n  206                  action_dom = [('model', '=', self._name),\n  ...\n  217                  write.origin(self, cr, uid, ids, vals, context=context, **kwargs)\n  218  \n  219:                 # check postconditions, and execute actions on the records that satisfy them\n  220                  for action in actions:\n  221                      post_ids = action_model._filter(cr, uid, action, action.filter_id, pre_ids[action], context=context)\n  ...\n  326                  get_record_dt = lambda record: record[date_field]\n  327  \n  328:             # process action on the records that should be executed\n  329              for record in model.browse(cr, uid, record_ids, context=context):\n  330                  record_dt = get_record_dt(record)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_import\\models.py:\n  302                              the risk of clobbering the database.\n  303          :returns: A list of errors. If the list is empty the import\n  304:                   executed fully and correctly. If the list is\n  305                    non-empty it contains dicts with 3 keys ``type`` the\n  306                    type of error (``error|warning``); ``message`` the\n  ...\n  310          :rtype: list({type, message, record})\n  311          \"\"\"\n  312:         cr.execute('SAVEPOINT import')\n  313  \n  314          (record,) = self.browse(cr, uid, [id], context=context)\n  ...\n  337          try:\n  338              if dryrun:\n  339:                 cr.execute('ROLLBACK TO SAVEPOINT import')\n  340              else:\n  341:                 cr.execute('RELEASE SAVEPOINT import')\n  342          except psycopg2.InternalError:\n  343              pass\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_report_designer\\plugin\\openerp_report_designer\\bin\\script\\AddAttachment.py:\n   73              # Open a new connexion to the server\n   74  \n   75:             ids = self.sock.execute(database, uid, self.password, 'ir.module.module', 'search', [('name','=','base_report_model'),('state', '=', 'installed')])\n   76              if not len(ids):\n   77                  # If the module 'base_report_model' is not installed, use the default model\n   ..\n   81              else:\n   82  \n   83:                 ids =self.sock.execute(database, uid, self.password, 'base.report.model' , 'search', [])\n   84:                 res = self.sock.execute(database, uid, self.password, 'base.report.model' , 'read', ids, ['name','model_id'])\n   85:                 models = self.sock.execute(database, uid, self.password, 'ir.model' , 'read', map(lambda x:x['model_id'][0], res), ['model'])\n   86                  models = dict(map(lambda x:(x['id'],x['model']), models))\n   87                  self.dModel = dict(map(lambda x: (x['name'],models[x['model_id'][0]]), res))\n   ..\n  120  \n  121  \n  122:         self.aSearchResult =self.sock.execute( database, uid, self.password, self.dModel[modelSelectedItem], 'name_search', self.win.getEditText(\"txtSearchName\"))\n  123          self.win.removeListBoxItems(\"lstResource\", 0, self.win.getListBoxItemCount(\"lstResource\"))\n  124          if self.aSearchResult == []:\n  ...\n  142          }\n  143  \n  144:         return self.sock.execute( database, uid, self.password, 'ir.attachment', 'create', params )\n  145  \n  146      def send_attachment(self, model, resource_id):\n  ...\n  175  \n  176          res = self.send_attachment( docinfo.getUserFieldValue(3), docinfo.getUserFieldValue(2) )\n  177:         self.win.endExecute()\n  178  \n  179      def btnOkWithInformation_clicked(self, oActionEvent):\n  ...\n  197  \n  198          res = self.send_attachment( self.dModel[self.win.getListBoxSelectedItem('lstmodel')], resourceid )\n  199:         self.win.endExecute()\n  200  \n  201      def btnCancel_clicked(self, oActionEvent):\n  202:         self.win.endExecute()\n  203  \n  204      def doc2pdf(self, strFile):\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_report_designer\\plugin\\openerp_report_designer\\bin\\script\\Change.py:\n   97              docinfo.setUserFieldValue(0,url)\n   98              res=self.sock.listdb()\n   99:             self.win.endExecute()\n  100              ServerParameter(aVal,url)\n  101          except :\n  ...\n  104              self.logobj.log_write('ServerParameter', LOG_ERROR, info)\n  105              ErrorDialog(\"Connection to server is fail. Please check your Server Parameter.\", \"\", \"Error!\")\n  106:             self.win.endExecute()\n  107  \n  108      def btnCancel_clicked(self,oActionEvent):\n  109:         self.win.endExecute()\n  110  \n  111  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_report_designer\\plugin\\openerp_report_designer\\bin\\script\\ConvertBracesToField.py:\n  108  \n  109                                  sObject = self.getRes(self.sock, docinfo.getUserFieldValue(3), res[0][0][res[0][0].find(\".\")+1:].replace(\".\",\"/\"))\n  110:                                 r = self.sock.execute(database, uid, self.password, docinfo.getUserFieldValue(3) , 'fields_get')\n  111                                  sExpr=\"|-.\" + r[res[0][0][res[0][0].rfind(\".\")+1:]][\"string\"] + \".-|\"\n  112                                  oPar.Items=(sExpr.encode(\"utf-8\"),oPar.Items[1].replace(' ',\"\"))\n  ...\n  120                                  try:\n  121                                      sObject = self.getRes(self.sock, obj, res[0][res[0].find(\".\")+1:].replace(\".\",\"/\"))\n  122:                                     r = self.sock.execute(database, uid, self.password, sObject , 'read',[1])\n  123                                  except Exception,e:\n  124                                      r = \"TTT\"\n  ...\n  180          doc =desktop.getCurrentComponent()\n  181          docinfo=doc.getDocumentInfo()\n  182:         res = sock.execute(database, uid, self.password, sObject , 'fields_get')\n  183          key = res.keys()\n  184          key.sort()\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_report_designer\\plugin\\openerp_report_designer\\bin\\script\\ExportToRML.py:\n   77          try:\n   78  \n   79:             res = self.sock.execute(database, uid, self.password, 'ir.actions.report.xml', 'sxwtorml',base64.encodestring(data),file_type)\n   80              if res['report_rml_content']:\n   81                  write_data_to_file(get_absolute_file_path(filename), res['report_rml_content'])\n   ..\n  100          oFileDialog.setDefaultName(f_path )\n  101  \n  102:         sPath = oFileDialog.execute() == 1 and oFileDialog.Files[0] or ''\n  103          oFileDialog.dispose()\n  104          sPath = sPath[7:]\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_report_designer\\plugin\\openerp_report_designer\\bin\\script\\Expression.py:\n   64              oCurObj.Items = (sKey,sValue)\n   65              oCurObj.update()\n   66:             self.win.endExecute()\n   67          else:\n   68              oInputList = doc.createInstance(\"com.sun.star.text.TextField.DropDown\")\n   ..\n   79                      oInputList.Items = (sKey,sValue)\n   80                      tableText.insertTextContent(cursor,oInputList,False)\n   81:                 self.win.endExecute()\n   82              else:\n   83                  ErrorDialog(\"Please fill appropriate data in Name field or in Expression field.\")\n   84  \n   85      def btnCancel_clicked(self, oActionEvent):\n   86:         self.win.endExecute()\n   87  \n   88  if __name__<>\"package\" and __name__==\"__main__\":\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_report_designer\\plugin\\openerp_report_designer\\bin\\script\\Fields.py:\n  140              for var in self.aVariableList:\n  141  \n  142:                     self.model_ids =self.sock.execute(database, uid, self.password, 'ir.model' ,  'search', [('model','=',var[var.find(\"(\")+1:var.find(\")\")])])\n  143                      fields=['name','model']\n  144:                     self.model_res = self.sock.execute(database, uid, self.password, 'ir.model', 'read', self.model_ids,fields)\n  145                      if self.model_res <> []:\n  146                          self.insVariable.addItem(var[:var.find(\"(\")+1] + self.model_res[0]['name'] + \")\" ,self.insVariable.getItemCount())\n  ...\n  151          else:\n  152              ErrorDialog(\"Please insert user define field Field-1 or Field-4\",\"Just go to File->Properties->User Define \\nField-1 E.g. http://localhost:8069 \\nOR \\nField-4 E.g. account.invoice\")\n  153:             self.win.endExecute()\n  154  \n  155      def lstbox_selected(self, oItemEvent):\n  ...\n  165              sMain=self.aListFields[self.win.getListBoxSelectedItemPos(\"lstFields\")]\n  166              sObject=self.getRes(self.sock,sItem[sItem.find(\"(\")+1:-1],sMain[1:])\n  167:             ids = self.sock.execute(database, uid, self.password, sObject ,  'search', [])\n  168:             res = self.sock.execute(database, uid, self.password, sObject , 'read',[ids[0]])\n  169              self.win.setEditText(\"txtUName\",res[0][sMain[sMain.rfind(\"/\")+1:]])\n  170          except:\n  ...\n  180          doc =desktop.getCurrentComponent()\n  181          docinfo=doc.getDocumentInfo()\n  182:         res = sock.execute(database, uid, self.password, sObject , 'fields_get')\n  183          key = res.keys()\n  184          key.sort()\n  ...\n  241                      oCurObj.Items = (sKey,sValue)\n  242                      oCurObj.update()\n  243:                     self.win.endExecute()\n  244                  elif itemSelected != \"\" and txtUName != \"\" :\n  245  \n  ...\n  253                      oInputList.Items = (sKey,sValue)\n  254                      widget.insertTextContent(cursor,oInputList,False)\n  255:                     self.win.endExecute()\n  256                  else:\n  257                      ErrorDialog(\"Please fill appropriate data in Name field \\nor select particular value from the list of fields.\")\n  258  \n  259      def btnCancel_clicked(self, oActionEvent):\n  260:         self.win.endExecute()\n  261  \n  262  if __name__<>\"package\" and __name__==\"__main__\":\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_report_designer\\plugin\\openerp_report_designer\\bin\\script\\lib\\error.py:\n   33          self.win.doModalDialog(\"\",None)\n   34      def btnOkOrCancel_clicked( self, oActionEvent ):\n   35:         self.win.endExecute()\n   36  \n   37  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_report_designer\\plugin\\openerp_report_designer\\bin\\script\\lib\\functions.py:\n   47          sock=RPCSession(url)\n   48          global passwd\n   49:         res = sock.execute(database, uid, passwd, object , 'fields_get')\n   50          key = res.keys()\n   51          key.sort()\n   ..\n  115          sock=RPCSession(url)\n  116          global passwd\n  117:         res = sock.execute(database, uid, passwd, sRelName , 'fields_get')\n  118          key = res.keys()\n  119          for k in key:\n  ...\n  238          oFileDialog.setDisplayDirectory(InitPath)\n  239      #End If\n  240:     iAccept = oFileDialog.execute()\n  241      if iAccept == 1:\n  242          sPath = oFileDialog.Files[0]\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_report_designer\\plugin\\openerp_report_designer\\bin\\script\\lib\\gui.py:\n  789          if not sValue==None:\n  790              self.selectListBoxItem( sObjName, sValue, True )\n  791:         self.oDialogControl.execute()\n  792  \n  793:     def endExecute( self ):\n  794          \"\"\"Call this from within one of the listeners to end the modal dialog.\n  795          For instance, the listener on your OK or Cancel button would call this to end the dialog.\n  796          \"\"\"\n  797:         self.oDialogControl.endExecute()\n  798  \n  799  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_report_designer\\plugin\\openerp_report_designer\\bin\\script\\lib\\rpc.py:\n   47          pass\n   48  \n   49:     def execute(self, obj, method, *args):\n   50          pass\n   51  \n   ..\n   88  \n   89  \n   90:     def execute(self, obj, method, *args):\n   91          try:\n   92:             result = self.gateway.execute(obj, method, *args)\n   93              return self.__convert(result)\n   94          except Exception,e:\n   ..\n  153          return res\n  154  \n  155:     def execute(self, sDatabase, UID, sPassword, obj, method, *args):\n  156          global rpc_url\n  157  \n  158          sock = xmlrpclib.ServerProxy(rpc_url + 'object')\n  159  \n  160:         return sock.execute(sDatabase,UID,sPassword, obj ,method,*args)\n  161  \n  162  \n  ...\n  188              return -1\n  189          return res\n  190:     def execute(self,obj, method, *args):\n  191          sock = mysocket()\n  192          try:\n  193              sock.connect(self.host, self.port)\n  194:             data=(('object', 'execute',obj,method,)+args)\n  195              sock.mysend(data)\n  196              res=sock.myreceive()\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_report_designer\\plugin\\openerp_report_designer\\bin\\script\\ModifyExistingReport.py:\n   67  \n   68  \n   69:         ids = self.sock.execute(database, uid, self.password, 'ir.module.module', 'search', [('name','=','base_report_designer'),('state', '=', 'installed')])\n   70          if not len(ids):\n   71              ErrorDialog(\"Please install base_report_designer module.\", \"\", \"Module Uninstalled Error!\")\n   72              exit(1)\n   73  \n   74:         ids = self.sock.execute(database, uid, self.password, 'ir.actions.report.xml', 'search', [('report_xsl', '=', False),('report_xml', '=', False)])\n   75  \n   76          fields=['id', 'name','report_name','model']\n   77  \n   78:         self.reports = self.sock.execute(database, uid, self.password, 'ir.actions.report.xml', 'read', ids, fields)\n   79          self.report_with_id = []\n   80  \n   81          for report in self.reports:\n   82              if report['name']<>\"\":\n   83:                 model_ids = self.sock.execute(database, uid, self.password, 'ir.model' ,  'search', [('model','=', report['model'])])\n   84:                 model_res_other =self.sock.execute(database, uid, self.password, 'ir.model', 'read', model_ids, [ 'name', 'model' ] )\n   85                  if model_res_other <> []:\n   86                      name = model_res_other[0]['name'] + \" - \" + report['name']\n   ..\n  108              id = self.report_with_id[ selectedItemPos ][0]\n  109  \n  110:             res = self.sock.execute(database, uid, self.password, 'ir.actions.report.xml', 'report_get', id)\n  111  \n  112              if res['file_type'] in ['sxw','odt'] :\n  ...\n  152              self.logobj.log_write('ModifyExistingReport', LOG_ERROR, info)\n  153  \n  154:         self.win.endExecute()\n  155  \n  156      def btnCancel_clicked(self, oActionEvent):\n  157:         self.win.endExecute()\n  158  \n  159      def btnDelete_clicked(self, oActionEvent):\n  ...\n  165           name=self.win.getListBoxSelectedItem (\"lstReport\")\n  166           id = self.report_with_id[ selectedItemPos ][0]\n  167:          temp = self.sock.execute(database, uid, self.password, 'ir.actions.report.xml', 'unlink', id,)\n  168           str_value='ir.actions.report.xml,'+str(id)\n  169:          ids = self.sock.execute(database, uid, self.password, 'ir.values' ,  'search',[('value','=',str_value)])\n  170           if ids:\n  171:             rec = self.sock.execute(database, uid, self.password, 'ir.values', 'unlink', ids,)\n  172           else :\n  173              pass\n  ...\n  178           else:\n  179              ErrorDialog(\"Report\", \"The report could not be deleted:\\n\"+name+\".\", \"Message !\")\n  180:          self.win.endExecute()\n  181  \n  182  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_report_designer\\plugin\\openerp_report_designer\\bin\\script\\NewReport.py:\n   65          global url\n   66          self.sock=RPCSession(url)\n   67:         ids = self.sock.execute(database, uid, self.password, 'ir.model' , 'search',[])\n   68          fields = [ 'model','name']\n   69:         res = self.sock.execute(database, uid, self.password, 'ir.model' , 'read', ids, fields)\n   70          res.sort(lambda x, y: cmp(x['name'],y['name']))\n   71  \n   ..\n   83          docinfo.setUserFieldValue(3,self.aModuleName[self.lstModule.getSelectedItemPos()])\n   84          self.logobj.log_write('Module Name',LOG_INFO, ':Module use in creating a report %s  using database %s' % (self.aModuleName[self.lstModule.getSelectedItemPos()], database))\n   85:         self.win.endExecute()\n   86  \n   87      def btnCancel_clicked(self, oActionEvent):\n   88:         self.win.endExecute()\n   89  \n   90  if __name__<>\"package\" and __name__==\"__main__\":\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_report_designer\\plugin\\openerp_report_designer\\bin\\script\\Repeatln.py:\n  164  \n  165                  if var[:8] <> 'List of ':\n  166:                     self.model_ids = self.sock.execute(database, uid, self.password, 'ir.model' ,  'search', [('model','=',var[var.find(\"(\")+1:var.find(\")\")])])\n  167                  else:\n  168:                     self.model_ids = self.sock.execute(database, uid, self.password, 'ir.model' ,  'search', [('model','=',var[8:])])\n  169                  fields=['name','model']\n  170:                 self.model_res = self.sock.execute(database, uid, self.password, 'ir.model', 'read', self.model_ids,fields)\n  171                  if self.model_res <> []:\n  172                      if var[:8]<>'List of ':\n  ...\n  180          else:\n  181              ErrorDialog(\"Please Select Appropriate module\" ,\"Create new report from: \\nOdoo -> Open a New Report\")\n  182:             self.win.endExecute()\n  183  \n  184      def lstbox_selected(self, oItemEvent):\n  ...\n  264                          widget = ( cursor.TextTable or selectedItem <> 'objects' ) and cursor.TextTable.getCellByName( cursor.Cell.CellName ) or doc.Text\n  265                          widget.insertTextContent(cursor,oInputList,False)\n  266:                 self.win.endExecute()\n  267          else:\n  268              ErrorDialog(\"Please fill appropriate data in Object Field or Name field \\nor select particular value from the list of fields.\")\n  269  \n  270      def btnCancel_clicked(self, oActionEvent):\n  271:         self.win.endExecute()\n  272  \n  273  if __name__<>\"package\" and __name__==\"__main__\":\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_report_designer\\plugin\\openerp_report_designer\\bin\\script\\SendToServer.py:\n   66          docinfo=oDoc2.getDocumentInfo()\n   67  \n   68:         self.ids = self.sock.execute(database, uid, self.password, 'ir.module.module', 'search', [('name','=','base_report_designer'),('state', '=', 'installed')])\n   69          if not len(self.ids):\n   70              ErrorDialog(\"Please install base_report_designer module.\", \"\", \"Module Uninstalled Error!\")\n   ..\n   76              try:\n   77                  fields=['name','report_name']\n   78:                 self.res_other = self.sock.execute(database, uid, self.password, 'ir.actions.report.xml', 'read', [int(docinfo.getUserFieldValue(2))],fields)\n   79                  name = self.res_other[0]['name']\n   80                  report_name = self.res_other[0]['report_name']\n   ..\n  118  \n  119      def btnCancel_clicked(self, oActionEvent):\n  120:         self.win.endExecute()\n  121  \n  122      def btnOk_clicked(self, oActionEvent):\n  ...\n  134                  name_id={}\n  135                  try:\n  136:                     name_id = self.sock.execute(database, uid, self.password, 'ir.actions.report.xml' , 'search',[('name','=',name)])\n  137                      if not name_id:\n  138                          id=self.getID()\n  ...\n  147                                  'user_id': uid\n  148                              }\n  149:                         res = self.sock.execute(database, uid, self.password, 'ir.values' , 'create',rec )\n  150                      else :\n  151                          ErrorDialog(\"This name is already used for another report.\\nPlease try with another name.\", \"\", \"Error!\")\n  152                          self.logobj.log_write('SendToServer',LOG_WARNING, ': report name already used DB %s' % (database))\n  153:                         self.win.endExecute()\n  154                  except Exception,e:\n  155                      import traceback,sys\n  ...\n  159  \n  160                  id = docinfo.getUserFieldValue(2)\n  161:                 vId = self.sock.execute(database, uid, self.password, 'ir.values' ,  'search', [('value','=','ir.actions.report.xml,'+str(id))])\n  162                  rec = { 'name': self.win.getEditText(\"txtReportName\") }\n  163:                 res = self.sock.execute(database, uid, self.password, 'ir.values' , 'write',vId,rec)\n  164              oDoc2.store()\n  165              data = read_data_from_file( get_absolute_file_path( oDoc2.getURL()[7:] ) )\n  ...\n  177              if self.win.getListBoxSelectedItem(\"lstResourceType\")=='OpenOffice':\n  178                  params['report_type']=file_type\n  179:             self.sock.execute(database, uid, self.password, 'ir.actions.report.xml', 'write', int(docinfo.getUserFieldValue(2)), params)\n  180  \n  181              # Call upload_report as the *last* step, as it will call register_all() and cause the report service\n  182              # to be loaded - which requires all the data to be correct in the database\n  183:             self.sock.execute(database, uid, self.password, 'ir.actions.report.xml', 'upload_report', int(docinfo.getUserFieldValue(2)),base64.encodestring(data),file_type,{})\n  184  \n  185              self.logobj.log_write('SendToServer',LOG_INFO, ':Report %s successfully send using %s'%(params['name'],database))\n  186:             self.win.endExecute()\n  187          else:\n  188              ErrorDialog(\"Either report name or technical name is empty.\\nPlease specify an appropriate name.\", \"\", \"Error!\")\n  189              self.logobj.log_write('SendToServer',LOG_WARNING, ': either report name or technical name is empty.')\n  190:             self.win.endExecute()\n  191  \n  192      def getID(self):\n  ...\n  201  \n  202  \n  203:         id=self.sock.execute(database, uid, self.password, 'ir.actions.report.xml' ,'create', params)\n  204          return id\n  205  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_report_designer\\plugin\\openerp_report_designer\\bin\\script\\ServerParameter.py:\n  107          if not UID or UID==-1 :\n  108              ErrorDialog(\"Connection denied.\", \"Please enter valid login/password.\")\n  109:           #  self.win.endExecute()\n  110:         ids_module =self.sock.execute(sDatabase, UID, sPassword, 'ir.module.module', 'search', [('name','=','base_report_designer'),('state', '=', 'installed')])\n  111          if not len(ids_module):\n  112              ErrorDialog(\"Please install base_report_designer module.\", \"\", \"Module Uninstalled Error!\")\n  113              self.logobj.log_write('Module not found.',LOG_WARNING, ': base_report_designer not installed in database %s.' % (sDatabase))\n  114:             #self.win.endExecute()\n  115          else:\n  116              desktop=getDesktop()\n  ...\n  132              ErrorDialog(\"You can start creating your report in the current document.\", \"After creating, sending to the server.\", \"Message !\")\n  133              self.logobj.log_write('successful login',LOG_INFO, ': successful login from %s using database %s' % (sLogin, sDatabase))\n  134:             self.win.endExecute()\n  135  \n  136      def btnCancel_clicked(self, oActionEvent):\n  137:         self.win.endExecute()\n  138  \n  139      def btnPrevious_clicked(self, oActionEvent):\n  140:         self.win.endExecute()\n  141          Change(None)\n  142:         self.win.endExecute()\n  143  \n  144  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_report_designer\\plugin\\openerp_report_designer\\bin\\script\\Translation.py:\n  121              for var in self.aVariableList:\n  122  \n  123:                     self.model_ids = self.sock.execute(database, uid, self.password, 'ir.model' ,  'search', [('model','=',var[var.find(\"(\")+1:var.find(\")\")])])\n  124                      fields=['name','model']\n  125:                     self.model_res = self.sock.execute(database, uid, self.password, 'ir.model', 'read', self.model_ids,fields)\n  126                      if self.model_res <> []:\n  127                          self.insVariable.addItem(var[:var.find(\"(\")+1] + self.model_res[0]['name'] + \")\" ,self.insVariable.getItemCount())\n  ...\n  132          else:\n  133              ErrorDialog(\"Please insert user define field Field-1 or Field-4\",\"Just go to File->Properties->User Define \\nField-1 E.g. http://localhost:8069 \\nOR \\nField-4 E.g. account.invoice\")\n  134:             self.win.endExecute()\n  135  \n  136      def lstbox_selected(self, oItemEvent):\n  ...\n  148              if t!=-1:\n  149                  sObject=self.getRes(self.sock,sItem[sItem.find(\"(\")+1:-1],sMain[1:])\n  150:                 ids = self.sock.execute(database, uid, self.password, sObject ,  'search', [])\n  151:                 res = self.sock.execute(database, uid, self.password, sObject , 'read',[ids[0]])\n  152                  self.win.setEditText(\"txtUName\",res[0][sMain[sMain.rfind(\"/\")+1:]])\n  153              else:\n  ...\n  164          doc =desktop.getCurrentComponent()\n  165          docinfo=doc.getDocumentInfo()\n  166:         res = sock.execute(database, uid, self.password, sObject , 'fields_get')\n  167          key = res.keys()\n  168          key.sort()\n  ...\n  224              oCurObj.Items = (sKey,sValue)\n  225              oCurObj.update()\n  226:             self.win.endExecute()\n  227          elif itemSelected != \"\" and txtUName != \"\" :\n  228              oInputList = doc.createInstance(\"com.sun.star.text.TextField.DropDown\")\n  ...\n  236              widget.insertTextContent(cursor,oInputList,False)\n  237  \n  238:             self.win.endExecute()\n  239          else:\n  240              ErrorDialog(\"Please fill appropriate data in name field \\nor select particular value from the list of fields.\")\n  241  \n  242      def btnCancel_clicked(self, oActionEvent):\n  243:         self.win.endExecute()\n  244  \n  245  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_report_designer\\plugin\\openerp_report_designer\\test\\test_fields.py:\n   18      if recur is None:\n   19          recur = []\n   20:     res = sock.execute('terp', 3, 'admin', 'account.invoice', 'fields_get')\n   21      key = res.keys()\n   22      key.sort()\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_setup\\base_setup.py:\n   58          return {}\n   59  \n   60:     def execute(self, cr, uid, ids, context=None):\n   61          def _case_insensitive_replace(ref_string, src, value):\n   62              import re\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_setup\\res_config_view.xml:\n    9                  <form string=\"General Settings\" class=\"oe_form_configuration\">\n   10                      <header>\n   11:                         <button string=\"Apply\" type=\"object\" name=\"execute\" class=\"oe_highlight\"/>\n   12                          or\n   13                          <button string=\"Cancel\" type=\"object\" name=\"cancel\" class=\"oe_link\"/>\n   ..\n   17                          <p>\n   18                              <label string=\"You will find more options in your company details: address for the header and footer, overdue payments texts, etc.\"/>\n   19:                             <button type=\"object\" name=\"open_company\" string=\"Configure your company data\" icon=\"gtk-execute\" class=\"oe_inline oe_link\"/>\n   20                          </p>\n   21                      </div>\n   ..\n  125                  <form string=\"Configure Sales\" class=\"oe_form_configuration\">\n  126                      <header>\n  127:                         <button string=\"Apply\" type=\"object\" name=\"execute\" class=\"oe_highlight\"/>\n  128                          or\n  129                          <button string=\"Cancel\" type=\"object\" name=\"cancel\" class=\"oe_link\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_vat\\base_vat_view.xml:\n   12                      <div name=\"vat_info\">\n   13                          <field name=\"vat\" on_change=\"vat_change(vat)\" placeholder=\"e.g. BE0477472701\" class=\"oe_inline\"/>\n   14:                         <button colspan=\"2\" name=\"button_check_vat\" string=\"Check Validity\" type=\"object\" icon=\"gtk-execute\" class=\"oe_inline\"/>\n   15                          <field name=\"vat_subjected\" class=\"oe_inline\"/>\n   16                      </div>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\bus\\bus.py:\n   58          if channels:\n   59              with openerp.sql_db.db_connect('postgres').cursor() as cr2:\n   60:                 cr2.execute(\"notify imbus, %s\", (json_dump(list(channels)),))\n   61  \n   62      def sendone(self, cr, uid, channel, message):\n   ..\n  114          with openerp.sql_db.db_connect('postgres').cursor() as cr:\n  115              conn = cr._cnx\n  116:             cr.execute(\"listen imbus\")\n  117              cr.commit();\n  118              while True:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\calendar\\calendar.py:\n  375          tuple_params += (seconds, seconds,)\n  376  \n  377:         cr.execute(\"\"\"SELECT *\n  378                          FROM ( %s WHERE cal.active = True ) AS ALL_EVENTS\n  379                         WHERE ALL_EVENTS.first_alarm < (now() at time zone 'utc' + interval '%%s' second )\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\base_partner_merge.py:\n  143                      AND con.contype = 'f'\n  144          \"\"\"\n  145:         return cr.execute(q, (table,))\n  146  \n  147      def _update_foreign_keys(self, cr, uid, src_partners, dst_partner, context=None):\n  ...\n  160  \n  161              query = \"SELECT column_name FROM information_schema.columns WHERE table_name LIKE '%s'\" % (table)\n  162:             cr.execute(query, ())\n  163              columns = []\n  164              for data in cr.fetchall():\n  ...\n  186                          )\"\"\" % query_dic\n  187                  for partner_id in partner_ids:\n  188:                     cr.execute(query, (dst_partner.id, partner_id, dst_partner.id))\n  189              else:\n  190                  try:\n  191                      with mute_logger('openerp.sql_db'), cr.savepoint():\n  192                          query = 'UPDATE \"%(table)s\" SET %(column)s = %%s WHERE %(column)s IN %%s' % query_dic\n  193:                         cr.execute(query, (dst_partner.id, partner_ids,))\n  194  \n  195                          if column == proxy._parent_name and table == 'res_partner':\n  ...\n  205                                  SELECT id FROM cycle WHERE id = parent_id AND id = %s\n  206                              \"\"\"\n  207:                             cr.execute(query, (dst_partner.id,))\n  208                  except psycopg2.Error:\n  209                      # updating fails, most likely due to a violated unique constraint\n  210                      # keeping record with nonexistent partner_id is useless, better delete it\n  211                      query = 'DELETE FROM %(table)s WHERE %(column)s = %%s' % query_dic\n  212:                     cr.execute(query, (partner_id,))\n  213  \n  214      def _update_reference_fields(self, cr, uid, src_partners, dst_partner, context=None):\n  ...\n  532      def _process_query(self, cr, uid, ids, query, context=None):\n  533          \"\"\"\n  534:         Execute the select request and write the result in this wizard\n  535          \"\"\"\n  536          proxy = self.pool.get('base.partner.merge.line')\n  537          this = self.browse(cr, uid, ids[0], context=context)\n  538          models = self.compute_models(cr, uid, ids, context=context)\n  539:         cr.execute(query)\n  540  \n  541          counter = 0\n  ...\n  639          this.write({'state': 'finished'})\n  640  \n  641:         cr.execute(\"\"\"\n  642              UPDATE\n  643                  res_partner\n  ...\n  690              self.automatic_process_cb(cr, uid, [id], context=context)\n  691  \n  692:         cr.execute(\"\"\"\n  693              UPDATE\n  694                  res_partner\n  ...\n  700          \"\"\")\n  701  \n  702:         # cr.execute(\"\"\"\n  703          #     UPDATE\n  704          #         res_partner as p1\n  ...\n  747          # select partner who have one least invoice\n  748          partner_treated = ['@gmail.com']\n  749:         cr.execute(\"\"\"  SELECT p.id, p.email\n  750                          FROM res_partner as p \n  751                          LEFT JOIN account_invoice as a \n  ...\n  764  \n  765              # don't update the partners if they are more of one who have invoice\n  766:             cr.execute(\"\"\"  SELECT *\n  767                              FROM res_partner as p\n  768                              WHERE p.id != %s AND p.email LIKE '%%%s' AND\n  ...\n  775  \n  776              # to display changed values\n  777:             cr.execute(\"\"\"  SELECT id,email\n  778                              FROM res_partner\n  779                              WHERE parent_id != %s AND id != %s AND email LIKE '%%%s'\n  ...\n  782  \n  783              # upgrade\n  784:             cr.execute(\"\"\"  UPDATE res_partner\n  785                              SET parent_id = %s\n  786                              WHERE id != %s AND email LIKE '%%%s'\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\base_partner_merge_view.xml:\n   40                              string='Merge Automatically'\n   41                              type='object' class='oe_highlight'\n   42:                             confirm=\"Are you sure to execute the automatic merge of your contacts ?\"\n   43                              attrs=\"{'invisible': [('state', '!=', 'option')]}\" />\n   44                          <button name='update_all_process_cb'\n   45                              string='Merge Automatically all process'\n   46                              type='object'\n   47:                             confirm=\"Are you sure to execute the list of automatic merges of your contacts ?\"\n   48                              attrs=\"{'invisible': [('state', '!=', 'option')]}\" />\n   49                          <span class=\"or_cancel\" attrs=\"{'invisible': [('state', '=', 'finished')]} \">or\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\crm_segmentation.py:\n   62              if start:\n   63                  if categ['exclusif']:\n   64:                     cr.execute('delete from res_partner_res_partner_category_rel \\\n   65                              where category_id=%s', (categ['categ_id'][0],))\n   66                      partner_obj.invalidate_cache(cr, uid, ['category_id'])\n   ..\n   68              id = categ['id']\n   69  \n   70:             cr.execute('select id from res_partner order by id ')\n   71              partners = [x[0] for x in cr.fetchall()]\n   72  \n   73              if categ['sales_purchase_active']:\n   74                  to_remove_list=[]\n   75:                 cr.execute('select id from crm_segmentation_line where segmentation_id=%s', (id,))\n   76                  line_ids = [x[0] for x in cr.fetchall()]\n   77  \n   ..\n   85                  category_ids = [categ_id.id for categ_id in partner.category_id]\n   86                  if categ['categ_id'][0] not in category_ids:\n   87:                     cr.execute('insert into res_partner_res_partner_category_rel (category_id,partner_id) \\\n   88                              values (%s,%s)', (categ['categ_id'][0], partner.id))\n   89                      partner_obj.invalidate_cache(cr, uid, ['category_id'], [partner.id])\n   ..\n  142          lst = self.read(cr, uid, ids)\n  143          for l in lst:\n  144:             cr.execute('select * from ir_module_module where name=%s and state=%s', ('account','installed'))\n  145              if cr.fetchone():\n  146                  if l['expr_name']=='sale':\n  147:                     cr.execute('SELECT SUM(l.price_unit * l.quantity) ' \\\n  148                              'FROM account_invoice_line l, account_invoice i ' \\\n  149                              'WHERE (l.invoice_id = i.id) ' \\\n  ...\n  152                              (partner_id,))\n  153                      value = cr.fetchone()[0] or 0.0\n  154:                     cr.execute('SELECT SUM(l.price_unit * l.quantity) ' \\\n  155                              'FROM account_invoice_line l, account_invoice i ' \\\n  156                              'WHERE (l.invoice_id = i.id) ' \\\n  ...\n  160                      value -= cr.fetchone()[0] or 0.0\n  161                  elif l['expr_name']=='purchase':\n  162:                     cr.execute('SELECT SUM(l.price_unit * l.quantity) ' \\\n  163                              'FROM account_invoice_line l, account_invoice i ' \\\n  164                              'WHERE (l.invoice_id = i.id) ' \\\n  ...\n  167                              (partner_id,))\n  168                      value = cr.fetchone()[0] or 0.0\n  169:                     cr.execute('SELECT SUM(l.price_unit * l.quantity) ' \\\n  170                              'FROM account_invoice_line l, account_invoice i ' \\\n  171                              'WHERE (l.invoice_id = i.id) ' \\\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\crm_view.xml:\n  281                              states=\"not running\"\n  282                              string=\"Compute Segmentation\" type=\"object\"\n  283:                             icon=\"gtk-execute\"/>\n  284                          <button name=\"process_stop\" states=\"running\"\n  285                              string=\"Stop Process\" type=\"object\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\report\\crm_lead_report.py:\n   69          \"\"\"\n   70          tools.drop_view_if_exists(cr, 'crm_lead_report')\n   71:         cr.execute(\"\"\"\n   72              CREATE OR REPLACE VIEW crm_lead_report AS (\n   73                  SELECT\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\report\\crm_opportunity_report.py:\n   65      def init(self, cr):\n   66          tools.drop_view_if_exists(cr, 'crm_opportunity_report')\n   67:         cr.execute(\"\"\"\n   68              CREATE OR REPLACE VIEW crm_opportunity_report AS (\n   69                  SELECT\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\report\\crm_phonecall_report.py:\n   65          \"\"\"\n   66          tools.drop_view_if_exists(cr, 'crm_phonecall_report')\n   67:         cr.execute(\"\"\"\n   68              create or replace view crm_phonecall_report as (\n   69                  select\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\report\\report_businessopp.py:\n   61          maxbenef = 0\n   62  \n   63:         cr.execute('select probability, planned_revenue, planned_cost, user_id,\\\n   64                   res_users.name as name from crm_case left join res_users on \\\n   65                   (crm_case.user_id=res_users.id) where crm_case.id IN %s order by user_id',(tuple(ids),))\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\wizard\\crm_lead_to_opportunity.py:\n   96      def view_init(self, cr, uid, fields, context=None):\n   97          \"\"\"\n   98:         Check some preconditions before the wizard executes.\n   99          \"\"\"\n  100          if context is None:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm_claim\\report\\crm_claim_report.py:\n   67  \n   68          tools.drop_view_if_exists(cr, 'crm_claim_report')\n   69:         cr.execute(\"\"\"\n   70              create or replace view crm_claim_report as (\n   71                  select\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm_helpdesk\\report\\crm_helpdesk_report.py:\n   70  \n   71          tools.drop_view_if_exists(cr, 'crm_helpdesk_report')\n   72:         cr.execute(\"\"\"\n   73              create or replace view crm_helpdesk_report as (\n   74                  select\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm_partner_assign\\crm_partner_assign.py:\n  206                  if not partner_ids:\n  207                      # warning: point() type takes (longitude, latitude) as parameters in this order!\n  208:                     cr.execute(\"\"\"SELECT id, distance\n  209                                    FROM  (select id, (point(partner_longitude, partner_latitude) <-> point(%s,%s)) AS distance FROM res_partner\n  210                                    WHERE partner_longitude is not null\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm_partner_assign\\report\\crm_lead_report.py:\n   65          \"\"\"\n   66          tools.drop_view_if_exists(cr, 'crm_lead_report_assign')\n   67:         cr.execute(\"\"\"\n   68              CREATE OR REPLACE VIEW crm_lead_report_assign AS (\n   69                  SELECT\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm_partner_assign\\report\\crm_partner_report.py:\n   47          \"\"\"\n   48          tools.drop_view_if_exists(cr, 'crm_partner_report_assign')\n   49:         cr.execute(\"\"\"\n   50              CREATE OR REPLACE VIEW crm_partner_report_assign AS (\n   51                  SELECT\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm_profiling\\crm_profiling.py:\n   36      where profile IN %s\"\"\"\n   37  \n   38:     cr.execute(query, (tuple(ids),))\n   39      ans_yes = [x[0] for x in cr.fetchall()]\n   40  \n   ..\n   44      where profile IN %s\"\"\"\n   45  \n   46:     cr.execute(query, (tuple(ids),))\n   47      ans_no = [x[0] for x in cr.fetchall()]\n   48  \n   ..\n   58  \n   59      ids_to_check = ids\n   60:     cr.execute(\"\"\"\n   61       select distinct(parent_id)\n   62       from crm_segmentation\n   ..\n  115  \n  116      ok =  []\n  117:     cr.execute('''\n  118          select r.category_id\n  119          from res_partner_res_partner_category_rel r left join crm_segmentation s on (r.category_id = s.categ_id)\n  ...\n  131      query = query + ''' order by id '''\n  132  \n  133:     cr.execute(query)\n  134      segm_cat_ids = cr.fetchall()\n  135  \n  ...\n  193          partner_id = context.get('active_id')\n  194          query = \"select answer from partner_question_rel where partner=%s\"\n  195:         cr.execute(query, (partner_id,))\n  196          for x in cr.fetchall():\n  197              answers.append(x[0])\n  ...\n  248              if start:\n  249                  if categ['exclusif']:\n  250:                     cr.execute('delete from res_partner_res_partner_category_rel where \\\n  251                              category_id=%s', (categ['categ_id'][0],))\n  252                      partner_obj.invalidate_cache(cr, uid, ['category_id'])\n  ...\n  254              id = categ['id']\n  255  \n  256:             cr.execute('select id from res_partner order by id ')\n  257              partners = [x[0] for x in cr.fetchall()]\n  258  \n  259              if categ['sales_purchase_active']:\n  260                  to_remove_list=[]\n  261:                 cr.execute('select id from crm_segmentation_line where segmentation_id=%s', (id,))\n  262                  line_ids = [x[0] for x in cr.fetchall()]\n  263  \n  ...\n  272                  for pid in partners:\n  273  \n  274:                     cr.execute('select distinct(answer) from partner_question_rel where partner=%s',(pid,))\n  275                      answers_ids = [x[0] for x in cr.fetchall()]\n  276  \n  ...\n  283                  category_ids = [categ_id.id for categ_id in partner.category_id]\n  284                  if categ['categ_id'][0] not in category_ids:\n  285:                     cr.execute('insert into res_partner_res_partner_category_rel (category_id,partner_id) values (%s,%s)', (categ['categ_id'][0],partner.id))\n  286                      partner_obj.invalidate_cache(cr, uid, ['category_id'], [partner.id])\n  287  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm_profiling\\wizard\\open_questionnaire.py:\n   47              query = \"\"\"\n   48                  select question as question_id from profile_questionnaire_quest_rel where questionnaire = %s\"\"\"\n   49:             cr.execute(query, (questionnaire_id,))\n   50              result = cr.dictfetchall()\n   51              res.update(question_ans_ids=result)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\cron_run_manually\\ir_cron.py:\n   37              raise exceptions.AccessError(\n   38                  _('Only the admin user is allowed to '\n   39:                   'execute inactive cron jobs manually'))\n   40  \n   41          try:\n   42              # Try to grab an exclusive lock on the job row\n   43              # until the end of the transaction\n   44:             self.env.cr.execute(\n   45                  \"\"\"SELECT *\n   46                     FROM ir_cron\n   ..\n   61          _logger.info('Job `%s` triggered from form', self.name)\n   62  \n   63:         # Do not propagate active_test to the method to execute\n   64          ctx = dict(self.env.context)\n   65          ctx.pop('active_test', None)\n   66  \n   67:         # Execute the cron job\n   68          method = getattr(\n   69              self.with_context(ctx).sudo(self.user_id).env[self.model],\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\decimal_precision\\decimal_precision.py:\n   42      @tools.ormcache(skiparg=3)\n   43      def precision_get(self, cr, uid, application):\n   44:         cr.execute('select digits from decimal_precision where name=%s', (application,))\n   45          res = cr.fetchone()\n   46          return res[0] if res else 2\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\document\\document.py:\n   80  \n   81              # use SQL to avoid recursive loop on read\n   82:             cr.execute('SELECT DISTINCT parent_id from ir_attachment WHERE id in %s AND parent_id is not NULL', (tuple(ids),))\n   83              self.pool.get('document.directory').check_access_rule(cr, uid, [parent_id for (parent_id,) in cr.fetchall()], mode, context=context)\n   84  \n   ..\n   92          # Must use pure SQL to avoid access rules exceptions (we want to remove the records,\n   93          # not fail), and the records have been filtered in parent's search() anyway.\n   94:         cr.execute('SELECT id, parent_id from ir_attachment WHERE id in %s', (tuple(ids),))\n   95  \n   96          # cont a dict of parent -> attach\n   ..\n  385  \n  386      def _extension_get(self, cr, uid, context=None):\n  387:         cr.execute('select code,name from document_directory_content_type where active')\n  388          res = cr.fetchall()\n  389          return res\n  ...\n  562              # to write the fname and size, and update them in the db concurrently.\n  563              # We cannot use a write() here, because we are already in one.\n  564:             cr.execute('UPDATE ir_attachment SET file_size = %s, index_content = %s, file_type = %s WHERE id = %s', (filesize, icont_u, mime, file_node.file_id))\n  565              self.pool.get('ir.attachment').invalidate_cache(cr, uid, ['file_size', 'index_content', 'file_type'], [file_node.file_id], context=context)\n  566              file_node.content_length = filesize\n  ...\n 1842          \"\"\"\n 1843  \n 1844:         cr.execute('SELECT DISTINCT mimetype FROM document_directory_content_type WHERE active AND code = %s;',\n 1845                  (self.extension,))\n 1846          res = cr.fetchall()\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\document\\report\\document_report.py:\n   44      def init(self, cr):\n   45          tools.drop_view_if_exists(cr, 'report_document_user')\n   46:         cr.execute(\"\"\"\n   47              CREATE OR REPLACE VIEW report_document_user as (\n   48                   SELECT\n   ..\n   77      def init(self, cr):\n   78          tools.drop_view_if_exists(cr, 'report_document_file')\n   79:         cr.execute(\"\"\"\n   80              create or replace view report_document_file as (\n   81                  select min(f.id) as id,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\document\\std_index.py:\n  104          except OSError:\n  105              \n  106:             _logger.warning(\"Failed attempt to execute antiword (MS Word reader). Antiword is necessary to index the file %s of MIME type %s. Detailed error available at DEBUG level.\", fname, self._getMimeTypes()[0])\n  107              _logger.debug(\"Trace of the failed file indexing attempt.\", exc_info=True)\n  108              return u''\n  ...\n  172              return _to_unicode(data)\n  173          except OSError:\n  174:             _logger.warning(\"Failed attempt to execute pdftotext. This program is necessary to index the file %s of MIME type %s. Detailed error available at DEBUG level.\", fname, self._getMimeTypes()[0])\n  175              _logger.debug(\"Trace of the failed file indexing attempt.\", exc_info=True)\n  176              return u''\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\document\\wizard\\document_configuration.py:\n   27      _inherit = 'res.config'\n   28  \n   29:     def execute(self, cr, uid, ids, context=None):\n   30          dir_pool = self.pool.get('document.directory')\n   31          data_pool = self.pool.get('ir.model.data')\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\edi\\edi_service.py:\n   40  \n   41      except Exception, e:\n   42:         _logger.exception('Failed to execute EDI method %s with args %r.',\n   43              method_name, method_args)\n   44          raise\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\email_template\\email_template.py:\n  538             :param bool force_send: if True, the generated mail.message is\n  539                  immediately sent after being created, as if the scheduler\n  540:                 was executed for this message only.\n  541             :returns: id of the mail.message that was created\n  542          \"\"\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\event\\event.py:\n   93                          GROUP BY event_id, state\n   94                      \"\"\"\n   95:             self._cr.execute(query, (tuple(self.ids),))\n   96              for event_id, state, num in self._cr.fetchall():\n   97                  event = self.browse(event_id)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\event\\report\\report_event_registration.py:\n   50  \n   51          # TOFIX this request won't select events that have no registration\n   52:         cr.execute(\"\"\" CREATE VIEW report_event_registration AS (\n   53              SELECT\n   54                  e.id::varchar || '/' || coalesce(r.id::varchar,'') AS id,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\fleet\\fleet.py:\n   65          'odometer': fields.function(_get_odometer, fnct_inv=_set_odometer, type='float', string='Odometer Value', help='Odometer measure of the vehicle at the moment of this log'),\n   66          'odometer_unit': fields.related('vehicle_id', 'odometer_unit', type=\"char\", string=\"Unit\", readonly=True),\n   67:         'date' :fields.date('Date',help='Date when the cost has been executed'),\n   68          'contract_id': fields.many2one('fleet.vehicle.log.contract', 'Contract', help='Contract attached to this cost'),\n   69          'auto_generated': fields.boolean('Automatically Generated', readonly=True, required=True),\n   ..\n  243                  search_operator = 'not in'\n  244              today = fields.date.context_today(self, cr, uid, context=context)\n  245:             cr.execute('select cost.vehicle_id, count(contract.id) as contract_number FROM fleet_vehicle_cost cost left join fleet_vehicle_log_contract contract on contract.cost_id = cost.id WHERE contract.expiration_date is not null AND contract.expiration_date < %s AND contract.state IN (\\'open\\', \\'toclose\\') GROUP BY cost.vehicle_id', (today,))\n  246              res_ids = [x[0] for x in cr.fetchall()]\n  247              res.append(('id', search_operator, res_ids))\n  ...\n  259              datetime_today = datetime.datetime.strptime(today, tools.DEFAULT_SERVER_DATE_FORMAT)\n  260              limit_date = str((datetime_today + relativedelta(days=+15)).strftime(tools.DEFAULT_SERVER_DATE_FORMAT))\n  261:             cr.execute('select cost.vehicle_id, count(contract.id) as contract_number FROM fleet_vehicle_cost cost left join fleet_vehicle_log_contract contract on contract.cost_id = cost.id WHERE contract.expiration_date is not null AND contract.expiration_date > %s AND contract.expiration_date < %s AND contract.state IN (\\'open\\', \\'toclose\\') GROUP BY cost.vehicle_id', (today, limit_date))\n  262              res_ids = [x[0] for x in cr.fetchall()]\n  263              res.append(('id', search_operator, res_ids))\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\gamification\\models\\badge.py:\n   98          result = dict((res_id, {'stat_count': 0, 'stat_count_distinct': 0, 'unique_owner_ids': []}) for res_id in ids)\n   99  \n  100:         cr.execute(\"\"\"\n  101              SELECT badge_id, count(user_id) as stat_count,\n  102                  count(distinct(user_id)) as stat_count_distinct,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\gamification\\models\\challenge.py:\n  304          # exclude goals for users that did not connect since the last update\n  305          yesterday = date.today() - timedelta(days=1)\n  306:         cr.execute(\"\"\"SELECT gg.id\n  307                          FROM gamification_goal as gg,\n  308                               gamification_challenge as gc,\n  ...\n  432                          \"\"\".format(date_clause=date_clause)\n  433  \n  434:                 cr.execute(query, query_params)\n  435                  user_with_goal_ids = cr.dictfetchall()\n  436  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\gamification\\models\\goal.py:\n   69                  ('count', 'Automatic: number of records'),\n   70                  ('sum', 'Automatic: sum on a field'),\n   71:                 ('python', 'Automatic: execute a specific Python code'),\n   72              ],\n   73              string=\"Computation Mode\",\n   ..\n  102              help=\"The value to compare with the distinctive field. The expression can contain reference to 'user' which is a browse record of the current user, e.g. user.id, user.partner_id.id...\"),\n  103          'compute_code': fields.text('Python Code',\n  104:             help=\"Python code to be executed for each user. 'result' should contains the new current value. Evaluated user can be access through object.user_id.\"),\n  105          'condition': fields.selection([\n  106                  ('higher', 'The higher the better'),\n  ...\n  312                  # TODO batch execution\n  313                  for goal in goals:\n  314:                     # execute the chosen method\n  315                      cxt = {\n  316                          'self': self.pool.get('gamification.goal'),\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr\\hr.py:\n   62          level = 100\n   63          while len(ids):\n   64:             cr.execute('select distinct parent_id from hr_employee_category where id IN %s', (tuple(ids), ))\n   65              ids = filter(None, map(lambda x:x[0], cr.fetchall()))\n   66              if not level:\n   ..\n  356          level = 100\n  357          while len(ids):\n  358:             cr.execute('SELECT DISTINCT parent_id FROM hr_employee WHERE id IN %s AND parent_id!=id',(tuple(ids),))\n  359              ids = filter(None, map(lambda x:x[0], cr.fetchall()))\n  360              if not level:\n  ...\n  396          level = 100\n  397          while len(ids):\n  398:             cr.execute('select distinct parent_id from hr_department where id IN %s',(tuple(ids),))\n  399              ids = filter(None, map(lambda x:x[0], cr.fetchall()))\n  400              if not level:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr\\res_config_view.xml:\n   28                  <form string=\"Configure Human Resources\" class=\"oe_form_configuration\">\n   29                      <header>\n   30:                         <button string=\"Apply\" type=\"object\" name=\"execute\" class=\"oe_highlight\"/>\n   31                          or\n   32                          <button string=\"Cancel\" type=\"object\" name=\"cancel\" class=\"oe_link\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_attendance\\hr_attendance.py:\n  120          for id in ids:\n  121              result[id] = 'absent'\n  122:         cr.execute('SELECT hr_attendance.action, hr_attendance.employee_id \\\n  123                  FROM ( \\\n  124                      SELECT MAX(name) AS name, employee_id \\\n  ...\n  141          for id in ids:\n  142              result[id] = False\n  143:             cr.execute(\"\"\"select max(name) as name\n  144                          from hr_attendance\n  145                          where action in ('sign_in', 'sign_out') and employee_id = %s\"\"\",(id,))\n  ...\n  163  \n  164      def _action_check(self, cr, uid, emp_id, dt=False, context=None):\n  165:         cr.execute('SELECT MAX(name) FROM hr_attendance WHERE employee_id=%s', (emp_id,))\n  166          res = cr.fetchone()\n  167          return not (res and (res[0]>=(dt or time.strftime('%Y-%m-%d %H:%M:%S'))))\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_attendance\\report\\attendance_errors.py:\n   42  \n   43      def _lst(self, employee_id, dt_from, dt_to, max, *args):\n   44:         self.cr.execute(\"select name as date, create_date, action, create_date-name as delay from hr_attendance where employee_id=%s and to_char(name,'YYYY-mm-dd')<=%s and to_char(name,'YYYY-mm-dd')>=%s and action IN (%s,%s) order by name\", (employee_id, dt_to, dt_from, 'sign_in', 'sign_out'))\n   45          res = self.cr.dictfetchall()\n   46          for r in res:\n   ..\n   57  \n   58      def _lst_total(self, employee_id, dt_from, dt_to, max, *args):\n   59:         self.cr.execute(\"select name as date, create_date, action, create_date-name as delay from hr_attendance where employee_id=%s and to_char(name,'YYYY-mm-dd')<=%s and to_char(name,'YYYY-mm-dd')>=%s and action IN (%s,%s) order by name\", (employee_id, dt_to, dt_from, 'sign_in', 'sign_out'))\n   60          res = self.cr.dictfetchall()\n   61          if not res:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_attendance\\wizard\\hr_attendance_error.py:\n   45          date_from = data_error['init_date']\n   46          date_to = data_error['end_date']\n   47:         cr.execute(\"SELECT id FROM hr_attendance WHERE employee_id IN %s AND to_char(name,'YYYY-mm-dd')<=%s AND to_char(name,'YYYY-mm-dd')>=%s AND action IN %s ORDER BY name\" ,(tuple(context['active_ids']), date_to, date_from, tuple(['sign_in','sign_out'])))\n   48          attendance_ids = [x[0] for x in cr.fetchall()]\n   49          if not attendance_ids:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_evaluation\\hr_evaluation_view.xml:\n  315                      <field name=\"user_to_review_id\"/>\n  316                      <field name=\"request_id\" readonly=\"1\" invisible=\"True\"/>\n  317:                     <button name=\"action_start_survey\" string=\"Answer Survey\" type=\"object\" icon=\"gtk-execute\"  attrs=\"{'readonly':[('request_id','=',False)]}\"/>\n  318                      <button name=\"action_print_survey\" string=\"Print Survey\" type=\"object\" icon=\"gtk-print\"  attrs=\"{'readonly':[('survey_id','=',False)]}\"/>\n  319                      <button name=\"%(mail.action_email_compose_message_wizard)d\" string=\"Send Reminder Email\" icon=\"terp-mail-message-new\" type=\"action\" states=\"waiting_answer\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_evaluation\\report\\hr_evaluation_report.py:\n   65      def init(self, cr):\n   66          tools.drop_view_if_exists(cr, 'hr_evaluation_report')\n   67:         cr.execute(\"\"\"\n   68              create or replace view hr_evaluation_report as (\n   69                   select\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_expense\\hr_expense.py:\n  398          if not ids:\n  399              return {}\n  400:         cr.execute(\"SELECT l.id,COALESCE(SUM(l.unit_amount*l.unit_quantity),0) AS amount FROM hr_expense_line l WHERE id IN %s GROUP BY l.id \",(tuple(ids),))\n  401          res = dict(cr.fetchall())\n  402          return res\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_expense\\report\\hr_expense_report.py:\n   63      def init(self, cr):\n   64          tools.drop_view_if_exists(cr, 'hr_expense_report')\n   65:         cr.execute(\"\"\"\n   66              create or replace view hr_expense_report as (\n   67                   select\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_holidays\\hr_holidays.py:\n  516  \n  517      def _get_remaining_days(self, cr, uid, ids, name, args, context=None):\n  518:         cr.execute(\"\"\"SELECT\n  519                  sum(h.number_of_days) as days,\n  520                  h.employee_id\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_holidays\\report\\holidays_summary_report.py:\n   93          rpt_obj = registry['hr.holidays']\n   94          rml_obj=report_sxw.rml_parse(cr, uid, rpt_obj._name,context)\n   95:         cr.execute(\"SELECT name FROM res_company\")\n   96          res=cr.fetchone()[0]\n   97          date_xml=[]\n   ..\n   99          date_xml +=['<res name=\"%s\" today=\"%s\" />' % (to_xml(res),date_today)]\n  100  \n  101:         cr.execute(\"SELECT id, name, color_name FROM hr_holidays_status ORDER BY id\")\n  102          legend=cr.fetchall()\n  103          today=datetime.datetime.today()\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_holidays\\report\\hr_holidays_report.py:\n   36      def init(self, cr):\n   37          tools.drop_view_if_exists(cr, 'hr_holidays_remaining_leaves_user')\n   38:         cr.execute(\"\"\"\n   39              CREATE or REPLACE view hr_holidays_remaining_leaves_user as (\n   40                   SELECT\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_payroll\\hr_payroll.py:\n  247          for id in ids:\n  248              result.setdefault(id, [])\n  249:         cr.execute('''SELECT pl.slip_id, pl.id FROM hr_payslip_line AS pl \\\n  250                      LEFT JOIN hr_salary_rule_category AS sh on (pl.category_id = sh.id) \\\n  251                      WHERE pl.slip_id in %s \\\n  ...\n  496                      to_date = datetime.now().strftime('%Y-%m-%d')\n  497                  result = 0.0\n  498:                 self.cr.execute(\"SELECT sum(amount) as sum\\\n  499                              FROM hr_payslip as hp, hr_payslip_input as pi \\\n  500                              WHERE hp.employee_id = %s AND hp.state = 'done' \\\n  ...\n  510                      to_date = datetime.now().strftime('%Y-%m-%d')\n  511                  result = 0.0\n  512:                 self.cr.execute(\"SELECT sum(number_of_days) as number_of_days, sum(number_of_hours) as number_of_hours\\\n  513                              FROM hr_payslip as hp, hr_payslip_worked_days as pi \\\n  514                              WHERE hp.employee_id = %s AND hp.state = 'done'\\\n  ...\n  531                  if to_date is None:\n  532                      to_date = datetime.now().strftime('%Y-%m-%d')\n  533:                 self.cr.execute(\"SELECT sum(case when hp.credit_note = False then (pl.total) else (-pl.total) end)\\\n  534                              FROM hr_payslip as hp, hr_payslip_line as pl \\\n  535                              WHERE hp.employee_id = %s AND hp.state = 'done' \\\n  ...\n  951                  res[employee.id] = {'basic': 0.0}\n  952                  continue\n  953:             cr.execute( 'SELECT SUM(wage) '\\\n  954                          'FROM hr_contract '\\\n  955                          'WHERE employee_id = %s '\\\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_payroll\\report\\report_contribution_register.py:\n   50          res = []\n   51          self.regi_total = 0.0\n   52:         self.cr.execute(\"SELECT pl.id from hr_payslip_line as pl \"\\\n   53                          \"LEFT JOIN hr_payslip AS hp on (pl.slip_id = hp.id) \"\\\n   54                          \"WHERE (hp.date_from >= %s) AND (hp.date_to <= %s) \"\\\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_payroll\\report\\report_payslip_details.py:\n   53              ids.append(obj[id].id)\n   54          if ids:\n   55:             self.cr.execute('''SELECT pl.id, pl.category_id FROM hr_payslip_line as pl \\\n   56                  LEFT JOIN hr_salary_rule_category AS rc on (pl.category_id = rc.id) \\\n   57                  WHERE pl.id in %s \\\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_payroll\\wizard\\hr_payroll_payslips_by_employees.xml:\n    9                  <form string=\"Payslips by Employees\">\n   10                      <header>\n   11:                         <button icon=\"gtk-execute\" string=\"Generate\" name=\"compute_sheet\" type=\"object\" class=\"oe_highlight\"  />\n   12                      </header>\n   13                      <group>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_recruitment\\report\\hr_recruitment_report.py:\n   57      def init(self, cr):\n   58          tools.drop_view_if_exists(cr, 'hr_recruitment_report')\n   59:         cr.execute(\"\"\"\n   60              create or replace view hr_recruitment_report as (\n   61                   select\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_timesheet\\report\\hr_timesheet_report.py:\n   60          # self._table = hr_timesheet_report\n   61          tools.drop_view_if_exists(cr, self._table)\n   62:         cr.execute(\"\"\"CREATE or REPLACE VIEW %s as (\n   63              %s\n   64              FROM ( %s )\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_timesheet\\wizard\\hr_timesheet_sign_in_out.py:\n   48      def _get_empid2(self, cr, uid, context=None):\n   49          res = self._get_empid(cr, uid, context=context)\n   50:         cr.execute('select name,action from hr_attendance where employee_id=%s order by name desc limit 1', (res['emp_id'],))\n   51  \n   52          res['server_date'] = time.strftime('%Y-%m-%d %H:%M:%S')\n   ..\n  119      def view_init(self, cr, uid, fields, context=None):\n  120          \"\"\"\n  121:         This function checks for precondition before wizard executes\n  122          @param self: The object pointer\n  123          @param cr: the current row, from the database cursor,\n  ...\n  136          emp_id = self.default_get(cr, uid, ['emp_id'], context)['emp_id']\n  137          # get the latest action (sign_in or out) for this employee\n  138:         cr.execute('select action from hr_attendance where employee_id=%s and action in (\\'sign_in\\',\\'sign_out\\') order by name desc limit 1', (emp_id,))\n  139          res = (cr.fetchone() or ('sign_out',))[0]\n  140          in_out = (res == 'sign_out') and 'in' or 'out'\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_timesheet_invoice\\hr_timesheet_invoice.py:\n   45          res = {}\n   46  \n   47:         cr.execute('SELECT account_id as account_id, l.invoice_id '\n   48                  'FROM hr_analytic_timesheet h LEFT JOIN account_analytic_line l '\n   49                      'ON (h.line_id=l.id) '\n   ..\n  210                  invoices.append(last_invoice)\n  211  \n  212:                 cr.execute(\"\"\"SELECT product_id, user_id, to_invoice, sum(amount), sum(unit_amount), product_uom_id\n  213                          FROM account_analytic_line as line LEFT JOIN account_analytic_journal journal ON (line.journal_id = journal.id)\n  214                          WHERE account_id = %s\n  ...\n  263                      # Compute for lines\n  264                      #\n  265:                     cr.execute(\"SELECT * FROM account_analytic_line WHERE account_id = %s and id IN %s AND product_id=%s and to_invoice=%s ORDER BY account_analytic_line.date\", (account.id, tuple(ids), product_id, factor_id))\n  266  \n  267                      line_ids = cr.dictfetchall()\n  ...\n  283                          curr_line['name'] += \"\\n\" + (\"\\n\".join(map(lambda x: unicode(x) or '',note)))\n  284                      invoice_line_obj.create(cr, uid, curr_line, context=context)\n  285:                     cr.execute(\"update account_analytic_line set invoice_id=%s WHERE account_id = %s and id IN %s\", (last_invoice, account.id, tuple(ids)))\n  286                      self.invalidate_cache(cr, uid, ['invoice_id'], ids, context=context)\n  287  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_timesheet_invoice\\report\\account_analytic_profit.py:\n   91              res[id]['amount_th']+=xxx\n   92              if line.invoice_id:\n   93:                 self.cr.execute('select id from account_analytic_line where invoice_id=%s', (line.invoice_id.id,))\n   94                  tot = 0\n   95                  for lid in self.cr.fetchall():\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_timesheet_invoice\\report\\hr_timesheet_invoice_report.py:\n   44      def init(self, cr):\n   45          drop_view_if_exists(cr, 'report_timesheet_line')\n   46:         cr.execute(\"\"\"\n   47              create or replace view report_timesheet_line as (\n   48                  select\n   ..\n   91      def init(self, cr):\n   92          drop_view_if_exists(cr, 'report_timesheet_user')\n   93:         cr.execute(\"\"\"\n   94              create or replace view report_timesheet_user as (\n   95                  select\n   ..\n  124      def init(self, cr):\n  125          drop_view_if_exists(cr, 'report_timesheet_account')\n  126:         cr.execute(\"\"\"\n  127              create or replace view report_timesheet_account as (\n  128                  select\n  ...\n  157      def init(self, cr):\n  158          drop_view_if_exists(cr, 'report_timesheet_account_date')\n  159:         cr.execute(\"\"\"\n  160              create or replace view report_timesheet_account_date as (\n  161                  select\n  ...\n  189      def init(self, cr):\n  190          drop_view_if_exists(cr, 'report_timesheet_invoice')\n  191:         cr.execute(\"\"\"\n  192              create or replace view report_timesheet_invoice as (\n  193                  select\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_timesheet_invoice\\report\\report_analytic.py:\n   40      def init(self, cr):\n   41          tools.drop_view_if_exists(cr, 'report_analytic_account_close')\n   42:         cr.execute(\"\"\"\n   43              create or replace view report_analytic_account_close as (\n   44                  select\n   ..\n   81      def init(self, cr):\n   82          tools.drop_view_if_exists(cr, 'report_account_analytic_line_to_invoice')\n   83:         cr.execute(\"\"\"\n   84              CREATE OR REPLACE VIEW report_account_analytic_line_to_invoice AS (\n   85                  SELECT\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_timesheet_invoice\\wizard\\hr_timesheet_invoice_create.py:\n   43      def view_init(self, cr, uid, fields, context=None):\n   44          \"\"\"\n   45:         This function checks for precondition before wizard executes\n   46          @param self: The object pointer\n   47          @param cr: the current row, from the database cursor,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_timesheet_sheet\\hr_timesheet_sheet.py:\n  222              new_user_id = forced_user_id or sheet.employee_id.user_id and sheet.employee_id.user_id.id\n  223              if new_user_id:\n  224:                 cr.execute('SELECT id \\\n  225                      FROM hr_timesheet_sheet_sheet \\\n  226                      WHERE (date_from <= %s and %s <= date_to) \\\n  ...\n  329          ts_line_ids = []\n  330          for ts in self.browse(cr, uid, ids, context=context):\n  331:             cr.execute(\"\"\"\n  332                      SELECT l.id\n  333                          FROM hr_analytic_timesheet l\n  ...\n  400          attendance_ids = []\n  401          for ts in self.browse(cr, uid, ids, context=context):\n  402:             cr.execute(\"\"\"\n  403                          SELECT a.id\n  404                            FROM hr_attendance a\n  ...\n  543  \n  544      def init(self, cr):\n  545:         cr.execute(\"\"\"create or replace view hr_timesheet_sheet_sheet_day as\n  546              SELECT\n  547                  id,\n  ...\n  626  \n  627      def init(self, cr):\n  628:         cr.execute(\"\"\"create or replace view hr_timesheet_sheet_sheet_account as (\n  629              select\n  630                  min(hrt.id) as id,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\im_chat\\im_chat.py:\n  337  \n  338          # first query to find online employee\n  339:         cr.execute('''SELECT U.id as id, P.name as name, COALESCE(S.status, 'offline') as im_status\n  340                  FROM im_chat_presence S\n  341                      JOIN res_users U ON S.user_id = U.id\n  ...\n  352          # second query to find other online people\n  353          if(len(result) < limit):\n  354:             cr.execute('''SELECT U.id as id, P.name as name, COALESCE(S.status, 'offline') as im_status\n  355                  FROM im_chat_presence S\n  356                      JOIN res_users U ON S.user_id = U.id\n  ...\n  366          # third query to find all other people\n  367          if(len(result) < limit):\n  368:             cr.execute('''SELECT U.id as id, P.name as name, COALESCE(S.status, 'offline') as im_status\n  369                  FROM res_users U\n  370                      LEFT JOIN im_chat_presence S ON S.user_id = U.id\n  ...\n  403      def post(self, uuid, message_type, message_content):\n  404          registry, cr, uid, context = request.registry, request.cr, request.session.uid, request.context\n  405:         # execute the post method as SUPERUSER_ID\n  406          message_id = registry[\"im_chat.message\"].post(cr, openerp.SUPERUSER_ID, uid, uuid, message_type, message_content, context=context)\n  407          return message_id\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\im_livechat\\views\\im_livechat.xml:\n   74  \n   75  \n   76:         <!-- Template rendering all the scripts required to execute the Livechat from an external page (which not contain Odoo) -->\n   77          <template id=\"external_loader\" name=\"All the scripts to launch the LiveSupport from an external Web Page\">\n   78              <!-- css style -->\n   ..\n   84          </template>\n   85  \n   86:         <!-- Template rendering all the scripts required to execute the Livechat from a page containing Odoo -->\n   87          <template id=\"internal_loader\" name=\"All the scripts to launch the LiveSupport from an internal Web Page\">\n   88              <!-- css style -->\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\knowledge\\res_config_view.xml:\n    9                  <form string=\"Configure Knowledge\" class= \"oe_form_configuration\">\n   10                      <header>\n   11:                         <button string=\"Apply\" type=\"object\" name=\"execute\" class=\"oe_highlight\"/>\n   12                          or\n   13                          <button string=\"Cancel\" type=\"object\" name=\"cancel\" class=\"oe_link\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_be\\wizard\\l10n_be_partner_vat_listing.py:\n   67          if not partner_ids:\n   68               raise osv.except_osv(_('Error'),_('No belgium contact with a VAT number in your database.'))\n   69:         cr.execute(\"\"\"SELECT sub1.partner_id, sub1.name, sub1.vat, sub1.turnover, sub2.vat_amount\n   70                  FROM (SELECT l.partner_id, p.name, p.vat, SUM(CASE WHEN c.code ='49' THEN -l.tax_amount ELSE l.tax_amount END) as turnover\n   71                        FROM account_move_line l\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_be\\wizard\\l10n_be_partner_vat_listing.xml:\n   53                <separator colspan=\"4\"/>\n   54                <group colspan=\"4\">\n   55:                 <button colspan=\"2\" name=\"create_xml\" string=\"Create XML\" type=\"object\" icon=\"gtk-execute\"/>\n   56                  <button colspan=\"2\" name=\"print_vatlist\" string=\"Print\" type=\"object\"  icon=\"gtk-print\"/>\n   57                </group>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_be\\wizard\\l10n_be_vat_intra.py:\n  171          #tax code 48xxx: credite note on tax code xxx\n  172          codes = ('44', '46L', '46T', '48s44', '48s46L', '48s46T')\n  173:         cr.execute('''SELECT p.name As partner_name, l.partner_id AS partner_id, p.vat AS vat,\n  174                        (CASE WHEN t.code = '48s44' THEN '44'\n  175                              WHEN t.code = '48s46L' THEN '46L'\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_be_coda\\wizard\\account_coda_import.py:\n  102                      # The following request try to find the Account Number using a 'like' operator.\n  103                      # So, if the Account Number is stored with IBAN code, it can be found thanks to this.\n  104:                     cr.execute(\"select id from res_partner_bank where replace(replace(acc_number,' ',''),'-','') like %s\", ('%' + statement['acc_number'] + '%',))\n  105                  else:\n  106                      # This case is necessary to avoid cases like the Account Number in the CODA file is set to a single or few digits,\n  107                      # and so a 'like' operator would return the first account number in the database which matches.\n  108:                     cr.execute(\"select id from res_partner_bank where replace(replace(acc_number,' ',''),'-','') = %s\", (statement['acc_number'],))\n  109                  bank_ids = [id[0] for id in cr.fetchall()]\n  110                  # Filter bank accounts which are not allowed\n  ...\n  243              statement['coda_note'] = ''\n  244              balance_start_check_date = (len(statement['lines']) > 0 and statement['lines'][0]['entryDate']) or statement['date']\n  245:             cr.execute('SELECT balance_end_real \\\n  246                  FROM account_bank_statement \\\n  247                  WHERE journal_id = %s and date <= %s \\\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_fr\\fr_fiscal_templates.xml:\n    5      <!-- To solve bug 1240265, we have to delete all fiscal position templates before each update.\n    6           The valid ones will be re-created later during the update.\n    7:          /!\\ This must be executed *before* loading the fiscal position templates!! -->\n    8      <delete model=\"account.fiscal.position.template\" search=\"[('chart_template_id','=',ref('l10n_fr_pcg_chart_template'))]\"/>\n    9  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_fr\\report\\base_report.py:\n   47  \n   48          if period_ids:\n   49:             self.cr.execute(\"SELECT MIN(date_start) AS date_start, MAX(date_stop) AS date_stop FROM account_period WHERE id = ANY(%s)\", (period_ids,))\n   50              dates = self.cr.dictfetchall()\n   51          else:\n   ..\n   55              self._set_variable('date_stop', dates[0]['date_stop'])\n   56  \n   57:         self.cr.execute(\"SELECT l10n_fr_line.code,definition FROM l10n_fr_line LEFT JOIN l10n_fr_report ON l10n_fr_report.id=report_id WHERE l10n_fr_report.code=%s\",(name,))\n   58          datas = self.cr.dictfetchall()\n   59          for line in datas:\n   ..\n   94                  \" WHERE \"+query_cond+closed_cond+\" AND aml.state='valid' AND aml.period_id = ANY(%s) GROUP BY code\"\n   95              query_params.append(list(period_ids))\n   96:             self.cr.execute(query, query_params)\n   97  \n   98              lines =self.cr.dictfetchall()\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_in_hr_payroll\\report\\payment_advice_report.py:\n   53      def init(self, cr):\n   54          tools.drop_view_if_exists(cr, 'payment_advice_report')\n   55:         cr.execute(\"\"\"\n   56              create or replace view payment_advice_report as (\n   57                  select\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_in_hr_payroll\\report\\payslip_report.py:\n   52      def init(self, cr):\n   53          tools.drop_view_if_exists(cr, 'payslip_report')\n   54:         cr.execute(\"\"\"\n   55              create or replace view payslip_report as (\n   56                  select\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_in_hr_payroll\\report\\report_hr_salary_employee_bymonth.py:\n   72          category_id = form.get('category_id', [])\n   73          category_id = category_id and category_id[0] or False\n   74:         self.cr.execute(\"select to_char(date_to,'mm-yyyy') as to_date ,sum(pl.total) \\\n   75                               from hr_payslip_line as pl \\\n   76                               left join hr_payslip as p on pl.slip_id = p.id \\\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_in_hr_payroll\\report\\report_hr_yearly_salary_detail.py:\n  104          res = []\n  105          salaries = {}\n  106:         self.cr.execute('''SELECT rc.code, pl.name, sum(pl.total), \\\n  107                  to_char(date_to,'mm-yyyy') as to_date  FROM hr_payslip_line as pl \\\n  108                  LEFT JOIN hr_salary_rule_category AS rc on (pl.category_id = rc.id) \\\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_multilang\\l10n_multilang.py:\n   79          return True\n   80  \n   81:     def execute(self, cr, uid, ids, context=None):\n   82          if not context:\n   83              context = {}\n   84          # remove the lang to get the untranslated value\n   85          ctx = dict(context, lang=None)\n   86:         res = super(wizard_multi_charts_accounts, self).execute(cr, uid, ids, context=ctx)\n   87  \n   88          obj_multi = self.browse(cr, uid, ids[0], context=context)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_ro\\res_partner.py:\n   37          # checking if available and emmited by the Ministry of Finance, only online on their website.\n   38          \n   39:         cr.execute(\"\"\"\n   40              DROP INDEX IF EXISTS res_partner_vat_uniq_for_companies;\n   41              DROP INDEX IF EXISTS res_partner_nrc_uniq_for_companies;\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\lunch\\lunch.py:\n  162          \"\"\" \n  163          this method catch unexisting method call and if it starts with\n  164:         add_preference_'n' we execute the add_preference method with \n  165          'n' as parameter \n  166          \"\"\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\lunch\\lunch_view.xml:\n  317                <p>\n  318                  Alerts are used to warn employee from possible issues concerning the lunch orders.\n  319:                 To create a lunch alert you have to define its recurrency, the time interval during which the alert should be executed and the message to display.\n  320              </p>\n  321              <p>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\lunch\\report\\report_lunch_order.py:\n   42      def init(self, cr):\n   43          tools.drop_view_if_exists(cr, 'report_lunch_order_line')\n   44:         cr.execute(\"\"\"\n   45              create or replace view report_lunch_order_line as (\n   46                 select\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\lunch\\tests\\test_lunch.py:\n   85          self.test_01_lunch_order()\n   86          #We have a confirmed order with its associate cashmove\n   87:         #We execute the cancel function\n   88          self.order_one.cancel()\n   89          self.order_one = self.lunch_order_line.browse(cr,uid,self.new_id_order_line,context=None)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\mail_alias.py:\n  217          # Finally attempt to reinstate the missing constraint\n  218          try:\n  219:             cr.execute('ALTER TABLE %s ALTER COLUMN alias_id SET NOT NULL' % (child_table_name))\n  220          except Exception:\n  221              _logger.warning(\"Table '%s': unable to set a NOT NULL constraint on column '%s' !\\n\"\\\n  222:                             \"If you want to have it, you should update the records and execute manually:\\n\"\\\n  223                              \"ALTER TABLE %s ALTER COLUMN %s SET NOT NULL\",\n  224                              child_table_name, 'alias_id', child_table_name, 'alias_id')\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\mail_followers.py:\n   94  \n   95      def init(self, cr):\n   96:         cr.execute('SELECT indexname FROM pg_indexes WHERE indexname = %s', ('mail_notification_partner_id_read_starred_message_id',))\n   97          if not cr.fetchone():\n   98:             cr.execute('CREATE INDEX mail_notification_partner_id_read_starred_message_id ON mail_notification (partner_id, is_read, starred, message_id)')\n   99  \n  100      def get_partners_to_email(self, cr, uid, ids, message, context=None):\n  ...\n  230              :param bool force_send: if True, the generated mail.mail is\n  231                  immediately sent after being created, as if the scheduler\n  232:                 was executed for this message only.\n  233              :param bool user_signature: if True, the generated mail.mail body is\n  234                  the body of the related mail.message with the author's signature\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\mail_group_menu.py:\n   42                                               context=context, count=False)\n   43          if ids:\n   44:             cr.execute(\"\"\"\n   45                  SELECT id FROM ir_ui_menu m\n   46                  WHERE m.mail_group_id IS NULL OR EXISTS (\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\mail_message.py:\n  585  \n  586      def init(self, cr):\n  587:         cr.execute(\"\"\"SELECT indexname FROM pg_indexes WHERE indexname = 'mail_message_model_res_id_idx'\"\"\")\n  588          if not cr.fetchone():\n  589:             cr.execute(\"\"\"CREATE INDEX mail_message_model_res_id_idx ON mail_message (model, res_id)\"\"\")\n  590  \n  591      def _find_allowed_model_wise(self, cr, uid, doc_model, doc_dict, context=None):\n  ...\n  636          super(mail_message, self).check_access_rights(cr, access_rights_uid or uid, 'read')\n  637  \n  638:         cr.execute(\"\"\"SELECT DISTINCT m.id, m.model, m.res_id, m.author_id, n.partner_id\n  639              FROM \"%s\" m LEFT JOIN \"mail_notification\" n\n  640              ON n.message_id=m.id AND n.partner_id = (%%s)\n  ...\n  700          # Read mail_message.ids to have their values\n  701          message_values = dict((res_id, {}) for res_id in ids)\n  702:         cr.execute('SELECT DISTINCT id, model, res_id, author_id, parent_id FROM \"%s\" WHERE id = ANY (%%s)' % self._table, (ids,))\n  703          for id, rmod, rid, author_id, parent_id in cr.fetchall():\n  704              message_values[id] = {'model': rmod, 'res_id': rid, 'author_id': author_id, 'parent_id': parent_id}\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\mail_thread.py:\n  158  \n  159          # search for unread messages, directly in SQL to improve performances\n  160:         cr.execute(\"\"\"  SELECT m.res_id FROM mail_message m\n  161                          RIGHT JOIN mail_notification n\n  162                          ON (n.message_id = m.id AND n.partner_id = %s AND (n.is_read = False or n.is_read IS NULL))\n  ...\n 1913          \"\"\" Set as unread. \"\"\"\n 1914          partner_id = self.pool.get('res.users').browse(cr, uid, uid, context=context).partner_id.id\n 1915:         cr.execute('''\n 1916              UPDATE mail_notification SET\n 1917                  is_read=false\n ....\n 1926          \"\"\" Set as read. \"\"\"\n 1927          partner_id = self.pool.get('res.users').browse(cr, uid, uid, context=context).partner_id.id\n 1928:         cr.execute('''\n 1929              UPDATE mail_notification SET\n 1930                  is_read=true\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\static\\scripts\\openerp_mailgate.py:\n   92  \n   93      def __call__(self, *request, **kwargs):\n   94:         return self.rpc.execute(self.dbname, self.user_id, self.passwd, *request, **kwargs)\n   95  \n   96  class EmailParser(object):\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\wizard\\mail_compose_message.py:\n  149              # read mail_compose_message.ids to have their values\n  150              message_values = {}\n  151:             cr.execute('SELECT DISTINCT id, model, res_id FROM \"%s\" WHERE id = ANY (%%s) AND res_id = 0' % self._table, (ids,))\n  152              for id, rmod, rid in cr.fetchall():\n  153                  message_values[id] = {'model': rmod, 'res_id': rid}\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\marketing\\res_config_view.xml:\n    9                  <form string=\"Configure Marketing\" class=\"oe_form_configuration\">\n   10                      <header>\n   11:                         <button string=\"Apply\" type=\"object\" name=\"execute\" class=\"oe_highlight\"/>\n   12                          or\n   13                          <button string=\"Cancel\" type=\"object\" name=\"cancel\" class=\"oe_link\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\marketing_campaign\\marketing_campaign.py:\n  385          'start': fields.boolean('Start', help= \"This activity is launched when the campaign starts.\", select=True),\n  386          'condition': fields.text('Condition', size=256, required=True,\n  387:                                  help=\"Python expression to decide whether the activity can be executed, otherwise it will be deleted or cancelled.\"\n  388                                   \"The expression may use the following [browsable] variables:\\n\"\n  389                                   \"   - activity: the campaign activity\\n\"\n  ...\n  393                                   \"...- re: Python regular expression module\"),\n  394          'type': fields.selection(_action_types, 'Type', required=True,\n  395:                                   help=\"\"\"The type of action to execute when an item enters this activity, such as:\n  396     - Email: send an email using a predefined email template\n  397     - Report: print an existing Report defined on the resource item and save it into a specific directory\n  398:    - Custom Action: execute a predefined action, e.g. to modify the fields of the resource record\n  399    \"\"\"),\n  400          'email_template_id': fields.many2one('email.template', \"Email Template\", help='The email to send when this activity is activated'),\n  ...\n  415                                help='An activity with a signal can be called programmatically. Be careful, the workitem is always created when a signal is sent'),\n  416          'keep_if_condition_not_met': fields.boolean(\"Don't Delete Workitems\",\n  417:                                                     help=\"By activating this option, workitems that aren't executed because the condition is not met are marked as cancelled instead of being deleted.\")\n  418      }\n  419  \n  ...\n  597          assert condition_name, \"Invalid search domain for marketing_campaign_workitem.res_name. It should use 'res_name'\"\n  598  \n  599:         cr.execute(\"\"\"select w.id, w.res_id, m.model  \\\n  600                                  from marketing_campaign_workitem w \\\n  601                                      left join marketing_campaign_activity a on (a.id=w.activity_id)\\\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\marketing_campaign\\report\\campaign_analysis.py:\n   73      def init(self, cr):\n   74          tools.drop_view_if_exists(cr, 'campaign_analysis')\n   75:         cr.execute(\"\"\"\n   76              create or replace view campaign_analysis as (\n   77              select\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mass_mailing\\models\\mass_mailing.py:\n  126          \"\"\" Compute statistics of the mass mailing campaign \"\"\"\n  127          results = {}\n  128:         cr.execute(\"\"\"\n  129              SELECT\n  130                  c.id as campaign_id,\n  ...\n  307          \"\"\" Compute statistics of the mass mailing \"\"\"\n  308          results = {}\n  309:         cr.execute(\"\"\"\n  310              SELECT\n  311                  m.id as mailing_id,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mass_mailing\\models\\mass_mailing_report.py:\n   31          various mailing performed. \"\"\"\n   32          tools.drop_view_if_exists(cr, 'mail_statistics_report')\n   33:         cr.execute(\"\"\"\n   34              CREATE OR REPLACE VIEW mail_statistics_report AS (\n   35                  SELECT\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\membership\\membership.py:\n   74          \"\"\"\n   75  \n   76:         cr.execute('''\n   77           SELECT MIN(ml.date_to - ai.date_invoice)\n   78               FROM membership_membership_line ml\n   ..\n  102          inv_obj = self.pool.get('account.invoice')\n  103          for line in self.browse(cr, uid, ids, context=context):\n  104:             cr.execute('''\n  105              SELECT i.state, i.id FROM\n  106              account_invoice i\n  ...\n  371          level = 100\n  372          while len(ids):\n  373:             cr.execute('SELECT DISTINCT associate_member FROM res_partner WHERE id IN %s', (tuple(ids),))\n  374              ids = filter(None, map(lambda x:x[0], cr.fetchall()))\n  375              if not level:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\membership\\report\\report_membership.py:\n   61          '''Create the view'''\n   62          tools.drop_view_if_exists(cr, 'report_membership')\n   63:         cr.execute(\"\"\"\n   64          CREATE OR REPLACE VIEW report_membership AS (\n   65          SELECT\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\akun.py:\n  531                      elif semuahasilsearch.normaldi == 'kredit':\n  532                          saldoawal = round((self.env['mmr.saveakundetil'].search([('idsaveakun', '=', saveakunterakhir.id), ('idakun', '=', semuahasilsearch.id)], limit=1).kredit - self.env['mmr.saveakundetil'].search([('idsaveakun', '=', saveakunterakhir.id), ('idakun', '=', semuahasilsearch.id)], limit=1).debit), 2)\n  533:                     self.env.cr.execute('SELECT id FROM mmr_akundetil where tanggal>%s and idakun=%s', [saveakunterakhir.tanggal, semuahasilsearch.id])\n  534                      listakundetil = self.env.cr.fetchall()\n  535                      for eachlistakundetil in listakundetil:\n  536                          listakundetilid.append(eachlistakundetil[0])\n  537                  else:\n  538:                     self.env.cr.execute('SELECT id FROM mmr_akundetil where idakun=%s', [semuahasilsearch.id])\n  539                      listakundetil = self.env.cr.fetchall()\n  540                      for eachlistakundetil in listakundetil:\n  ...\n  587                          raise osv.except_osv(_('Tidak Dapat Melanjutkan'), _(\"Ada jurnal pembayaran yang belum disetujui\"))\n  588  \n  589:                     self.env.cr.execute('SELECT debit FROM mmr_akundetil where id=%s', [semuaakundetil.id])\n  590                      semuaakundetildebit = round(self.env.cr.fetchone()[0], 2)\n  591:                     self.env.cr.execute('SELECT kredit FROM mmr_akundetil where id=%s', [semuaakundetil.id])\n  592                      semuaakundetilkredit = round(self.env.cr.fetchone()[0], 2)\n  593  \n  ...\n  978      WHERE date_part('year', tanggal) = %s AND date_part('month', tanggal) = %s\n  979      \"\"\"% (objini.tanggal[0:4], objini.tanggal[5:7])\n  980:     cr.execute(sqlQuery)\n  981      hasilquery = cr.dictfetchall()\n  982      \n  ...\n  996      WHERE date_part('year', tanggal) = %s AND date_part('month', tanggal) = %s\n  997      \"\"\"% (objini.tanggal[0:4], objini.tanggal[5:7])\n  998:     cr.execute(sqlQuery)\n  999      hasilquery = cr.dictfetchall()\n 1000      \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\pembelian.py:\n  122              WHERE supplier = %s AND date_part('year', waktu) = %s AND tanpafaktur = %s AND tukarbarang = %s\n  123              \"\"\"% (supplier, waktu[0:4], tanpafaktur, tukarbarang)\n  124:             cr.execute(sqlQuery)\n  125              hasilquery = cr.dictfetchall()\n  126              \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\penjualan.py:\n  231              WHERE date_part('year', tanggal) = %s AND date_part('month', tanggal) = %s AND tanpafaktur = %s AND tukarbarang = %s\n  232              \"\"\"% (tanggal[0:4], tanggal[5:7], tanpafaktur, tukarbarang)\n  233:             cr.execute(sqlQuery)\n  234              hasilquery = cr.dictfetchall()\n  235              \n  ...\n  280              WHERE date_part('year', tanggal) = %s AND date_part('month', tanggal) = %s AND tanpafaktur = %s AND tukarbarang = %s\n  281              \"\"\"% (tanggal[0:4], tanggal[5:7], tanpafaktur, tukarbarang)\n  282:             cr.execute(sqlQuery)\n  283              hasilquery = cr.dictfetchall()\n  284              \n  ...\n  607          WHERE date_part('year', tanggalterbit) = %s AND date_part('month', tanggalterbit) = %s\n  608          \"\"\"% (objini.tanggalterbit[0:4], objini.tanggalterbit[5:7])\n  609:         cr.execute(sqlQuery)\n  610          hasilquery = cr.dictfetchall()\n  611          \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mrp\\report\\mrp_report.py:\n   36  \n   37      def init(self, cr):\n   38:         cr.execute(\"\"\"\n   39              create or replace view report_workcenter_load as (\n   40                  SELECT\n   ..\n   68  \n   69      def init(self, cr):\n   70:         cr.execute(\"\"\"\n   71              create or replace view report_mrp_inout as (\n   72                  select\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mrp\\report\\workcenter_load.py:\n  103          assert len(ids), 'You should provide some ids!'\n  104          colors = choice_colors(len(ids))\n  105:         cr.execute(\n  106              \"SELECT MAX(mrp_production.date_planned) AS stop,MIN(mrp_production.date_planned) AS start \"\\\n  107              \"FROM mrp_workcenter, mrp_production, mrp_production_workcenter_line \"\\\n  ...\n  142          bar_plot.fill_styles.reset();\n  143          # select workcenters\n  144:         cr.execute(\n  145              \"SELECT mw.id, rs.name FROM mrp_workcenter mw, resource_resource rs \" \\\n  146              \"WHERE mw.id IN %s and mw.resource_id=rs.id \" \\\n  ...\n  152              vals = []\n  153              for workcenter in workcenters:\n  154:                 cr.execute(\"SELECT SUM(mrp_production_workcenter_line.hour) AS hours, SUM(mrp_production_workcenter_line.cycle) AS cycles, \\\n  155                                  resource_resource.name AS name, mrp_workcenter.id AS id \\\n  156                              FROM mrp_production_workcenter_line, mrp_production, mrp_workcenter, resource_resource \\\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mrp\\res_config_view.xml:\n   20                  <form string=\"Configure Manufacturing\" class= \"oe_form_configuration\">\n   21                      <header>\n   22:                         <button string=\"Apply\" type=\"object\" name=\"execute\" class=\"oe_highlight\"/>\n   23                          or\n   24                          <button string=\"Cancel\" type=\"object\" name=\"cancel\" class=\"oe_link\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mrp_operations\\report\\mrp_workorder_analysis.py:\n   43      def init(self, cr):\n   44          tools.drop_view_if_exists(cr, 'mrp_workorder')\n   45:         cr.execute(\"\"\"\n   46              create or replace view mrp_workorder as (\n   47                  select\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\payment_ogone\\data\\ogone.py:\n  420      '60001087': \"book account number not numeric\",\n  421      '60001090': \"cancelled on request\",\n  422:     '60001091': \"cancellation order executed\",\n  423      '60001092': \"cancelled instead of bended\",\n  424      '60001093': \"book account number is a shortened account number\",\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\payment_ogone\\models\\ogone.py:\n  385          pass\n  386  \n  387:     def ogone_s2s_execute(self, cr, uid, id, values, context=None):\n  388          \"\"\"\n  389           .. versionadded:: pre-v8 saas-3\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\payment_ogone\\tests\\test_ogone.py:\n  203          self.assertIn('OPENERP', tx.partner_reference, 'ogone: wrong partner reference after creating an alias')\n  204  \n  205:         res = self.payment_transaction.ogone_s2s_execute(cr, uid, tx_id, {}, context=context)\n  206          # print res\n  207  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\payment_paypal\\models\\paypal.py:\n   67      def _migrate_paypal_account(self, cr, uid, context=None):\n   68          \"\"\" COMPLETE ME \"\"\"\n   69:         cr.execute('SELECT id, paypal_account FROM res_company')\n   70          res = cr.fetchall()\n   71          for (company_id, company_paypal_account) in res:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\point_of_sale\\report\\pos_details.py:\n   30          res={}\n   31          if inv_id:\n   32:             self.cr.execute(\"select number from account_invoice as ac where id = %s\", (inv_id,))\n   33              res = self.cr.fetchone()\n   34              return res[0] or 'Draft'\n   ..\n  120                  for r in st_id:\n  121                      a_l.append(r['id'])\n  122:                 self.cr.execute(\"select aj.name,sum(amount) from account_bank_statement_line as absl,account_bank_statement as abs,account_journal as aj \" \\\n  123                                  \"where absl.statement_id = abs.id and abs.journal_id = aj.id  and absl.id IN %s \" \\\n  124                                  \"group by aj.name \",(tuple(a_l),))\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\point_of_sale\\report\\pos_lines.py:\n   45  \n   46      def __taxes__(self, obj):\n   47:         self.cr.execute ( \" Select acct.name from pos_order as po \" \\\n   48                                \" LEFT JOIN pos_order_line as pol ON po.id = pol.order_id \" \\\n   49                                \" LEFT JOIN product_taxes_rel as ptr ON pol.product_id = ptr.prod_id \" \\\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\point_of_sale\\report\\pos_order_report.py:\n   50      def init(self, cr):\n   51          tools.drop_view_if_exists(cr, 'report_pos_order')\n   52:         cr.execute(\"\"\"\n   53              create or replace view report_pos_order as (\n   54                  select\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\point_of_sale\\report\\pos_payment_report.py:\n   40          data={}\n   41          sql = \"\"\" select id from pos_order where id = %d\"\"\"%(obj.id)\n   42:         self.cr.execute(sql)\n   43          if self.cr.fetchone():\n   44:             self.cr.execute (\"select pt.name,pp.default_code as code,pol.qty,pu.name as uom,pol.discount,pol.price_unit, \" \\\n   45                                   \"(pol.price_unit * pol.qty * (1 - (pol.discount) / 100.0)) as total  \" \\\n   46                                   \"from pos_order as po,pos_order_line as pol,product_product as pp,product_template as pt, product_uom as pu \" \\\n   ..\n   49              data=self.cr.dictfetchall()\n   50          else:\n   51:             self.cr.execute (\"select pt.name,pp.default_code as code,pol.qty,pu.name as uom,pol.discount,pol.price_unit, \" \\\n   52                                   \"(pol.price_unit * pol.qty * (1 - (pol.discount) / 100.0)) as total  \" \\\n   53                                   \"from pos_order as po,pos_order_line as pol,product_product as pp,product_template as pt, product_uom as pu  \" \\\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\point_of_sale\\report\\pos_receipt.py:\n   51      def netamount(self, order_line_id):\n   52          sql = 'select (qty*price_unit) as net_price from pos_order_line where id = %s'\n   53:         self.cr.execute(sql, (order_line_id,))\n   54          res = self.cr.fetchone()\n   55          return res[0]\n   ..\n   57      def discount(self, order_id):\n   58          sql = 'select discount, price_unit, qty from pos_order_line where order_id = %s '\n   59:         self.cr.execute(sql, (order_id,))\n   60          res = self.cr.fetchall()\n   61          dsum = 0\n   ..\n   71                          LEFT JOIN account_journal as aj ON aj.id = abs.journal_id\n   72                          WHERE absl.pos_statement_id =%d\"\"\"%(order_id)\n   73:         self.cr.execute(sql)\n   74          data = self.cr.dictfetchall()\n   75          return data\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\point_of_sale\\report\\pos_report.py:\n   42      def init(self, cr):\n   43          tools.drop_view_if_exists(cr, 'report_transaction_pos')\n   44:         cr.execute(\"\"\"\n   45              create or replace view report_transaction_pos as (\n   46                 select\n   ..\n   88      def init(self, cr):\n   89          tools.drop_view_if_exists(cr, 'report_sales_by_user_pos')\n   90:         cr.execute(\"\"\"\n   91              create or replace view report_sales_by_user_pos as (\n   92                  select\n   ..\n  120      def init(self, cr):\n  121          tools.drop_view_if_exists(cr, 'report_sales_by_user_pos_month')\n  122:         cr.execute(\"\"\"\n  123              create or replace view report_sales_by_user_pos_month as (\n  124                  select\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\point_of_sale\\report\\pos_users_product.py:\n   41          data={}\n   42          sql1=\"\"\" SELECT distinct(o.id) from account_bank_statement s, account_bank_statement_line l,pos_order o,pos_order_line i where  i.order_id=o.id and o.state='paid' and l.statement_id=s.id and l.pos_statement_id=o.id and s.id=%d\"\"\"%(o.id)\n   43:         self.cr.execute(sql1)\n   44          data = self.cr.dictfetchall()\n   45          a_l=[]\n   ..\n   48          if len(a_l):\n   49              sql2=\"\"\"SELECT sum(qty) as qty,l.price_unit*sum(l.qty) as amt,t.name as name, p.default_code as code, pu.name as uom from product_product p, product_template t,product_uom pu,pos_order_line l where order_id = %d and p.product_tmpl_id=t.id and l.product_id=p.id and pu.id=t.uom_id group by t.name,p.default_code,pu.name,l.price_unit\"\"\"%(o.id)\n   50:             self.cr.execute(sql2)\n   51              data = self.cr.dictfetchall()\n   52          for d in data:\n   ..\n   61                                      where abs.user_id = ru.id\n   62                                      and abs.id = %d\"\"\"%(o.id)\n   63:             self.cr.execute(sql)\n   64              data = self.cr.fetchone()\n   65              if data:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\portal\\mail_message.py:\n   55          group_user_id = self.pool.get(\"ir.model.data\").get_object_reference(cr, uid, 'base', 'group_user')[1]\n   56          if group_user_id not in [group.id for group in group_ids]:\n   57:             cr.execute('SELECT DISTINCT id FROM \"%s\" WHERE type = %%s AND subtype_id IS NULL AND id = ANY (%%s)' % (self._table), ('comment', ids,))\n   58              if cr.fetchall():\n   59                  raise orm.except_orm(_('Access Denied'),\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\procurement\\__openerp__.py:\n   36  rule.  When a procurement is created, it is confirmed.  When a rule is found,\n   37  it will be put in running state.  After, it will check if what needed to be done\n   38: for the rule has been executed.  Then it will go to the done state.  A procurement\n   39  can also go into exception, for example when it can not find a rule and it can be cancelled.\n   40  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\procurement\\wizard\\schedulers_all.py:\n   51              try:\n   52                  with tools.mute_logger('openerp.sql_db'):\n   53:                     new_cr.execute(\"SELECT id FROM ir_cron WHERE id = %s FOR UPDATE NOWAIT\", (scheduler_cron_id,))\n   54              except Exception:\n   55                  _logger.info('Attempt to run procurement scheduler aborted, as already running')\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\product\\pricelist.py:\n  147              if limit:\n  148                  query += \" LIMIT %(limit)s\"\n  149:             cr.execute(query, query_args)\n  150              ids = [r[0] for r in cr.fetchall()]\n  151              # regular search() to apply ACLs - may limit results below limit in some cases\n  ...\n  231  \n  232          # Load all rules\n  233:         cr.execute(\n  234              'SELECT i.id '\n  235              'FROM product_pricelist_item AS i '\n  ...\n  404                  where.append(\"((date_start<='%s') or (date_start is null))\" % (pricelist_version.date_end,))\n  405  \n  406:             cursor.execute('SELECT id ' \\\n  407                      'FROM product_pricelist_version ' \\\n  408                      'WHERE '+' and '.join(where) + (where and ' and ' or '')+\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\product\\product.py:\n 1210  \n 1211      def _get_1st_ul(self, cr, uid, context=None):\n 1212:         cr.execute('select id from product_ul order by id asc limit 1')\n 1213          res = cr.fetchone()\n 1214          return (res and res[0]) or False\n ....\n 1279  \n 1280      def _check_main_currency_rounding(self, cr, uid, ids, context=None):\n 1281:         cr.execute('SELECT digits FROM decimal_precision WHERE name like %s',('Account',))\n 1282          digits = cr.fetchone()\n 1283          if digits and len(digits):\n ....\n 1298  \n 1299      def _check_main_currency_rounding(self, cr, uid, ids, context=None):\n 1300:         cr.execute('SELECT id, digits FROM decimal_precision WHERE name like %s',('Account',))\n 1301          res = cr.fetchone()\n 1302          if res and len(res):\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\product_margin\\product_margin.py:\n   72                  \"\"\"\n   73              invoice_types = ('out_invoice', 'in_refund')\n   74:             cr.execute(sqlstr, (val.id, states, invoice_types, date_from, date_to, company_id))\n   75              result = cr.fetchall()[0]\n   76              res[val.id]['sale_avg_price'] = result[0] and result[0] or 0.0\n   ..\n   84              prod = prod_obj.browse(cr, uid, val.id, context=ctx)\n   85              invoice_types = ('in_invoice', 'out_refund')\n   86:             cr.execute(sqlstr, (val.id, states, invoice_types, date_from, date_to, company_id))\n   87              result = cr.fetchall()[0]\n   88              res[val.id]['purchase_avg_price'] = result[0] and result[0] or 0.0\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\project\\project.py:\n   78              return super(project, self).search(cr, user, args, offset=offset, limit=limit, order=order, context=context, count=count)\n   79          if context and context.get('user_preference'):\n   80:                 cr.execute(\"\"\"SELECT project.id FROM project_project project\n   81                             LEFT JOIN account_analytic_account account ON account.id = project.analytic_account_id\n   82                             LEFT JOIN project_user_rel rel ON rel.project_id = project.id\n   ..\n  106          res = set(ids)\n  107          while ids:\n  108:             cr.execute(\"\"\"\n  109                  SELECT DISTINCT parent.id\n  110                  FROM project_project project, project_project parent, account_analytic_account account\n  ...\n  123          res = dict.fromkeys(ids, None)\n  124          while ids:\n  125:             cr.execute(\"\"\"\n  126                  SELECT project.id, parent.id\n  127                  FROM project_project project, project_project parent, account_analytic_account account\n  ...\n  138          child_parent = self._get_project_and_children(cr, uid, ids, context)\n  139          # compute planned_hours, total_hours, effective_hours specific to each project\n  140:         cr.execute(\"\"\"\n  141              SELECT project_id, COALESCE(SUM(planned_hours), 0.0),\n  142                  COALESCE(SUM(total_hours), 0.0), COALESCE(SUM(effective_hours), 0.0)\n  ...\n  416          for proj in self.browse(cr, uid, ids, context=None):\n  417              self.write(cr, uid, [proj.id], {'state': value and 'open' or 'template'}, context)\n  418:             cr.execute('select id from project_task where project_id=%s', (proj.id,))\n  419              tasks_id = [x[0] for x in cr.fetchall()]\n  420              if tasks_id:\n  ...\n  653      def _hours_get(self, cr, uid, ids, field_names, args, context=None):\n  654          res = {}\n  655:         cr.execute(\"SELECT task_id, COALESCE(SUM(hours),0) FROM project_task_work WHERE task_id IN %s GROUP BY task_id\",(tuple(ids),))\n  656          hours = dict(cr.fetchall())\n  657          for task in self.browse(cr, uid, ids, context=context):\n  ...\n 1142              vals['hours'] = 0.00\n 1143          if 'task_id' in vals:\n 1144:             cr.execute('update project_task set remaining_hours=remaining_hours - %s where id=%s', (vals.get('hours',0.0), vals['task_id']))\n 1145              self.pool.get('project.task').invalidate_cache(cr, uid, ['remaining_hours'], [vals['task_id']], context=context)\n 1146          return super(project_work,self).create(cr, uid, vals, context=context)\n ....\n 1152              task_obj = self.pool.get('project.task')\n 1153              for work in self.browse(cr, uid, ids, context=context):\n 1154:                 cr.execute('update project_task set remaining_hours=remaining_hours - %s + (%s) where id=%s', (vals.get('hours',0.0), work.hours, work.task_id.id))\n 1155                  task_obj.invalidate_cache(cr, uid, ['remaining_hours'], [work.task_id.id], context=context)\n 1156          return super(project_work,self).write(cr, uid, ids, vals, context)\n ....\n 1159          task_obj = self.pool.get('project.task')\n 1160          for work in self.browse(cr, uid, ids):\n 1161:             cr.execute('update project_task set remaining_hours=remaining_hours + %s where id=%s', (work.hours, work.task_id.id))\n 1162              task_obj.invalidate_cache(cr, uid, ['remaining_hours'], [work.task_id.id], context=context)\n 1163          return super(project_work,self).unlink(cr, uid, ids, context=context)\n ....\n 1262                  result[history.id] = history.date\n 1263                  continue\n 1264:             cr.execute('''select\n 1265                      date\n 1266                  from\n ....\n 1277          result = []\n 1278          for history in self.browse(cr, uid, ids, context=context):\n 1279:             cr.execute('''select\n 1280                      id\n 1281                  from\n ....\n 1321          tools.drop_view_if_exists(cr, 'project_task_history_cumulative')\n 1322  \n 1323:         cr.execute(\"\"\" CREATE VIEW project_task_history_cumulative AS (\n 1324              SELECT\n 1325                  history.date::varchar||'-'||history.history_id::varchar AS id,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\project\\report\\project_report.py:\n   61      def init(self, cr):\n   62          tools.sql.drop_view_if_exists(cr, 'report_project_task_user')\n   63:         cr.execute(\"\"\"\n   64              CREATE view report_project_task_user as\n   65                SELECT\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\project\\res_config_view.xml:\n   21                  <form string=\"Configure Project\" class=\"oe_form_configuration\">\n   22                      <header>\n   23:                         <button string=\"Apply\" type=\"object\" name=\"execute\" class=\"oe_highlight\"/>\n   24                          or\n   25                          <button string=\"Cancel\" type=\"object\" name=\"cancel\" class=\"oe_link\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\project_issue\\report\\project_issue_report.py:\n   58      def init(self, cr):\n   59          tools.drop_view_if_exists(cr, 'project_issue_report')\n   60:         cr.execute(\"\"\"\n   61              CREATE OR REPLACE VIEW project_issue_report AS (\n   62                  SELECT\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\project_timesheet\\report\\task_report.py:\n   55      def init(self, cr):\n   56          tools.drop_view_if_exists(cr, 'report_timesheet_task_user')\n   57:         cr.execute(\"\"\" create or replace view report_timesheet_task_user as (\n   58          select\n   59           ((r.id*12)+to_number(months.m_id,'999999'))::integer as id,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\purchase\\purchase.py:\n  102          for id in ids:\n  103              res[id] = [0.0,0.0]\n  104:         cr.execute('''SELECT\n  105                  p.order_id, sum(m.product_qty), m.state\n  106              FROM\n  ...\n  170               \n  171          \"\"\"\n  172:         cr.execute(query, (tuple(ids), ))\n  173          picks = cr.fetchall()\n  174          for pick_id, po_id in picks:\n  ...\n 1224              if message:\n 1225                  if procurement.message != message:\n 1226:                     cr.execute('update procurement_order set message=%s where id=%s', (message, procurement.id))\n 1227                  return False\n 1228  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\purchase\\report\\purchase_report.py:\n   65      def init(self, cr):\n   66          tools.sql.drop_view_if_exists(cr, 'purchase_report')\n   67:         cr.execute(\"\"\"\n   68              create or replace view purchase_report as (\n   69                  select\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\purchase\\res_config_view.xml:\n   20                  <form string=\"Configure Purchases\" class=\"oe_form_configuration\">\n   21                      <header>\n   22:                         <button string=\"Apply\" type=\"object\" name=\"execute\" class=\"oe_highlight\"/>\n   23                          or\n   24                          <button string=\"Cancel\" type=\"object\" name=\"cancel\" class=\"oe_link\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\purchase_requisition\\purchase_requisition_view.xml:\n   98                          <div class=\"oe_right oe_button_box\" style=\"margin-top: 10px\">\n   99                              <button name=\"%(action_purchase_requisition_partner)d\" type=\"action\"\n  100:                                 string=\"Request a Quotation\" icon=\"gtk-execute\"\n  101                                  attrs=\"{'invisible': ['|', ('line_ids','=',[]),('state', 'in', ('draft' ,'open','done'))]}\"/>\n  102                              <button name=\"open_rfq\" type=\"object\" string=\"View RFQs/Bids\" attrs=\"{'invisible': [('state', 'in', ('draft'))]}\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\report\\models\\report.py:\n  363  \n  364      def _run_wkhtmltopdf(self, cr, uid, headers, footers, bodies, landscape, paperformat, spec_paperformat_args=None, save_in_attachment=None):\n  365:         \"\"\"Execute wkhtmltopdf as a subprocess in order to convert html given in input into a pdf\n  366          document.\n  367  \n  ...\n  401              command_args.extend(['--orientation', 'landscape'])\n  402  \n  403:         # Execute WKhtmltopdf\n  404          pdfdocuments = []\n  405          temporary_files = []\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\report_intrastat\\report_intrastat.py:\n   74      def init(self, cr):\n   75          drop_view_if_exists(cr, 'report_intrastat')\n   76:         cr.execute(\"\"\"\n   77              create or replace view report_intrastat as (\n   78                  select\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\report_webkit\\ir_report.py:\n   67                  new_report = None\n   68          else:\n   69:             cr.execute(\"SELECT * FROM ir_act_report_xml WHERE report_name=%s and report_type=%s\", (name, 'webkit'))\n   70              r = cr.dictfetchone()\n   71              if r:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\sale\\report\\sale_report.py:\n  112          # self._table = sale_report\n  113          tools.drop_view_if_exists(cr, self._table)\n  114:         cr.execute(\"\"\"CREATE or REPLACE VIEW %s as (\n  115              %s\n  116              FROM ( %s )\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\sale\\sale.py:\n  128                  no_invoiced = True\n  129  \n  130:         cursor.execute('SELECT rel.order_id ' \\\n  131                  'FROM sale_order_invoice_rel AS rel, account_invoice AS inv '+ sale_clause + \\\n  132                  'WHERE rel.invoice_id = inv.id ' + clause)\n  133          res = cursor.fetchall()\n  134          if no_invoiced:\n  135:             cursor.execute('SELECT sale.id ' \\\n  136                      'FROM sale_order AS sale ' \\\n  137                      'WHERE sale.id NOT IN ' \\\n  ...\n  547                      origin_ref += (o.origin or o.name) + '|'\n  548                      self.write(cr, uid, [o.id], {'state': 'progress'})\n  549:                     cr.execute('insert into sale_order_invoice_rel (order_id,invoice_id) values (%s,%s)', (o.id, res))\n  550                      self.invalidate_cache(cr, uid, ['invoice_ids'], [o.id], context=context)\n  551                  #remove last '|' in invoice_ref\n  ...\n  560                      invoice_ids.append(res)\n  561                      self.write(cr, uid, [order.id], {'state': 'progress'})\n  562:                     cr.execute('insert into sale_order_invoice_rel (order_id,invoice_id) values (%s,%s)', (order.id, res))\n  563                      self.invalidate_cache(cr, uid, ['invoice_ids'], [order.id], context=context)\n  564          return res\n  ...\n  840      def _order_lines_from_invoice(self, cr, uid, ids, context=None):\n  841          # direct access to the m2m table is the less convoluted way to achieve this (and is ok ACL-wise)\n  842:         cr.execute(\"\"\"SELECT DISTINCT sol.id FROM sale_order_invoice_rel rel JOIN\n  843                                                    sale_order_line sol ON (sol.order_id = rel.order_id)\n  844                                      WHERE rel.invoice_id = ANY(%s)\"\"\", (list(ids),))\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\sale\\wizard\\sale_line_invoice.py:\n   96          for order, il in invoices.items():\n   97              res = make_invoice(order, il)\n   98:             cr.execute('INSERT INTO sale_order_invoice_rel \\\n   99                      (order_id,invoice_id) values (%s,%s)', (order.id, res))\n  100              sales_order_obj.invalidate_cache(cr, uid, ['invoice_ids'], [order.id], context=context)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\sales_team\\res_config.py:\n   12              with set. It is used to implement the 'one group or another'\n   13              behavior. We have to perform some group manipulation by hand\n   14:             because in res_config.execute(), set_* methods are called\n   15              after group_*; therefore writing on an hidden res_config file\n   16              could not work.\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\share\\ir_model.py:\n   32          \"\"\"\n   33          assert access_mode in ['read','write','create','unlink'], 'Invalid access mode: %s' % access_mode\n   34:         cr.execute('''SELECT\n   35                          c.name, g.name\n   36                        FROM\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock\\report\\product_stock.py:\n   76              return (False, 'pdf')\n   77  \n   78:         cr.execute(\"select sum(r.product_qty * u.factor), r.date, r.product_id \"\n   79                     \"from stock_move r left join product_uom u on (r.product_uom=u.id) \"\n   80                     \"where state IN %s\"\n   ..\n   90              products[prod_id].append((dt,-qty))\n   91  \n   92:         cr.execute(\"select sum(r.product_qty * u.factor), r.date, r.product_id \"\n   93                     \"from stock_move r left join product_uom u on (r.product_uom=u.id) \"\n   94                     \"where state IN %s\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock\\report\\report_stock.py:\n   38      def init(self, cr):\n   39          drop_view_if_exists(cr, 'report_stock_lines_date')\n   40:         cr.execute(\"\"\"\n   41              create or replace view report_stock_lines_date as (\n   42                  select\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock\\res_config_view.xml:\n   19                  <form string=\"Configure Warehouse\" class=\"oe_form_configuration\">\n   20                      <header>\n   21:                         <button string=\"Apply\" type=\"object\" name=\"execute\" class=\"oe_highlight\"/>\n   22                          or\n   23                          <button string=\"Cancel\" type=\"object\" name=\"cancel\" class=\"oe_link\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock\\stock.py:\n  670          if not ids:\n  671              return res\n  672:         cr.execute(\"\"\"select\n  673                  picking_id,\n  674                  min(date_expected),\n  ...\n 2735              args += (inventory.package_id.id,)\n 2736  \n 2737:         cr.execute('''\n 2738             SELECT product_id, sum(qty) as product_qty, location_id, lot_id as prod_lot_id, package_id, owner_id as partner_id\n 2739             FROM stock_quant WHERE''' + domain + '''\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock\\stock_view.xml:\n 1785  \n 1786                                  <div class=\"oe_right oe_button_box\" style=\"margin-top: 10px\">\n 1787:                                     <button name=\"get_content_package\" type=\"object\" string=\"View Contained Packages content\" icon=\"gtk-execute\" attrs=\"{'invisible': [('children_ids','=',[])]}\"/>\n 1788                                  </div>\n 1789                                  <separator string=\"Contained Packages\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock\\wizard\\stock_transfer_details.py:\n  103              packop.unlink()\n  104  \n  105:         # Execute the transfer of the picking\n  106          self.picking_id.do_transfer()\n  107  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock_account\\wizard\\stock_valuation_history.py:\n   93      def init(self, cr):\n   94          tools.drop_view_if_exists(cr, 'stock_history')\n   95:         cr.execute(\"\"\"\n   96              CREATE OR REPLACE VIEW stock_history AS (\n   97                SELECT MIN(id) as id,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\subscription\\subscription.py:\n   52  \n   53  def _get_document_types(self, cr, uid, context=None):\n   54:     cr.execute('select m.model, s.name from subscription_document s, ir_model m WHERE s.model = m.id order by s.name')\n   55      return cr.fetchall()\n   56  \n   ..\n   93          #        and to use a unique cron job for all subscriptions, so that it never needs to\n   94          #        be updated during its execution. \n   95:         cr.execute(\"ALTER TABLE %s DROP CONSTRAINT %s\" % (self._table, '%s_cron_id_fkey' % self._table))\n   96  \n   97      def set_process(self, cr, uid, ids, context=None):\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\test_new_api\\models.py:\n  137          query = \"\"\"SELECT id FROM \"%s\" WHERE char_length(\"body\") %s %%s\"\"\" % \\\n  138                  (self._table, operator)\n  139:         self.env.cr.execute(query, (value,))\n  140          ids = [t[0] for t in self.env.cr.fetchall()]\n  141          return [('id', 'in', ids)]\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\web\\controllers\\main.py:\n 1208                  registry = openerp.modules.registry.Registry(dbname)\n 1209                  with registry.cursor() as cr:\n 1210:                     cr.execute(\"\"\"SELECT c.logo_web, c.write_date\n 1211                                      FROM res_users u\n 1212                                 LEFT JOIN res_company c\n ....\n 1381          # export lists with no sub-fields (e.g. import_compatible lists with\n 1382          # no o2m) are even more efficient (from the same 6s to ~170ms, as\n 1383:         # there's a single fields_get to execute)\n 1384          for (base, length), subfields in itertools.groupby(\n 1385                  sorted(export_fields),\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website\\models\\ir_actions.py:\n   37          'website_published': fields.boolean(\n   38              'Available on the Website', copy=False,\n   39:             help='A code server action can be executed from the website, using a dedicated'\n   40                   'controller. The address is <base>/website/action/<website_path>.'\n   41                   'Set this field as True to allow users to run this action. If it'\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website\\views\\res_config.xml:\n    9                  <form string=\"Configure Website\" class=\"oe_form_configuration\">\n   10                      <header>\n   11:                         <button string=\"Apply\" type=\"object\" name=\"execute\" class=\"oe_highlight\"/>\n   12                          or\n   13                          <button string=\"Cancel\" type=\"object\" name=\"cancel\" class=\"oe_link\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_blog\\models\\website_blog.py:\n   39                  count(*) DESC\n   40          \"\"\"\n   41:         cr.execute(req, [tuple(ids)])\n   42          tag_by_blog = {i: [] for i in ids}\n   43          for blog_id, freq, tag_id in cr.fetchall():\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_forum\\data\\badges_moderation.xml:\n  201              <field name=\"compute_code\">start_date = date.today() - timedelta(days=16)\n  202  end_date = date.today() - timedelta(days=1)\n  203: cr.execute('SELECT COUNT(id), create_date from forum_post_vote where create_date &gt;= %s and create_date &lt;= %s and user_id = %s GROUP BY create_date',(start_date,end_date, object.user_id.id,))\n  204  data = cr.dictfetchall()\n  205  result = int(len(data) >= 15)</field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_forum\\models\\forum.py:\n  570  \n  571      def set_viewed(self, cr, uid, ids, context=None):\n  572:         cr.execute(\"\"\"UPDATE forum_post SET views = views+1 WHERE id IN %s\"\"\", (tuple(ids),))\n  573          return True\n  574  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_mail\\models\\mail_message.py:\n   82              group_user_id = self.pool.get(\"ir.model.data\").get_object_reference(cr, uid, 'base', 'group_public')[1]\n   83              if group_user_id in [group.id for group in group_ids]:\n   84:                 cr.execute('SELECT id FROM \"%s\" WHERE website_published IS FALSE AND id = ANY (%%s)' % (self._table), (ids,))\n   85                  if cr.fetchall():\n   86                      raise osv.except_osv(\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_sale\\models\\product.py:\n  135  \n  136      def _defaults_website_sequence(self, cr, uid, *l, **kwargs):\n  137:         cr.execute('SELECT MAX(website_sequence)+1 FROM product_template')\n  138          next_sequence = cr.fetchone()[0] or 0\n  139          return next_sequence\n  ...\n  147  \n  148      def set_sequence_top(self, cr, uid, ids, context=None):\n  149:         cr.execute('SELECT MAX(website_sequence) FROM product_template')\n  150          max_sequence = cr.fetchone()[0] or 0\n  151          return self.write(cr, uid, ids, {'website_sequence': max_sequence + 1}, context=context)\n  152  \n  153      def set_sequence_bottom(self, cr, uid, ids, context=None):\n  154:         cr.execute('SELECT MIN(website_sequence) FROM product_template')\n  155          min_sequence = cr.fetchone()[0] or 0\n  156          return self.write(cr, uid, ids, {'website_sequence': min_sequence -1}, context=context)\n  ...\n  158      def set_sequence_up(self, cr, uid, ids, context=None):\n  159          product = self.browse(cr, uid, ids[0], context=context)\n  160:         cr.execute(\"\"\"  SELECT id, website_sequence FROM product_template\n  161                          WHERE website_sequence > %s AND website_published = %s ORDER BY website_sequence ASC LIMIT 1\"\"\" % (product.website_sequence, product.website_published))\n  162          prev = cr.fetchone()\n  ...\n  169      def set_sequence_down(self, cr, uid, ids, context=None):\n  170          product = self.browse(cr, uid, ids[0], context=context)\n  171:         cr.execute(\"\"\"  SELECT id, website_sequence FROM product_template\n  172                          WHERE website_sequence < %s AND website_published = %s ORDER BY website_sequence DESC LIMIT 1\"\"\" % (product.website_sequence, product.website_published))\n  173          next = cr.fetchone()\n\n888 matches across 270 files\n",
			"settings":
			{
				"buffer_size": 288041,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/account/account.py",
			"settings":
			{
				"buffer_size": 190583,
				"line_ending": "Unix"
			}
		},
		{
			"file": "sales.py",
			"settings":
			{
				"buffer_size": 21176,
				"line_ending": "Windows"
			}
		},
		{
			"file": "view/sales.xml",
			"settings":
			{
				"buffer_size": 9027,
				"line_ending": "Windows"
			}
		},
		{
			"file": "akun.py",
			"settings":
			{
				"buffer_size": 66655,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 150.0,
		"last_filter": "install",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			]
		],
		"width": 464.0
	},
	"console":
	{
		"height": 146.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/cron",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/menu",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/report",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/view"
	],
	"file_history":
	[
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/view/pembelian.xml",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/akun.py",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/customer.py",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/menu/menu_master.xml",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/pembayaran.py",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/pembelian.py",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/penjualan.py",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/produk.py",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/report/cetakbackupreport.xml",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/report/laporanbukubesarreport.xml",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/report/popembelianreport.xml",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/report/popembelianreporttanpaharga.xml",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/report/sjpenjualanreport.xml",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/sales.py",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/smart.py",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/stok.py",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/supplier.py",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/view/akun.xml",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/view/customer.xml",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/view/penjualan.xml",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/view/produk.xml",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/view/sales.xml",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/view/smart.xml",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/view/stok.xml",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/account/account.py",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/view/pembayaran.xml",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/view/groups.xml",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/account/account_invoice.py",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/base/ir/ir_ui_view.py",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/base/ir/ir_actions.py",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/account/account_installer.xml",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/base/ir/ir_ui_menu_view.xml",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/decimal_precision/decimal_precision.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/account/models/account_invoice.py",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/osv/fields.py",
		"/G/Software/Work/falinwa_module/fal_convention/wizard/fal_convention_wizard_view.xml",
		"/G/Software/Work/falinwa_module/fal_convention/wizard/fal_convention_wizard.py",
		"/G/Software/Work/falinwa_module/fal_convention/models/fal_convention.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/hr_holidays/hr_holidays.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/base/res/res_company.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/auth_ldap/users_ldap.py",
		"/G/Software/Work/falinwa_module/gleize_field_ext/models/sale.py",
		"/G/Software/Work/falinwa_module/gleize_field_ext/data/scheduler.xml",
		"/G/Software/Work/falinwa_module/gleize_field_ext/data/data.xml",
		"/G/Software/Work/falinwa_module/fal_convention/__openerp__.py",
		"/G/Software/Work/falinwa_branch/fal_convention/__openerp__.py",
		"/G/Software/Work/falinwa_module/gleize_field_ext/models/hr.py",
		"/G/Software/Work/falinwa_branch/fal_convention/__init__.py",
		"/G/Software/Work/falinwa_module/fal_convention/__init__.py",
		"/G/Software/Work/falinwa_module/fal_convention/security/ir.model.access.csv",
		"/G/Software/Work/falinwa_module/fal_weekday/security/ir.model.access.csv",
		"/G/Software/Work/falinwa_module/fal_weekday/__openerp__.py",
		"/G/Software/Work/falinwa_module/fal_convention/views/fal_convention_view.xml",
		"/G/Software/Work/falinwa_module/fal_bom_reader/wizard/bom_reader_wizard.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/sales_team/static/src/xml/sales_team_dashboard.xml",
		"/G/Software/Work/falinwa_module/gleize_field_ext/static/src/xml/gleize_field_ext.xml",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/sales_team/sales_team.py",
		"/G/Software/Work/falinwa_module/gleize_field_ext/security/ir.model.access.csv",
		"/G/Software/Work/falinwa_module/gleize_leave_ext/views/hr_holidays_view.xml",
		"/G/Software/Work/falinwa_module/fal_weekday/models/fal_weekday.py",
		"/G/Software/Work/falinwa_module/gleize_field_ext/views/sale_view.xml",
		"/G/Software/Work/falinwa_module/fal_weekday/data/weekday_data.xml",
		"/G/Software/Work/falinwa_module/fal_convention/wizard/__init__.py",
		"/G/Software/Work/falinwa_module/fal_convention/models/__init__.py",
		"/G/Software/Work/falinwa_module/fal_deduplicate_leads/wizard/fal_deduplicate_leads_wizard.py",
		"/G/Software/Work/falinwa_module/fal_easy_reporting/wizard/easy_exporting_wizard.py",
		"/G/Software/Work/falinwa_module/fal_invoice_balance_date/wizard/invoice_balance_wizard.py",
		"/G/Software/Work/falinwa_module/l10n_cn_fapiao/fapiao.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/account/models/res_config.py",
		"/G/Software/Work/falinwa_module/procurement_request/wizard/procurement_request_wizard.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/hr_holidays/hr_holidays_view.xml",
		"/G/Software/Work/falinwa_module/fal_bom_reader/wizard/bom_reader_wizard_view.xml",
		"/G/Software/Work/falinwa_module/gleize_field_ext/__openerp__.py",
		"/G/Software/Work/falinwa_module/gleize_field_ext/views/hr_view.xml",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/website_sale_options/views/templates.xml",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/website_sale_digital/views/website_sale_digital_view.xml",
		"/G/Software/Work/falinwa_module/gleize_leave_ext/models/hr_holidays.py",
		"/G/Software/Work/falinwa_module/fal_convention/wizard/convention_line_wizard.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/account/models/account.py",
		"/G/Software/Work/falinwa_module/fal_convention_company/__openerp__.py",
		"/G/Software/Work/falinwa_module/fal_convention_company/views/fal_convention_view.xml",
		"/G/Software/Work/falinwa_module/fal_convention_company/models/fal_convention.py",
		"/G/Software/Work/falinwa_module/fal_convention_company/models/__init__.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/account/report/account_invoice_report_view.xml",
		"/G/Software/Work/falinwa_module/fal_weekday/models/__init__.py",
		"/G/Software/Work/falinwa_module/fal_convention/data/scheduler.xml",
		"/G/Software/Work/falinwa_module/gleize_leave_ext/__openerp__.py",
		"/G/Software/Work/falinwa_module/gleize_leave_ext/data/scheduler.xml",
		"/G/Software/Work/falinwa_module/fal_france_leave_ext/__init__.py",
		"/G/Software/Work/falinwa_module/fal_france_leave_ext/__openerp__.py",
		"/G/Software/Work/falinwa_module/fal_france_leave_ext/data/scheduler.xml",
		"/G/Software/Work/falinwa_module/fal_france_leave_ext/models/hr_holidays.py",
		"/G/Software/Work/falinwa_module/fal_france_leave_ext/views/hr_holidays_view.xml",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/analytic/models/analytic.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/account_voucher/account_voucher.py",
		"/G/Software/Work/falinwa_module/fal_france_leave_ext/data/hr_holidays_data.xml",
		"/G/Software/Work/falinwa_module/fal_leave_timesheet/models/hr_holidays.py",
		"/G/Software/Work/falinwa_module/fal_france_leave_ext/models/__init__.py",
		"/G/Software/Work/falinwa_module/fal_crm_probability_ext/models/crm.py",
		"/G/Software/Work/falinwa_branch/gleize_field_ext/views/sale_view.xml",
		"/G/Software/Work/falinwa_module/fal_invoice_reminder/data/cron_configuration.xml",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/hr_holidays/hr_holidays_workflow.xml",
		"/G/Software/Work/falinwa_branch/gleize_field_ext/security/security.xml",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/account/models/partner.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/base/res/res_partner.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/hr/hr.py",
		"/G/Software/Work/falinwa_module/fal_crm_project/models/crm_lead.py",
		"/G/Software/Work/falinwa_module/gleize_field_ext/security/security.xml",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/base/res/res_users.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/hr_contract/hr_contract.py",
		"/G/Software/Work/falinwa_branch/fal_sql_query_field_store/models/account.py",
		"/G/Software/Work/falinwa_branch/analytic_multicurrency/analytic.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/account/models/account_move.py",
		"/G/Software/Work/falinwa_branch/account_budget/account_budget.py",
		"/G/Software/Work/falinwa_module/project_long_term/project_long_term.py",
		"/G/Software/Work/falinwa_module/hpg_field_ext/project.py",
		"/G/Software/Work/falinwa_module/falinwa_field_ext/models/account.py",
		"/G/Software/Work/falinwa_module/fal_project_summary/models/project.py",
		"/G/Software/Work/falinwa_module/fal_project_ext/models/project.py",
		"/G/Software/Work/falinwa_module/fal_parent_account/models/account.py",
		"/G/Software/Work/falinwa_module/fal_hps_sale_project/models/project.py",
		"/G/Software/Work/falinwa_module/fal_crm_project/models/project.py",
		"/G/Software/Work/falinwa_module/fal_analytic_account_multicompany_ext/models/analytic.py",
		"/G/Software/Work/falinwa_module/fal_account_sequence/models/account.py",
		"/G/Software/Work/falinwa_module/analytic_multicurrency/analytic_analysis.py",
		"/G/Software/Work/falinwa_module/analytic_multicurrency/analytic.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/project_issue/project_issue.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/project/project.py"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 91.0,
		"where_history":
		[
			"C:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons,*.py,*.xml",
			"C:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons,C:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR,*.py,*.xml",
			"C:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR,C:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addonsde,*.py,*.xml",
			"C:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR,*.py,*.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module,*.py,*.xml",
			"C:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons, *.xml, *.py",
			"C:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons, *.xml",
			"C:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons, *.py,*.xml",
			"C:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons, *.py,",
			"C:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons, *.py,*.xml",
			"C:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR, *.py,*.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module,*.py,*.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module,*.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module,*.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module,*.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, G:\\Software\\Work\\falinwa_branch,*.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, G:\\Software\\Work\\falinwa_branch,*.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py, *.xml",
			"C:\\Program Files (x86)\\Odoo 8.0-20160503\\server\\openerp\\addons, C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py,",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py,",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml,",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py,",
			"G:\\Software\\Work\\falinwa_module, *.py,",
			"G:\\Software\\Work\\falinwa_module, *.py, *.xml",
			"G:\\Software\\Work\\falinwa_branch, *.py,",
			"G:\\Software\\Work\\falinwa_branch, *.xml,",
			"G:\\Software\\Work\\falinwa_branch, *.py,",
			"G:\\Software\\Work\\falinwa_branch, *.py, *.xml",
			"G:\\Software\\Work\\falinwa_branch, *.py,",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp, G:\\Software\\Work\\falinwa_module, G:\\Software\\Work\\falinwa_branch, *.py,",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp, G:\\Software\\Work\\falinwa_module, *.py,",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp, G:\\Software\\Work\\falinwa_module, *.xml,",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp, G:\\Software\\Work\\falinwa_module, *.xml, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp, G:\\Software\\Work\\falinwa_module, *.xml, &.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.js",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.js",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server, C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.js",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server, C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server, C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp, C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp, C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp, C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py,",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py, *.xml, *.csv",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.js",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module,",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.js",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.js",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"xmls",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.js",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.js",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml, *.py"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"	",
			"execute",
			"mmr.biaya",
			"	",
			"laporanmarketing",
			"tanggal2",
			"tanggal",
			"bebasexpdate",
			"tanpafaktur",
			"hargabebas",
			"tukarbarang",
			"tanpafaktur",
			"stokkhusus",
			"pokhusus",
			"mmr.penjualanpo",
			"	",
			"mmr.laporanmarketing",
			"semuaakun",
			"mmr.laporanmarketing",
			"mmr.laporansales",
			"save",
			"stokdipakai",
			"permintaan",
			"mmr.penjualansjdetil",
			"validasipenjualansj",
			"penjualansjdetil",
			"listproduk2",
			"yang Akan Dikeluarkan Tidak Sesua",
			"Tidak sesuai",
			"print",
			"penjualanfaktur",
			"search",
			"'penjualanfaktur'",
			"SUPERUSER",
			"        ",
			",  ",
			",",
			" :",
			"def create",
			"default",
			"	",
			"float",
			"integer",
			"/",
			"*",
			"nilaikredit",
			"self.jurnalpenyesuaian",
			"self.tahun",
			"self.bulan",
			"self.",
			"akundetildummy",
			"mmr.akundummy",
			"self.bulan",
			"tanggal",
			"int",
			"nilaidebit",
			"saldoawal",
			"print",
			"saldoawal",
			"start",
			"semuahasilsearch",
			"start",
			"print",
			"akundetil",
			"akundetillist",
			"listakundetil",
			")",
			"date",
			"strptime",
			"strp",
			"DEFAULT",
			":",
			",",
			"semuaakundetil.kredit",
			"tidak dapat",
			"_ambil_tanggal",
			"field_name",
			":",
			"saldoawal",
			"order",
			"fields.related",
			"idakun",
			"object",
			"idsaveakun",
			"mmr.akundummy",
			"mmr.akun",
			"saldoawal",
			"laporanjurnal",
			"save",
			"multi_action_master_mmr_saveakun",
			"account",
			",  ",
			",",
			"	",
			" :",
			",  ",
			",",
			"sring",
			"group_project_responsible_user",
			"responsible",
			"<field name=\"view_ids\">",
			"ref(",
			"view_ids",
			"\"views\"",
			"ir.actions.act_window",
			"_name",
			"ir.ui.view",
			"form_view\"",
			"form_view",
			"form_view_id",
			"form_view",
			"tree_view_id",
			"view_id",
			"view_type",
			"view_type_tree",
			"view_id",
			"ref(",
			"ref",
			"view_id",
			"default_order",
			"mmr.pembeliansj",
			"	",
			"act_window",
			"	",
			"class mmr_pembelianpodetil",
			"digits_compute",
			"decimal.precision",
			"dp"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"    ",
			"tanggal",
			"tanggal2",
			"    ",
			"semuaakundetil",
			", ",
			":",
			"    ",
			"tahun",
			"bulan",
			"akundetil_id",
			").date()",
			"datetime",
			": ",
			"semuaakundetilkredit",
			": ",
			"akun",
			", ",
			"    ",
			":",
			", ",
			"string",
			"    ",
			"fal_net_margin",
			"fal_planned_revenue",
			"fal_gross_margin",
			"    ",
			"'fal_stage_in_qualification'",
			"gleize_website_ext"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 288041,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										334,
										350
									],
									[
										804,
										820
									],
									[
										844,
										860
									],
									[
										1128,
										1144
									],
									[
										1168,
										1184
									],
									[
										1434,
										1450
									],
									[
										1474,
										1490
									],
									[
										1830,
										1846
									],
									[
										2083,
										2099
									],
									[
										2385,
										2401
									],
									[
										2731,
										2747
									],
									[
										2842,
										2858
									],
									[
										2955,
										2971
									],
									[
										3069,
										3085
									],
									[
										3399,
										3415
									],
									[
										3440,
										3456
									],
									[
										3816,
										3832
									],
									[
										3880,
										3896
									],
									[
										4122,
										4138
									],
									[
										4186,
										4202
									],
									[
										4771,
										4780
									],
									[
										5366,
										5375
									],
									[
										5620,
										5629
									],
									[
										5779,
										5788
									],
									[
										6114,
										6123
									],
									[
										6378,
										6387
									],
									[
										6684,
										6693
									],
									[
										7048,
										7057
									],
									[
										7101,
										7110
									],
									[
										7368,
										7377
									],
									[
										7421,
										7430
									],
									[
										7744,
										7751
									],
									[
										8043,
										8050
									],
									[
										8212,
										8219
									],
									[
										8599,
										8606
									],
									[
										8714,
										8721
									],
									[
										9041,
										9048
									],
									[
										9335,
										9342
									],
									[
										9581,
										9588
									],
									[
										9798,
										9805
									],
									[
										10144,
										10151
									],
									[
										10490,
										10497
									],
									[
										10787,
										10794
									],
									[
										11111,
										11118
									],
									[
										11342,
										11349
									],
									[
										11518,
										11525
									],
									[
										11789,
										11796
									],
									[
										12360,
										12367
									],
									[
										12616,
										12623
									],
									[
										13095,
										13102
									],
									[
										13385,
										13392
									],
									[
										13656,
										13663
									],
									[
										14079,
										14086
									],
									[
										14428,
										14435
									],
									[
										14877,
										14884
									],
									[
										15323,
										15330
									],
									[
										15733,
										15740
									],
									[
										15975,
										15982
									],
									[
										16194,
										16201
									],
									[
										16465,
										16472
									],
									[
										16670,
										16677
									],
									[
										16885,
										16892
									],
									[
										17159,
										17166
									],
									[
										17474,
										17481
									],
									[
										17893,
										17900
									],
									[
										18260,
										18267
									],
									[
										18440,
										18447
									],
									[
										18774,
										18781
									],
									[
										19024,
										19031
									],
									[
										19335,
										19342
									],
									[
										19670,
										19677
									],
									[
										19840,
										19847
									],
									[
										19972,
										19979
									],
									[
										20134,
										20141
									],
									[
										20370,
										20377
									],
									[
										20662,
										20669
									],
									[
										20959,
										20966
									],
									[
										21285,
										21292
									],
									[
										21430,
										21437
									],
									[
										21672,
										21679
									],
									[
										22046,
										22053
									],
									[
										22612,
										22619
									],
									[
										22948,
										22955
									],
									[
										23544,
										23551
									],
									[
										23742,
										23749
									],
									[
										23805,
										23812
									],
									[
										23896,
										23903
									],
									[
										23958,
										23965
									],
									[
										24312,
										24319
									],
									[
										24690,
										24697
									],
									[
										25042,
										25049
									],
									[
										25450,
										25457
									],
									[
										25802,
										25809
									],
									[
										26044,
										26051
									],
									[
										26320,
										26327
									],
									[
										26639,
										26646
									],
									[
										26881,
										26888
									],
									[
										27126,
										27133
									],
									[
										27538,
										27545
									],
									[
										27962,
										27969
									],
									[
										28329,
										28336
									],
									[
										28730,
										28737
									],
									[
										29153,
										29160
									],
									[
										29601,
										29608
									],
									[
										29926,
										29933
									],
									[
										30409,
										30416
									],
									[
										30758,
										30765
									],
									[
										31090,
										31097
									],
									[
										31425,
										31432
									],
									[
										31763,
										31770
									],
									[
										32190,
										32197
									],
									[
										32503,
										32510
									],
									[
										32872,
										32879
									],
									[
										33150,
										33157
									],
									[
										33477,
										33484
									],
									[
										33739,
										33746
									],
									[
										34006,
										34013
									],
									[
										34271,
										34278
									],
									[
										34670,
										34677
									],
									[
										34934,
										34941
									],
									[
										35293,
										35300
									],
									[
										35732,
										35739
									],
									[
										36110,
										36117
									],
									[
										36570,
										36577
									],
									[
										37038,
										37045
									],
									[
										37373,
										37380
									],
									[
										37717,
										37724
									],
									[
										38153,
										38160
									],
									[
										38517,
										38524
									],
									[
										38975,
										38982
									],
									[
										39354,
										39361
									],
									[
										39645,
										39652
									],
									[
										40040,
										40047
									],
									[
										40453,
										40460
									],
									[
										40826,
										40833
									],
									[
										41157,
										41164
									],
									[
										41492,
										41499
									],
									[
										41818,
										41825
									],
									[
										42175,
										42182
									],
									[
										42638,
										42645
									],
									[
										42950,
										42957
									],
									[
										43294,
										43301
									],
									[
										43645,
										43652
									],
									[
										43953,
										43960
									],
									[
										44227,
										44234
									],
									[
										44473,
										44480
									],
									[
										44747,
										44754
									],
									[
										45026,
										45033
									],
									[
										45302,
										45309
									],
									[
										45582,
										45589
									],
									[
										45889,
										45896
									],
									[
										46312,
										46319
									],
									[
										46685,
										46692
									],
									[
										47113,
										47120
									],
									[
										47394,
										47401
									],
									[
										47760,
										47767
									],
									[
										48079,
										48086
									],
									[
										48470,
										48477
									],
									[
										48916,
										48923
									],
									[
										49286,
										49293
									],
									[
										49782,
										49789
									],
									[
										50174,
										50181
									],
									[
										50381,
										50388
									],
									[
										50800,
										50807
									],
									[
										51026,
										51033
									],
									[
										51291,
										51298
									],
									[
										51670,
										51677
									],
									[
										51989,
										51996
									],
									[
										52200,
										52207
									],
									[
										52447,
										52454
									],
									[
										52659,
										52666
									],
									[
										52930,
										52937
									],
									[
										53395,
										53402
									],
									[
										53681,
										53688
									],
									[
										54046,
										54053
									],
									[
										54230,
										54237
									],
									[
										54492,
										54499
									],
									[
										54781,
										54788
									],
									[
										55042,
										55049
									],
									[
										55402,
										55409
									],
									[
										55718,
										55725
									],
									[
										56059,
										56066
									],
									[
										56379,
										56386
									],
									[
										56687,
										56694
									],
									[
										57052,
										57059
									],
									[
										57465,
										57472
									],
									[
										57581,
										57588
									],
									[
										57868,
										57875
									],
									[
										58104,
										58111
									],
									[
										58483,
										58490
									],
									[
										58888,
										58895
									],
									[
										59355,
										59362
									],
									[
										59816,
										59823
									],
									[
										59911,
										59918
									],
									[
										60366,
										60373
									],
									[
										60530,
										60537
									],
									[
										60766,
										60773
									],
									[
										61046,
										61053
									],
									[
										61292,
										61299
									],
									[
										61642,
										61649
									],
									[
										61927,
										61934
									],
									[
										62255,
										62262
									],
									[
										62625,
										62632
									],
									[
										63041,
										63048
									],
									[
										63340,
										63347
									],
									[
										63585,
										63592
									],
									[
										63916,
										63923
									],
									[
										64232,
										64239
									],
									[
										64440,
										64447
									],
									[
										64762,
										64769
									],
									[
										65018,
										65025
									],
									[
										65170,
										65177
									],
									[
										65427,
										65434
									],
									[
										65613,
										65620
									],
									[
										65856,
										65863
									],
									[
										66319,
										66326
									],
									[
										66622,
										66629
									],
									[
										66766,
										66773
									],
									[
										67186,
										67193
									],
									[
										67549,
										67556
									],
									[
										67876,
										67883
									],
									[
										68292,
										68299
									],
									[
										68682,
										68689
									],
									[
										69172,
										69179
									],
									[
										69667,
										69674
									],
									[
										69782,
										69789
									],
									[
										70141,
										70148
									],
									[
										70495,
										70502
									],
									[
										70900,
										70907
									],
									[
										71224,
										71231
									],
									[
										71715,
										71722
									],
									[
										71875,
										71882
									],
									[
										72224,
										72231
									],
									[
										72580,
										72587
									],
									[
										72883,
										72890
									],
									[
										73206,
										73213
									],
									[
										73524,
										73531
									],
									[
										73828,
										73835
									],
									[
										74161,
										74168
									],
									[
										74500,
										74507
									],
									[
										74859,
										74866
									],
									[
										75300,
										75307
									],
									[
										75754,
										75761
									],
									[
										76147,
										76154
									],
									[
										76468,
										76475
									],
									[
										76798,
										76805
									],
									[
										77371,
										77378
									],
									[
										77757,
										77764
									],
									[
										78209,
										78216
									],
									[
										78523,
										78530
									],
									[
										78976,
										78983
									],
									[
										79229,
										79236
									],
									[
										79770,
										79777
									],
									[
										80159,
										80166
									],
									[
										80513,
										80520
									],
									[
										80801,
										80808
									],
									[
										81151,
										81158
									],
									[
										81682,
										81689
									],
									[
										82104,
										82111
									],
									[
										82609,
										82616
									],
									[
										82982,
										82989
									],
									[
										83332,
										83339
									],
									[
										83788,
										83795
									],
									[
										84088,
										84095
									],
									[
										84348,
										84355
									],
									[
										84694,
										84701
									],
									[
										85109,
										85116
									],
									[
										85444,
										85451
									],
									[
										85874,
										85881
									],
									[
										86064,
										86071
									],
									[
										86342,
										86349
									],
									[
										86625,
										86632
									],
									[
										86851,
										86858
									],
									[
										87125,
										87132
									],
									[
										87430,
										87437
									],
									[
										87766,
										87773
									],
									[
										88045,
										88052
									],
									[
										88307,
										88314
									],
									[
										88585,
										88592
									],
									[
										89114,
										89121
									],
									[
										89343,
										89350
									],
									[
										89515,
										89522
									],
									[
										90149,
										90156
									],
									[
										90540,
										90547
									],
									[
										91037,
										91044
									],
									[
										91477,
										91484
									],
									[
										91778,
										91785
									],
									[
										92313,
										92320
									],
									[
										92921,
										92928
									],
									[
										93224,
										93231
									],
									[
										93244,
										93251
									],
									[
										93299,
										93306
									],
									[
										93656,
										93663
									],
									[
										94032,
										94039
									],
									[
										94378,
										94385
									],
									[
										94890,
										94897
									],
									[
										95477,
										95484
									],
									[
										95901,
										95908
									],
									[
										96108,
										96115
									],
									[
										96369,
										96376
									],
									[
										96729,
										96736
									],
									[
										96979,
										96986
									],
									[
										97247,
										97254
									],
									[
										97519,
										97526
									],
									[
										97820,
										97827
									],
									[
										98113,
										98120
									],
									[
										98370,
										98377
									],
									[
										98595,
										98602
									],
									[
										98945,
										98952
									],
									[
										99280,
										99287
									],
									[
										99636,
										99643
									],
									[
										99929,
										99936
									],
									[
										100093,
										100100
									],
									[
										100404,
										100411
									],
									[
										100619,
										100626
									],
									[
										100677,
										100684
									],
									[
										100963,
										100970
									],
									[
										101230,
										101237
									],
									[
										101552,
										101559
									],
									[
										101901,
										101908
									],
									[
										102399,
										102406
									],
									[
										102457,
										102464
									],
									[
										102978,
										102985
									],
									[
										103449,
										103456
									],
									[
										103621,
										103628
									],
									[
										104027,
										104034
									],
									[
										104411,
										104418
									],
									[
										104705,
										104712
									],
									[
										105017,
										105024
									],
									[
										105467,
										105474
									],
									[
										105853,
										105860
									],
									[
										106365,
										106372
									],
									[
										106596,
										106603
									],
									[
										106748,
										106755
									],
									[
										106985,
										106992
									],
									[
										107379,
										107386
									],
									[
										108035,
										108042
									],
									[
										108565,
										108572
									],
									[
										108898,
										108905
									],
									[
										109240,
										109247
									],
									[
										109658,
										109665
									],
									[
										109921,
										109928
									],
									[
										110341,
										110348
									],
									[
										110642,
										110649
									],
									[
										110927,
										110934
									],
									[
										111387,
										111394
									],
									[
										111602,
										111609
									],
									[
										111980,
										111987
									],
									[
										112290,
										112297
									],
									[
										112407,
										112414
									],
									[
										112576,
										112583
									],
									[
										112911,
										112918
									],
									[
										113242,
										113249
									],
									[
										113440,
										113447
									],
									[
										113566,
										113573
									],
									[
										113767,
										113774
									],
									[
										113905,
										113912
									],
									[
										114181,
										114188
									],
									[
										114594,
										114601
									],
									[
										114799,
										114806
									],
									[
										115085,
										115092
									],
									[
										115446,
										115453
									],
									[
										115825,
										115832
									],
									[
										116109,
										116116
									],
									[
										116389,
										116396
									],
									[
										116673,
										116680
									],
									[
										116977,
										116984
									],
									[
										117236,
										117243
									],
									[
										117546,
										117553
									],
									[
										117742,
										117749
									],
									[
										118072,
										118079
									],
									[
										118334,
										118341
									],
									[
										118658,
										118665
									],
									[
										118840,
										118847
									],
									[
										119164,
										119171
									],
									[
										119506,
										119513
									],
									[
										119663,
										119670
									],
									[
										119870,
										119877
									],
									[
										120252,
										120259
									],
									[
										120466,
										120473
									],
									[
										120830,
										120837
									],
									[
										121223,
										121230
									],
									[
										121429,
										121436
									],
									[
										121784,
										121791
									],
									[
										122078,
										122085
									],
									[
										122189,
										122196
									],
									[
										122421,
										122428
									],
									[
										122901,
										122908
									],
									[
										123108,
										123115
									],
									[
										123392,
										123399
									],
									[
										123608,
										123615
									],
									[
										123935,
										123942
									],
									[
										124140,
										124147
									],
									[
										124477,
										124484
									],
									[
										124722,
										124729
									],
									[
										124995,
										125002
									],
									[
										125363,
										125370
									],
									[
										125618,
										125625
									],
									[
										125773,
										125780
									],
									[
										125886,
										125893
									],
									[
										126390,
										126397
									],
									[
										126588,
										126595
									],
									[
										127035,
										127042
									],
									[
										127316,
										127323
									],
									[
										127498,
										127505
									],
									[
										127849,
										127856
									],
									[
										128095,
										128102
									],
									[
										128298,
										128305
									],
									[
										128577,
										128584
									],
									[
										128701,
										128708
									],
									[
										128949,
										128956
									],
									[
										129178,
										129185
									],
									[
										129346,
										129353
									],
									[
										129454,
										129461
									],
									[
										129545,
										129552
									],
									[
										129712,
										129719
									],
									[
										129813,
										129820
									],
									[
										130039,
										130046
									],
									[
										130197,
										130204
									],
									[
										130310,
										130317
									],
									[
										130459,
										130466
									],
									[
										130685,
										130692
									],
									[
										130892,
										130899
									],
									[
										131150,
										131157
									],
									[
										131415,
										131422
									],
									[
										131752,
										131759
									],
									[
										131910,
										131917
									],
									[
										132183,
										132190
									],
									[
										132341,
										132348
									],
									[
										132673,
										132680
									],
									[
										132938,
										132945
									],
									[
										133210,
										133217
									],
									[
										133681,
										133688
									],
									[
										133884,
										133891
									],
									[
										134053,
										134060
									],
									[
										134330,
										134337
									],
									[
										134552,
										134559
									],
									[
										134845,
										134852
									],
									[
										135232,
										135239
									],
									[
										135486,
										135493
									],
									[
										135902,
										135909
									],
									[
										136032,
										136039
									],
									[
										136209,
										136216
									],
									[
										136491,
										136498
									],
									[
										136772,
										136779
									],
									[
										137017,
										137024
									],
									[
										137193,
										137200
									],
									[
										137713,
										137720
									],
									[
										138174,
										138181
									],
									[
										138649,
										138656
									],
									[
										138917,
										138924
									],
									[
										139388,
										139395
									],
									[
										139551,
										139558
									],
									[
										139816,
										139823
									],
									[
										139971,
										139978
									],
									[
										140115,
										140122
									],
									[
										140277,
										140284
									],
									[
										140332,
										140339
									],
									[
										140530,
										140537
									],
									[
										140719,
										140726
									],
									[
										140795,
										140802
									],
									[
										141045,
										141052
									],
									[
										141071,
										141078
									],
									[
										141129,
										141136
									],
									[
										141240,
										141247
									],
									[
										141569,
										141576
									],
									[
										141846,
										141853
									],
									[
										142112,
										142119
									],
									[
										142418,
										142425
									],
									[
										142549,
										142556
									],
									[
										142768,
										142775
									],
									[
										142891,
										142898
									],
									[
										143100,
										143107
									],
									[
										143484,
										143491
									],
									[
										143670,
										143677
									],
									[
										143899,
										143906
									],
									[
										144132,
										144139
									],
									[
										144477,
										144484
									],
									[
										144849,
										144856
									],
									[
										145016,
										145023
									],
									[
										145419,
										145426
									],
									[
										145826,
										145833
									],
									[
										146255,
										146262
									],
									[
										146398,
										146405
									],
									[
										146800,
										146807
									],
									[
										147148,
										147155
									],
									[
										147199,
										147206
									],
									[
										147303,
										147310
									],
									[
										147565,
										147572
									],
									[
										147706,
										147713
									],
									[
										147838,
										147845
									],
									[
										148188,
										148195
									],
									[
										148470,
										148477
									],
									[
										148591,
										148598
									],
									[
										148897,
										148904
									],
									[
										149076,
										149083
									],
									[
										149321,
										149328
									],
									[
										149673,
										149680
									],
									[
										149839,
										149846
									],
									[
										149964,
										149971
									],
									[
										150122,
										150129
									],
									[
										150382,
										150389
									],
									[
										150539,
										150546
									],
									[
										150885,
										150892
									],
									[
										151275,
										151282
									],
									[
										151698,
										151705
									],
									[
										151994,
										152001
									],
									[
										152297,
										152304
									],
									[
										152466,
										152473
									],
									[
										152747,
										152754
									],
									[
										152911,
										152918
									],
									[
										153082,
										153089
									],
									[
										153339,
										153346
									],
									[
										153535,
										153542
									],
									[
										153753,
										153760
									],
									[
										154275,
										154282
									],
									[
										154554,
										154561
									],
									[
										154854,
										154861
									],
									[
										155271,
										155278
									],
									[
										155570,
										155577
									],
									[
										155946,
										155953
									],
									[
										156356,
										156363
									],
									[
										156651,
										156658
									],
									[
										156840,
										156847
									],
									[
										156931,
										156938
									],
									[
										157281,
										157288
									],
									[
										157625,
										157632
									],
									[
										157738,
										157745
									],
									[
										157874,
										157881
									],
									[
										158229,
										158236
									],
									[
										158567,
										158574
									],
									[
										158853,
										158860
									],
									[
										159091,
										159098
									],
									[
										159190,
										159197
									],
									[
										159510,
										159517
									],
									[
										159817,
										159824
									],
									[
										159915,
										159922
									],
									[
										160308,
										160315
									],
									[
										160838,
										160845
									],
									[
										161137,
										161144
									],
									[
										161463,
										161470
									],
									[
										161826,
										161833
									],
									[
										162200,
										162207
									],
									[
										162503,
										162510
									],
									[
										162732,
										162739
									],
									[
										163055,
										163062
									],
									[
										163274,
										163281
									],
									[
										163812,
										163819
									],
									[
										164100,
										164107
									],
									[
										164198,
										164205
									],
									[
										164500,
										164507
									],
									[
										164766,
										164773
									],
									[
										165034,
										165041
									],
									[
										165301,
										165308
									],
									[
										165650,
										165657
									],
									[
										165912,
										165919
									],
									[
										166121,
										166128
									],
									[
										166353,
										166360
									],
									[
										166713,
										166720
									],
									[
										166749,
										166756
									],
									[
										167014,
										167021
									],
									[
										167222,
										167229
									],
									[
										167322,
										167329
									],
									[
										167418,
										167425
									],
									[
										167585,
										167592
									],
									[
										167784,
										167791
									],
									[
										167928,
										167935
									],
									[
										168106,
										168113
									],
									[
										168410,
										168417
									],
									[
										168754,
										168761
									],
									[
										168999,
										169006
									],
									[
										169261,
										169268
									],
									[
										169407,
										169414
									],
									[
										169748,
										169755
									],
									[
										170018,
										170025
									],
									[
										170117,
										170124
									],
									[
										170358,
										170365
									],
									[
										170527,
										170534
									],
									[
										170675,
										170682
									],
									[
										170946,
										170953
									],
									[
										171211,
										171218
									],
									[
										171348,
										171355
									],
									[
										171809,
										171816
									],
									[
										171908,
										171915
									],
									[
										172233,
										172240
									],
									[
										172430,
										172437
									],
									[
										172614,
										172621
									],
									[
										172974,
										172981
									],
									[
										173325,
										173332
									],
									[
										173592,
										173599
									],
									[
										173901,
										173908
									],
									[
										174317,
										174324
									],
									[
										174653,
										174660
									],
									[
										174836,
										174843
									],
									[
										175164,
										175171
									],
									[
										175575,
										175582
									],
									[
										175786,
										175793
									],
									[
										176017,
										176024
									],
									[
										176391,
										176398
									],
									[
										176757,
										176764
									],
									[
										177083,
										177090
									],
									[
										177398,
										177405
									],
									[
										177494,
										177501
									],
									[
										177917,
										177924
									],
									[
										177964,
										177971
									],
									[
										178422,
										178429
									],
									[
										178819,
										178826
									],
									[
										178918,
										178925
									],
									[
										179019,
										179026
									],
									[
										179084,
										179091
									],
									[
										179365,
										179372
									],
									[
										179584,
										179591
									],
									[
										180122,
										180129
									],
									[
										180356,
										180363
									],
									[
										180458,
										180465
									],
									[
										180766,
										180773
									],
									[
										181008,
										181015
									],
									[
										181283,
										181290
									],
									[
										181534,
										181541
									],
									[
										181774,
										181781
									],
									[
										182023,
										182030
									],
									[
										182457,
										182464
									],
									[
										182958,
										182965
									],
									[
										183266,
										183273
									],
									[
										183826,
										183833
									],
									[
										184178,
										184185
									],
									[
										184437,
										184444
									],
									[
										184687,
										184694
									],
									[
										185085,
										185092
									],
									[
										185360,
										185367
									],
									[
										185595,
										185602
									],
									[
										185939,
										185946
									],
									[
										186261,
										186268
									],
									[
										186659,
										186666
									],
									[
										186906,
										186913
									],
									[
										187213,
										187220
									],
									[
										187344,
										187351
									],
									[
										187526,
										187533
									],
									[
										187653,
										187660
									],
									[
										187867,
										187874
									],
									[
										188142,
										188149
									],
									[
										188384,
										188391
									],
									[
										188622,
										188629
									],
									[
										189071,
										189078
									],
									[
										189461,
										189468
									],
									[
										189911,
										189918
									],
									[
										190208,
										190215
									],
									[
										190448,
										190455
									],
									[
										190792,
										190799
									],
									[
										191163,
										191170
									],
									[
										191374,
										191381
									],
									[
										191725,
										191732
									],
									[
										192083,
										192090
									],
									[
										192434,
										192441
									],
									[
										192902,
										192909
									],
									[
										193256,
										193263
									],
									[
										193583,
										193590
									],
									[
										193901,
										193908
									],
									[
										194163,
										194170
									],
									[
										194675,
										194682
									],
									[
										194932,
										194939
									],
									[
										195240,
										195247
									],
									[
										195636,
										195643
									],
									[
										196112,
										196119
									],
									[
										196448,
										196455
									],
									[
										196715,
										196722
									],
									[
										196866,
										196873
									],
									[
										197012,
										197019
									],
									[
										197145,
										197152
									],
									[
										197388,
										197395
									],
									[
										197610,
										197617
									],
									[
										197829,
										197836
									],
									[
										198126,
										198133
									],
									[
										198366,
										198373
									],
									[
										198606,
										198613
									],
									[
										198962,
										198969
									],
									[
										199481,
										199488
									],
									[
										199849,
										199856
									],
									[
										200067,
										200074
									],
									[
										200298,
										200305
									],
									[
										200419,
										200426
									],
									[
										200769,
										200776
									],
									[
										201102,
										201109
									],
									[
										201590,
										201597
									],
									[
										201820,
										201827
									],
									[
										202159,
										202166
									],
									[
										202571,
										202578
									],
									[
										202967,
										202974
									],
									[
										203202,
										203209
									],
									[
										203521,
										203528
									],
									[
										203950,
										203957
									],
									[
										204397,
										204404
									],
									[
										204728,
										204735
									],
									[
										205119,
										205126
									],
									[
										205433,
										205440
									],
									[
										205804,
										205811
									],
									[
										206432,
										206439
									],
									[
										206841,
										206848
									],
									[
										207555,
										207562
									],
									[
										208305,
										208312
									],
									[
										208715,
										208722
									],
									[
										208973,
										208980
									],
									[
										209338,
										209345
									],
									[
										209753,
										209760
									],
									[
										210111,
										210118
									],
									[
										210401,
										210408
									],
									[
										210687,
										210694
									],
									[
										210980,
										210987
									],
									[
										211464,
										211471
									],
									[
										211816,
										211823
									],
									[
										212077,
										212084
									],
									[
										212374,
										212381
									],
									[
										212783,
										212790
									],
									[
										213246,
										213253
									],
									[
										213822,
										213829
									],
									[
										214526,
										214533
									],
									[
										215164,
										215171
									],
									[
										215439,
										215446
									],
									[
										215872,
										215879
									],
									[
										216180,
										216187
									],
									[
										216543,
										216550
									],
									[
										216764,
										216771
									],
									[
										217159,
										217166
									],
									[
										217466,
										217473
									],
									[
										217826,
										217833
									],
									[
										218176,
										218183
									],
									[
										218598,
										218605
									],
									[
										218974,
										218981
									],
									[
										219313,
										219320
									],
									[
										219737,
										219744
									],
									[
										220208,
										220215
									],
									[
										220598,
										220605
									],
									[
										220945,
										220952
									],
									[
										221291,
										221298
									],
									[
										221640,
										221647
									],
									[
										221944,
										221951
									],
									[
										222367,
										222374
									],
									[
										222656,
										222663
									],
									[
										223061,
										223068
									],
									[
										223561,
										223568
									],
									[
										224033,
										224040
									],
									[
										224446,
										224453
									],
									[
										224676,
										224683
									],
									[
										224909,
										224916
									],
									[
										225150,
										225157
									],
									[
										225391,
										225398
									],
									[
										225744,
										225751
									],
									[
										226006,
										226013
									],
									[
										226408,
										226415
									],
									[
										226810,
										226817
									],
									[
										227090,
										227097
									],
									[
										227333,
										227340
									],
									[
										227505,
										227512
									],
									[
										227687,
										227694
									],
									[
										227990,
										227997
									],
									[
										228316,
										228323
									],
									[
										228638,
										228645
									],
									[
										229041,
										229048
									],
									[
										229442,
										229449
									],
									[
										229782,
										229789
									],
									[
										230290,
										230297
									],
									[
										230734,
										230741
									],
									[
										231325,
										231332
									],
									[
										231732,
										231739
									],
									[
										232310,
										232317
									],
									[
										232774,
										232781
									],
									[
										233244,
										233251
									],
									[
										233705,
										233712
									],
									[
										234068,
										234075
									],
									[
										234381,
										234388
									],
									[
										234832,
										234839
									],
									[
										235153,
										235160
									],
									[
										235485,
										235492
									],
									[
										235866,
										235873
									],
									[
										236288,
										236295
									],
									[
										236673,
										236680
									],
									[
										236951,
										236958
									],
									[
										237298,
										237305
									],
									[
										237677,
										237684
									],
									[
										238119,
										238126
									],
									[
										238424,
										238431
									],
									[
										238758,
										238765
									],
									[
										239125,
										239132
									],
									[
										239439,
										239446
									],
									[
										239783,
										239790
									],
									[
										239966,
										239973
									],
									[
										240389,
										240396
									],
									[
										240813,
										240820
									],
									[
										241084,
										241091
									],
									[
										241241,
										241248
									],
									[
										241561,
										241568
									],
									[
										241920,
										241927
									],
									[
										242428,
										242435
									],
									[
										242831,
										242838
									],
									[
										243095,
										243102
									],
									[
										243386,
										243393
									],
									[
										243730,
										243737
									],
									[
										244267,
										244274
									],
									[
										244843,
										244850
									],
									[
										245323,
										245330
									],
									[
										245581,
										245588
									],
									[
										246195,
										246202
									],
									[
										246471,
										246478
									],
									[
										246927,
										246934
									],
									[
										247248,
										247255
									],
									[
										247444,
										247451
									],
									[
										247768,
										247775
									],
									[
										248015,
										248022
									],
									[
										248296,
										248303
									],
									[
										248476,
										248483
									],
									[
										248898,
										248905
									],
									[
										249506,
										249513
									],
									[
										249903,
										249910
									],
									[
										250299,
										250306
									],
									[
										250499,
										250506
									],
									[
										250835,
										250842
									],
									[
										251072,
										251079
									],
									[
										251436,
										251443
									],
									[
										251843,
										251850
									],
									[
										252174,
										252181
									],
									[
										252463,
										252470
									],
									[
										252690,
										252697
									],
									[
										252865,
										252872
									],
									[
										253195,
										253202
									],
									[
										253513,
										253520
									],
									[
										253791,
										253798
									],
									[
										254427,
										254434
									],
									[
										254818,
										254825
									],
									[
										255162,
										255169
									],
									[
										255451,
										255458
									],
									[
										255851,
										255858
									],
									[
										256150,
										256157
									],
									[
										256479,
										256486
									],
									[
										256767,
										256774
									],
									[
										257264,
										257271
									],
									[
										257747,
										257754
									],
									[
										258083,
										258090
									],
									[
										258161,
										258168
									],
									[
										258632,
										258639
									],
									[
										259268,
										259275
									],
									[
										259535,
										259542
									],
									[
										259820,
										259827
									],
									[
										260125,
										260132
									],
									[
										260364,
										260371
									],
									[
										260612,
										260619
									],
									[
										261137,
										261144
									],
									[
										261640,
										261647
									],
									[
										261904,
										261911
									],
									[
										262291,
										262298
									],
									[
										262820,
										262827
									],
									[
										263214,
										263221
									],
									[
										263631,
										263638
									],
									[
										263875,
										263882
									],
									[
										264129,
										264136
									],
									[
										264467,
										264474
									],
									[
										264723,
										264730
									],
									[
										264995,
										265002
									],
									[
										265361,
										265368
									],
									[
										265733,
										265740
									],
									[
										266258,
										266265
									],
									[
										266617,
										266624
									],
									[
										266888,
										266895
									],
									[
										267264,
										267271
									],
									[
										267639,
										267646
									],
									[
										267930,
										267937
									],
									[
										268273,
										268280
									],
									[
										268784,
										268791
									],
									[
										269264,
										269271
									],
									[
										269692,
										269699
									],
									[
										269899,
										269906
									],
									[
										270087,
										270094
									],
									[
										270484,
										270491
									],
									[
										270873,
										270880
									],
									[
										271268,
										271275
									],
									[
										271607,
										271614
									],
									[
										271945,
										271952
									],
									[
										272114,
										272121
									],
									[
										272351,
										272358
									],
									[
										272702,
										272709
									],
									[
										273100,
										273107
									],
									[
										273658,
										273665
									],
									[
										274217,
										274224
									],
									[
										274439,
										274446
									],
									[
										274738,
										274745
									],
									[
										275020,
										275027
									],
									[
										275398,
										275405
									],
									[
										275643,
										275650
									],
									[
										275940,
										275947
									],
									[
										276259,
										276266
									],
									[
										276679,
										276686
									],
									[
										277121,
										277128
									],
									[
										277613,
										277620
									],
									[
										278140,
										278147
									],
									[
										278525,
										278532
									],
									[
										278785,
										278792
									],
									[
										279083,
										279090
									],
									[
										279503,
										279510
									],
									[
										279906,
										279913
									],
									[
										280228,
										280235
									],
									[
										280410,
										280417
									],
									[
										280952,
										280959
									],
									[
										281302,
										281309
									],
									[
										281615,
										281622
									],
									[
										281908,
										281915
									],
									[
										282244,
										282251
									],
									[
										282656,
										282663
									],
									[
										283031,
										283038
									],
									[
										283415,
										283422
									],
									[
										283795,
										283802
									],
									[
										284313,
										284320
									],
									[
										284655,
										284662
									],
									[
										285051,
										285058
									],
									[
										285504,
										285511
									],
									[
										285946,
										285953
									],
									[
										286337,
										286344
									],
									[
										286589,
										286596
									],
									[
										286903,
										286910
									],
									[
										287281,
										287288
									],
									[
										287727,
										287734
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								7749,
								7749
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"default_dir": "C:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR",
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 3,
							"result_base_dir": "",
							"result_file_regex": "^([^ 	].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 2844.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/account/account.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 190583,
						"regions":
						{
						},
						"selection":
						[
							[
								1765,
								1952
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1951,
										1952
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										1775,
										1776
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 548.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "sales.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21176,
						"regions":
						{
						},
						"selection":
						[
							[
								8892,
								8892
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										8893,
										8894
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/single_quote.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										8890,
										8891
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": true,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 3108.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "view/sales.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9027,
						"regions":
						{
						},
						"selection":
						[
							[
								4759,
								4759
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										4759,
										4760
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										4707,
										4708
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2267.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "akun.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 66655,
						"regions":
						{
						},
						"selection":
						[
							[
								15309,
								15309
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										15308,
										15309
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										15307,
										15308
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 4823.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "MMR.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"fal_leave_timesheethr_holida",
				"falinwa_module\\fal_leave_timesheet\\models\\hr_holidays.py"
			],
			[
				"fal_total_amount_hkd_storemodelsaccount_invoice",
				"falinwa_branch\\fal_total_amount_hkd_store\\models\\account_invoice.py"
			],
			[
				"gleize",
				"falinwa_module\\gleize_field_ext\\static\\src\\js\\gleize_field_ext.js"
			],
			[
				"sale_timesheetsale_timesheet.py",
				"addons\\sale_timesheet\\models\\sale_timesheet.py"
			],
			[
				"crmcrm_lead_view",
				"addons\\crm\\crm_lead_view.xml"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 357.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
