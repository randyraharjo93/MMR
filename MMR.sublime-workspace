{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"penjualan",
				"penjualanfaktur"
			],
			[
				"semua",
				"semuahasilsearch	(forstmt)"
			],
			[
				"D",
				"DEFAULT_SERVER_DATE_FORMAT	(instance)"
			],
			[
				"a",
				"akundetil"
			],
			[
				"mut",
				"multi	(function)"
			],
			[
				"tan",
				"tanggalterbit"
			],
			[
				"idak",
				"idakun"
			],
			[
				"akun",
				"akundetil	(statement)"
			],
			[
				"jurnal",
				"jurnaldisesuaikan	(statement)"
			],
			[
				"many2",
				"many2one	(class)"
			],
			[
				"all",
				"all_fixed_days	(forstmt)"
			],
			[
				"fal",
				"fal_ending_date"
			],
			[
				"fal_",
				"fal_fixed_days	(statement)"
			],
			[
				"in_",
				"in_invoice_forecast"
			],
			[
				"in",
				"in_sales_forecast"
			],
			[
				"holiday",
				"holiday_remaining	(statement)"
			],
			[
				"time",
				"timedelta	(class)"
			],
			[
				"job",
				"job_id"
			],
			[
				"contr",
				"contract"
			],
			[
				"empl",
				"employee_id"
			],
			[
				"emp",
				"employee"
			],
			[
				"depar",
				"department_id"
			],
			[
				"pro",
				"probability"
			],
			[
				"team",
				"team_id"
			],
			[
				"com",
				"company_list	(statement)"
			],
			[
				"att",
				"attribute"
			],
			[
				"oppor",
				"opportunity_id"
			],
			[
				"user",
				"user_timezone	(statement)"
			],
			[
				"nama",
				"namaproduk"
			],
			[
				"tim",
				"timesheet_id	(statement)"
			],
			[
				"ti",
				"timesheet_id	(statement)"
			],
			[
				"timeshee",
				"timesheet_id	(statement)"
			],
			[
				"accou",
				"account_analytic_list	(statement)"
			],
			[
				"acco",
				"account_analytic_list	(statement)"
			],
			[
				"selec",
				"selection"
			],
			[
				"parent",
				"parent_id"
			],
			[
				"web",
				"website"
			],
			[
				"re",
				"record_options"
			],
			[
				"recor",
				"record_options"
			],
			[
				"vale",
				"values	(param)"
			],
			[
				"tracking",
				"tracking_value_ids"
			],
			[
				"c",
				"company_ids"
			],
			[
				"Many2",
				"Many2many"
			],
			[
				"fal_cem",
				"fal_crm_project"
			],
			[
				"gleize",
				"gleize_field_ext"
			],
			[
				"st",
				"string"
			],
			[
				"attrib",
				"attributes"
			],
			[
				"fal_tech",
				"fal_technical_contact"
			],
			[
				"fal_t",
				"fal_technical_contact"
			],
			[
				"par",
				"partner_id"
			],
			[
				"at",
				"attrs"
			],
			[
				"req",
				"required"
			],
			[
				"child",
				"child_ids"
			],
			[
				"paren",
				"parent_id"
			],
			[
				"pa",
				"parent_id"
			],
			[
				"l",
				"log"
			],
			[
				"cons",
				"console"
			],
			[
				"get",
				"get_context"
			],
			[
				"partner",
				"partner_id"
			],
			[
				"parnter",
				"partner_id"
			],
			[
				"le",
				"margin-left"
			],
			[
				"col",
				"col-md-3"
			],
			[
				"survey",
				"survey_form_question"
			],
			[
				"t-",
				"t-call"
			],
			[
				"id",
				"parent_id"
			],
			[
				"mu",
				"multi"
			],
			[
				"fal_account_per",
				"fal_account_periods_lock	(class)"
			],
			[
				"fis",
				"fiscalyear_id"
			],
			[
				"compan",
				"company_id"
			],
			[
				"g",
				"gleize_web_ext"
			],
			[
				"field",
				"field_name	(forstmt)"
			],
			[
				"margin",
				"margin-left"
			],
			[
				"bor",
				"border-style"
			],
			[
				"border-riht",
				"border-right-width"
			],
			[
				"va",
				"value"
			],
			[
				"form",
				"form_two"
			],
			[
				"back",
				"background-color"
			],
			[
				"mar",
				"margin-left"
			],
			[
				"r",
				"row"
			],
			[
				"text-al",
				"text-align"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "\n\nSearching 3130 files for \"default\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\account.py:\n   78          'line_ids': fields.one2many('account.payment.term.line', 'payment_id', 'Terms', copy=True),\n   79      }\n   80:     _defaults = {\n   81          'active': 1,\n   82      }\n   ..\n  129          'payment_id': fields.many2one('account.payment.term', 'Payment Term', required=True, select=True, ondelete='cascade'),\n  130      }\n  131:     _defaults = {\n  132          'value': 'balance',\n  133          'days': 30,\n  ...\n  210          'note': fields.text('Description'),\n  211      }\n  212:     _defaults = {\n  213          'close_method': 'none',\n  214          'report_type': 'none',\n  ...\n  351  #                if can_compute:\n  352                  for fn in field_names:\n  353:                     sums.setdefault(current.id, {})[fn] = accounts.get(current.id, {}).get(fn, 0.0)\n  354                      for child in current.child_id:\n  355                          if child.company_id.currency_id.id == current.company_id.currency_id.id:\n  ...\n  490          'exchange_rate': fields.related('currency_id', 'rate', type='float', string='Exchange Rate', digits=(12,6)),\n  491          'shortcut': fields.char('Shortcut', size=12),\n  492:         'tax_ids': fields.many2many('account.tax', 'account_account_tax_default_rel',\n  493:             'account_id', 'tax_id', 'Default Taxes'),\n  494          'note': fields.text('Internal Notes'),\n  495          'company_currency_id': fields.function(_get_company_currency, type='many2one', relation='res.currency', string='Company Currency'),\n  ...\n  512      }\n  513  \n  514:     _defaults = {\n  515          'type': 'other',\n  516          'reconcile': False,\n  517          'active': True,\n  518          'currency_mode': 'current',\n  519:         'company_id': lambda s, cr, uid, c: s.pool.get('res.company')._company_default_get(cr, uid, 'account.account', context=c),\n  520      }\n  521  \n  ...\n  627          return res\n  628  \n  629:     def copy(self, cr, uid, id, default=None, context=None, done_list=None, local=False):\n  630:         default = {} if default is None else default.copy()\n  631          if done_list is None:\n  632              done_list = []\n  633          account = self.browse(cr, uid, id, context=context)\n  634          new_child_ids = []\n  635:         default.update(code=_(\"%s (copy)\") % (account['code'] or ''))\n  636          if not local:\n  637              done_list = []\n  ...\n  641          if account:\n  642              for child in account.child_id:\n  643:                 child_ids = self.copy(cr, uid, child.id, default, context=context, done_list=done_list, local=True)\n  644                  if child_ids:\n  645                      new_child_ids.append(child_ids)\n  646:             default['child_parent_ids'] = [(6, 0, new_child_ids)]\n  647          else:\n  648:             default['child_parent_ids'] = False\n  649:         return super(account_account, self).copy(cr, uid, id, default, context=context)\n  650  \n  651      def _check_moves(self, cr, uid, ids, method, context=None):\n  ...\n  736          'type_control_ids': fields.many2many('account.account.type', 'account_journal_type_rel', 'journal_id','type_id', 'Type Controls', domain=[('code','<>','view'), ('code', '<>', 'closed')]),\n  737          'account_control_ids': fields.many2many('account.account', 'account_account_type_rel', 'journal_id','account_id', 'Account', domain=[('type','<>','view'), ('type', '<>', 'closed')]),\n  738:         'default_credit_account_id': fields.many2one('account.account', 'Default Credit Account', domain=\"[('type','!=','view')]\", help=\"It acts as a default account for credit amount\"),\n  739:         'default_debit_account_id': fields.many2one('account.account', 'Default Debit Account', domain=\"[('type','!=','view')]\", help=\"It acts as a default account for debit amount\"),\n  740          'centralisation': fields.boolean('Centralized Counterpart', help=\"Check this box to determine that each entry of this journal won't create a new counterpart but will share the same counterpart. This is used in fiscal year closing.\"),\n  741          'update_posted': fields.boolean('Allow Cancelling Entries', help=\"Check this box if you want to allow the cancellation the entries related to this journal or of the invoice related to this journal\"),\n  ...\n  754      }\n  755  \n  756:     _defaults = {\n  757          'cash_control' : False,\n  758          'with_last_closing_balance' : True,\n  ...\n  770          for journal in self.browse(cr, uid, ids, context=context):\n  771              if journal.currency:\n  772:                 if journal.default_credit_account_id and not journal.default_credit_account_id.currency_id.id == journal.currency.id:\n  773                      return False\n  774:                 if journal.default_debit_account_id and not journal.default_debit_account_id.currency_id.id == journal.currency.id:\n  775                      return False\n  776          return True\n  777  \n  778      _constraints = [\n  779:         (_check_currency, 'Configuration error!\\nThe currency chosen should be shared by the default accounts too.', ['currency','default_debit_account_id','default_credit_account_id']),\n  780      ]\n  781  \n  782:     def copy(self, cr, uid, id, default=None, context=None):\n  783:         default = dict(context or {})\n  784          journal = self.browse(cr, uid, id, context=context)\n  785:         default.update(\n  786              code=_(\"%s (copy)\") % (journal['code'] or ''),\n  787              name=_(\"%s (copy)\") % (journal['name'] or ''))\n  788:         return super(account_journal, self).copy(cr, uid, id, default, context=context)\n  789  \n  790      def write(self, cr, uid, ids, vals, context=None):\n  ...\n  878               readonly=True, copy=False),\n  879      }\n  880:     _defaults = {\n  881          'state': 'draft',\n  882          'company_id': lambda self,cr,uid,c: self.pool.get('res.users').browse(cr, uid, uid, c).company_id.id,\n  ...\n  975          'company_id': fields.related('fiscalyear_id', 'company_id', type='many2one', relation='res.company', string='Company', store=True, readonly=True)\n  976      }\n  977:     _defaults = {\n  978          'state': 'draft',\n  979      }\n  ...\n 1140          return super(account_journal_period, self).unlink(cr, uid, ids, context=context)\n 1141  \n 1142:     _defaults = {\n 1143          'state': 'draft',\n 1144          'active': True,\n ....\n 1218          result = dict(cr.fetchall())\n 1219          for id in ids:\n 1220:             result.setdefault(id, 0.0)\n 1221          return result\n 1222  \n ....\n 1273      }\n 1274  \n 1275:     _defaults = {\n 1276          'name': '/',\n 1277          'state': 'draft',\n ....\n 1384                  context['period_id'] = vals['period_id']\n 1385              else:\n 1386:                 default_period = self._get_period(cr, uid, context)\n 1387                  for l in vals['line_id']:\n 1388                      if not l[0]:\n 1389:                         l[2]['period_id'] = default_period\n 1390:                 context['period_id'] = default_period\n 1391  \n 1392              c = context.copy()\n ....\n 1443  \n 1444          if mode=='credit':\n 1445:             account_id = move.journal_id.default_debit_account_id.id\n 1446              mode2 = 'debit'\n 1447              if not account_id:\n 1448                  raise osv.except_osv(_('User Error!'),\n 1449:                         _('There is no default debit account defined \\n' \\\n 1450                                  'on journal \"%s\".') % move.journal_id.name)\n 1451          else:\n 1452:             account_id = move.journal_id.default_credit_account_id.id\n 1453              mode2 = 'credit'\n 1454              if not account_id:\n 1455                  raise osv.except_osv(_('User Error!'),\n 1456:                         _('There is no default credit account defined \\n' \\\n 1457                                  'on journal \"%s\".') % move.journal_id.name)\n 1458  \n ....\n 1498              if not currency_obj.is_zero(cr, uid, currency_id, row['amount_currency']):\n 1499                  amount_currency = row['amount_currency'] * -1\n 1500:                 account_id = amount_currency > 0 and move.journal_id.default_debit_account_id.id or move.journal_id.default_credit_account_id.id\n 1501                  cr.execute('select id from account_move_line where move_id=%s and centralisation=\\'currency\\' and currency_id = %slimit 1', (move.id, row['currency_id']))\n 1502                  res = cr.fetchone()\n ....\n 1630          'opening_reconciliation': fields.boolean('Opening Entries Reconciliation', help=\"Is this reconciliation produced by the opening of a new fiscal year ?.\"),\n 1631      }\n 1632:     _defaults = {\n 1633          'name': lambda self,cr,uid,ctx=None: self.pool.get('ir.sequence').get(cr, uid, 'account.reconcile', context=ctx) or '/',\n 1634      }\n ....\n 1818                  for x in reads]\n 1819  \n 1820:     def _default_company(self, cr, uid, context=None):\n 1821          user = self.pool.get('res.users').browse(cr, uid, uid, context=context)\n 1822          if user.company_id:\n ....\n 1824          return self.pool.get('res.company').search(cr, uid, [('parent_id', '=', False)])[0]\n 1825  \n 1826:     _defaults = {\n 1827:         'company_id': _default_company,\n 1828          'sign': 1.0,\n 1829          'notprintable': False,\n ....\n 1855              Ex: result=round(price_unit*0.21,4)\n 1856      \"\"\"\n 1857:     def copy_data(self, cr, uid, id, default=None, context=None):\n 1858:         if default is None:\n 1859:             default = {}\n 1860          this = self.browse(cr, uid, id, context=context)\n 1861:         tmp_default = dict(default, name=_(\"%s (Copy)\") % this.name)\n 1862:         return super(account_tax, self).copy_data(cr, uid, id, default=tmp_default, context=context)\n 1863  \n 1864      _name = 'account.tax'\n ....\n 1874              help=\"If not applicable (computed through a Python code), the tax won't appear on the invoice.\"),\n 1875          'domain':fields.char('Domain', help=\"This field is only used if you develop your own module allowing developers to create specific taxes in a custom domain.\"),\n 1876:         'account_collected_id':fields.many2one('account.account', 'Invoice Tax Account', help=\"Set the account that will be set by default on invoice tax lines for invoices. Leave empty to use the expense account.\"),\n 1877:         'account_paid_id':fields.many2one('account.account', 'Refund Tax Account', help=\"Set the account that will be set by default on invoice tax lines for refunds. Leave empty to use the expense account.\"),\n 1878:         'account_analytic_collected_id':fields.many2one('account.analytic.account', 'Invoice Tax Analytic Account', help=\"Set the analytic account that will be used by default on the invoice tax lines for invoices. Leave empty if you don't want to use an analytic account on the invoice tax lines by default.\"),\n 1879:         'account_analytic_paid_id':fields.many2one('account.analytic.account', 'Refund Tax Analytic Account', help=\"Set the analytic account that will be used by default on the invoice tax lines for refunds. Leave empty if you don't want to use an analytic account on the invoice tax lines by default.\"),\n 1880          'parent_id':fields.many2one('account.tax', 'Parent Tax Account', select=True),\n 1881          'child_ids':fields.one2many('account.tax', 'parent_id', 'Child Tax Accounts'),\n ....\n 1919          @param name: name to search\n 1920          @param args: other arguments\n 1921:         @param operator: default operator is 'ilike', it can be changed\n 1922          @param context: context arguments, like lang, time zone\n 1923:         @param limit: Returns first 'n' ids of complete result, default is 80.\n 1924  \n 1925          @return: Returns a list of tupples containing id and name\n ....\n 1966          return res\n 1967  \n 1968:     def _default_company(self, cr, uid, context=None):\n 1969          user = self.pool.get('res.users').browse(cr, uid, uid, context=context)\n 1970          if user.company_id:\n ....\n 1972          return self.pool.get('res.company').search(cr, uid, [('parent_id', '=', False)])[0]\n 1973  \n 1974:     _defaults = {\n 1975          'python_compute': '''# price_unit\\n# or False\\n# product: product.product object or None\\n# partner: res.partner object or None\\n\\nresult = price_unit * 0.10''',\n 1976          'python_compute_inv': '''# price_unit\\n# product: product.product object or False\\n\\nresult = price_unit * 0.10''',\n ....\n 1987          'base_sign': 1,\n 1988          'include_base_amount': False,\n 1989:         'company_id': _default_company,\n 1990      }\n 1991      _order = 'sequence'\n ....\n 2089          \"\"\"\n 2090  \n 2091:         # By default, for each tax, tax amount will first be computed\n 2092          # and rounded at the 'Account' decimal precision for each\n 2093          # PO/SO/invoice line and then these rounded amounts will be\n ....\n 2270      }\n 2271  \n 2272:     _defaults = {\n 2273          'legend': lambda self, cr, uid, context:_('You can specify year, month and date in the name of the model using the following labels:\\n\\n%(year)s: To Specify Year \\n%(month)s: To Specify Month \\n%(date)s: Current Date\\n\\ne.g. My model on %(date)s'),\n 2274      }\n ....\n 2409          'lines_id': fields.one2many('account.subscription.line', 'subscription_id', 'Subscription Lines', copy=True)\n 2410      }\n 2411:     _defaults = {\n 2412          'date_start': fields.date.context_today,\n 2413          'period_type': 'month',\n ....\n 2528          'parent_id': fields.many2one('account.account.template', 'Parent Account Template', ondelete='cascade', domain=[('type','=','view')]),\n 2529          'child_parent_ids':fields.one2many('account.account.template', 'parent_id', 'Children'),\n 2530:         'tax_ids': fields.many2many('account.tax.template', 'account_account_template_tax_rel', 'account_id', 'tax_id', 'Default Taxes'),\n 2531:         'nocreate': fields.boolean('Optional create', help=\"If checked, the new chart of accounts will not contain this by default.\"),\n 2532          'chart_template_id': fields.many2one('account.chart.template', 'Chart Template', help=\"This optional field allow you to link an account template to a specific chart template that may differ from the one its root parent belongs to. This allow you to define chart templates that extend another and complete it with few new accounts (You don't need to define the whole structure that is common to both several times).\"),\n 2533      }\n 2534  \n 2535:     _defaults = {\n 2536          'reconcile': False,\n 2537          'type': 'view',\n ....\n 2647          'cparent_id':fields.many2one('account.account', 'Parent target', help=\"Creates an account with the selected template under this existing parent.\", required=True),\n 2648      }\n 2649:     _defaults = {\n 2650          'cparent_id': _get_def_cparent,\n 2651      }\n ....\n 2699      }\n 2700  \n 2701:     _defaults = {\n 2702          'sign': 1.0,\n 2703          'notprintable': False,\n ....\n 2781      }\n 2782  \n 2783:     _defaults = {\n 2784          'visible': True,\n 2785          'code_digits': 6,\n ....\n 2838          return res\n 2839  \n 2840:     def _default_company(self, cr, uid, context=None):\n 2841          user = self.pool.get('res.users').browse(cr, uid, uid, context=context)\n 2842          if user.company_id:\n ....\n 2844          return self.pool.get('res.company').search(cr, uid, [('parent_id', '=', False)])[0]\n 2845  \n 2846:     _defaults = {\n 2847          'python_compute': lambda *a: '''# price_unit\\n# product: product.product object or None\\n# partner: res.partner object or None\\n\\nresult = price_unit * 0.10''',\n 2848          'python_compute_inv': lambda *a: '''# price_unit\\n# product: product.product object or False\\n\\nresult = price_unit * 0.10''',\n ....\n 3014          'bank_accounts_id': fields.one2many('account.bank.accounts.wizard', 'bank_account_id', 'Cash and Banks', required=True),\n 3015          'code_digits':fields.integer('# of Digits', required=True, help=\"No. of Digits to use for account code\"),\n 3016:         \"sale_tax\": fields.many2one(\"account.tax.template\", \"Default Sale Tax\"),\n 3017:         \"purchase_tax\": fields.many2one(\"account.tax.template\", \"Default Purchase Tax\"),\n 3018          'sale_tax_rate': fields.float('Sales Tax(%)'),\n 3019          'purchase_tax_rate': fields.float('Purchase Tax(%)'),\n ....\n 3047              res['value'].update({'complete_tax_set': data.complete_tax_set, 'currency_id': currency_id})\n 3048              if data.complete_tax_set:\n 3049:             # default tax is given by the lowest sequence. For same sequence we will take the latest created as it will be the case for tax created while isntalling the generic chart of account\n 3050                  chart_ids = self._get_chart_parent_ids(cr, uid, data, context=context)\n 3051                  base_tax_domain = [(\"chart_template_id\", \"in\", chart_ids), ('parent_id', '=', False)]\n ....\n 3056                  res['value'].update({'sale_tax': sale_tax_ids and sale_tax_ids[0] or False,\n 3057                                       'purchase_tax': purchase_tax_ids and purchase_tax_ids[0] or False})\n 3058:                 res.setdefault('domain', {})\n 3059                  res['domain']['sale_tax'] = repr(sale_tax_domain)\n 3060                  res['domain']['purchase_tax'] = repr(purchase_tax_domain)\n ....\n 3063          return res\n 3064  \n 3065:     def default_get(self, cr, uid, fields, context=None):\n 3066:         res = super(wizard_multi_charts_accounts, self).default_get(cr, uid, fields, context=context)\n 3067          tax_templ_obj = self.pool.get('account.tax.template')\n 3068          account_chart_template = self.pool['account.chart.template']\n ....\n 3082          ids = account_chart_template.search(cr, uid, [('visible', '=', True)], context=context)\n 3083          if ids:\n 3084:             #in order to set default chart which was last created set max of ids.\n 3085              chart_id = max(ids)\n 3086:             if context.get(\"default_charts\"):\n 3087:                 model_data = self.pool.get('ir.model.data').search_read(cr, uid, [('model','=','account.chart.template'),('module','=',context.get(\"default_charts\"))], ['res_id'], context=context)\n 3088                  if model_data:\n 3089                      chart_id = model_data[0]['res_id']\n ....\n 3169              return data and data[1] or False\n 3170  \n 3171:         def _get_default_account(journal_type, type='debit'):\n 3172:             # Get the default accounts\n 3173:             default_account = False\n 3174              if journal_type in ('sale', 'sale_refund'):\n 3175:                 default_account = acc_template_ref.get(template.property_account_income_categ.id)\n 3176              elif journal_type in ('purchase', 'purchase_refund'):\n 3177:                 default_account = acc_template_ref.get(template.property_account_expense_categ.id)\n 3178              elif journal_type == 'situation':\n 3179                  if type == 'debit':\n 3180:                     default_account = acc_template_ref.get(template.property_account_expense_opening.id)\n 3181                  else:\n 3182:                     default_account = acc_template_ref.get(template.property_account_income_opening.id)\n 3183:             return default_account\n 3184  \n 3185          journal_names = {\n ....\n 3213                  'centralisation': journal_type == 'situation',\n 3214                  'analytic_journal_id': _get_analytic_journal(journal_type),\n 3215:                 'default_credit_account_id': _get_default_account(journal_type, 'credit'),\n 3216:                 'default_debit_account_id': _get_default_account(journal_type, 'debit'),\n 3217              }\n 3218              journal_data.append(vals)\n ....\n 3361          This function checks if the chosen chart template is configured as containing a full set of taxes, and if\n 3362          it's not the case, it creates the templates for account.tax.code and for account.account.tax objects accordingly\n 3363:         to the provided sale/purchase rates. Then it saves the new tax templates as default taxes to use for this chart\n 3364          template.\n 3365  \n ....\n 3416          acc_template_ref, taxes_ref, tax_code_ref = self._install_template(cr, uid, obj_wizard.chart_template_id.id, company_id, code_digits=obj_wizard.code_digits, obj_wizard=obj_wizard, context=context)\n 3417  \n 3418:         # write values of default taxes for product as super user\n 3419          if obj_wizard.sale_tax and taxes_ref:\n 3420:             ir_values_obj.set_default(cr, SUPERUSER_ID, 'product.template', \"taxes_id\", [taxes_ref[obj_wizard.sale_tax.id]], for_all_users=True, company_id=company_id)\n 3421          if obj_wizard.purchase_tax and taxes_ref:\n 3422:             ir_values_obj.set_default(cr, SUPERUSER_ID, 'product.template', \"supplier_taxes_id\", [taxes_ref[obj_wizard.purchase_tax.id]], for_all_users=True, company_id=company_id)\n 3423  \n 3424          # Create Bank journals\n ....\n 3426          return {}\n 3427  \n 3428:     def _prepare_bank_journal(self, cr, uid, line, current_num, default_account_id, company_id, context=None):\n 3429          '''\n 3430          This function prepares the value to use for the creation of a bank journal created through the wizard of\n ....\n 3433          :param line: dictionary containing the values encoded by the user related to his bank account\n 3434          :param current_num: integer corresponding to a counter of the already created bank journals through this wizard.\n 3435:         :param default_account_id: id of the default debit.credit account created before for this journal.\n 3436          :param company_id: id of the company for which the wizard is running\n 3437          :return: mapping of field names and values\n ....\n 3462                  'analytic_journal_id': False,\n 3463                  'currency': False,\n 3464:                 'default_credit_account_id': default_account_id,\n 3465:                 'default_debit_account_id': default_account_id,\n 3466          }\n 3467          if line['currency_id']:\n ....\n 3472      def _prepare_bank_account(self, cr, uid, line, new_code, acc_template_ref, ref_acc_bank, company_id, context=None):\n 3473          '''\n 3474:         This function prepares the value to use for the creation of the default debit and credit accounts of a\n 3475          bank journal created through the wizard of generating COA from templates.\n 3476  \n ....\n 3541                  else:\n 3542                      current_num += 1\n 3543:             # Create the default debit/credit accounts for this bank journal\n 3544              vals = self._prepare_bank_account(cr, uid, line, new_code, acc_template_ref, ref_acc_bank, company_id, context=context)\n 3545:             default_account_id  = obj_acc.create(cr, uid, vals, context=context)\n 3546  \n 3547              #create the bank journal\n 3548:             vals_journal = self._prepare_bank_journal(cr, uid, line, current_num, default_account_id, company_id, context=context)\n 3549              obj_journal.create(cr, uid, vals_journal)\n 3550              current_num += 1\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\account_analytic_line.py:\n   39      }\n   40  \n   41:     _defaults = {\n   42:         'company_id': lambda self,cr,uid,c: self.pool.get('res.company')._company_default_get(cr, uid, 'account.analytic.line', context=c),\n   43      }\n   44      _order = 'date desc'\n   ..\n  123          if unit:\n  124              # price_get() will respect a 'uom' in its context, in order\n  125:             # to return a default price for those units\n  126              ctx['uom'] = unit\n  127          amount_unit = prod.price_get(pricetype.field, context=ctx)[prod.id]\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\account_bank.py:\n  105                      'company_id': bank.company_id.id,\n  106                      'analytic_journal_id': False,\n  107:                     'default_credit_account_id': acc_bank_id,\n  108:                     'default_debit_account_id': acc_bank_id,\n  109                  }\n  110                  journal_id = jour_obj.create(cr, uid, vals_journal, context=context)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\account_bank_statement.py:\n   31      def create(self, cr, uid, vals, context=None):\n   32          if vals.get('name', '/') == '/':\n   33:             journal_id = vals.get('journal_id', self._default_journal_id(cr, uid, context=context))\n   34:             vals['name'] = self._compute_default_statement_name(cr, uid, journal_id, context=context)\n   35          if 'line_ids' in vals:\n   36              for idx, line in enumerate(vals['line_ids']):\n   ..\n   46          return res\n   47  \n   48:     def _default_journal_id(self, cr, uid, context=None):\n   49          if context is None:\n   50              context = {}\n   51          journal_pool = self.pool.get('account.journal')\n   52          journal_type = context.get('journal_type', False)\n   53:         company_id = self.pool.get('res.company')._company_default_get(cr, uid, 'account.bank.statement',context=context)\n   54          if journal_type:\n   55              ids = journal_pool.search(cr, uid, [('type', '=', journal_type),('company_id','=',company_id)])\n   ..\n   72          return False\n   73  \n   74:     def _compute_default_statement_name(self, cr, uid, journal_id, context=None):\n   75          context = dict(context or {})\n   76          obj_seq = self.pool.get('ir.sequence')\n   ..\n   84          res_currency_obj = self.pool.get('res.currency')\n   85          res_users_obj = self.pool.get('res.users')\n   86:         default_currency = res_users_obj.browse(cursor, user,\n   87                  user, context=context).company_id.currency_id\n   88          for statement in self.browse(cursor, user, ids, context=context):\n   89              currency = statement.journal_id.currency\n   90              if not currency:\n   91:                 currency = default_currency\n   92              res[statement.id] = currency.id\n   93          currency_names = {}\n   ..\n  156          'currency': fields.function(_currency, string='Currency',\n  157              type='many2one', relation='res.currency'),\n  158:         'account_id': fields.related('journal_id', 'default_debit_account_id', type='many2one', relation='account.account', string='Account used in this journal', readonly=True, help='used in statement reconciliation domain, but shouldn\\'t be used elswhere.'),\n  159          'cash_control': fields.related('journal_id', 'cash_control' , type='boolean', relation='account.journal',string='Cash control'),\n  160          'all_lines_reconciled': fields.function(_all_lines_reconciled, string='All lines reconciled', type='boolean'),\n  161      }\n  162  \n  163:     _defaults = {\n  164          'name': '/', \n  165          'date': fields.date.context_today,\n  166          'state': 'draft',\n  167:         'journal_id': _default_journal_id,\n  168          'period_id': _get_period,\n  169:         'company_id': lambda self,cr,uid,c: self.pool.get('res.company')._company_default_get(cr, uid, 'account.bank.statement',context=c),\n  170      }\n  171  \n  ...\n  230          \"\"\"\n  231          if st_line.amount >= 0:\n  232:             return st_line.statement_id.journal_id.default_credit_account_id.id\n  233:         return st_line.statement_id.journal_id.default_debit_account_id.id\n  234  \n  235      def _get_counter_part_partner(self, cr, uid, st_line, context=None):\n  ...\n  326  \n  327              self.balance_check(cr, uid, st.id, journal_type=j_type, context=context)\n  328:             if (not st.journal_id.default_credit_account_id) \\\n  329:                     or (not st.journal_id.default_debit_account_id):\n  330                  raise osv.except_osv(_('Configuration Error!'), _('Please verify that an account is defined in the journal.'))\n  331              for line in st.move_line_ids:\n  ...\n  505              'partner_id': st_line.partner_id.id,\n  506              'statement_id': st_line.statement_id.id,\n  507:             'account_code': st_line.journal_id.default_debit_account_id.code,\n  508:             'account_name': st_line.journal_id.default_debit_account_id.name,\n  509              'partner_name': st_line.partner_id.name,\n  510              'communication_partner_name': st_line.partner_name,\n  ...\n  850          'currency_id': fields.many2one('res.currency', 'Currency', help=\"The optional other currency if it is a multi-currency entry.\"),\n  851      }\n  852:     _defaults = {\n  853          'name': lambda self,cr,uid,context={}: self.pool.get('ir.sequence').get(cr, uid, 'account.bank.statement.line'),\n  854          'date': lambda self,cr,uid,context={}: context.get('date', fields.date.context_today(self,cr,uid,context=context)),\n  ...\n  868          'analytic_account_id': fields.many2one('account.analytic.account', 'Analytic Account', ondelete='set null', domain=[('type','!=','view'), ('state','not in',('close','cancelled'))]),\n  869      }\n  870:     _defaults = {\n  871          'amount_type': 'percentage_of_balance',\n  872          'amount': 100.0\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\account_bank_view.xml:\n   40          <field name=\"view_type\">form</field>\n   41          <field name=\"view_mode\">tree,form</field>\n   42:         <field name=\"context\" eval=\"{'default_partner_id':ref('base.main_partner'), 'company_hide':False, 'default_company_id':ref('base.main_company'), 'search_default_my_bank':1}\"/>\n   43          <field name=\"help\" type=\"html\">\n   44            <p class=\"oe_view_nocontent_create\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\account_cash_statement.py:\n  174  \n  175          st = self.browse(cr, uid, statement_ids[0], context=context)\n  176:         result.setdefault('value', {}).update({'last_closing_balance' : st.balance_end_real})\n  177  \n  178          return result\n  ...\n  193          'last_closing_balance' : fields.function(_compute_last_closing_balance, method=True, string='Last Closing Balance', type='float'),\n  194      }\n  195:     _defaults = {\n  196          'state': 'draft',\n  197          'date': lambda self, cr, uid, context={}: context.get('date', time.strftime(\"%Y-%m-%d %H:%M:%S\")),\n  ...\n  335      _inherit = 'account.journal'\n  336  \n  337:     def _default_cashbox_line_ids(self, cr, uid, context=None):\n  338          # Return a list of coins in Euros.\n  339          result = [\n  ...\n  346      }\n  347  \n  348:     _defaults = {\n  349:         'cashbox_line_ids' : _default_cashbox_line_ids,\n  350      }\n  351  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\account_end_fy.xml:\n    8              <field name=\"view_type\">form</field>\n    9              <field name=\"view_id\" ref=\"view_account_period_tree\"/>\n   10:             <field name=\"context\">{'search_default_draft': 1}</field>\n   11              <field name=\"help\">A period is a fiscal period of time during which accounting entries should be recorded for accounting related activities. Monthly period is the norm but depending on your countries or company needs, you could also have quarterly periods. Closing a period will make it impossible to record new accounting entries, all new entries should then be made on the following open period. Close a period when you do not want to record new entries and want to lock this period for tax related calculation.</field>\n   12          </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\account_financial_report.py:\n  132      }\n  133  \n  134:     _defaults = {\n  135          'type': 'sum',\n  136          'display_detail': 'detail_flat',\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\account_installer.xml:\n   11                  <footer position=\"replace\">\n   12                      <footer>\n   13:                       <button name=\"action_next\" context=\"{'default_charts':charts}\" type=\"object\" string=\"Continue\" class=\"oe_highlight\"/>\n   14                      </footer>\n   15                  </footer>\n   ..\n   21                      <group>\n   22                          <field name=\"charts\" class=\"oe_inline\"/>\n   23:                         <field name=\"company_id\" widget=\"selection\"/><!-- we assume that this wizard will be run only by administrators and as this field may cause problem if hidden (because of the default company of the user removed from the selection because already configured), we simply choosed to remove the group \"multi company\" of it -->\n   24                      </group>\n   25                      <group string=\"Configure your Fiscal Year\" groups=\"account.group_account_user\">\n   26:                         <field name=\"has_default_company\" invisible=\"1\" />\n   27                          \n   28                          <label for=\"date_start\" string=\"Date Range\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\account_invoice.py:\n   69  \n   70      @api.model\n   71:     def _default_journal(self):\n   72          inv_type = self._context.get('type', 'out_invoice')\n   73          inv_types = inv_type if isinstance(inv_type, list) else [inv_type]\n   ..\n   80  \n   81      @api.model\n   82:     def _default_currency(self):\n   83:         journal = self._default_journal()\n   84          return journal.currency or journal.company_id.currency_id\n   85  \n   ..\n  201              ('out_refund','Customer Refund'),\n  202              ('in_refund','Supplier Refund'),\n  203:         ], string='Type', readonly=True, index=True, change_default=True,\n  204:         default=lambda self: self._context.get('type', 'out_invoice'),\n  205          track_visibility='always')\n  206  \n  207      number = fields.Char(related='move_id.name', store=True, readonly=True, copy=False)\n  208      internal_number = fields.Char(string='Invoice Number', readonly=True,\n  209:         default=False, copy=False,\n  210          help=\"Unique number of the invoice, computed automatically when the invoice is created.\")\n  211      reference = fields.Char(string='Invoice Reference',\n  ...\n  213      reference_type = fields.Selection('_get_reference_type', string='Payment Reference',\n  214          required=True, readonly=True, states={'draft': [('readonly', False)]},\n  215:         default='none')\n  216      comment = fields.Text('Additional Information')\n  217  \n  ...\n  223              ('paid','Paid'),\n  224              ('cancel','Cancelled'),\n  225:         ], string='Status', index=True, readonly=True, default='draft',\n  226          track_visibility='onchange', copy=False,\n  227          help=\" * The 'Draft' status is used when a user is encoding a new and unconfirmed Invoice.\\n\"\n  ...\n  230               \" * The 'Paid' status is set automatically when the invoice is paid. Its related journal entries may or may not be reconciled.\\n\"\n  231               \" * The 'Cancelled' status is used when user cancel invoice.\")\n  232:     sent = fields.Boolean(readonly=True, default=False, copy=False,\n  233          help=\"It indicates that the invoice has been sent.\")\n  234      date_invoice = fields.Date(string='Invoice Date',\n  ...\n  242               \"term is not set on the invoice. If you keep the payment term and the due date empty, it \"\n  243               \"means direct payment.\")\n  244:     partner_id = fields.Many2one('res.partner', string='Partner', change_default=True,\n  245          required=True, readonly=True, states={'draft': [('readonly', False)]},\n  246          track_visibility='always')\n  ...\n  275      currency_id = fields.Many2one('res.currency', string='Currency',\n  276          required=True, readonly=True, states={'draft': [('readonly', False)]},\n  277:         default=_default_currency, track_visibility='always')\n  278      journal_id = fields.Many2one('account.journal', string='Journal',\n  279          required=True, readonly=True, states={'draft': [('readonly', False)]},\n  280:         default=_default_journal,\n  281          domain=\"[('type', 'in', {'out_invoice': ['sale'], 'out_refund': ['sale_refund'], 'in_refund': ['purchase_refund'], 'in_invoice': ['purchase']}.get(type, [])), ('company_id', '=', company_id)]\")\n  282:     company_id = fields.Many2one('res.company', string='Company', change_default=True,\n  283          required=True, readonly=True, states={'draft': [('readonly', False)]},\n  284:         default=lambda self: self.env['res.company']._company_default_get('account.invoice'))\n  285      check_total = fields.Float(string='Verification Total', digits=dp.get_precision('Account'),\n  286:         readonly=True, states={'draft': [('readonly', False)]}, default=0.0)\n  287  \n  288      reconciled = fields.Boolean(string='Paid/Reconciled',\n  ...\n  304      user_id = fields.Many2one('res.users', string='Salesperson', track_visibility='onchange',\n  305          readonly=True, states={'draft': [('readonly', False)]},\n  306:         default=lambda self: self.env.user)\n  307      fiscal_position = fields.Many2one('account.fiscal.position', string='Fiscal Position',\n  308          readonly=True, states={'draft': [('readonly', False)]})\n  ...\n  386      def action_invoice_sent(self):\n  387          \"\"\" Open a window to compose an email, with the edi invoice template\n  388:             message loaded by default\n  389          \"\"\"\n  390          assert len(self) == 1, 'This option should only be used for a single id at a time.'\n  ...\n  392          compose_form = self.env.ref('mail.email_compose_message_wizard_form', False)\n  393          ctx = dict(\n  394:             default_model='account.invoice',\n  395:             default_res_id=self.id,\n  396:             default_use_template=bool(template),\n  397:             default_template_id=template.id,\n  398:             default_composition_mode='comment',\n  399              mark_invoice_as_sent=True,\n  400          )\n  ...\n  582              if journals:\n  583                  values['journal_id'] = journals[0].id\n  584:             journal_defaults = self.env['ir.values'].get_defaults_dict('account.invoice', 'type=%s' % type)\n  585:             if 'journal_id' in journal_defaults:\n  586:                 values['journal_id'] = journal_defaults['journal_id']\n  587              if not values.get('journal_id'):\n  588                  field_desc = journals.fields_get(['type'])\n  ...\n 1224  \n 1225      @api.model\n 1226:     def _default_price_unit(self):\n 1227          if not self._context.get('check_total'):\n 1228              return 0\n ....\n 1243  \n 1244      @api.model\n 1245:     def _default_account(self):\n 1246:         # XXX this gets the default account for the user's company,\n 1247:         # it should get the default account for the invoice's company\n 1248          # however, the invoice's company does not reach this point\n 1249          if self._context.get('type') in ('out_invoice', 'out_refund'):\n ....\n 1255      origin = fields.Char(string='Source Document',\n 1256          help=\"Reference of the document that produced this invoice.\")\n 1257:     sequence = fields.Integer(string='Sequence', default=10,\n 1258          help=\"Gives the sequence of this line when displaying the invoice.\")\n 1259      invoice_id = fields.Many2one('account.invoice', string='Invoice Reference',\n ....\n 1265      account_id = fields.Many2one('account.account', string='Account',\n 1266          required=True, domain=[('type', 'not in', ['view', 'closed'])],\n 1267:         default=_default_account,\n 1268          help=\"The income or expense account related to the selected product.\")\n 1269      price_unit = fields.Float(string='Unit Price', required=True,\n 1270          digits= dp.get_precision('Product Price'),\n 1271:         default=_default_price_unit)\n 1272      price_subtotal = fields.Float(string='Amount', digits= dp.get_precision('Account'),\n 1273          store=True, readonly=True, compute='_compute_price')\n 1274      quantity = fields.Float(string='Quantity', digits= dp.get_precision('Product Unit of Measure'),\n 1275:         required=True, default=1)\n 1276      discount = fields.Float(string='Discount (%)', digits= dp.get_precision('Discount'),\n 1277:         default=0.0)\n 1278      invoice_line_tax_id = fields.Many2many('account.tax',\n 1279          'account_invoice_line_tax', 'invoice_line_id', 'tax_id',\n ....\n 1489      base = fields.Float(string='Base', digits=dp.get_precision('Account'))\n 1490      amount = fields.Float(string='Amount', digits=dp.get_precision('Account'))\n 1491:     manual = fields.Boolean(string='Manual', default=True)\n 1492      sequence = fields.Integer(string='Sequence',\n 1493          help=\"Gives the sequence order when displaying a list of invoice tax.\")\n ....\n 1495          help=\"The account basis of the tax declaration.\")\n 1496      base_amount = fields.Float(string='Base Code Amount', digits=dp.get_precision('Account'),\n 1497:         default=0.0)\n 1498      tax_code_id = fields.Many2one('account.tax.code', string='Tax Code',\n 1499          help=\"The tax basis of the tax declaration.\")\n 1500      tax_amount = fields.Float(string='Tax Code Amount', digits=dp.get_precision('Account'),\n 1501:         default=0.0)\n 1502  \n 1503      company_id = fields.Many2one('res.company', string='Company',\n ....\n 1562  \n 1563                  # If the taxes generate moves on the same financial account as the invoice line\n 1564:                 # and no default analytic account is defined at the tax level, propagate the\n 1565                  # analytic account from the invoice line to the tax line. This is necessary\n 1566                  # in situations were (part of) the taxes cannot be reclaimed,\n ....\n 1635      def send_mail(self):\n 1636          context = self._context\n 1637:         if context.get('default_model') == 'account.invoice' and \\\n 1638:                 context.get('default_res_id') and context.get('mark_invoice_as_sent'):\n 1639:             invoice = self.env['account.invoice'].browse(context['default_res_id'])\n 1640              invoice = invoice.with_context(mail_post_autofollow=True)\n 1641              invoice.write({'sent': True})\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\account_invoice_view.xml:\n  167                              <field string=\"Supplier\" name=\"partner_id\"\n  168                                on_change=\"onchange_partner_id(type, partner_id, date_invoice, payment_term, partner_bank_id, company_id, context)\"\n  169:                               context=\"{'default_customer': 0, 'search_default_supplier': 1, 'default_supplier': 1}\"\n  170                                domain=\"[('supplier', '=', True)]\"/>\n  171                              <field name=\"fiscal_position\" options=\"{'no_create': True}\"/>\n  ...\n  252                                  <group>\n  253                                      <field domain=\"[('partner_id', '=', partner_id)]\" name=\"partner_bank_id\" on_change=\"onchange_partner_bank(partner_bank_id)\"/>\n  254:                                     <field name=\"user_id\" string=\"Responsible\" context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'account.group_account_invoice']}\"/>\n  255                                      <field name=\"name\" invisible=\"1\"/>\n  256                                      <field name=\"payment_term\" options=\"{'no_create': True}\"/>\n  ...\n  322                              <field string=\"Customer\" name=\"partner_id\"\n  323                                  on_change=\"onchange_partner_id(type, partner_id, date_invoice, payment_term, partner_bank_id, company_id, context)\"\n  324:                                 context=\"{'search_default_customer':1, 'show_address': 1}\"\n  325                                  options='{\"always_reload\": True}'\n  326                                  domain=\"[('customer', '=', True)]\"/>\n  ...\n  395                                  <group>\n  396                                      <field name=\"company_id\" on_change=\"onchange_company_id(company_id,partner_id,type,invoice_line,currency_id)\" widget=\"selection\" groups=\"base.group_multi_company\"/>\n  397:                                     <field name=\"user_id\" groups=\"base.group_user\" context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'account.group_account_invoice']}\"/>\n  398                                      <field domain=\"[('partner_id.ref_companies', 'in', [company_id])]\" name=\"partner_bank_id\"/>\n  399                                      <field name=\"period_id\" domain=\"[('state', '=', 'draft'), ('company_id', '=', company_id)]\"\n  ...\n  524              <field eval=\"False\" name=\"view_id\"/>\n  525              <field name=\"domain\">[('type','=','out_invoice')]</field>\n  526:             <field name=\"context\">{'default_type':'out_invoice', 'type':'out_invoice', 'journal_type': 'sale'}</field>\n  527              <field name=\"search_view_id\" ref=\"view_account_invoice_filter\"/>\n  528              <field name=\"help\" type=\"html\">\n  ...\n  564              <field eval=\"False\" name=\"view_id\"/>\n  565              <field name=\"domain\">[('type','=','in_invoice')]</field>\n  566:             <field name=\"context\">{'default_type': 'in_invoice', 'type': 'in_invoice', 'journal_type': 'purchase'}</field>\n  567              <field name=\"search_view_id\" ref=\"view_account_invoice_filter\"/>\n  568              <field name=\"help\" type=\"html\">\n  ...\n  585              <field eval=\"False\" name=\"view_id\"/>\n  586              <field name=\"domain\">[('type','=','out_refund')]</field>\n  587:             <field name=\"context\">{'default_type':'out_refund', 'type':'out_refund', 'journal_type': 'sale_refund'}</field>\n  588              <field name=\"search_view_id\" ref=\"view_account_invoice_filter\"/>\n  589              <field name=\"help\" type=\"html\">\n  ...\n  621              <field eval=\"False\" name=\"view_id\"/>\n  622              <field name=\"domain\">[('type','=','in_refund')]</field>\n  623:             <field name=\"context\">{'default_type': 'in_refund', 'type': 'in_refund', 'journal_type': 'purchase_refund'}</field>\n  624              <field name=\"search_view_id\" ref=\"view_account_invoice_filter\"/>\n  625              <field name=\"help\" type=\"html\">\n  ...\n  637             id=\"act_account_journal_2_account_invoice_opened\"\n  638             name=\"Unpaid Invoices\"\n  639:            context=\"{'search_default_journal_id': [active_id], 'search_default_unpaid':1, 'default_journal_id': active_id}\"\n  640             domain=\"[('journal_id','=', active_id)]\"\n  641             res_model=\"account.invoice\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\account_move_line.py:\n  109          \"\"\"\n  110             This function returns the residual amount on a receivable or payable account.move.line.\n  111:            By default, it returns an amount in the currency of this journal entry (maybe different\n  112             of the company currency), but if you pass 'residual_in_company_currency' = True in the\n  113             context then the returned amount will be in company currency.\n  ...\n  157          return res\n  158  \n  159:     def default_get(self, cr, uid, fields, context=None):\n  160:         data = self._default_get(cr, uid, fields, context=context)\n  161          for f in data.keys():\n  162              if f not in fields:\n  ...\n  197          return True\n  198  \n  199:     def _default_get_move_form_hook(self, cursor, user, data):\n  200:         '''Called in the end of default_get method for manual entry in account_move form'''\n  201          if data.has_key('analytic_account_id'):\n  202              del(data['analytic_account_id'])\n  ...\n  217          return context\n  218  \n  219:     def _default_get(self, cr, uid, fields, context=None):\n  220:         #default_get should only do the following:\n  221          #   -propose the next amount in debit/credit in order to balance the move\n  222:         #   -propose the next account from the journal (default debit/credit account) accordingly\n  223          context = dict(context or {})\n  224          account_obj = self.pool.get('account.account')\n  ...\n  232  \n  233          if not context.get('journal_id', False):\n  234:             context['journal_id'] = context.get('search_default_journal_id', False)\n  235          if not context.get('period_id', False):\n  236:             context['period_id'] = context.get('search_default_period_id', False)\n  237          context = self.convert_to_period(cr, uid, context)\n  238  \n  239          # Compute simple values\n  240:         data = super(account_move_line, self).default_get(cr, uid, fields, context=context)\n  241          if context.get('journal_id'):\n  242              total = 0.0\n  ...\n  262                      #we propose to continue the same move by copying the ref, the name, the partner...\n  263                      move = move_obj.browse(cr, uid, move_id, context=context)\n  264:                     data.setdefault('name', move.line_id[-1].name)\n  265                      for l in move.line_id:\n  266                          data['partner_id'] = data.get('partner_id') or l.partner_id.id\n  ...\n  273              #pick the good account on the journal accordingly if the next proposed line will be a debit or a credit\n  274              journal_data = journal_obj.browse(cr, uid, context['journal_id'], context=context)\n  275:             account = total > 0 and journal_data.default_credit_account_id or journal_data.default_debit_account_id\n  276              #map the account using the fiscal position of the partner, if needed\n  277              if isinstance(data.get('partner_id'), (int, long)):\n  ...\n  299                      compute_ctx.update({'date': data['date']})\n  300                  data['amount_currency'] = currency_obj.compute(cr, uid, account.company_id.currency_id.id, data['currency_id'], -total, context=compute_ctx)\n  301:         data = self._default_get_move_form_hook(cr, uid, data)\n  302          return data\n  303  \n  ...\n  523      def _get_period(self, cr, uid, context=None):\n  524          \"\"\"\n  525:         Return  default account period value\n  526          \"\"\"\n  527          context = context or {}\n  ...\n  555  \n  556  \n  557:     _defaults = {\n  558          'blocked': False,\n  559          'centralisation': 'normal',\n  ...\n  568          'account_id': lambda self, cr, uid, c: c.get('account_id', False),\n  569          'period_id': _get_period,\n  570:         'company_id': lambda self, cr, uid, c: self.pool.get('res.company')._company_default_get(cr, uid, 'account.move.line', context=c)\n  571      }\n  572      _order = \"date desc, id desc\"\n  ...\n  663          acc = account_obj.browse(cr, uid, account_id, context=context)\n  664          if (amount>0) and journal:\n  665:             x = journal_obj.browse(cr, uid, journal).default_credit_account_id\n  666              if x: acc = x\n  667          context = dict(context)\n  ...\n 1071          if (not context.get('journal_id', False)) or (not context.get('period_id', False)):\n 1072              return False\n 1073:         if context.get('search_default_journal_id', False):\n 1074:             context['journal_id'] = context.get('search_default_journal_id')\n 1075          cr.execute('SELECT code FROM account_journal WHERE id = %s', (context['journal_id'], ))\n 1076          j = cr.fetchone()[0] or ''\n ....\n 1270                  raise osv.except_osv(_('Error!'), _('No period found or more than one period found for the given date.'))\n 1271              context['period_id'] = period_candidate_ids[0][0]\n 1272:         if not context.get('journal_id', False) and context.get('search_default_journal_id', False):\n 1273:             context['journal_id'] = context.get('search_default_journal_id')\n 1274          self._update_journal_check(cr, uid, context['journal_id'], context['period_id'], context)\n 1275          move_id = vals.get('move_id', False)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\account_view.xml:\n  152              <field name=\"view_type\">form</field>\n  153              <field name=\"view_mode\">tree,form</field>\n  154:             <field name=\"context\">{'search_default_draft': 1}</field>\n  155              <field name=\"help\" type=\"html\">\n  156                <p class=\"oe_view_nocontent_create\">\n  ...\n  268              name=\"Unreconciled Entries\"\n  269              res_model=\"account.move.line\"\n  270:             context=\"{'search_default_account_id':[active_id], 'search_default_unreconciled':1, 'default_account_id': active_id}\"\n  271              src_model=\"account.account\"/>\n  272  \n  ...\n  344              id=\"action_move_line_select\"\n  345              name=\"Journal Items\"\n  346:             context=\"{'search_default_account_id': [active_id]}\"\n  347              res_model=\"account.move.line\"\n  348              src_model=\"account.account\"/>\n  ...\n  352              id=\"action_account_items\"\n  353              name=\"Journal Items\"\n  354:             context=\"{'search_default_account_id': [active_id], 'fiscalyear': context.get('fiscalyear')}\"\n  355              res_model=\"account.move.line\"\n  356              src_model=\"account.account\"\n  ...\n  405                          </group>\n  406                          <group>\n  407:                             <field name=\"default_debit_account_id\" attrs=\"{'required':[('type','in', ('cash', 'bank'))]}\" domain=\"[('type','&lt;&gt;','view'),('type','&lt;&gt;','consolidation')]\"/>\n  408:                             <field name=\"default_credit_account_id\" attrs=\"{'required':[('type','in',('cash', 'bank'))]}\" domain=\"[('type','&lt;&gt;','view'),('type','&lt;&gt;','consolidation')]\"/>\n  409                              <field name=\"currency\" groups=\"base.group_multi_currency\"/>\n  410                              <field name=\"company_id\" groups=\"base.group_multi_company\"/>\n  ...\n  415                              <group>\n  416                                  <group>\n  417:                                     <field name=\"user_id\" context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'account.group_account_user']}\"/>\n  418                                      <field name=\"sequence_id\" required=\"0\"/>\n  419                                  </group>\n  ...\n  478             id=\"act_account_journal_2_account_bank_statement\"\n  479             name=\"Bank statements\"\n  480:            context=\"{'search_default_journal_id': active_id, 'default_journal_id': active_id}\"\n  481             res_model=\"account.bank.statement\"\n  482             src_model=\"account.journal\"/>\n  ...\n  485             id=\"act_account_journal_2_account_move_line\"\n  486             name=\"Journal Items\"\n  487:            context=\"{'search_default_journal_id': active_id, 'default_journal_id': active_id}\"\n  488             res_model=\"account.move.line\"\n  489             src_model=\"account.journal\"/>\n  ...\n  612                                              '|',('parent_id','=',False),('is_company','=',True),\n  613                                              '|',('customer','=',True),('supplier','=',True)]\"\n  614:                                          context=\"{'default_supplier': 1}\"\n  615                                           attrs=\"{'readonly' : [('journal_entry_id', '!=', False)] }\"/>\n  616                                      <field name=\"amount\" attrs=\"{'readonly' : [('journal_entry_id', '!=', False)] }\"/>\n  ...\n 1138                              </page>\n 1139                              <page string=\"Analytic Lines\" groups=\"analytic.group_analytic_accounting\">\n 1140:                                 <field name=\"analytic_lines\" context=\"{'default_general_account_id':account_id, 'default_name': name, 'default_date':date, 'amount': (debit or 0.0)-(credit or 0.0)}\"/>\n 1141                              </page>\n 1142                          </notebook>\n ....\n 1294              <field name=\"name\">Journal Items</field>\n 1295              <field name=\"res_model\">account.move.line</field>\n 1296:             <field name=\"context\">{'search_default_partner_id': [active_id], 'default_partner_id': active_id}</field>\n 1297              <field name=\"view_id\" ref=\"view_move_line_tree\"/>\n 1298          </record>\n ....\n 1319          </record>\n 1320          <record id=\"action_account_manual_reconcile\" model=\"ir.actions.act_window\">\n 1321:             <field name=\"context\">{'search_default_unreconciled': 1,'view_mode':True}</field>\n 1322              <field name=\"name\">Journal Items to Reconcile</field>\n 1323              <field name=\"res_model\">account.move.line</field>\n ....\n 1449                                          </page>\n 1450                                          <page string=\"Analytic Lines\" groups=\"analytic.group_analytic_accounting\">\n 1451:                                             <field colspan=\"4\" name=\"analytic_lines\" nolabel=\"1\" context=\"{'default_general_account_id':account_id, 'default_name': name, 'default_date':date, 'amount': (debit or 0.0)-(credit or 0.0)}\"/>\n 1452                                          </page>\n 1453                                      </notebook>\n ....\n 1544              id=\"act_account_move_to_account_move_line_open\"\n 1545              name=\"Journal Items\"\n 1546:             context=\"{'search_default_move_id': active_id, 'default_move_id': active_id}\"\n 1547              res_model=\"account.move.line\"\n 1548              src_model=\"account.move\"/>\n ....\n 1911                          <field name=\"chart_template_id\"/>\n 1912                      </group>\n 1913:                     <separator string=\"Default Taxes\"/>\n 1914                      <field name=\"tax_ids\"/>\n 1915                      <separator string=\"Notes\"/>\n ....\n 1996                          <field name=\"complete_tax_set\" />\n 1997                      </group>\n 1998:                     <separator string=\"Default Taxes\" colspan=\"4\"/>\n 1999                      <field name=\"tax_template_ids\" colspan=\"4\"  nolabel=\"1\"/>\n 2000                      <separator string=\"Properties\" colspan=\"4\"/>\n ....\n 2212                          </group>\n 2213                          <group>\n 2214:                             <field name=\"company_id\" widget=\"selection\"/> <!-- we assume that this wizard will be run only by administrators and as this field may cause problem if hidden (because of the default company of the user removed from the selection because already configured), we simply choosed to remove the group \"multi company\" of it -->\n 2215                              <field name=\"currency_id\" class=\"oe_inline\"/>\n 2216                              <field name=\"sale_tax\" attrs=\"{'invisible': [('complete_tax_set', '!=', True)]}\" domain=\"[('chart_template_id', '=', chart_template_id),('parent_id','=',False),('type_tax_use','in',('sale','all'))]\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\company.py:\n   35      }\n   36  \n   37:     _defaults = {\n   38          'expects_chart_of_accounts': True,\n   39          'tax_calculation_rounding_method': 'round_per_line',\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\data\\account_data.xml:\n   64  \n   65          <record id=\"sequence_sale_journal\" model=\"ir.sequence\">\n   66:             <field name=\"name\">Account Default Sales Journal</field>\n   67              <field eval=\"3\" name=\"padding\"/>\n   68              <field name=\"prefix\">SAJ/%(year)s/</field>\n   69          </record>\n   70          <record id=\"sequence_refund_sales_journal\" model=\"ir.sequence\">\n   71:             <field name=\"name\">Account Default Sales Credit Note Journal</field>\n   72              <field eval=\"3\" name=\"padding\"/>\n   73              <field name=\"prefix\">SCNJ/%(year)s/</field>\n   74          </record>\n   75          <record id=\"sequence_purchase_journal\" model=\"ir.sequence\">\n   76:             <field name=\"name\">Account Default Expenses Journal</field>\n   77              <field eval=\"3\" name=\"padding\"/>\n   78              <field name=\"prefix\">EXJ/%(year)s/</field>\n   79          </record>\n   80          <record id=\"sequence_refund_purchase_journal\" model=\"ir.sequence\">\n   81:             <field name=\"name\">Account Default Expenses Credit Notes Journal</field>\n   82              <field eval=\"3\" name=\"padding\"/>\n   83              <field name=\"prefix\">ECNJ/%(year)s/</field>\n   84          </record>\n   85          <record id=\"sequence_bank_journal\" model=\"ir.sequence\">\n   86:             <field name=\"name\">Account Default Bank Journal</field>\n   87              <field eval=\"3\" name=\"padding\"/>\n   88              <field name=\"prefix\">BNK/%(year)s/</field>\n   89          </record>\n   90          <record id=\"sequence_check_journal\" model=\"ir.sequence\">\n   91:             <field name=\"name\">Account Default Checks Journal</field>\n   92              <field eval=\"3\" name=\"padding\"/>\n   93              <field name=\"prefix\">CHK/%(year)s/</field>\n   94          </record>\n   95          <record id=\"sequence_cash_journal\" model=\"ir.sequence\">\n   96:             <field name=\"name\">Account Default Cash Journal</field>\n   97              <field eval=\"3\" name=\"padding\"/>\n   98              <field name=\"prefix\">CSH/%(year)s/</field>\n   99          </record>\n  100          <record id=\"sequence_opening_journal\" model=\"ir.sequence\">\n  101:             <field name=\"name\">Account Default Opening Entries Journal</field>\n  102              <field eval=\"3\" name=\"padding\"/>\n  103              <field name=\"prefix\">OPEJ/%(year)s/</field>\n  104          </record>\n  105          <record id=\"sequence_miscellaneous_journal\" model=\"ir.sequence\">\n  106:             <field name=\"name\">Account Default Miscellaneous Journal</field>\n  107              <field eval=\"3\" name=\"padding\"/>\n  108              <field name=\"prefix\">MISJ/%(year)s/</field>\n  ...\n  159              <field name=\"name\">Validated</field>\n  160              <field name=\"res_model\">account.invoice</field>\n  161:             <field name=\"default\" eval=\"False\"/>\n  162              <field name=\"description\">Invoice validated</field>\n  163          </record>\n  ...\n  165              <field name=\"name\">Paid</field>\n  166              <field name=\"res_model\">account.invoice</field>\n  167:             <field name=\"default\" eval=\"False\"/>\n  168              <field name=\"description\">Invoice paid</field>\n  169          </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\data\\configurable_account_chart.xml:\n  537  \n  538  \n  539:         <!--  Assigned Default Taxes For Different Account -->\n  540  \n  541          <record id=\"conf_a_sale\" model=\"account.account.template\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\demo\\account_minimal.xml:\n  314              <field name=\"type\">sale</field>\n  315              <field name=\"sequence_id\" ref=\"sequence_sale_journal\"/>\n  316:             <field name=\"default_credit_account_id\" ref=\"a_sale\"/>\n  317:             <field name=\"default_debit_account_id\" ref=\"a_sale\"/>\n  318              <field name=\"analytic_journal_id\" ref=\"cose_journal_sale\"/>\n  319              <field name=\"user_id\" ref=\"base.user_root\"/>\n  ...\n  324              <field name=\"type\">sale_refund</field>\n  325              <field name=\"sequence_id\" ref=\"sequence_refund_sales_journal\"/>\n  326:             <field name=\"default_credit_account_id\" ref=\"a_sale\"/>\n  327:             <field name=\"default_debit_account_id\" ref=\"a_sale\"/>\n  328              <field name=\"analytic_journal_id\" ref=\"cose_journal_sale\"/>\n  329              <field name=\"user_id\" ref=\"base.user_root\"/>\n  ...\n  335              <field name=\"type\">purchase</field>\n  336              <field name=\"sequence_id\" ref=\"sequence_purchase_journal\"/>\n  337:             <field name=\"default_debit_account_id\" ref=\"a_expense\"/>\n  338:             <field name=\"default_credit_account_id\" ref=\"a_expense\"/>\n  339              <field name=\"analytic_journal_id\" ref=\"exp\"/>\n  340              <field name=\"user_id\" ref=\"base.user_root\"/>\n  ...\n  345              <field name=\"type\">purchase_refund</field>\n  346              <field name=\"sequence_id\" ref=\"sequence_refund_purchase_journal\"/>\n  347:             <field name=\"default_debit_account_id\" ref=\"a_expense\"/>\n  348:             <field name=\"default_credit_account_id\" ref=\"a_expense\"/>\n  349              <field name=\"analytic_journal_id\" ref=\"exp\"/>\n  350              <field name=\"user_id\" ref=\"base.user_root\"/>\n  ...\n  356              <field name=\"type\">bank</field>\n  357              <field name=\"sequence_id\" ref=\"sequence_bank_journal\"/>\n  358:             <field name=\"default_debit_account_id\" ref=\"bnk\"/>\n  359:             <field name=\"default_credit_account_id\" ref=\"bnk\"/>\n  360              <field name=\"analytic_journal_id\" ref=\"sit\"/>\n  361              <field name=\"user_id\" ref=\"base.user_root\"/>\n  ...\n  366              <field name=\"type\">bank</field>\n  367              <field name=\"sequence_id\" ref=\"sequence_check_journal\"/>\n  368:             <field name=\"default_debit_account_id\" ref=\"cash\"/>\n  369:             <field name=\"default_credit_account_id\" ref=\"cash\"/>\n  370              <field name=\"analytic_journal_id\" ref=\"sit\"/>\n  371              <field name=\"user_id\" ref=\"base.user_root\"/>\n  ...\n  386              <field name=\"cash_control\" eval=\"False\"/>\n  387              <field name=\"sequence_id\" ref=\"sequence_cash_journal\"/>\n  388:             <field name=\"default_debit_account_id\" ref=\"cash\"/>\n  389:             <field name=\"default_credit_account_id\" ref=\"cash\"/>\n  390              <field name=\"analytic_journal_id\" ref=\"sit\"/>\n  391              <field name=\"user_id\" ref=\"base.user_root\"/>\n  ...\n  404              <field name=\"type\">situation</field>\n  405              <field name=\"sequence_id\" ref=\"sequence_opening_journal\"/>\n  406:             <field name=\"default_debit_account_id\" ref=\"o_income\"/>\n  407:             <field name=\"default_credit_account_id\" ref=\"o_expense\"/>\n  408              <field eval=\"True\" name=\"centralisation\"/>\n  409              <field name=\"user_id\" ref=\"base.user_root\"/>\n  ...\n  414              <field name=\"code\">TUBK</field>\n  415              <field name=\"type\">bank</field>\n  416:             <field name=\"default_debit_account_id\" ref=\"usd_bnk\"/>\n  417:             <field name=\"default_credit_account_id\" ref=\"usd_bnk\"/>\n  418              <field name=\"currency\" ref=\"base.USD\"/>\n  419          </record>\n  420          <!--\n  421:         Product income and expense accounts, default parameters\n  422          -->\n  423  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\edi\\invoice.py:\n  166                  - journal_id: should be selected based on type: simply put the 'type'\n  167                      in the context when calling create(), will be selected correctly\n  168:                 - payment_term: if set, create a default one based on name...\n  169                  - for invoice lines, the account_id value should be taken from the\n  170:                     product's default, i.e. from the default category, as it will not\n  171                      be provided.\n  172                  - for tax lines, we disconnect from the invoice.line, so all tax lines\n  173:                     will be of type 'manual', and default accounts should be picked based\n  174                      on the tax config of the DB where it is imported.\n  175          \"\"\"\n  ...\n  211          context = dict(context, type=invoice_type)\n  212  \n  213:         # for invoice lines, the account_id value should be taken from the product's default, i.e. from the default category, as it will not be provided.\n  214          for edi_invoice_line in edi_document['invoice_line']:\n  215              product_info = edi_invoice_line['product_id']\n  ...\n  224              edi_invoice_line.pop('price_subtotal', None)\n  225  \n  226:         # for tax lines, we disconnect from the invoice.line, so all tax lines will be of type 'manual', and default accounts should be picked based\n  227          # on the tax config of the DB where it is imported.\n  228          tax_account = self._edi_tax_account(cr, uid, context=context)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\edi\\invoice_action_data.xml:\n   10              <field name=\"view_id\" ref=\"email_template.email_template_tree\" />\n   11              <field name=\"search_view_id\" ref=\"email_template.view_email_template_search\"/>\n   12:             <field name=\"context\">{'search_default_model_id':'account.invoice'}</field>\n   13:             <field name=\"context\" eval=\"{'search_default_model_id': ref('account.model_account_invoice')}\"/>\n   14          </record>\n   15          <menuitem id=\"menu_email_templates\" parent=\"menu_configuration_misc\" action=\"action_email_templates\" sequence=\"30\" groups=\"base.group_no_one\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\installer.py:\n   81          'period': fields.selection([('month', 'Monthly'), ('3months', '3 Monthly')], 'Periods', required=True),\n   82          'company_id': fields.many2one('res.company', 'Company', required=True),\n   83:         'has_default_company': fields.boolean('Has Default Company', readonly=True),\n   84      }\n   85  \n   86:     def _default_company(self, cr, uid, context=None):\n   87          user = self.pool.get('res.users').browse(cr, uid, uid, context=context)\n   88          return user.company_id and user.company_id.id or False\n   89  \n   90:     def _default_has_default_company(self, cr, uid, context=None):\n   91          count = self.pool.get('res.company').search_count(cr, uid, [], context=context)\n   92          return bool(count == 1)\n   93  \n   94:     _defaults = {\n   95          'date_start': lambda *a: time.strftime('%Y-01-01'),\n   96          'date_stop': lambda *a: time.strftime('%Y-12-31'),\n   97          'period': 'month',\n   98:         'company_id': _default_company,\n   99:         'has_default_company': _default_has_default_company,\n  100          'charts': 'configurable'\n  101      }\n  ...\n  171                            context=context)[0]['charts']\n  172          _logger.debug('Installing chart of accounts %s', chart)\n  173:         return (modules | set([chart])) - set(['has_default_company', 'configurable'])\n  174  \n  175  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\partner.py:\n   44      }\n   45  \n   46:     _defaults = {\n   47          'active': True,\n   48      }\n   ..\n  296              string=\"Account Payable\",\n  297              domain=\"[('type', '=', 'payable')]\",\n  298:             help=\"This account will be used instead of the default one as the payable account for the current partner\",\n  299              required=True),\n  300          'property_account_receivable': fields.property(\n  ...\n  303              string=\"Account Receivable\",\n  304              domain=\"[('type', '=', 'receivable')]\",\n  305:             help=\"This account will be used instead of the default one as the receivable account for the current partner\",\n  306              required=True),\n  307          'property_account_position': fields.property(\n  ...\n  315              relation='account.payment.term',\n  316              string ='Customer Payment Term',\n  317:             help=\"This payment term will be used instead of the default one for sale orders and customer invoices\"),\n  318          'property_supplier_payment_term': fields.property(\n  319               type='many2one',\n  320               relation='account.payment.term',\n  321               string ='Supplier Payment Term',\n  322:              help=\"This payment term will be used instead of the default one for purchase orders and supplier invoices\"),\n  323          'ref_companies': fields.one2many('res.company', 'partner_id',\n  324              'Companies that refers to partner'),\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\partner_view.xml:\n   60  \n   61          <record id=\"action_open_partner_analytic_accounts\" model=\"ir.actions.act_window\">\n   62:             <field name=\"context\">{'search_default_partner_id': [active_id], 'default_partner_id': active_id}</field>\n   63              <field name=\"name\">Contracts/Analytic Accounts</field>\n   64              <field name=\"res_model\">account.analytic.account</field>\n   ..\n   79                          name=\"%(account.action_invoice_tree)d\" \n   80                          attrs=\"{'invisible': [('customer', '=', False)]}\" \n   81:                         context=\"{'search_default_partner_id': active_id,'default_partner_id': active_id}\" groups=\"account.group_account_invoice\">\n   82                          <div><strong><field name=\"total_invoiced\" widget=\"monetary\"/></strong><br/>Invoiced</div>\n   83                      </button>\n   ..\n  136                          </group>\n  137                      </group>\n  138:                     <field name=\"bank_ids\" context=\"{'default_partner_id': active_id, 'form_view_ref': 'base.view_partner_bank_form'}\">\n  139                          <tree string=\"Bank Details\">\n  140                              <field name=\"state\" invisible=\"1\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\product.py:\n   54              relation='account.account',\n   55              string=\"Income Account\",\n   56:             help=\"This account will be used for invoices instead of the default one to value sales for the current product.\"),\n   57          'property_account_expense': fields.property(\n   58              type='many2one',\n   59              relation='account.account',\n   60              string=\"Expense Account\",\n   61:             help=\"This account will be used for invoices instead of the default one to value expenses for the current product.\"),\n   62      }\n   63  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\project\\project.py:\n   33          'company_id': fields.many2one('res.company', 'Company', required=True),\n   34      }\n   35:     _defaults = {\n   36          'active': True,\n   37          'type': 'general',\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\project\\project_view.xml:\n  134                              <field name=\"account_id\"/>\n  135                              <field name=\"journal_id\"/>\n  136:                             <field name=\"user_id\" context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'account.group_account_invoice']}\"/>\n  137                          </group>\n  138                          <group>\n  ...\n  218              <field name=\"res_model\">account.analytic.line</field>\n  219              <field name=\"view_type\">form</field>\n  220:             <field name=\"context\">{\"search_default_user_id\":uid}</field>\n  221              <field name=\"view_id\" ref=\"view_account_analytic_line_tree\"/>\n  222          </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\project\\wizard\\account_analytic_balance_report.py:\n   34      }\n   35  \n   36:     _defaults = {\n   37          'date1': lambda *a: time.strftime('%Y-01-01'),\n   38          'date2': lambda *a: time.strftime('%Y-%m-%d')\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\project\\wizard\\account_analytic_cost_ledger_for_journal_report.py:\n   34      }\n   35  \n   36:     _defaults = {\n   37          'date1': lambda *a: time.strftime('%Y-01-01'),\n   38          'date2': lambda *a: time.strftime('%Y-%m-%d')\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\project\\wizard\\account_analytic_cost_ledger_report.py:\n   33      }\n   34  \n   35:     _defaults = {\n   36          'date1': lambda *a: time.strftime('%Y-01-01'),\n   37          'date2': lambda *a: time.strftime('%Y-%m-%d')\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\project\\wizard\\account_analytic_inverted_balance_report.py:\n   33      }\n   34  \n   35:     _defaults = {\n   36          'date1': lambda *a: time.strftime('%Y-01-01'),\n   37          'date2': lambda *a: time.strftime('%Y-%m-%d')\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\project\\wizard\\account_analytic_journal_report.py:\n   34      }\n   35  \n   36:     _defaults = {\n   37          'date1': lambda *a: time.strftime('%Y-01-01'),\n   38          'date2': lambda *a: time.strftime('%Y-%m-%d')\n   ..\n   60          return self.pool['report'].get_action(cr, uid, [], 'account.report_analyticjournal', data=datas, context=context2)\n   61  \n   62:     def default_get(self, cr, uid, fields, context=None):\n   63          if context is None:\n   64              context = {}\n   65:         res = super(account_analytic_journal_report, self).default_get(cr, uid, fields, context=context)\n   66          if not context.has_key('active_ids'):\n   67              journal_ids = self.pool.get('account.analytic.journal').search(cr, uid, [], context=context)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\report\\account_aged_partner_balance.py:\n  244              total += float(r['total'] or 0.0)\n  245              for i in range(5)+['direction']:\n  246:                 totals.setdefault(str(i), 0.0)\n  247                  totals[str(i)] += float(r[str(i)] or 0.0)\n  248          return res\n  ...\n  374              total += float(r['total'] or 0.0)\n  375              for i in range(5)+['direction']:\n  376:                 totals.setdefault(str(i), 0.0)\n  377                  totals[str(i)] += float(r[str(i)] or 0.0)\n  378          return res\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\report\\account_analytic_entries_report_view.xml:\n   43          <field name=\"view_mode\">graph</field>\n   44          <field name=\"search_view_id\" ref=\"view_analytic_entries_report_search\"/>\n   45:         <field name=\"context\">{'group_by_no_leaf':1, 'search_default_Account':1, 'group_by':[]}</field>\n   46          <field name=\"help\">From this view, have an analysis of your different analytic entries following the analytic account you defined matching your business need. Use the tool search to analyse information about analytic entries generated in the system.</field>\n   47      </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\report\\account_entries_report_view.xml:\n  101          <field name=\"search_view_id\" ref=\"view_account_entries_report_search\"/>\n  102          <field name=\"view_id\" ref=\"view_account_entries_report_graph\"/>\n  103:         <field name=\"context\">{'group_by':[], 'search_default_usertype':1, 'search_default_thisyear':1, 'group_by_no_leaf':1}</field>\n  104          <field name=\"help\">From this view, have an analysis of your different financial accounts. The document shows your debit and credit taking in consideration some criteria you can choose by using the search tool.</field>\n  105      </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\report\\account_invoice_report_view.xml:\n   90          <field name=\"view_type\">form</field>\n   91          <field name=\"view_mode\">graph</field>\n   92:         <field name=\"context\">{'search_default_current':1, 'search_default_customer':1, 'group_by':[], 'group_by_no_leaf':1, 'search_default_year': 1}</field>\n   93          <field name=\"search_view_id\" ref=\"view_account_invoice_report_search\"/>\n   94          <field name=\"help\">From this report, you can have an overview of the amount invoiced to your customer. The tool search can also be used to personalise your Invoices reports and so, match this analysis to your needs.</field>\n   ..\n  102          name=\"Monthly Turnover\"\n  103          groups=\"group_account_manager\"\n  104:         context=\"{'search_default_partner_id':[active_id], 'search_default_month':1,'search_default_user':1,'group_by_no_leaf':1,'group_by':[]}\"\n  105          res_model=\"account.invoice.report\"\n  106          src_model=\"res.partner\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\res_config.py:\n   26  import openerp\n   27  from openerp import SUPERUSER_ID\n   28: from openerp.tools import DEFAULT_SERVER_DATE_FORMAT as DF\n   29  from openerp.tools.translate import _\n   30  from openerp.osv import fields, osv\n   ..\n   36      _columns = {\n   37          'company_id': fields.many2one('res.company', 'Company', required=True),\n   38:         'has_default_company': fields.boolean('Has default company', readonly=True),\n   39          'expects_chart_of_accounts': fields.related('company_id', 'expects_chart_of_accounts', type='boolean',\n   40              string='This company has its own chart of accounts',\n   41              help=\"\"\"Check this box if this company is a legal entity.\"\"\"),\n   42          'currency_id': fields.related('company_id', 'currency_id', type='many2one', relation='res.currency', required=True,\n   43:             string='Default company currency', help=\"Main currency of the company.\"),\n   44          'paypal_account': fields.related('company_id', 'paypal_account', type='char', size=128,\n   45              string='Paypal account', help=\"Paypal account (email) for receiving online payments (credit card, etc.) If you set a paypal account, the customer  will be able to pay your invoices or quotations with a button \\\"Pay with  Paypal\\\" in automated emails or through the Odoo portal.\"),\n   ..\n   56              ], string='Tax calculation rounding method',\n   57              help=\"If you select 'Round per line' : for each tax, the tax amount will first be computed and rounded for each PO/SO/invoice line and then these rounded amounts will be summed, leading to the total amount for that tax. If you select 'Round globally': for each tax, the tax amount will be computed for each PO/SO/invoice line, then these amounts will be summed and eventually this total tax amount will be rounded. If you sell with tax included, you should choose 'Round per line' because you certainly want the sum of your tax-included line subtotals to be equal to the total amount with taxes.\"),\n   58:         'sale_tax': fields.many2one(\"account.tax.template\", \"Default sale tax\"),\n   59:         'purchase_tax': fields.many2one(\"account.tax.template\", \"Default purchase tax\"),\n   60          'sale_tax_rate': fields.float('Sales tax (%)'),\n   61          'purchase_tax_rate': fields.float('Purchase tax (%)'),\n   ..\n  112              implied_group='account.group_proforma_invoices',\n  113              help=\"Allows you to put invoices in pro-forma state.\"),\n  114:         'default_sale_tax': fields.many2one('account.tax', 'Default sale tax',\n  115:             help=\"This sale tax will be assigned by default on new products.\"),\n  116:         'default_purchase_tax': fields.many2one('account.tax', 'Default purchase tax',\n  117:             help=\"This purchase tax will be assigned by default on new products.\"),\n  118          'decimal_precision': fields.integer('Decimal precision on journal entries',\n  119              help=\"\"\"As an example, a decimal precision of 2 will allow journal entries  like: 9.99 EUR, whereas a decimal precision of 4 will allow journal  entries like: 0.0231 EUR.\"\"\"),\n  ...\n  140      }\n  141  \n  142:     def _default_company(self, cr, uid, context=None):\n  143          user = self.pool.get('res.users').browse(cr, uid, uid, context=context)\n  144          return user.company_id.id\n  145  \n  146:     def _default_has_default_company(self, cr, uid, context=None):\n  147          count = self.pool.get('res.company').search_count(cr, uid, [], context=context)\n  148          return bool(count == 1)\n  149  \n  150:     def _get_default_fiscalyear_data(self, cr, uid, company_id, context=None):\n  151:         \"\"\"Compute default period, starting and ending date for fiscalyear\n  152          - if in a fiscal year, use its period, starting and ending date\n  153          - if past fiscal year, use its period, and new dates [ending date of the latest +1 day ; ending date of the latest +1 year]\n  154          - if no fiscal year, use monthly, 1st jan, 31th dec of this year\n  155:         :return: (date_start, date_stop, period) at format DEFAULT_SERVER_DATETIME_FORMAT\n  156          \"\"\"\n  157          fiscalyear_ids = self.pool.get('account.fiscalyear').search(cr, uid,\n  ...\n  181                  return (time.strftime('%Y-01-01'), time.strftime('%Y-12-31'), 'month')\n  182  \n  183:     _defaults = {\n  184:         'company_id': _default_company,\n  185:         'has_default_company': _default_has_default_company,\n  186      }\n  187  \n  ...\n  207                  [('date_start', '<=', time.strftime('%Y-%m-%d')), ('date_stop', '>=', time.strftime('%Y-%m-%d')),\n  208                   ('company_id', '=', company_id)])\n  209:             date_start, date_stop, period = self._get_default_fiscalyear_data(cr, uid, company_id, context=context)\n  210              values = {\n  211                  'expects_chart_of_accounts': company.expects_chart_of_accounts,\n  ...\n  236              # update taxes\n  237              ir_values = self.pool.get('ir.values')\n  238:             taxes_id = ir_values.get_default(cr, uid, 'product.template', 'taxes_id', company_id=company_id)\n  239:             supplier_taxes_id = ir_values.get_default(cr, uid, 'product.template', 'supplier_taxes_id', company_id=company_id)\n  240              values.update({\n  241:                 'default_sale_tax': isinstance(taxes_id, list) and taxes_id[0] or taxes_id,\n  242:                 'default_purchase_tax': isinstance(supplier_taxes_id, list) and supplier_taxes_id[0] or supplier_taxes_id,\n  243              })\n  244              # update gain/loss exchange rate accounts\n  ...\n  261              res['value'].update({'complete_tax_set': chart_template.complete_tax_set})\n  262              if chart_template.complete_tax_set:\n  263:                 # default tax is given by the lowest sequence. For same sequence we will take the latest created as it will be the case for tax created while isntalling the generic chart of account\n  264                  sale_tax_ids = tax_templ_obj.search(cr, uid,\n  265                      [(\"chart_template_id\", \"=\", chart_template_id), ('type_tax_use', 'in', ('sale','all'))],\n  ...\n  300          }\n  301  \n  302:     def set_default_taxes(self, cr, uid, ids, context=None):\n  303:         \"\"\" set default sale and purchase taxes for products \"\"\"\n  304          if uid != SUPERUSER_ID and not self.pool['res.users'].has_group(cr, uid, 'base.group_erp_manager'):\n  305              raise openerp.exceptions.AccessError(_(\"Only administrators can change the settings\"))\n  306          ir_values = self.pool.get('ir.values')\n  307          config = self.browse(cr, uid, ids[0], context)\n  308:         ir_values.set_default(cr, SUPERUSER_ID, 'product.template', 'taxes_id',\n  309:             config.default_sale_tax and [config.default_sale_tax.id] or False, company_id=config.company_id.id)\n  310:         ir_values.set_default(cr, SUPERUSER_ID, 'product.template', 'supplier_taxes_id',\n  311:             config.default_purchase_tax and [config.default_purchase_tax.id] or False, company_id=config.company_id.id)\n  312  \n  313      def set_chart_of_accounts(self, cr, uid, ids, context=None):\n  ...\n  357                      fiscalyear.create_period3(cr, uid, [fiscalyear_id])\n  358  \n  359:     def get_default_dp(self, cr, uid, fields, context=None):\n  360          dp = self.pool.get('ir.model.data').get_object(cr, uid, 'product','decimal_account')\n  361          return {'decimal_precision': dp.digits}\n  362  \n  363:     def set_default_dp(self, cr, uid, ids, context=None):\n  364          config = self.browse(cr, uid, ids[0], context)\n  365          dp = self.pool.get('ir.model.data').get_object(cr, uid, 'product','decimal_account')\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\res_config_view.xml:\n    7              <field name=\"res_model\">ir.module.module</field>\n    8              <field name=\"view_mode\">kanban,tree,form</field>\n    9:             <field name=\"context\" eval=\"{'search_default_category_id': ref('base.module_category_localization_account_charts')}\"/>\n   10              <field name=\"search_view_id\" ref=\"base.view_module_filter\"/>\n   11          </record>\n   ..\n   22                      </header>\n   23  \n   24:                     <field name=\"has_default_company\" invisible=\"1\" />\n   25                      <field name=\"has_chart_of_accounts\" invisible=\"1\"/>\n   26                      <field name=\"complete_tax_set\" invisible=\"1\"/>\n   ..\n   30                          <label for=\"id\" string=\"Chart of Accounts\"/>\n   31                          <div>\n   32:                             <div attrs=\"{'invisible': [('has_default_company', '=', True)]}\">\n   33                                  <label for=\"company_id\" string=\"Select Company\"/>\n   34                                  <field name=\"company_id\"\n   ..\n  157                          <div>\n  158                              <div attrs=\"{'invisible': [('has_chart_of_accounts','=',False)]}\">\n  159:                                 <label for=\"default_sale_tax\"/>\n  160:                                 <field name=\"default_sale_tax\"\n  161                                      domain=\"[('type_tax_use','=','sale'), ('company_id','=',company_id)]\"\n  162                                      class=\"oe_inline\"/>\n  ...\n  202                          <div name=\"other_cofing\">\n  203                              <div attrs=\"{'invisible': [('has_chart_of_accounts','=',False)]}\">\n  204:                                 <label for=\"default_purchase_tax\"/>\n  205:                                 <field name=\"default_purchase_tax\"\n  206                                      domain=\"[('type_tax_use','=','purchase'), ('company_id','=',company_id)]\"\n  207                                      class=\"oe_inline\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\static\\src\\xml\\account_bank_statement_reconciliation.xml:\n  108                      <div class=\"action_pane create\">\n  109                          <!-- NB : I use a .quick_add:empty selector. whitespace characters being a node, there shall be none -->\n  110:                         <div class=\"quick_add btn-group btn-group-sm\"><t t-foreach=\"presets\" t-as=\"preset\"><button type='button' class='btn btn-default preset' t-att-data-presetid=\"preset.id\"><t t-esc=\"preset.name\"/></button></t></div>\n  111                          <div class=\"oe_form create_form\">\n  112                              <!-- here come some form_create_field -->\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_automatic_reconcile.py:\n   51          return context.get('unreconciled', 0)\n   52  \n   53:     _defaults = {\n   54          'reconciled': _get_reconciled,\n   55          'unreconciled': _get_unreconciled,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_chart.py:\n   40  \n   41      def _get_fiscalyear(self, cr, uid, context=None):\n   42:         \"\"\"Return default Fiscalyear value\"\"\"\n   43          return self.pool.get('account.fiscalyear').find(cr, uid, context=context)\n   44  \n   ..\n  102          return result\n  103  \n  104:     _defaults = {\n  105          'target_move': 'posted',\n  106          'fiscalyear': _get_fiscalyear,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_financial_report.py:\n   51          return report_ids and report_ids[0] or False\n   52  \n   53:     _defaults = {\n   54              'filter_cmp': 'filter_no',\n   55              'target_move': 'posted',\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_financial_report_view.xml:\n   45               <field name=\"view_id\" ref=\"accounting_report_view\"/>\n   46               <field name=\"target\">new</field>\n   47:              <field name=\"context\" eval=\"{'default_account_report_id':ref('account.account_financial_report_balancesheet0')}\"/>\n   48          </record>\n   49          <menuitem icon=\"STOCK_PRINT\" name=\"Balance Sheet\" action=\"action_account_report_bs\" id=\"menu_account_report_bs\" parent=\"final_accounting_reports\"/>\n   ..\n   58               <field name=\"target\">new</field>\n   59               <field name=\"context\">{}</field>\n   60:              <field name=\"context\" eval=\"{'default_account_report_id':ref('account.account_financial_report_profitandloss0')}\"/>\n   61          </record>\n   62          <menuitem icon=\"STOCK_PRINT\" name=\"Profit And Loss\" action=\"action_account_report_pl\" id=\"menu_account_report_pl\" parent=\"final_accounting_reports\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_fiscalyear_close.py:\n   34         'fy2_id': fields.many2one('account.fiscalyear', \\\n   35                                   'New Fiscal Year', required=True),\n   36:        'journal_id': fields.many2one('account.journal', 'Opening Entries Journal', domain=\"[('type','=','situation')]\", required=True, help='The best practice here is to use a journal dedicated to contain the opening entries of all fiscal years. Note that you should define it with default debit/credit accounts, of type \\'situation\\' and with a centralized counterpart.'),\n   37         'period_id': fields.many2one('account.period', 'Opening Entries Period', required=True),\n   38         'report_name': fields.char('Name of new entries', required=True, help=\"Give name of the new entries\"),\n   39      }\n   40:     _defaults = {\n   41          'report_name': lambda self, cr, uid, context: _('End of Fiscal Year Entry'),\n   42      }\n   ..\n   97          company_id = new_journal.company_id.id\n   98  \n   99:         if not new_journal.default_credit_account_id or not new_journal.default_debit_account_id:\n  100              raise osv.except_osv(_('User Error!'),\n  101:                     _('The journal must have default credit and debit account.'))\n  102          if (not new_journal.centralisation) or new_journal.entry_posted:\n  103              raise osv.except_osv(_('User Error!'),\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_invoice_refund.py:\n   61              return ''\n   62  \n   63:     _defaults = {\n   64          'date': lambda *a: time.strftime('%Y-%m-%d'),\n   65          'journal_id': _get_journal,\n   ..\n  166                      for line in movelines:\n  167                          if line.account_id.id == inv.account_id.id:\n  168:                             to_reconcile_ids.setdefault(line.account_id.id, []).append(line.id)\n  169                          if line.reconcile_id:\n  170                              line.reconcile_id.unlink()\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_invoice_state_view.xml:\n   14                      </p>\n   15                      <footer>\n   16:                         <button string=\"Confirm Invoices\" name=\"invoice_confirm\" type=\"object\" default_focus=\"1\" class=\"oe_highlight\"/>\n   17                          or\n   18                          <button string=\"Cancel\" class=\"oe_link\" special=\"cancel\"/>\n   ..\n   34                  <form string=\"Cancel Selected Invoices\">\n   35                      <footer>\n   36:                         <button string=\"Cancel Invoices\" name=\"invoice_cancel\" type=\"object\" default_focus=\"1\" class=\"oe_highlight\"/>\n   37                          or\n   38                          <button string=\"Cancel\" class=\"oe_link\" special=\"cancel\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_move_bank_reconcile.py:\n   43              context = {}\n   44          data = self.read(cr, uid, ids, context=context)[0]\n   45:         cr.execute('select default_credit_account_id \\\n   46                          from account_journal where id=%s', (data['journal_id'],))\n   47          account_id = cr.fetchone()[0]\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_move_line_select_view.xml:\n   10                      <label string=\"Are you sure you want to open Account move line entries?\"/>\n   11                      <footer>\n   12:                         <button string=\"Open Entries\" name=\"open_window\" type=\"object\" default_focus=\"1\" class=\"oe_highlight\"/>\n   13                          or\n   14                          <button string=\"Cancel\" class=\"oe_link\" special=\"cancel\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_reconcile.py:\n   40      }\n   41  \n   42:     def default_get(self, cr, uid, fields, context=None):\n   43:         res = super(account_move_line_reconcile, self).default_get(cr, uid, fields, context=context)\n   44          data = self.trans_rec_get(cr, uid, context['active_ids'], context)\n   45          if 'trans_nbr' in fields:\n   ..\n  111          'analytic_id': fields.many2one('account.analytic.account', 'Analytic Account', domain=[('parent_id', '!=', False)]),\n  112      }\n  113:     _defaults = {\n  114          'date_p': lambda *a: time.strftime('%Y-%m-%d'),\n  115          'comment': _('Write-off'),\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_reconcile_partner_process.py:\n   66          return {'progress': (100 / (float(to_reconcile + today_reconciled) or 1.0)) * today_reconciled}\n   67  \n   68:     def default_get(self, cr, uid, fields, context=None):\n   69:         res = super(account_partner_reconcile_process, self).default_get(cr, uid, fields, context=context)\n   70          if 'to_reconcile' in res and 'today_reconciled' in res:\n   71              data = self.data_get(cr, uid, res['to_reconcile'], res['today_reconciled'], context)\n   ..\n   93      }\n   94  \n   95:     _defaults = {\n   96          'to_reconcile': _get_to_reconcile,\n   97          'today_reconciled': _get_today_reconciled,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_reconcile_view.xml:\n   17                      </group>\n   18                      <footer>\n   19:                         <button string=\"Reconcile\" name=\"trans_rec_reconcile_full\" type=\"object\" default_focus=\"1\" attrs=\"{'invisible':[('writeoff','!=',0)]}\" class=\"oe_highlight\"/>\n   20                          <button string=\"Reconcile With Write-Off\" name=\"trans_rec_addendum_writeoff\" type=\"object\" attrs=\"{'invisible':[('writeoff','=',0)]}\" class=\"oe_highlight\"/>\n   21                          <button string=\"Partial Reconcile\" name=\"trans_rec_reconcile_partial_reconcile\" type=\"object\" attrs=\"{'invisible':[('writeoff','=',0)]}\" class=\"oe_highlight\"/>\n   ..\n   51                  <form string=\"Information addendum\">\n   52                      <header>\n   53:                         <button string=\"Reconcile\" name=\"trans_rec_reconcile\" type=\"object\" default_focus=\"1\" class=\"oe_highlight\"/>\n   54                          or\n   55                          <button string=\"Cancel\" class=\"oe_link\" special=\"cancel\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_report_account_balance.py:\n   32      }\n   33  \n   34:     _defaults = {\n   35          'journal_ids': [],\n   36      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_report_aged_partner_balance.py:\n   39          'journal_ids': fields.many2many('account.journal', 'account_aged_trial_balance_journal_rel', 'account_id', 'journal_id', 'Journals', required=True),\n   40      }\n   41:     _defaults = {\n   42          'period_length': 30,\n   43          'date_from': lambda *a: time.strftime('%Y-%m-%d'),\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_report_aged_partner_balance_view.xml:\n   24                      <field name=\"journal_ids\" required=\"0\" invisible=\"1\"/>\n   25                      <footer>\n   26:                         <button name=\"check_report\" string=\"Print\" type=\"object\" default_focus=\"1\" class=\"oe_highlight\"/>\n   27                          or\n   28                          <button string=\"Cancel\" class=\"oe_link\" special=\"cancel\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_report_common.py:\n  139          return self.pool.get('account.journal').search(cr, uid ,[])\n  140  \n  141:     _defaults = {\n  142              'fiscalyear_id': _get_fiscalyear,\n  143:             'company_id': lambda self,cr,uid,c: self.pool.get('res.company')._company_default_get(cr, uid, 'account.common.report',context=c),\n  144              'journal_ids': _get_all_journal,\n  145              'filter': 'filter_no',\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_report_common_account.py:\n   32  \n   33      }\n   34:     _defaults = {\n   35          'display_account': 'movement',\n   36      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_report_common_partner.py:\n   33      }\n   34  \n   35:     _defaults = {\n   36          'result_selection': 'customer',\n   37      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_report_common_view.xml:\n   34                  </notebook>\n   35                  <footer>\n   36:                     <button name=\"check_report\" string=\"Print\" type=\"object\" default_focus=\"1\" class=\"oe_highlight\"/>\n   37                      or \n   38                      <button string=\"Cancel\" class=\"oe_link\" special=\"cancel\" />\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_report_general_ledger.py:\n   36          'journal_ids': fields.many2many('account.journal', 'account_report_general_ledger_journal_rel', 'account_id', 'journal_id', 'Journals', required=True),\n   37      }\n   38:     _defaults = {\n   39          'landscape': True,\n   40          'amount_currency': True,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_report_partner_balance.py:\n   36      }\n   37  \n   38:     _defaults = {\n   39          'display_partner': 'non-zero_balance',\n   40      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_report_partner_ledger.py:\n   40      }\n   41  \n   42:     _defaults = {\n   43         'initial_balance': False,\n   44         'page_split': False,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_report_print_journal.py:\n   36      }\n   37  \n   38:     _defaults = {\n   39          'sort_selection': 'am.name',\n   40          'filter': 'filter_period',\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_subscription_generate.py:\n   31         'date': fields.date('Generate Entries Before', required=True),\n   32      }\n   33:     _defaults = {\n   34          'date': lambda *a: time.strftime('%Y-%m-%d'),\n   35      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_tax_chart.py:\n   38  \n   39      def _get_period(self, cr, uid, context=None):\n   40:         \"\"\"Return default period value\"\"\"\n   41          period_ids = self.pool.get('account.period').find(cr, uid, context=context)\n   42          return period_ids and period_ids[0] or False\n   ..\n   69          return result\n   70  \n   71:     _defaults = {\n   72          'period_id': _get_period,\n   73          'target_move': 'posted'\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_unreconcile_view.xml:\n   11                  <label string=\"If you unreconcile transactions, you must also verify all the actions that are linked to those transactions because they will not be disabled\"/>\n   12                  <footer>\n   13:                     <button string=\"Unreconcile\" name=\"trans_unrec\" type=\"object\" default_focus=\"1\" class=\"oe_highlight\"/>\n   14                      or                    \n   15                      <button string=\"Cancel\" class=\"oe_link\" special=\"cancel\"/>\n   ..\n   43              <form string=\"Unreconciliation\">\n   44                  <header>\n   45:                     <button icon=\"gtk-ok\" string=\"Unreconcile\" name=\"trans_unrec_reconcile\" type=\"object\" default_focus=\"1\" class=\"oe_highlight\"  />\n   46                  </header>\n   47                  <separator string=\"Unreconcile Transactions\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_use_model_view.xml:\n   27                      <label string = \"Are you sure you want to create entries?\"/>\n   28                      <footer>\n   29:                         <button string=\"Ok\" name=\"create_entries\" type=\"object\" default_focus='1' class=\"oe_highlight\"/>\n   30                          or\n   31                          <button string=\"Cancel\" class=\"oe_link\" special=\"cancel\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_validate_move_view.xml:\n   48                      <label string=\"All selected journal entries will be validated and posted. It means you won't be able to modify their accounting fields anymore.\"/>\n   49                      <footer>\n   50:                         <button string=\"Approve\" name=\"validate_move_lines\" type=\"object\" default_focus=\"1\" class=\"oe_highlight\"/>\n   51                          or\n   52                          <button string=\"Cancel\" class=\"oe_link\" special=\"cancel\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\wizard\\account_vat.py:\n   40          return taxes and taxes[0] or False\n   41  \n   42:     _defaults = {\n   43          'based_on': 'invoices',\n   44          'chart_tax_id': _get_tax\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_analytic_analysis\\account_analytic_analysis.py:\n   53          'price_subtotal': fields.function(_amount_line, string='Sub Total', type=\"float\",digits_compute= dp.get_precision('Account')),\n   54      }\n   55:     _defaults = {\n   56          'quantity' : 1,\n   57      }\n   ..\n  537      }\n  538  \n  539:     _defaults = {\n  540          'recurring_interval': 1,\n  541          'recurring_next_date': lambda *a: time.strftime('%Y-%m-%d'),\n  ...\n  546          if context is None:\n  547              context = {}\n  548:         sale_ids = self.pool.get('sale.order').search(cr,uid,[('project_id','=',context.get('search_default_project_id',False)),('partner_id','in',context.get('search_default_partner_id',False))])\n  549          names = [record.name for record in self.browse(cr, uid, ids, context=context)]\n  550          name = _('Sales Order Lines to Invoice of %s') % ','.join(names)\n  ...\n  619                  if write_pending:\n  620                      account.write({'state' : 'pending'})\n  621:                 remind_user = remind.setdefault(account.manager_id.id, {})\n  622:                 remind_type = remind_user.setdefault(key, {})\n  623:                 remind_partner = remind_type.setdefault(account.partner_id, []).append(account)\n  624  \n  625          # Already expired\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_analytic_analysis\\account_analytic_analysis_view.xml:\n   71                                          class=\"oe_link\"\n   72                                          string=\"⇒ Invoice\" type=\"object\"\n   73:                                         context=\"{'default_partner_id': [partner_id],'default_project_id': active_id,'search_default_uninvoiced': 1,'search_default_project_id': active_id,'search_default_partner_id': [partner_id]}\"/>\n   74                                      or view\n   75                                  </span>\n   ..\n   81                                      type=\"action\"\n   82                                      class=\"oe_link\"\n   83:                                     context=\"{'default_partner_id': [partner_id], 'search_default_project_id': [active_id],'default_project_id': [active_id], 'default_pricelist_id': pricelist_id}\"\n   84                                      />\n   85                              </td>\n   ..\n  112                                      string=\"Timesheets\" type=\"action\"\n  113                                      class=\"oe_link\"\n  114:                                     context=\"{'default_account_id': active_id,'search_default_account_id': active_id}\"/>\n  115                              </td>\n  116                          </tr><tr name='total'>\n  ...\n  258              <field name=\"view_type\">form</field>\n  259              <field name=\"view_mode\">tree,form</field>\n  260:             <field name=\"context\">{'default_type':'contract', 'search_default_open':1, 'search_default_pending':1, 'default_manager_id':uid}</field>\n  261              <field name=\"domain\">[('type','=','contract')]</field>\n  262              <field name=\"search_view_id\" ref=\"view_account_analytic_account_overdue_search\"/>\n  ...\n  281              <field name=\"view_mode\">tree,form</field>\n  282              <field name=\"domain\">[('invoice_id','=',False)]</field>\n  283:             <field name=\"context\">{'search_default_to_invoice': 1}</field>\n  284              <field name=\"search_view_id\" ref=\"account.view_account_analytic_line_filter\"/>\n  285              <field name=\"help\" type=\"html\">\n  ...\n  301              <field name=\"view_type\">form</field>\n  302              <field name=\"view_mode\">tree,form</field>\n  303:             <field name=\"context\">{'search_default_manager_id':uid, 'search_default_pending':1, 'search_default_renew':1}</field>\n  304              <field name=\"domain\">[('type','=','contract')]</field>\n  305              <field name=\"search_view_id\" ref=\"view_account_analytic_account_overdue_search\"/>\n  ...\n  328              <field name=\"view_mode\">tree,form</field>\n  329              <field name=\"domain\">[('type','=','template')]</field>\n  330:             <field name=\"context\">{'search_default_type':'template','default_type' : 'template'}</field>\n  331              <field name=\"help\" type=\"html\">\n  332                  <p class=\"oe_view_nocontent_create\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_analytic_default\\__init__.py:\n   20  ##############################################################################\n   21  \n   22: import account_analytic_default\n   23  \n   24  # vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_analytic_default\\__openerp__.py:\n   21  \n   22  {\n   23:     'name': 'Account Analytic Defaults',\n   24      'version': '1.0',\n   25      'category': 'Accounting & Finance',\n   26      'description': \"\"\"\n   27: Set default values for your analytic accounts.\n   28  ==============================================\n   29  \n   ..\n   41      'data': [\n   42          'security/ir.model.access.csv', \n   43:         'security/account_analytic_default_security.xml', \n   44:         'account_analytic_default_view.xml'\n   45      ],\n   46      'demo': [],\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_analytic_default\\account_analytic_default.py:\n   24  from openerp.osv import fields, osv\n   25  \n   26: class account_analytic_default(osv.osv):\n   27:     _name = \"account.analytic.default\"\n   28      _description = \"Analytic Distribution\"\n   29      _rec_name = \"analytic_id\"\n   ..\n   32          'sequence': fields.integer('Sequence', help=\"Gives the sequence order when displaying a list of analytic distribution\"),\n   33          'analytic_id': fields.many2one('account.analytic.account', 'Analytic Account'),\n   34:         'product_id': fields.many2one('product.product', 'Product', ondelete='cascade', help=\"Select a product which will use analytic account specified in analytic default (e.g. create new customer invoice or Sales order if we select this product, it will automatically take this as an analytic account)\"),\n   35:         'partner_id': fields.many2one('res.partner', 'Partner', ondelete='cascade', help=\"Select a partner which will use analytic account specified in analytic default (e.g. create new customer invoice or Sales order if we select this partner, it will automatically take this as an analytic account)\"),\n   36:         'user_id': fields.many2one('res.users', 'User', ondelete='cascade', help=\"Select a user which will use analytic account specified in analytic default.\"),\n   37:         'company_id': fields.many2one('res.company', 'Company', ondelete='cascade', help=\"Select a company which will use analytic account specified in analytic default (e.g. create new customer invoice or Sales order if we select this company, it will automatically take this as an analytic account)\"),\n   38:         'date_start': fields.date('Start Date', help=\"Default start date for this Analytic Account.\"),\n   39:         'date_stop': fields.date('End Date', help=\"Default end date for this Analytic Account.\"),\n   40      }\n   41  \n   ..\n   79      def product_id_change(self, cr, uid, ids, product, uom_id, qty=0, name='', type='out_invoice', partner_id=False, fposition_id=False, price_unit=False, currency_id=False, company_id=None, context=None):\n   80          res_prod = super(account_invoice_line, self).product_id_change(cr, uid, ids, product, uom_id, qty, name, type, partner_id, fposition_id, price_unit, currency_id=currency_id, company_id=company_id, context=context)\n   81:         rec = self.pool.get('account.analytic.default').account_get(cr, uid, product, partner_id, uid, time.strftime('%Y-%m-%d'), company_id=company_id, context=context)\n   82          if rec:\n   83              res_prod['value'].update({'account_analytic_id': rec.analytic_id.id})\n   ..\n   93      def _get_account_analytic_invoice(self, cursor, user, picking, move_line):\n   94          partner_id = picking.partner_id and picking.partner_id.id or False\n   95:         rec = self.pool.get('account.analytic.default').account_get(cursor, user, move_line.product_id.id, partner_id, user, time.strftime('%Y-%m-%d'))\n   96  \n   97          if rec:\n   ..\n  104      _inherit = \"sale.order.line\"\n  105  \n  106:     # Method overridden to set the analytic account by default on criterion match\n  107      def invoice_line_create(self, cr, uid, ids, context=None):\n  108          create_ids = super(sale_order_line, self).invoice_line_create(cr, uid, ids, context=context)\n  ...\n  111          sale_line = self.browse(cr, uid, ids[0], context=context)\n  112          inv_line_obj = self.pool.get('account.invoice.line')\n  113:         anal_def_obj = self.pool.get('account.analytic.default')\n  114  \n  115          for line in inv_line_obj.browse(cr, uid, create_ids, context=context):\n  ...\n  122      _inherit = 'product.product'\n  123      def _rules_count(self, cr, uid, ids, field_name, arg, context=None):\n  124:         Analytic = self.pool['account.analytic.default']\n  125          return {\n  126              product_id: Analytic.search_count(cr, uid, [('product_id', '=', product_id)], context=context)\n  ...\n  135      \n  136      def _rules_count(self, cr, uid, ids, field_name, arg, context=None):\n  137:         Analytic = self.pool['account.analytic.default']\n  138          res = {}\n  139          for product_tmpl_id in self.browse(cr, uid, ids, context=context):\n  ...\n  148      def action_view_rules(self, cr, uid, ids, context=None):\n  149          products = self._get_products(cr, uid, ids, context=context)\n  150:         result = self._get_act_window_dict(cr, uid, 'account_analytic_default.action_product_default_list', context=context)\n  151          result['domain'] = \"[('product_id','in',[\" + ','.join(map(str, products)) + \"])]\"\n  152          # Remove context so it is not going to filter on product_id with active_id of template\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_analytic_default\\account_analytic_default_view.xml:\n    2  <openerp>\n    3      <data>\n    4:         <record id=\"view_account_analytic_default_tree\" model=\"ir.ui.view\">\n    5:             <field name=\"name\">account.analytic.default.tree</field>\n    6:             <field name=\"model\">account.analytic.default</field>\n    7              <field name=\"arch\" type=\"xml\">\n    8:                 <tree string=\"Analytic Defaults\">\n    9                      <field name=\"sequence\"/>\n   10                      <field name=\"analytic_id\" required=\"0\" groups=\"analytic.group_analytic_accounting\"/>\n   ..\n   19          </record>\n   20  \n   21:         <record id=\"view_account_analytic_default_form\" model=\"ir.ui.view\">\n   22:             <field name=\"name\">account.analytic.default.form</field>\n   23:             <field name=\"model\">account.analytic.default</field>\n   24              <field name=\"arch\" type=\"xml\">\n   25:                 <form string=\"Analytic Defaults\">\n   26                      <group col=\"4\">\n   27                          <field name=\"analytic_id\" required=\"1\" groups=\"analytic.group_analytic_accounting\"/>\n   ..\n   30                          <field name=\"product_id\"/>\n   31                          <field name=\"partner_id\"/>\n   32:                         <field name=\"user_id\" context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'account.group_account_invoice', 'base.group_sale_salesman']}\"/>\n   33                          <field name=\"company_id\" widget=\"selection\" groups=\"base.group_multi_company\"/>\n   34                          <field name=\"date_start\"/>\n   ..\n   39          </record>\n   40  \n   41:         <record id=\"view_account_analytic_default_form_search\" model=\"ir.ui.view\">\n   42:             <field name=\"name\">account.analytic.default.search</field>\n   43:             <field name=\"model\">account.analytic.default</field>\n   44              <field name=\"arch\" type=\"xml\">\n   45                  <search string=\"Accounts\">\n   ..\n   61          </record>\n   62  \n   63:         <record id=\"action_analytic_default_list\" model=\"ir.actions.act_window\">\n   64:             <field name=\"name\">Analytic Defaults</field>\n   65:             <field name=\"res_model\">account.analytic.default</field>\n   66              <field name=\"view_type\">form</field>\n   67              <field name=\"view_mode\">tree,form</field>\n   68:             <field name=\"search_view_id\" ref=\"view_account_analytic_default_form_search\"/>\n   69:             <field name=\"context\">{\"search_default_current\":1}</field>\n   70          </record>\n   71          \n   72:         <record id=\"action_product_default_list\" model=\"ir.actions.act_window\">\n   73:             <field name=\"name\">Analytic Defaults</field>\n   74:             <field name=\"res_model\">account.analytic.default</field>\n   75:             <field name=\"context\">{'search_default_product_id': [active_id], 'default_product_id': active_id}</field>\n   76          </record>\n   77:         <record model=\"ir.ui.view\" id=\"product_form_view_default_analytic_button\">\n   78              <field name=\"name\">product.product.stock.move</field>\n   79              <field name=\"model\">product.product</field>\n   ..\n   81              <field name=\"arch\" type=\"xml\">\n   82                  <xpath expr=\"//div[@name='buttons']\" position=\"inside\">\n   83:                     <button class=\"oe_inline oe_stat_button\" name= \"%(action_product_default_list)d\" type=\"action\" \n   84                          groups=\"analytic.group_analytic_accounting\" icon=\"fa-xing\">\n   85                          <field string=\"Analytic Rules\" name=\"rules_count\" widget=\"statinfo\" />\n   ..\n   89          </record>\n   90          \n   91:         <record model=\"ir.ui.view\" id=\"product_template_view_default_analytic_button\">\n   92              <field name=\"name\">product.template.stock.move</field>\n   93              <field name=\"model\">product.template</field>\n   ..\n  108              res_model=\"account.move.line\"\n  109              src_model=\"account.account\"\n  110:             context=\"{'search_default_account_id': [active_id], 'default_account_id': active_id}\"\n  111              />\n  112  \n  113          <menuitem\n  114:             action=\"action_analytic_default_list\"\n  115:             id=\"menu_analytic_default_list\"\n  116              parent=\"account.menu_analytic_accounting\"/>\n  117  \n  ...\n  120              name=\"Analytic Rules\"\n  121              id=\"analytic_rule_action_partner\"\n  122:             res_model=\"account.analytic.default\"\n  123              src_model=\"res.partner\"\n  124:             context=\"{'search_default_partner_id': [active_id], 'default_partner_id': active_id}\"\n  125              groups=\"analytic.group_analytic_accounting\"/>\n  126  \n  ...\n  128              name=\"Analytic Rules\"\n  129              id=\"analytic_rule_action_user\"\n  130:             res_model=\"account.analytic.default\"\n  131              src_model=\"res.users\"\n  132:             context=\"{'search_default_user_id': [active_id], 'default_user_id': active_id}\"\n  133              groups=\"analytic.group_analytic_accounting\"/>\n  134  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_analytic_default\\security\\account_analytic_default_security.xml:\n    3      <data noupdate=\"1\">\n    4  \n    5:     <record id=\"analytic_default_comp_rule\" model=\"ir.rule\">\n    6:         <field name=\"name\">Analytic Default multi company rule</field>\n    7:         <field name=\"model_id\" ref=\"model_account_analytic_default\"/>\n    8          <field eval=\"True\" name=\"global\"/>\n    9          <field name=\"domain_force\">['|',('company_id','=',False),('company_id','child_of',[user.company_id.id])]</field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_analytic_plans\\__openerp__.py:\n   65      'author': 'OpenERP SA',\n   66      'website': 'https://www.odoo.com/page/accounting',\n   67:     'depends': ['account', 'account_analytic_default'],\n   68      'data': [\n   69          'security/account_analytic_plan_security.xml',\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_analytic_plans\\account_analytic_plans.py:\n   62          res = {}\n   63          for id in ids:\n   64:             res.setdefault(id, 0.0)\n   65          for line in self.browse(cr, uid, ids, context=context):\n   66              amount = line.move_id and line.move_id.amount_currency * (line.percentage / 100) or 0.0\n   ..\n   95          'max_required': fields.float('Maximum Allowed (%)'),\n   96      }\n   97:     _defaults = {\n   98          'min_required': 100.0,\n   99          'max_required': 100.0,\n  ...\n  132          return res\n  133  \n  134:     def _default_journal(self, cr, uid, context=None):\n  135          if context is None:\n  136              context = {}\n  ...\n  142          return False\n  143  \n  144:     _defaults = {\n  145          'plan_id': False,\n  146:         'journal_id': _default_journal,\n  147      }\n  148      def name_get(self, cr, uid, ids, context=None):\n  ...\n  265          'rate': fields.float('Rate (%)', required=True),\n  266      }\n  267:     _defaults = {\n  268          'rate': 100.0\n  269      }\n  ...\n  305      def product_id_change(self, cr, uid, ids, product, uom_id, qty=0, name='', type='out_invoice', partner_id=False, fposition_id=False, price_unit=False, currency_id=False, company_id=None, context=None):\n  306          res_prod = super(account_invoice_line, self).product_id_change(cr, uid, ids, product, uom_id, qty, name, type, partner_id, fposition_id, price_unit, currency_id, company_id=company_id, context=context)\n  307:         rec = self.pool.get('account.analytic.default').account_get(cr, uid, product, partner_id, uid, time.strftime('%Y-%m-%d'), context=context)\n  308          if rec and rec.analytics_id:\n  309              res_prod['value'].update({'analytics_id': rec.analytics_id.id})\n  ...\n  319      }\n  320  \n  321:     def _default_get_move_form_hook(self, cursor, user, data):\n  322:         data = super(account_move_line, self)._default_get_move_form_hook(cursor, user, data)\n  323          if data.has_key('analytics_id'):\n  324              del(data['analytics_id'])\n  ...\n  422      _inherit = \"account.analytic.plan\"\n  423      _columns = {\n  424:         'default_instance_id': fields.many2one('account.analytic.plan.instance', 'Default Entries'),\n  425      }\n  426  \n  427: class analytic_default(osv.osv):\n  428:     _inherit = \"account.analytic.default\"\n  429      _columns = {\n  430          'analytics_id': fields.many2one('account.analytic.plan.instance', 'Analytic Distribution'),\n  ...\n  435      _inherit = \"sale.order.line\"\n  436  \n  437:     # Method overridden to set the analytic account by default on criterion match\n  438      def invoice_line_create(self, cr, uid, ids, context=None):\n  439          create_ids = super(sale_order_line,self).invoice_line_create(cr, uid, ids, context=context)\n  440          inv_line_obj = self.pool.get('account.invoice.line')\n  441:         acct_anal_def_obj = self.pool.get('account.analytic.default')\n  442          if ids:\n  443              sale_line = self.browse(cr, uid, ids[0], context=context)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_analytic_plans\\account_analytic_plans_view.xml:\n  116      <act_window name=\"Distribution Models\"\n  117          domain=\"[('plan_id','&lt;&gt;',False)]\"\n  118:         context=\"{'search_default_plan_id': active_id, 'default_plan_id': active_id}\"\n  119          res_model=\"account.analytic.plan.instance\"\n  120          src_model=\"account.analytic.plan\"\n  ...\n  164                  <group col=\"4\">\n  165                      <field name=\"name\"/>\n  166:                     <field name=\"default_instance_id\"/>\n  167                  </group>\n  168                  <field name=\"plan_ids\"/>\n  ...\n  232      </record>\n  233  \n  234:     <!-- add property field on default analytic account-->\n  235  \n  236:     <record model=\"ir.ui.view\" id=\"view_default_inherit_form\">\n  237:         <field name=\"name\">account.analytic.default.form.plans</field>\n  238:         <field name=\"model\">account.analytic.default</field>\n  239:         <field name=\"inherit_id\" ref=\"account_analytic_default.view_account_analytic_default_form\"/>\n  240          <field name=\"arch\" type=\"xml\">\n  241              <field name=\"analytic_id\" required=\"1\" position=\"replace\">\n  ...\n  244          </field>\n  245      </record>\n  246:     <record model=\"ir.ui.view\" id=\"view_default_inherit_tree\">\n  247:         <field name=\"name\">account.analytic.default.tree.plans</field>\n  248:         <field name=\"model\">account.analytic.default</field>\n  249:         <field name=\"inherit_id\" ref=\"account_analytic_default.view_account_analytic_default_tree\"/>\n  250          <field name=\"arch\" type=\"xml\">\n  251              <xpath  expr=\"//field[@name='analytic_id']\" position=\"replace\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_analytic_plans\\wizard\\account_crossovered_analytic.py:\n   36          'empty_line': fields.boolean('Dont show empty lines'),\n   37      }\n   38:     _defaults = {\n   39           'date1': lambda *a: time.strftime('%Y-01-01'),\n   40           'date2': lambda *a: time.strftime('%Y-%m-%d'),\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_analytic_plans\\wizard\\analytic_plan_create_model_view.xml:\n    9                  <label string=\"Save This Distribution as a Model\"/>\n   10                  <footer>\n   11:                     <button string=\"Ok\" type=\"object\" name=\"activate\" default_focus=\"1\" class=\"oe_highlight\"/>\n   12                      or\n   13                      <button string=\"Cancel\" class=\"oe_link\" special=\"cancel\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_asset\\account_asset.py:\n   56      }\n   57  \n   58:     _defaults = {\n   59:         'company_id': lambda self, cr, uid, context: self.pool.get('res.company')._company_default_get(cr, uid, 'account.asset.category', context=context),\n   60          'method': 'linear',\n   61          'method_number': 5,\n   ..\n  103  \n  104      def _compute_board_amount(self, cr, uid, asset, i, residual_amount, amount_to_depr, undone_dotation_number, posted_depreciation_line_ids, total_days, depreciation_date, context=None):\n  105:         #by default amount = 0\n  106          amount = 0\n  107          if i == undone_dotation_number:\n  ...\n  217              res[asset.id] = asset.purchase_value - res.get(asset.id, 0.0) - asset.salvage_value\n  218          for id in ids:\n  219:             res.setdefault(id, 0.0)\n  220          return res\n  221  \n  ...\n  253          'company_id': fields.many2one('res.company', 'Company', required=True, readonly=True, states={'draft':[('readonly',False)]}),\n  254          'note': fields.text('Note'),\n  255:         'category_id': fields.many2one('account.asset.category', 'Asset Category', required=True, change_default=True, readonly=True, states={'draft':[('readonly',False)]}),\n  256          'parent_id': fields.many2one('account.asset.asset', 'Parent Asset', readonly=True, states={'draft':[('readonly',False)]}),\n  257          'child_ids': fields.one2many('account.asset.asset', 'parent_id', 'Children Assets', copy=True),\n  ...\n  280          'salvage_value': fields.float('Salvage Value', digits_compute=dp.get_precision('Account'), help=\"It is the amount you plan to have that you cannot depreciate.\", readonly=True, states={'draft':[('readonly',False)]}),\n  281      }\n  282:     _defaults = {\n  283          'code': lambda obj, cr, uid, context: obj.pool.get('ir.sequence').get(cr, uid, 'account.asset.code'),\n  284          'purchase_date': lambda obj, cr, uid, context: time.strftime('%Y-%m-%d'),\n  ...\n  291          'method_progress_factor': 0.3,\n  292          'currency_id': lambda self,cr,uid,c: self.pool.get('res.users').browse(cr, uid, uid, c).company_id.currency_id.id,\n  293:         'company_id': lambda self, cr, uid, context: self.pool.get('res.company')._company_default_get(cr, uid, 'account.asset.asset',context=context),\n  294      }\n  295  \n  ...\n  345      \n  346      def open_entries(self, cr, uid, ids, context=None):\n  347:         context = dict(context or {}, search_default_asset_id=ids, default_asset_id=ids)\n  348          return {\n  349              'name': _('Journal Items'),\n  ...\n  474      }\n  475      _order = 'date desc'\n  476:     _defaults = {\n  477          'date': lambda *args: time.strftime('%Y-%m-%d'),\n  478          'user_id': lambda self, cr, uid, ctx: uid\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_asset\\account_asset_view.xml:\n  320      <menuitem parent=\"menu_finance_assets\" id=\"menu_action_account_asset_asset_form\" action=\"action_account_asset_asset_form\"/>\n  321  \n  322:     <act_window id=\"act_entries_open\" name=\"Entries\" res_model=\"account.move.line\" src_model=\"account.asset.asset\" context=\"{'search_default_asset_id': [active_id], 'default_asset_id': active_id}\"/>\n  323  \n  324      <menuitem id=\"menu_finance_config_assets\" name=\"Assets\" parent=\"account.menu_finance_configuration\" sequence=\"25\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_asset\\wizard\\account_asset_change_duration.py:\n   44      }\n   45  \n   46:     def default_get(self, cr, uid, fields, context=None):\n   47:         \"\"\" To get default values for the object.\n   48          @param self: The object pointer.\n   49          @param cr: A database cursor\n   50          @param uid: ID of the user currently logged in\n   51:         @param fields: List of fields for which we want default values \n   52          @param context: A standard dictionary \n   53          @return: A dictionary which of fields with values. \n   ..\n   56              context = {}\n   57          asset_obj = self.pool.get('account.asset.asset')\n   58:         res = super(asset_modify, self).default_get(cr, uid, fields, context=context)\n   59          asset_id = context.get('active_id', False)\n   60          asset = asset_obj.browse(cr, uid, asset_id, context=context)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_asset\\wizard\\wizard_asset_compute.py:\n   36          return False\n   37   \n   38:     _defaults = {\n   39          'period_id': _get_period,\n   40      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_bank_statement_extensions\\account_bank_statement.py:\n   82      }\n   83      _rec_name = 'code'\n   84:     _defaults = {\n   85          'code': lambda s,c,u,ctx={}: s.pool.get('ir.sequence').get(c, u, 'account.bank.statement.line.global'),\n   86          'name': '/',\n   ..\n  123          'counterparty_currency': fields.char('Counterparty Currency', size=3),\n  124      }\n  125:     _defaults = {\n  126          'state': 'draft',\n  127      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_budget\\account_budget.py:\n   23  \n   24  from openerp.osv import fields, osv\n   25: from openerp.tools import ustr, DEFAULT_SERVER_DATE_FORMAT\n   26  from openerp.tools.translate import _\n   27  \n   ..\n   36  \n   37  def strToDatetime(strdate):\n   38:     return datetime.strptime(strdate, DEFAULT_SERVER_DATE_FORMAT)\n   39  \n   40  # ---------------------------------------------------------\n   ..\n   51          'company_id': fields.many2one('res.company', 'Company', required=True),\n   52      }\n   53:     _defaults = {\n   54:         'company_id': lambda self, cr, uid, c: self.pool.get('res.company')._company_default_get(cr, uid, 'account.budget.post', context=c)\n   55      }\n   56      _order = \"name\"\n   ..\n   74      }\n   75  \n   76:     _defaults = {\n   77          'state': 'draft',\n   78          'creating_user_id': lambda self, cr, uid, context: uid,\n   79:         'company_id': lambda self, cr, uid, c: self.pool.get('res.company')._company_default_get(cr, uid, 'account.budget.post', context=c)\n   80      }\n   81  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_budget\\account_budget_view.xml:\n  112                          <group>\n  113                              <group>\n  114:                                 <field name=\"creating_user_id\" attrs=\"{'readonly':[('state','!=','draft')]}\" context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'account.group_account_user']}\"/>\n  115                                  <field name=\"validating_user_id\" readonly=\"True\" attrs=\"{'readonly':[('state','!=','draft')]}\"/>\n  116                              </group>\n  ...\n  290          <!--  Shortcuts -->\n  291          <act_window name=\"Budget Lines\"\n  292:             context=\"{'search_default_analytic_account_id': [active_id], 'default_analytic_account_id': active_id}\"\n  293              res_model=\"crossovered.budget.lines\"\n  294              src_model=\"account.analytic.account\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_budget\\tests\\test_theoreticalamount.py:\n    4  \n    5  from openerp.tests.common import TransactionCase\n    6: from openerp.tools import DEFAULT_SERVER_DATETIME_FORMAT\n    7  \n    8  \n    .\n   35      def test_01(self):\n   36          \"\"\"Start\"\"\"\n   37:         date = datetime.strptime('2014-01-01 00:00:00', DEFAULT_SERVER_DATETIME_FORMAT)\n   38          self.mock_datetime.now.return_value = date\n   39          self.assertEqual(self.line.theoritical_amount, 0)\n   ..\n   41      def test_02(self):\n   42          \"\"\"After 24 hours\"\"\"\n   43:         date = datetime.strptime('2014-01-02 00:00:00', DEFAULT_SERVER_DATETIME_FORMAT)\n   44          self.mock_datetime.now.return_value = date\n   45          self.assertEqual(self.line.theoritical_amount, -1)\n   ..\n   47      def test_03(self):\n   48          \"\"\"After 36 hours\"\"\"\n   49:         date = datetime.strptime('2014-01-02 12:00:00', DEFAULT_SERVER_DATETIME_FORMAT)\n   50          self.mock_datetime.now.return_value = date\n   51          self.assertEqual(self.line.theoritical_amount, -1.5)\n   ..\n   53      def test_04(self):\n   54          \"\"\"After 48 hours\"\"\"\n   55:         date = datetime.strptime('2014-01-03 00:00:00', DEFAULT_SERVER_DATETIME_FORMAT)\n   56          self.mock_datetime.now.return_value = date\n   57          self.assertEqual(self.line.theoritical_amount, -2)\n   ..\n   59      def test_05(self):\n   60          \"\"\"After 10 days\"\"\"\n   61:         date = datetime.strptime('2014-01-11 00:00:00', DEFAULT_SERVER_DATETIME_FORMAT)\n   62          self.mock_datetime.now.return_value = date\n   63          self.assertEqual(self.line.theoritical_amount, -10)\n   ..\n   65      def test_06(self):\n   66          \"\"\"After 50 days\"\"\"\n   67:         date = datetime.strptime('2014-02-20 00:00:00', DEFAULT_SERVER_DATETIME_FORMAT)\n   68          self.mock_datetime.now.return_value = date\n   69          self.assertEqual(self.line.theoritical_amount, -50)\n   ..\n   71      def test_07(self):\n   72          \"\"\"After 182 days, exactly half of the budget line\"\"\"\n   73:         date = datetime.strptime('2014-07-02 00:00:00', DEFAULT_SERVER_DATETIME_FORMAT)\n   74          self.mock_datetime.now.return_value = date\n   75          self.assertEqual(self.line.theoritical_amount, -182)\n   ..\n   77      def test_08(self):\n   78          \"\"\"After 308 days at noon\"\"\"\n   79:         date = datetime.strptime('2014-11-05 12:00:00', DEFAULT_SERVER_DATETIME_FORMAT)  # remember, remember\n   80          self.mock_datetime.now.return_value = date\n   81          self.assertEqual(self.line.theoritical_amount, -308.5)\n   ..\n   83      def test_09(self):\n   84          \"\"\"One day before\"\"\"\n   85:         date = datetime.strptime('2014-12-30 00:00:00', DEFAULT_SERVER_DATETIME_FORMAT)\n   86          self.mock_datetime.now.return_value = date\n   87          self.assertEqual(self.line.theoritical_amount, -363)\n   ..\n   89      def test_10(self):\n   90          \"\"\"At last\"\"\"\n   91:         date = datetime.strptime('2014-12-31 00:00:00', DEFAULT_SERVER_DATETIME_FORMAT)\n   92          self.mock_datetime.now.return_value = date\n   93          self.assertEqual(self.line.theoritical_amount, -364)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_budget\\wizard\\account_budget_analytic.py:\n   32          'date_to': fields.date('End of period', required=True),\n   33      }\n   34:     _defaults = {\n   35          'date_from': lambda *a: time.strftime('%Y-01-01'),\n   36          'date_to': lambda *a: time.strftime('%Y-%m-%d'),\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_budget\\wizard\\account_budget_analytic_view.xml:\n   13                       </group>\n   14                       <footer>\n   15:                          <button name=\"check_report\" string=\"Print\" type=\"object\" default_focus=\"1\" class=\"oe_highlight\"/>\n   16                           or\n   17                           <button string=\"Cancel\" class=\"oe_link\" special=\"cancel\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_budget\\wizard\\account_budget_crossovered_report.py:\n   32          'date_to': fields.date('End of period', required=True),\n   33      }\n   34:     _defaults = {\n   35          'date_from': lambda *a: time.strftime('%Y-01-01'),\n   36          'date_to': lambda *a: time.strftime('%Y-%m-%d'),\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_budget\\wizard\\account_budget_crossovered_report_view.xml:\n   13                      </group>\n   14                       <footer>\n   15:                          <button name=\"check_report\" string=\"Print\" type=\"object\" default_focus=\"1\" class=\"oe_highlight\"/>\n   16                           or\n   17                           <button string=\"Cancel\" class=\"oe_link\" special=\"cancel\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_budget\\wizard\\account_budget_crossovered_summary_report.py:\n   34          'date_to': fields.date('End of period', required=True),\n   35      }\n   36:     _defaults = {\n   37          'date_from': lambda *a: time.strftime('%Y-01-01'),\n   38          'date_to': lambda *a: time.strftime('%Y-%m-%d'),\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_budget\\wizard\\account_budget_crossovered_summary_report_view.xml:\n   13                      </group>\n   14                       <footer>\n   15:                          <button name=\"check_report\" string=\"Print\" type=\"object\" default_focus=\"1\" class=\"oe_highlight\"/>\n   16                           or\n   17                           <button string=\"Cancel\" class=\"oe_link\" special=\"cancel\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_budget\\wizard\\account_budget_report.py:\n   32          'date_to': fields.date('End of period', required=True),\n   33      }\n   34:     _defaults = {\n   35          'date_from': lambda *a: time.strftime('%Y-01-01'),\n   36          'date_to': lambda *a: time.strftime('%Y-%m-%d'),\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_budget\\wizard\\account_budget_report_view.xml:\n   13                </group>\n   14                <footer>\n   15:                   <button name=\"check_report\" string=\"Print\" type=\"object\" default_focus=\"1\" class=\"oe_highlight\"/>\n   16                    or\n   17                    <button string=\"Cancel\" class=\"oe_link\" special=\"cancel\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_check_writing\\account.py:\n   42          }\n   43          \n   44:     _defaults = {\n   45          'check_layout' : lambda *a: 'top',\n   46      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_check_writing\\account_voucher.py:\n   63          if not context:\n   64              context = {}\n   65:         default = super(account_voucher, self).onchange_amount(cr, uid, ids, amount, rate, partner_id, journal_id, currency_id, ttype, date, payment_rate_currency_id, company_id, context=context)\n   66:         if 'value' in default:\n   67:             amount = 'amount' in default['value'] and default['value']['amount'] or amount\n   68              amount_in_word = self._amount_to_text(cr, uid, amount, currency_id, context=context)\n   69:             default['value'].update({'amount_in_word':amount_in_word})\n   70              if journal_id:\n   71                  allow_check_writing = self.pool.get('account.journal').browse(cr, uid, journal_id, context=context).allow_check_writing\n   72:                 default['value'].update({'allow_check':allow_check_writing})\n   73:         return default\n   74  \n   75      def print_check(self, cr, uid, ids, context=None):\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_check_writing\\data\\report_paperformat.xml:\n    4          <record id=\"paperformat_frenchcheck\" model=\"report.paperformat\">\n    5              <field name=\"name\">French Bank Check</field>\n    6:             <field name=\"default\" eval=\"True\"/>\n    7              <field name=\"format\">custom</field>\n    8              <field name=\"page_height\">80</field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_check_writing\\wizard\\account_check_batch_printing.py:\n   36          return self.pool.get('ir.sequence').read(cr, uid, [sequence_id], ['number_next'])[0]['number_next']\n   37  \n   38:     _defaults = {\n   39          'check_number': _get_next_number,\n   40     }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_followup\\account_followup.py:\n   34          'name': fields.related('company_id', 'name', string = \"Name\", readonly=True, type=\"char\"),\n   35      }\n   36:     _defaults = {\n   37:         'company_id': lambda s, cr, uid, c: s.pool.get('res.company')._company_default_get(cr, uid, 'account_followup.followup', context=c),\n   38      }\n   39      _sql_constraints = [('company_uniq', 'unique(company_id)', 'Only one follow-up per company is allowed')] \n   ..\n   42  class followup_line(osv.osv):\n   43  \n   44:     def _get_default_template(self, cr, uid, ids, context=None):\n   45          try:\n   46:             return self.pool.get('ir.model.data').get_object_reference(cr, uid, 'account_followup', 'email_template_account_followup_default')[1]\n   47          except ValueError:\n   48              return False\n   ..\n   65      _order = 'delay'\n   66      _sql_constraints = [('days_uniq', 'unique(followup_id, delay)', 'Days of the follow-up levels must be different')]\n   67:     _defaults = {\n   68          'send_email': True,\n   69          'send_letter': True,\n   ..\n   78  Best Regards,\n   79  \"\"\",\n   80:     'email_template_id': _get_default_template,\n   81      }\n   82  \n   ..\n  200          ctx['followup'] = True\n  201          #partner_ids are res.partner ids\n  202:         # If not defined by latest follow-up level, it will be the default template if it can find it\n  203          mtp = self.pool.get('email.template')\n  204          unknown_mails = 0\n  ...\n  210                  else:\n  211                      mail_template_id = self.pool.get('ir.model.data').get_object_reference(cr, uid, \n  212:                                                     'account_followup', 'email_template_account_followup_default')\n  213                      mtp.send_mail(cr, uid, mail_template_id[1], partner.id, context=ctx)\n  214              else:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_followup\\account_followup_customers.xml:\n   68              <field name=\"view_mode\">tree,form</field>\n   69              <field name=\"domain\">[('payment_amount_due', '>', 0.0)]</field> \n   70:             <field name=\"context\">{'Followupfirst':True, 'search_default_todo': True} </field>\n   71              <field name=\"search_view_id\" ref=\"customer_followup_search_view\"/>\n   72          </record>\n   ..\n   85                                  help=\"Print overdue payments report independent of follow-up line\" attrs=\"{'invisible':[('payment_amount_due', '&lt;=', 0.0)]}\" />\n   86                              <button name=\"do_partner_mail\" type=\"object\" string=\"Send Overdue Email\" groups=\"account.group_account_user\"\n   87:                                 help=\"If not specified by the latest follow-up level, it will send from the default email template\" attrs=\"{'invisible':[('payment_amount_due', '&lt;=', 0.0)]}\"/>\n   88                          </div>\n   89                          <p attrs=\"{'invisible':[('latest_followup_date','=', False)]}\">\n   ..\n  154              <field name=\"view_mode\">tree,form</field>\n  155              <field name=\"domain\">[('payment_amount_due', '>', 0.0)]</field>\n  156:             <field name=\"context\">{'Followupfirst':True, 'search_default_todo': True, 'search_default_my': True} </field>\n  157              <field name=\"search_view_id\" ref=\"customer_followup_search_view\"/>\n  158          </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_followup\\account_followup_data.xml:\n  120          </record>\n  121          \n  122:         <!-- Default follow up message -->\n  123:         <record id=\"email_template_account_followup_default\" model=\"email.template\">\n  124:             <field name=\"name\">Default payment follow-up reminder e-mail</field>\n  125              <field name=\"email_from\">${(user.email or '')|safe}</field>\n  126              <field name=\"subject\">${user.company_id.name} Payment Reminder</field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_followup\\report\\account_followup_print.py:\n   21  \n   22  import time\n   23: from collections import defaultdict\n   24  from openerp.osv import osv\n   25  from openerp.report import report_sxw\n   ..\n   59  \n   60          # lines_per_currency = {currency: [line data, ...], ...}\n   61:         lines_per_currency = defaultdict(list)\n   62          for line in moveline_obj.browse(self.cr, self.uid, moveline_ids):\n   63              currency = line.currency_id or line.company_id.currency_id\n   ..\n   81          if not fp_line:\n   82              raise osv.except_osv(_('Error!'),_(\"The followup plan defined for the current company does not have any followup action.\"))\n   83:         #the default text will be the first fp_line in the sequence with a description.\n   84:         default_text = ''\n   85          li_delay = []\n   86          for line in fp_line:\n   87:             if not default_text and line.description:\n   88:                 default_text = line.description\n   89              li_delay.append(line.delay)\n   90          li_delay.sort(reverse=True)\n   ..\n   98                  partner_max_delay = i.followup_line_id.delay\n   99                  partner_max_text = i.followup_line_id.description\n  100:         text = partner_max_delay and partner_max_text or default_text\n  101          if text:\n  102              text = text % {\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_followup\\report\\account_followup_report.xml:\n   44              <field name=\"view_type\">form</field>\n   45              <field name=\"view_mode\">graph</field>\n   46:             <field name=\"context\">{'search_default_followup_level':1}</field>\n   47              <field name=\"search_view_id\" ref=\"view_account_followup_stat_search\"/>\n   48          </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_followup\\tests\\test_account_followup.py:\n   54          delta = datetime.timedelta(days=3)\n   55          result = current_date + delta\n   56:         self.wizard_id = self.wizard.create(cr, uid, {'date':result.strftime(tools.DEFAULT_SERVER_DATE_FORMAT), \n   57                                                        'followup_id': self.followup_id\n   58                                                        }, context={\"followup_id\": self.followup_id})\n   ..\n   65          delta = datetime.timedelta(days=40)\n   66          result = current_date + delta\n   67:         self.wizard_id = self.wizard.create(cr, uid, {'date':result.strftime(tools.DEFAULT_SERVER_DATE_FORMAT), \n   68                                                        'followup_id': self.followup_id\n   69                                                        }, context={\"followup_id\": self.followup_id})\n   70          self.wizard.do_process(cr, uid, [self.wizard_id], context={\"followup_id\": self.followup_id, 'tz':'UTC'})\n   71:         self.wizard_id = self.wizard.create(cr, uid, {'date':result.strftime(tools.DEFAULT_SERVER_DATE_FORMAT), \n   72                                                        'followup_id': self.followup_id\n   73                                                        }, context={\"followup_id\": self.followup_id})\n   74          self.wizard.do_process(cr, uid, [self.wizard_id], context={\"followup_id\": self.followup_id, 'tz':'UTC'})\n   75:         self.wizard_id = self.wizard.create(cr, uid, {'date':result.strftime(tools.DEFAULT_SERVER_DATE_FORMAT), \n   76                                                        'followup_id': self.followup_id, \n   77                                                        }, context={\"followup_id\": self.followup_id})\n   ..\n   85          result = current_date + delta\n   86          self.wizard_id = self.wizard.create(cr, uid, {\n   87:                                                       'date':result.strftime(tools.DEFAULT_SERVER_DATE_FORMAT), \n   88                                                        'followup_id': self.followup_id\n   89                                                        }, context={\"followup_id\": self.followup_id})\n   ..\n   99                           \"Call the customer on the phone! \", \"Manual action not set\")\n  100          self.assertEqual(self.partner.browse(cr, uid, self.partner_id).payment_next_action_date, \n  101:                          datetime.datetime.utcnow().strftime(tools.DEFAULT_SERVER_DATE_FORMAT))\n  102  \n  103      def test_03_filter_on_credit(self):\n  ...\n  143                                               name = \"Payment for test customer invoice follow-up\") \n  144          self.assertFalse(self.partner.browse(cr, uid, self.partner_id).latest_followup_level_id, \"Level not empty\")\n  145:         self.wizard_id = self.wizard.create(cr, uid, {'date':result.strftime(tools.DEFAULT_SERVER_DATE_FORMAT), \n  146                                                        'followup_id': self.followup_id\n  147                                                        }, context={\"followup_id\": self.followup_id})\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_followup\\wizard\\account_followup_print.py:\n  108          'needprinting': fields.boolean(\"Needs Printing\")\n  109      }\n  110:     _defaults = {\n  111          'needprinting':_get_need_printing,\n  112          'description':_get_description,\n  ...\n  252          return self.pool.get('res.users').browse(cr, uid, uid, context=context).company_id.follow_up_msg\n  253  \n  254:     _defaults = {\n  255          'date': lambda *a: time.strftime('%Y-%m-%d'),\n  256          'followup_id': _get_followup,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_payment\\account_payment.py:\n   40  \n   41      }\n   42:     _defaults = {\n   43          'company_id': lambda self,cr,uid,c: self.pool.get('res.users').browse(cr, uid, uid, c).company_id.id\n   44      }\n   ..\n  103              ('due', 'Due date'),\n  104              ('fixed', 'Fixed date')\n  105:             ], \"Preferred Date\", change_default=True, required=True, states={'done': [('readonly', True)]}, help=\"Choose an option for the Payment Order:'Fixed' stands for a date specified by you.'Directly' stands for the direct execution.'Due date' stands for the scheduled date of execution.\"),\n  106          'date_created': fields.date('Creation Date', readonly=True),\n  107          'date_done': fields.date('Execution Date', readonly=True),\n  ...\n  109      }\n  110  \n  111:     _defaults = {\n  112          'user_id': lambda self,cr,uid,context: uid,\n  113          'state': 'draft',\n  ...\n  223          else:\n  224              for id in ids:\n  225:                 res.setdefault(id, (False, \"\"))\n  226          return res\n  227  \n  ...\n  321          'company_id': fields.related('order_id', 'company_id', type='many2one', relation='res.company', string='Company', store=True, readonly=True),\n  322      }\n  323:     _defaults = {\n  324          'name': lambda obj, cursor, user, context: obj.pool.get('ir.sequence'\n  325              ).get(cursor, user, 'payment.line'),\n  ...\n  401          res = super(payment_line, self).fields_get(cr, uid, fields, context)\n  402          if 'communication2' in res:\n  403:             res['communication2'].setdefault('states', {})\n  404              res['communication2']['states']['structured'] = [('readonly', True)]\n  405              res['communication2']['states']['normal'] = [('readonly', False)]\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_payment\\account_payment_view.xml:\n   80                      <group>\n   81                          <group>\n   82:                             <field name=\"user_id\" context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'account.group_account_invoice']}\"/>\n   83                              <field name=\"mode\"/>\n   84                          </group>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_payment\\wizard\\account_payment_order.py:\n   43          'entries': fields.many2many('account.move.line', 'line_pay_rel', 'pay_id', 'line_id', 'Entries')\n   44      }\n   45:     _defaults = {\n   46           'duedate': lambda *a: time.strftime('%Y-%m-%d'),\n   47      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_payment\\wizard\\account_payment_pay_view.xml:\n   10                      <separator string=\"Are you sure you want to make payment?\"/>\n   11                      <footer>\n   12:                         <button name=\"launch_wizard\" string=\"Yes\" type=\"object\" default_focus=\"1\" class=\"oe_highlight\"/>\n   13                          or\n   14                          <button string=\"Cancel\" class=\"oe_link\" special=\"cancel\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_sequence\\account_sequence_installer.py:\n   35          'company_id': fields.many2one('res.company', 'Company'),\n   36      }\n   37:     _defaults = {\n   38:         'company_id': lambda s,cr,uid,c: s.pool.get('res.company')._company_default_get(cr, uid, 'ir.sequence', context=c),\n   39          'number_increment': 1,\n   40          'number_next': 1,\n   ..\n   77              jou_obj.write(cr, uid, j_ids, {'internal_sequence_id': ir_seq})\n   78          ir_values_obj = self.pool.get('ir.values')\n   79:         ir_values_obj.set(cr, uid, key='default', key2=False, name='internal_sequence_id', models =[('account.journal', False)], value=ir_seq)\n   80          return res\n   81  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_test\\account_test.py:\n   31  from openerp.osv import fields, osv\n   32  \n   33: CODE_EXEC_DEFAULT = '''\\\n   34  res = []\n   35  cr.execute(\"select id, code from account_journal\")\n   ..\n   51      }\n   52  \n   53:     _defaults = {\n   54:         'code_exec': CODE_EXEC_DEFAULT,\n   55          'active': True,\n   56          'sequence': 10,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_voucher\\account_voucher.py:\n   77          if context.get('journal_id', False):\n   78              return context.get('journal_id')\n   79:         if not context.get('journal_id', False) and context.get('search_default_journal_id', False):\n   80:             return context.get('search_default_journal_id')\n   81  \n   82          ttype = context.get('type', 'bank')\n   ..\n  100              return False\n  101          journal = journal_pool.browse(cr, uid, journal_id, context=context)\n  102:         account_id = journal.default_credit_account_id or journal.default_debit_account_id\n  103          if account_id and account_id.tax_ids:\n  104              tax_id = account_id.tax_ids[0].id\n  ...\n  108      def _get_payment_rate_currency(self, cr, uid, context=None):\n  109          \"\"\"\n  110:         Return the default value for field payment_rate_currency_id: the currency of the journal\n  111          if there is one, otherwise the currency of the user's company\n  112          \"\"\"\n  ...\n  118              if journal.currency:\n  119                  return journal.currency.id\n  120:         #no journal given in the context, use company currency as default\n  121          return self.pool.get('res.users').browse(cr, uid, uid, context=context).company_id.currency_id.id\n  122  \n  ...\n  183              nodes = doc.xpath(\"//field[@name='partner_id']\")\n  184              for node in nodes:\n  185:                 node.set('context', \"{'default_customer': 0, 'search_default_supplier': 1, 'default_supplier': 1}\")\n  186                  if context.get('invoice_type','') in ('in_invoice', 'in_refund'):\n  187                      node.set('string', _(\"Supplier\"))\n  ...\n  300              ('payment','Payment'),\n  301              ('receipt','Receipt'),\n  302:         ],'Default Type', readonly=True, states={'draft':[('readonly',False)]}),\n  303          'name':fields.char('Memo', readonly=True, states={'draft':[('readonly',False)]}),\n  304          'date':fields.date('Date', readonly=True, select=True, states={'draft':[('readonly',False)]},\n  ...\n  310                                     states={'draft':[('readonly',False)]}),\n  311          'line_cr_ids':fields.one2many('account.voucher.line','voucher_id','Credits',\n  312:             domain=[('type','=','cr')], context={'default_type':'cr'}, readonly=True, states={'draft':[('readonly',False)]}),\n  313          'line_dr_ids':fields.one2many('account.voucher.line','voucher_id','Debits',\n  314:             domain=[('type','=','dr')], context={'default_type':'dr'}, readonly=True, states={'draft':[('readonly',False)]}),\n  315          'period_id': fields.many2one('account.period', 'Period', required=True, readonly=True, states={'draft':[('readonly',False)]}),\n  316          'narration':fields.text('Notes', readonly=True, states={'draft':[('readonly',False)]}),\n  ...\n  334          'move_id':fields.many2one('account.move', 'Account Entry', copy=False),\n  335          'move_ids': fields.related('move_id','line_id', type='one2many', relation='account.move.line', string='Journal Items', readonly=True),\n  336:         'partner_id':fields.many2one('res.partner', 'Partner', change_default=1, readonly=True, states={'draft':[('readonly',False)]}),\n  337          'audit': fields.related('move_id','to_check', type='boolean', help='Check this box if you are unsure of that journal entry and if you want to note it as \\'to be reviewed\\' by an accounting expert.', relation='account.move', string='To Review'),\n  338          'paid': fields.function(_check_paid, string='Paid', type='boolean', help=\"The Voucher has been totally paid.\"),\n  ...\n  359          'currency_help_label': fields.function(_fnct_currency_help_label, type='text', string=\"Helping Sentence\", help=\"This sentence helps you to know how to specify the payment rate by giving you the direct effect it has\"), \n  360      }\n  361:     _defaults = {\n  362          'period_id': _get_period,\n  363          'partner_id': _get_partner,\n  ...\n  372          'name': '',\n  373          'date': lambda *a: time.strftime('%Y-%m-%d'),\n  374:         'company_id': lambda self,cr,uid,c: self.pool.get('res.company')._company_default_get(cr, uid, 'account.voucher',context=c),\n  375          'tax_id': _get_tax,\n  376          'payment_option': 'without_writeoff',\n  ...\n  474          terms = False\n  475          due_date = False\n  476:         default = {'date_due':False}\n  477          if term_id and amount:\n  478              terms = term_pool.compute(cr, uid, term_id, amount)\n  479          if terms:\n  480              due_date = terms[-1][0]\n  481:             default.update({\n  482                  'date_due':due_date\n  483              })\n  484:         return {'value':default}\n  485  \n  486      def onchange_journal_voucher(self, cr, uid, ids, line_ids=False, tax_id=False, price=0.0, partner_id=False, journal_id=False, ttype=False, company_id=False, context=None):\n  ...\n  494          @return: Returns a dict which contains new values, and context\n  495          \"\"\"\n  496:         default = {\n  497              'value':{},\n  498          }\n  499  \n  500          if not partner_id or not journal_id:\n  501:             return default\n  502  \n  503          partner_pool = self.pool.get('res.partner')\n  ...\n  515              tr_type = 'purchase'\n  516          else:\n  517:             if not journal.default_credit_account_id or not journal.default_debit_account_id:\n  518:                 raise osv.except_osv(_('Error!'), _('Please define default credit/debit accounts on the journal \"%s\".') % (journal.name))\n  519:             account_id = journal.default_credit_account_id.id or journal.default_debit_account_id.id\n  520              tr_type = 'receipt'\n  521  \n  522:         default['value']['account_id'] = account_id\n  523:         default['value']['type'] = ttype or tr_type\n  524  \n  525          vals = self.onchange_journal(cr, uid, ids, journal_id, line_ids, tax_id, partner_id, time.strftime('%Y-%m-%d'), price, ttype, company_id, context)\n  526:         default['value'].update(vals.get('value'))\n  527  \n  528:         return default\n  529  \n  530      def onchange_rate(self, cr, uid, ids, rate, amount, currency_id, payment_rate_currency_id, company_id, context=None):\n  ...\n  557          if context is None:\n  558              context = {}\n  559:         #on change of the journal, we need to set also the default value for payment_rate and payment_rate_currency_id\n  560          currency_obj = self.pool.get('res.currency')\n  561          journal = self.pool.get('account.journal').browse(cr, uid, journal_id, context=context)\n  ...\n  576                      continue\n  577                  if voucher_line['currency_id'] != currency_id:\n  578:                     # we take as default value for the payment_rate_currency_id, the currency of the first invoice that\n  579                      # is not in the voucher currency\n  580                      payment_rate_currency_id = voucher_line['currency_id']\n  ...\n  612              account_id = partner.property_account_payable.id\n  613          else:\n  614:             account_id = journal.default_credit_account_id.id or journal.default_debit_account_id.id\n  615  \n  616          res['value']['account_id'] = account_id\n  ...\n  685          line_pool = self.pool.get('account.voucher.line')\n  686  \n  687:         #set default values\n  688:         default = {\n  689              'value': {'line_dr_ids': [], 'line_cr_ids': [], 'pre_line': False},\n  690          }\n  ...\n  694          for line in line_pool.browse(cr, uid, line_ids, context=context):\n  695              if line.type == 'cr':\n  696:                 default['value']['line_cr_ids'].append((2, line.id))\n  697              else:\n  698:                 default['value']['line_dr_ids'].append((2, line.id))\n  699  \n  700          if not partner_id or not journal_id:\n  701:             return default\n  702  \n  703          journal = journal_pool.browse(cr, uid, journal_id, context=context)\n  ...\n  803  \n  804              if rs['type'] == 'cr':\n  805:                 default['value']['line_cr_ids'].append(rs)\n  806              else:\n  807:                 default['value']['line_dr_ids'].append(rs)\n  808  \n  809:             if len(default['value']['line_cr_ids']) > 0:\n  810:                 default['value']['pre_line'] = 1\n  811:             elif len(default['value']['line_dr_ids']) > 0:\n  812:                 default['value']['pre_line'] = 1\n  813:             default['value']['writeoff_amount'] = self._compute_writeoff_amount(cr, uid, default['value']['line_dr_ids'], default['value']['line_cr_ids'], price, ttype)\n  814:         return default\n  815  \n  816      def onchange_payment_rate_currency(self, cr, uid, ids, currency_id, payment_rate, payment_rate_currency_id, date, amount, company_id, context=None):\n  ...\n  819          res = {'value': {}}\n  820          if currency_id:\n  821:             #set the default payment rate of the voucher and compute the paid amount in company currency\n  822              ctx = context.copy()\n  823              ctx.update({'date': date})\n  ...\n  870          journal_pool = self.pool.get('account.journal')\n  871          journal = journal_pool.browse(cr, uid, journal_id, context=context)\n  872:         account_id = journal.default_credit_account_id or journal.default_debit_account_id\n  873          tax_id = False\n  874          if account_id and account_id.tax_ids:\n  ...\n  975                  account_id = partner.property_account_payable.id\n  976              else:\n  977:                 account_id = journal.default_credit_account_id.id or journal.default_debit_account_id.id\n  978              if account_id:\n  979                  res['account_id'] = account_id\n  ...\n 1194                  continue\n 1195              # convert the amount set on the voucher line into the currency of the voucher's company\n 1196:             # this calls res_curreny.compute() with the right context, so that it will take either the rate on the voucher if it is relevant or will use the default behaviour\n 1197              amount = self._convert_amount(cr, uid, line.untax_amount or line.amount, voucher.id, context=ctx)\n 1198              # if the amount encoded in voucher is equal to the amount unreconciled, we need to compute the\n ....\n 1487          'currency_id': fields.function(_currency_id, string='Currency', type='many2one', relation='res.currency', readonly=True),\n 1488      }\n 1489:     _defaults = {\n 1490          'name': '',\n 1491      }\n ....\n 1530          }\n 1531  \n 1532:     def default_get(self, cr, user, fields_list, context=None):\n 1533          \"\"\"\n 1534:         Returns default values for fields\n 1535:         @param fields_list: list of fields, for which default values are required to be read\n 1536          @param context: context arguments, like lang, time zone\n 1537  \n 1538:         @return: Returns a dict that contains default values for fields\n 1539          \"\"\"\n 1540          if context is None:\n ....\n 1544          journal_pool = self.pool.get('account.journal')\n 1545          partner_pool = self.pool.get('res.partner')\n 1546:         values = super(account_voucher_line, self).default_get(cr, user, fields_list, context=context)\n 1547          if (not journal_id) or ('account_id' not in fields_list):\n 1548              return values\n ....\n 1551          ttype = 'cr'\n 1552          if journal.type in ('sale', 'sale_refund'):\n 1553:             account_id = journal.default_credit_account_id and journal.default_credit_account_id.id or False\n 1554              ttype = 'cr'\n 1555          elif journal.type in ('purchase', 'expense', 'purchase_refund'):\n 1556:             account_id = journal.default_debit_account_id and journal.default_debit_account_id.id or False\n 1557              ttype = 'dr'\n 1558          elif partner_id:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_voucher\\account_voucher_data.xml:\n   18              <field name=\"name\">Status Change</field>\n   19              <field name=\"res_model\">account.voucher</field>\n   20:             <field name=\"default\" eval=\"False\"/>\n   21              <field name=\"description\">Status changed</field>\n   22          </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_voucher\\account_voucher_view.xml:\n  199              id=\"act_journal_voucher_open\"\n  200              name=\"Voucher Entries\"\n  201:             context=\"{'search_default_journal_id': active_id, 'type':type, 'default_journal_id': active_id}\"\n  202              res_model=\"account.voucher\"\n  203              src_model=\"account.journal\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_voucher\\invoice.py:\n   43              'context': {\n   44                  'payment_expected_currency': inv.currency_id.id,\n   45:                 'default_partner_id': self.pool.get('res.partner')._find_accounting_partner(inv.partner_id).id,\n   46:                 'default_amount': inv.type in ('out_refund', 'in_refund') and -inv.residual or inv.residual,\n   47:                 'default_reference': inv.name,\n   48                  'close_after_process': True,\n   49                  'invoice_type': inv.type,\n   50                  'invoice_id': inv.id,\n   51:                 'default_type': inv.type in ('out_invoice','out_refund') and 'receipt' or 'payment',\n   52                  'type': inv.type in ('out_invoice','out_refund') and 'receipt' or 'payment'\n   53              }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_voucher\\report\\account_voucher_sales_receipt_view.xml:\n   49          <field name=\"view_type\">form</field>\n   50          <field name=\"view_mode\">graph</field>\n   51:         <field name=\"context\">{'search_default_year':1,'search_default_month':1,'search_default_partner':1, 'search_default_customer':1, 'group_by':[], 'group_by_no_leaf':1,}</field>\n   52          <field name=\"search_view_id\" ref=\"view_sale_receipt_report_search\"/>\n   53          <field name=\"help\" type=\"html\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_voucher\\voucher_payment_receipt_view.xml:\n   57                  <form string=\"Bill Payment\">\n   58                      <group col=\"6\">\n   59:                         <field name=\"partner_id\" required=\"1\" on_change=\"onchange_partner_id(partner_id, journal_id, amount, currency_id, type, date, context)\" string=\"Supplier\" context=\"{'default_customer': 0, 'search_default_supplier': 1, 'default_supplier': 1, 'invoice_currency': currency_id}\"/>\n   60                          <field name=\"state\" invisible=\"1\"/>\n   61                          <field name=\"company_id\" invisible=\"1\"/>\n   ..\n  142                      <group>\n  143                          <group>\n  144:                             <field name=\"partner_id\" required=\"1\" invisible=\"context.get('line_type', False)\" on_change=\"onchange_partner_id(partner_id, journal_id, amount, currency_id, type, date, context)\" context=\"{'invoice_currency':currency_id, 'default_customer': 0, 'search_default_supplier': 1, 'default_supplier': 1}\"  string=\"Supplier\"/>\n  145                              <field name=\"currency_id\" invisible=\"1\"/>\n  146                              <field name=\"amount\" invisible=\"context.get('line_type', False)\" on_change=\"onchange_amount(amount, payment_rate, partner_id, journal_id, currency_id, type, date, payment_rate_currency_id, company_id, context)\" class=\"oe_inline\" widget='monetary' options='{\"currency_field\": \"currency_id\"}'/>\n  ...\n  301                          <group>\n  302                              <field name=\"state\" invisible=\"1\"/>\n  303:                             <field name=\"partner_id\" required=\"1\" on_change=\"onchange_partner_id(partner_id, journal_id, amount, currency_id, type, date, context)\" string=\"Customer\" context=\"{'search_default_customer': 1}\"/>\n  304                              <field name=\"currency_id\" invisible=\"1\"/>\n  305                              <field name=\"amount\" class=\"oe_inline\"\n  ...\n  420                      <group invisible=\"context.get('line_type', False)\">\n  421                          <group>\n  422:                             <field name=\"partner_id\" domain=\"[('customer','=',True)]\" required=\"1\" on_change=\"onchange_partner_id(partner_id, journal_id, amount, currency_id, type, date, context)\" string=\"Customer\" context=\"{'search_default_customer': 1}\"/>\n  423                              <field name=\"currency_id\" invisible=\"1\"/>\n  424                              <field name=\"amount\" class=\"oe_inline\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account_voucher\\voucher_sales_purchase_view.xml:\n   51              <field name=\"view_type\">form</field>\n   52              <field name=\"domain\">[('journal_id.type', 'in', ['bank', 'cash']), ('type','=','receipt'), ('partner_id','=',partner_id)]</field>\n   53:             <field name=\"context\">{'default_type':'receipt', 'type':'receipt', 'partner_id': partner_id, 'default_reference':reference}</field>\n   54              <field name=\"view_id\" ref=\"view_vendor_receipt_form\"/>\n   55              <field name=\"target\">current</field>\n   ..\n   75                              <field name=\"type\" invisible=\"True\"/>\n   76                              <field name=\"company_id\" widget=\"selection\" on_change=\"onchange_company(partner_id, journal_id, currency_id, company_id)\" groups=\"base.group_multi_company\"/>\n   77:                             <field name=\"partner_id\" domain=\"[('customer','=',True)]\" on_change=\"onchange_partner_id(partner_id, journal_id, amount, currency_id, type, date, context)\" string=\"Customer\" context=\"{'search_default_customer':1, 'show_address': 1}\" options='{\"always_reload\": True}'/>\n   78                              <field name=\"account_id\"\n   79                                    domain=\"[('type','in', ['liquidity', 'receivable'])]\"/>\n   ..\n  165              <field name=\"view_type\">form</field>\n  166              <field name=\"domain\">[('journal_id.type','in',['sale','sale_refund']), ('type','=','sale')]</field>\n  167:             <field name=\"context\">{'default_type': 'sale', 'type': 'sale'}</field>\n  168              <field name=\"view_id\" eval=\"False\"/>\n  169              <field name=\"search_view_id\" ref=\"view_voucher_filter_sale\"/>\n  ...\n  201              <field name=\"view_type\">form</field>\n  202              <field name=\"domain\">[('journal_id.type', 'in', ['bank', 'cash']), ('type','=','payment'), ('partner_id','=',partner_id)]</field>\n  203:             <field name=\"context\">{'default_type':'payment', 'type':'payment', 'default_partner_id': partner_id, 'partner_id': partner_id, 'default_reference':reference}</field>\n  204              <field name=\"view_id\" ref=\"view_vendor_payment_form\"/>\n  205              <field name=\"target\">current</field>\n  ...\n  226                      <group>\n  227                          <group>\n  228:                             <field name=\"partner_id\" domain=\"[('supplier','=',True)]\" string=\"Supplier\" on_change=\"onchange_partner_id(partner_id, journal_id, amount, currency_id, type, date, context)\" context=\"{'default_customer': 0, 'search_default_supplier': 1, 'default_supplier': 1}\" />\n  229                              <field name=\"account_id\" domain=\"[('type', 'in', ['liquidity', 'payable'])]\"/>\n  230                              <field name=\"name\" colspan=\"2\"/>\n  ...\n  321              <field name=\"view_type\">form</field>\n  322              <field name=\"domain\">[('journal_id.type','in',['purchase','purchase_refund']), ('type','=','purchase')]</field>\n  323:             <field name=\"context\">{'default_type': 'purchase', 'type': 'purchase'}</field>\n  324              <field name=\"view_id\" eval=\"False\"/>\n  325              <field name=\"search_view_id\" eval=\"view_voucher_filter_vendor\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\analytic\\analytic.py:\n  180                                    \"The type 'Analytic account' stands for usual accounts that you only want to use in accounting.\\n\"\\\n  181                                    \"If you select Contract or Project, it offers you the possibility to manage the validity and the invoicing options for this account.\\n\"\\\n  182:                                   \"The special type 'Template of Contract' allows you to define a template with default data that you can reuse easily.\"),\n  183          'template_id': fields.many2one('account.analytic.account', 'Template of Contract'),\n  184          'description': fields.text('Description'),\n  ...\n  218          template = self.browse(cr, uid, template_id, context=context)\n  219          if template.date_start and template.date:\n  220:             from_dt = datetime.strptime(template.date_start, tools.DEFAULT_SERVER_DATE_FORMAT)\n  221:             to_dt = datetime.strptime(template.date, tools.DEFAULT_SERVER_DATE_FORMAT)\n  222              timedelta = to_dt - from_dt\n  223:             res['value']['date'] = datetime.strftime(datetime.now() + timedelta, tools.DEFAULT_SERVER_DATE_FORMAT)\n  224          if not date_start:\n  225              res['value']['date_start'] = fields.date.today()\n  ...\n  239          return {'value': res}\n  240  \n  241:     def _default_company(self, cr, uid, context=None):\n  242          user = self.pool.get('res.users').browse(cr, uid, uid, context=context)\n  243          if user.company_id:\n  ...\n  245          return self.pool.get('res.company').search(cr, uid, [('parent_id', '=', False)])[0]\n  246  \n  247:     def _get_default_currency(self, cr, uid, context=None):\n  248          user = self.pool.get('res.users').browse(cr, uid, uid, context=context)\n  249          return user.company_id.currency_id.id\n  250  \n  251:     _defaults = {\n  252          'type': 'normal',\n  253:         'company_id': _default_company,\n  254          'code' : lambda obj, cr, uid, context: obj.pool.get('ir.sequence').get(cr, uid, 'account.analytic.account'),\n  255          'state': 'open',\n  ...\n  258          'manager_id': lambda self, cr, uid, ctx: ctx.get('manager_id', False),\n  259          'date_start': lambda *a: time.strftime('%Y-%m-%d'),\n  260:         'currency_id': _get_default_currency,\n  261      }\n  262  \n  ...\n  272          raise osv.except_osv(_('Warning'), _(\"Quick account creation disallowed.\"))\n  273  \n  274:     def copy(self, cr, uid, id, default=None, context=None):\n  275:         if not default:\n  276:             default = {}\n  277          analytic = self.browse(cr, uid, id, context=context)\n  278:         default['name'] = _(\"%s (copy)\") % analytic['name']\n  279:         return super(account_analytic_account, self).copy(cr, uid, id, default, context=context)\n  280  \n  281      def on_change_company(self, cr, uid, id, company_id):\n  ...\n  331      }\n  332  \n  333:     def _get_default_date(self, cr, uid, context=None):\n  334          return fields.date.context_today(self, cr, uid, context=context)\n  335  \n  336:     def __get_default_date(self, cr, uid, context=None):\n  337:         return self._get_default_date(cr, uid, context=context)\n  338  \n  339:     _defaults = {\n  340:         'date': __get_default_date,\n  341:         'company_id': lambda self,cr,uid,c: self.pool.get('res.company')._company_default_get(cr, uid, 'account.analytic.line', context=c),\n  342          'amount': 0.00\n  343      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\analytic\\analytic_data.xml:\n    7              <field name=\"name\">Contract to Renew</field>\n    8              <field name=\"res_model\">account.analytic.account</field>\n    9:             <field name=\"default\" eval=\"False\"/>\n   10              <field name=\"description\">Contract pending</field>\n   11          </record>\n   ..\n   13              <field name=\"name\">Contract Finished</field>\n   14              <field name=\"res_model\">account.analytic.account</field>\n   15:             <field name=\"default\" eval=\"False\"/>\n   16              <field name=\"description\">Contract closed</field>\n   17          </record>\n   ..\n   19              <field name=\"name\">Contract Opened</field>\n   20              <field name=\"res_model\">account.analytic.account</field>\n   21:             <field name=\"default\" eval=\"False\"/>\n   22              <field name=\"description\">Contract opened</field>\n   23          </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\analytic\\analytic_view.xml:\n   23                              <group>\n   24                                  <field name=\"partner_id\" on_change=\"on_change_partner_id(partner_id, name)\"/>\n   25:                                 <field name=\"manager_id\" context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'account.group_account_manager']}\"/>\n   26                                  <field name=\"currency_id\" attrs=\"{'invisible': ['|',('type', '&lt;&gt;', 'view'), ('company_id', '&lt;&gt;', False)]}\"/>\n   27                              </group>\n   28                              <group>\n   29:                                 <field name=\"type\" invisible=\"context.get('default_type', False)\"/>\n   30:                                 <field name=\"template_id\" on_change=\"on_change_template(template_id, date_start)\" domain=\"[('type','=','template')]\" attrs=\"{'invisible': [('type','in',['view', 'normal','template'])]}\" context=\"{'default_type' : 'template'}\"/>\n   31                                  <field name=\"code\"/>\n   32                                  <field name=\"parent_id\" on_change=\"on_change_parent(parent_id)\" attrs=\"{'invisible': [('type','in',['contract'])]}\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\analytic_user_function\\__openerp__.py:\n   26      'category': 'Sales Management',\n   27      'description': \"\"\"\n   28: This module allows you to define what is the default function of a specific user on a given account.\n   29  ====================================================================================================\n   30  \n   ..\n   33  still available.\n   34  \n   35: Obviously if no data has been recorded for the current account, the default\n   36  value is given as usual by the employee data so that this module is perfectly\n   37  compatible with older configurations.\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\analytic_user_function\\analytic_user_function.py:\n   96              #get the old values from super and add the value from the new relation analytic_user_funct_grid\n   97              r = self.pool.get('analytic.user.funct.grid').browse(cr, uid, temp)[0]\n   98:             res.setdefault('value',{})\n   99              res['value']= super(hr_analytic_timesheet, self).on_change_account_id(cr, uid, ids, account_id)['value']\n  100              res['value']['product_id'] = r.product_id.id\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\analytic_user_function\\analytic_user_function_view.xml:\n    9              <field name=\"arch\" type=\"xml\">\n   10                  <tree string=\"Invoicing Data\" editable=\"bottom\">\n   11:                     <field name=\"user_id\" on_change=\"onchange_user_product_id(user_id, product_id)\" context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'base.group_sale_salesman']}\"/>\n   12                      <field name=\"product_id\" on_change=\"onchange_user_product_id(user_id, product_id)\" domain=\"[('type','=','service')]\"/>\n   13                      <field name=\"price\"/>\n   ..\n   23                  <form string=\"Invoicing Data\">\n   24                      <group>\n   25:                         <field name=\"user_id\" on_change=\"onchange_user_product_id(user_id, product_id)\" context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'base.group_sale_salesman']}\"/>\n   26                          <field name=\"product_id\" domain=\"[('type','=','service')]\" on_change=\"onchange_user_product_id(user_id, product_id)\"/>\n   27                          <field name=\"price\"/>\n   ..\n   45                              Define a specific service (e.g. Senior Consultant)\n   46                              and price for some users to use these data instead\n   47:                             of the default values when invoicing the customer.\n   48                          </p>\n   49                          <p class=\"oe_grey oe_edit_only\">\n   ..\n   80              <field name=\"arch\" type=\"xml\">\n   81                  <xpath expr=\"//field[@name='timesheet_ids']/form/field[@name='account_id']\" position=\"replace\">\n   82:                     <field name=\"account_id\" domain=\"[('type','=','normal'),('state', '&lt;&gt;', 'close')]\" on_change=\"on_change_account_id(account_id, user_id, unit_amount)\" context=\"{'default_use_timesheets': 1}\"/>\n   83                  </xpath>\n   84              </field>\n   ..\n  125              <field name=\"arch\" type=\"xml\">\n  126                  <xpath expr=\"/tree/field[@name='user_id']\" position=\"replace\">\n  127:                     <field name=\"user_id\"  required=\"1\" on_change=\"on_change_user_id(user_id, account_id, unit_amount)\" context=\"{'default_groups_ref': ['base.group_user']}\"/>\n  128                  </xpath>\n  129              </field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\anonymization\\anonymization.py:\n  214          return res\n  215  \n  216:     _defaults = {\n  217          'state': lambda *a: 'clear',\n  218      }\n  ...\n  293          return summary\n  294  \n  295:     def default_get(self, cr, uid, fields_list, context=None):\n  296          res = {}\n  297          res['name'] = '.pickle'\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\auth_crypt\\__openerp__.py:\n   30  ===================\n   31  \n   32: Replaces the default password storage with a strong cryptographic\n   33  hash.\n   34  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\auth_crypt\\auth_crypt.py:\n    8  _logger = logging.getLogger(__name__)\n    9  \n   10: default_crypt_context = CryptContext(\n   11:     # kdf which can be verified by the context. The default encryption kdf is\n   12      # the first of the list\n   13      ['pbkdf2_sha512', 'md5_crypt'],\n   ..\n   15      # will indicate that the stored hash should be replaced by a more recent\n   16      # algorithm. Passlib 1.6 supports an `auto` value which deprecates any\n   17:     # algorithm but the default, but Debian only provides 1.5 so...\n   18      deprecated=['md5_crypt'],\n   19  )\n   ..\n   87          \"\"\" Passlib CryptContext instance used to encrypt and verify\n   88          passwords. Can be overridden if technical, legal or political matters\n   89:         require different kdfs than the provided default.\n   90  \n   91          Requires a CryptContext as deprecation and upgrade notices are used\n   92          internally\n   93          \"\"\"\n   94:         return default_crypt_context\n   95  \n   96  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\auth_ldap\\users_ldap.py:\n  197                  values['active'] = True\n  198                  user_id = user_obj.copy(cr, SUPERUSER_ID, conf['user'],\n  199:                                         default=values)\n  200              else:\n  201                  user_id = user_obj.create(cr, SUPERUSER_ID, values)\n  ...\n  225                   \"otherwise all authentication attempts will fail.\"),\n  226      }\n  227:     _defaults = {\n  228          'ldap_server': '127.0.0.1',\n  229          'ldap_server_port': 389,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\auth_oauth\\auth_oauth.py:\n   20          'sequence' : fields.integer(),\n   21      }\n   22:     _defaults = {\n   23          'enabled' : False,\n   24          'css_class' : \"zocial\",\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\auth_oauth\\res_config.py:\n   35      }\n   36  \n   37:     def default_get(self, cr, uid, fields, context=None):\n   38:         res = super(base_config_settings, self).default_get(cr, uid, fields, context=context)\n   39          res.update(self.get_oauth_providers(cr, uid, fields, context=context))\n   40          return res\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\auth_openid\\res_users.py:\n   79                  if not cr.fetchone()[0]:\n   80                      raise\n   81:                 self._uid_cache.setdefault(db, {})[uid] = passwd\n   82  \n   83  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\auth_openid\\static\\src\\xml\\auth_openid.xml:\n    5      <t t-extend=\"Login\">\n    6          <t t-jquery=\".oe_login .oe_login_logo\" t-operation=\"after\">\n    7:             <div class=\"openid_providers\" data-modes=\"default openid\"><ul>\n    8                  <li><a href=\"#login,password\" data-provider='Password' title=\"Password\" data-url=\"\" id=\"btn_password\">Password</a></li>\n    9                  <li><a href=\"#google\" data-provider='Google' title=\"Google\" data-url=\"https://www.google.com/accounts/o8/id\">Google</a></li>\n   ..\n   50                      $p = $i.prev();\n   51                  // $p may not be the correct label when auth_signup is installed.\n   52:                 while(($p.attr('data-modes') || 'default') !== 'default') { $p = $p.prev(); }\n   53                  $i.add($p).attr('data-provider', dp);\n   54              });\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\auth_signup\\auth_signup_data.xml:\n    3      <data noupdate=\"1\">\n    4  \n    5:         <!-- Default template user for new users signing in -->\n    6:         <record id=\"default_template_user\" model=\"res.users\">\n    7              <field name=\"name\">Template User</field>\n    8              <field name=\"login\">portaltemplate</field>\n    .\n   10              <field name=\"password\"></field>\n   11              <field name=\"active\" eval=\"False\"/>\n   12:             <!-- Avoid auto-including this user in any default group, just like a typical portal member -->\n   13              <field name=\"groups_id\" eval=\"[(6, 0,  [ref('base.group_portal')])]\"/>\n   14              <!-- allow signuped users to have a alias -->\n   ..\n   16          </record>\n   17  \n   18:         <record id=\"default_template_user_config\" model=\"ir.config_parameter\">\n   19              <field name=\"key\">auth_signup.template_user_id</field>\n   20:             <field name=\"value\" ref=\"default_template_user\"/>\n   21          </record>\n   22  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\auth_signup\\controllers\\main.py:\n  105                  token_infos = res_partner.signup_retrieve_info(request.cr, openerp.SUPERUSER_ID, qcontext.get('token'))\n  106                  for k, v in token_infos.items():\n  107:                     qcontext.setdefault(k, v)\n  108              except:\n  109                  qcontext['error'] = _(\"Invalid signup token\")\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\auth_signup\\res_config.py:\n   35      }\n   36  \n   37:     def get_default_auth_signup_template_user_id(self, cr, uid, fields, context=None):\n   38          icp = self.pool.get('ir.config_parameter')\n   39          # we use safe_eval on the result, since the value of the parameter is a nonempty string\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\auth_signup\\res_users.py:\n   26  from openerp.addons.base.ir.ir_mail_server import MailDeliveryException\n   27  from openerp.osv import osv, fields\n   28: from openerp.tools.misc import DEFAULT_SERVER_DATETIME_FORMAT, ustr\n   29  from ast import literal_eval\n   30  from openerp.tools.translate import _\n   ..\n   40  def now(**kwargs):\n   41      dt = datetime.now() + timedelta(**kwargs)\n   42:     return dt.strftime(DEFAULT_SERVER_DATETIME_FORMAT)\n   43  \n   44  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\base_data.xml:\n   21          <function name=\"install_lang\" model=\"res.lang\"/>\n   22  \n   23:         <record id=\"main_partner\" model=\"res.partner\" context=\"{'default_is_company': True}\">\n   24              <field name=\"name\">Your Company</field>\n   25              <field name=\"company_id\" eval=\"None\"/>\n   ..\n  130              <field name=\"login\">public</field>\n  131              <field name=\"password\"></field>\n  132:             <!-- Avoid auto-including this demo user in any default group -->\n  133              <field name=\"groups_id\" eval=\"[(6,0,[ref('base.group_public')])]\"/>\n  134              <field name=\"image\" type=\"base64\" file=\"base/static/img/public_user-image.png\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\__init__.py:\n   25  import ir_ui_menu\n   26  import ir_ui_view\n   27: import ir_default\n   28  import ir_actions\n   29  import ir_attachment\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_actions.py:\n   56              translate=True),\n   57      }\n   58:     _defaults = {\n   59          'usage': lambda *a: False,\n   60      }\n   ..\n  198          'report_rml_content': fields.function(_report_content, fnct_inv=_report_content_inv, type='binary', string='RML Content'),\n  199      }\n  200:     _defaults = {\n  201          'type': 'ir.actions.report.xml',\n  202          'multi': False,\n  ...\n  244                      is one of the possible values for ir.ui.view.type and view_id\n  245                      is the ID of a specific view to use for this mode, or False for\n  246:                     the default one.\n  247          \"\"\"\n  248          res = {}\n  ...\n  276              help=\"Optional domain filtering of the destination data, as a Python expression\"),\n  277          'context': fields.char('Context Value', required=True,\n  278:             help=\"Context dictionary as Python expression, empty by default (Default: {})\"),\n  279          'res_id': fields.integer('Record ID', help=\"Database ID of record to open in form view, when ``view_mode`` is set to 'form' only\"),\n  280          'res_model': fields.char('Destination Model', required=True,\n  ...\n  284          'target': fields.selection([('current','Current Window'),('new','New Window'),('inline','Inline Edit'),('inlineview','Inline View')], 'Target Window'),\n  285          'view_mode': fields.char('View Mode', required=True,\n  286:             help=\"Comma-separated list of allowed view modes, such as 'form', 'tree', 'calendar', etc. (Default: tree,form)\"),\n  287          'view_type': fields.selection((('tree','Tree'),('form','Form')), string='View Type', required=True,\n  288              help=\"View type: Tree type to use for the tree view, set to 'tree' for a hierarchical tree view, or 'form' for a regular list view\"),\n  ...\n  294                      \"when displaying the result of an action, federating view mode, views and \" \\\n  295                      \"reference view. The result is returned as an ordered list of pairs (view_id,view_mode).\"),\n  296:         'limit': fields.integer('Limit', help='Default limit for the list view'),\n  297          'auto_refresh': fields.integer('Auto-Refresh',\n  298              help='Add an auto-refresh on the view'),\n  ...\n  306      }\n  307  \n  308:     _defaults = {\n  309          'type': 'ir.actions.act_window',\n  310          'view_type': 'form',\n  ...\n  380              help=\"If set to true, the action will not be displayed on the right toolbar of a form view.\"),\n  381      }\n  382:     _defaults = {\n  383          'multi': False,\n  384      }\n  ...\n  394      _inherit = 'ir.actions.actions'\n  395      _table = 'ir_actions'\n  396:     _defaults = {\n  397          'type': 'ir.actions.act_window_close',\n  398      }\n  ...\n  415          )\n  416      }\n  417:     _defaults = {\n  418          'type': 'ir.actions.act_url',\n  419          'target': 'new'\n  ...\n  573      }\n  574  \n  575:     _defaults = {\n  576          'state': 'code',\n  577          'condition': 'True',\n  ...\n 1037              ('value', 'Value'),\n 1038              ('equation', 'Python expression')\n 1039:         ], 'Evaluation Type', required=True, change_default=True),\n 1040      }\n 1041  \n 1042:     _defaults = {\n 1043          'type': 'value',\n 1044      }\n ....\n 1082          'note': fields.text('Text', translate=True),\n 1083      }\n 1084:     _defaults={\n 1085          'state': 'open',\n 1086          'sequence': 10,\n ....\n 1114          if act_type != 'ir.actions.act_window':\n 1115              return res\n 1116:         res.setdefault('context','{}')\n 1117          res['nodestroy'] = True\n 1118  \n ....\n 1202              help=\"Optional model, mostly used for needactions.\"),\n 1203          'context': fields.char('Context Value', required=True,\n 1204:             help=\"Context dictionary as Python expression, empty by default (Default: {})\"),\n 1205          'params': fields.function(_get_params, fnct_inv=_set_params,\n 1206                                    type='binary', \n ....\n 1210          'params_store': fields.binary(\"Params storage\", readonly=True)\n 1211      }\n 1212:     _defaults = {\n 1213          'type': 'ir.actions.client',\n 1214          'context': '{}',\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_attachment.py:\n   47      location pseudo uri (example: hdfs://hadoppserver)\n   48      \n   49:     The default implementation is the file:dirname location that stores files\n   50      on the local filesystem using name based on their sha1 hash\n   51      \"\"\"\n   ..\n  197          'create_date': fields.datetime('Date Created', readonly=True),\n  198          'create_uid':  fields.many2one('res.users', 'Owner', readonly=True),\n  199:         'company_id': fields.many2one('res.company', 'Company', change_default=True),\n  200          'type': fields.selection( [ ('url','URL'), ('binary','Binary'), ],\n  201:                 'Type', help=\"Binary File or URL\", required=True, change_default=True),\n  202          'url': fields.char('Url', size=1024),\n  203          # al: We keep shitty field names for backward compatibility with document\n  ...\n  208      }\n  209  \n  210:     _defaults = {\n  211          'type': 'binary',\n  212          'file_size': 0,\n  213:         'company_id': lambda s,cr,uid,c: s.pool.get('res.company')._company_default_get(cr, uid, 'ir.attachment', context=c),\n  214      }\n  215  \n  ...\n  236                      require_employee = True\n  237                      continue\n  238:                 res_ids.setdefault(rmod,set()).add(rid)\n  239          if values:\n  240              if values.get('res_model') and values.get('res_id'):\n  241:                 res_ids.setdefault(values['res_model'],set()).add(values['res_id'])\n  242  \n  243          ima = self.pool.get('ir.model.access')\n  ...\n  284                  continue\n  285              # model_attachments = { 'model': { 'res_id': [id1,id2] } }\n  286:             model_attachments.setdefault(target_dict['res_model'],{}).setdefault(target_dict['res_id'] or 0, set()).add(target_dict['id'])\n  287  \n  288          # To avoid multiple queries for each attachment found, checks are\n  ...\n  324          return super(ir_attachment, self).write(cr, uid, ids, vals, context)\n  325  \n  326:     def copy(self, cr, uid, id, default=None, context=None):\n  327          self.check(cr, uid, [id], 'write', context=context)\n  328:         return super(ir_attachment, self).copy(cr, uid, id, default, context)\n  329  \n  330      def unlink(self, cr, uid, ids, context=None):\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_config_parameter.py:\n   33  A dictionary holding some configuration parameters to be initialized when the database is created.\n   34  \"\"\"\n   35: _default_parameters = {\n   36      \"database.uuid\": lambda: (str(uuid.uuid1()), []),\n   37:     \"database.create_date\": lambda: (datetime.datetime.now().strftime(misc.DEFAULT_SERVER_DATETIME_FORMAT), ['base.group_user']),\n   38      \"web.base.url\": lambda: (\"http://localhost:%s\" % config.get('xmlrpc_port'), []),\n   39  }\n   ..\n   58      def init(self, cr, force=False):\n   59          \"\"\"\n   60:         Initializes the parameters listed in _default_parameters.\n   61          It overrides existing parameters if force is ``True``.\n   62          \"\"\"\n   63:         for key, func in _default_parameters.iteritems():\n   64              # force=True skips search and always performs the 'if' body (because ids=False)\n   65              ids = not force and self.search(cr, SUPERUSER_ID, [('key','=',key)])\n   ..\n   69  \n   70  \n   71:     def get_param(self, cr, uid, key, default=False, context=None):\n   72          \"\"\"Retrieve the value for a given key.\n   73  \n   74          :param string key: The key of the parameter value to retrieve.\n   75:         :param string default: default value if parameter is missing.\n   76:         :return: The value of the parameter, or ``default`` if it does not exist.\n   77          :rtype: string\n   78          \"\"\"\n   79          ids = self.search(cr, uid, [('key','=',key)], context=context)\n   80          if not ids:\n   81:             return default\n   82          param = self.browse(cr, uid, ids[0], context=context)\n   83          value = param.value\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_cron.py:\n   30  from openerp import SUPERUSER_ID, netsvc, api\n   31  from openerp.osv import fields, osv\n   32: from openerp.tools import DEFAULT_SERVER_DATETIME_FORMAT\n   33  from openerp.tools.safe_eval import safe_eval as eval\n   34  from openerp.tools.translate import _\n   ..\n   78      }\n   79  \n   80:     _defaults = {\n   81:         'nextcall' : lambda *a: time.strftime(DEFAULT_SERVER_DATETIME_FORMAT),\n   82          'priority' : 5,\n   83          'user_id' : lambda obj,cr,uid,context: uid,\n   ..\n  161              with api.Environment.manage():\n  162                  now = fields.datetime.context_timestamp(job_cr, job['user_id'], datetime.now())\n  163:                 nextcall = fields.datetime.context_timestamp(job_cr, job['user_id'], datetime.strptime(job['nextcall'], DEFAULT_SERVER_DATETIME_FORMAT))\n  164                  numbercall = job['numbercall']\n  165  \n  ...\n  177                      addsql = ', active=False'\n  178                  cron_cr.execute(\"UPDATE ir_cron SET nextcall=%s, numbercall=%s\"+addsql+\" WHERE id=%s\",\n  179:                            (nextcall.astimezone(pytz.UTC).strftime(DEFAULT_SERVER_DATETIME_FORMAT), numbercall, job['id']))\n  180                  self.invalidate_cache(job_cr, SUPERUSER_ID)\n  181  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_default.py:\n   22  from openerp.osv import fields, osv\n   23  \n   24: class ir_default(osv.osv):\n   25:     _name = 'ir.default'\n   26      _columns = {\n   27          'field_tbl': fields.char('Object'),\n   28          'field_name': fields.char('Object Field'),\n   29:         'value': fields.char('Default Value'),\n   30          'uid': fields.many2one('res.users', 'Users'),\n   31          'page': fields.char('View'),\n   ..\n   41          return False\n   42  \n   43:     _defaults = {\n   44          'company_id': _get_company_id,\n   45      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_fields.py:\n   10  \n   11  from openerp import models, api, _\n   12: from openerp.tools import DEFAULT_SERVER_DATE_FORMAT, DEFAULT_SERVER_DATETIME_FORMAT, ustr\n   13  \n   14  REFERENCING_FIELDS = set([None, 'id', '.id'])\n   ..\n   88          value acceptable for a write() on the field ``field``.\n   89  \n   90:         By default, tries to get a method on itself with a name matching the\n   91          pattern ``_$fromtype_to_$field.type`` and returns it.\n   92  \n   ..\n  182      def _str_to_date(self, model, field, value):\n  183          try:\n  184:             time.strptime(value, DEFAULT_SERVER_DATE_FORMAT)\n  185              return value, []\n  186          except ValueError:\n  ...\n  214          try:\n  215              parsed_value = datetime.datetime.strptime(\n  216:                 value, DEFAULT_SERVER_DATETIME_FORMAT)\n  217          except ValueError:\n  218              raise ValueError(\n  ...\n  224          dt = input_tz.localize(parsed_value, is_dst=False)\n  225          # And convert to UTC before reformatting for writing\n  226:         return dt.astimezone(pytz.UTC).strftime(DEFAULT_SERVER_DATETIME_FORMAT), []\n  227  \n  228      @api.model\n  ...\n  231          # Cache translations so they don't have to be reloaded from scratch on\n  232          # every row of the file\n  233:         tnx_cache = self._cr.cache.setdefault(self._name, {})\n  234:         if tnx_cache.setdefault(types, {}) and src in tnx_cache[types]:\n  235              return tnx_cache[types][src]\n  236  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_filters.py:\n   32          return cr.fetchall()\n   33  \n   34:     def copy(self, cr, uid, id, default=None, context=None):\n   35          name = self.read(cr, uid, [id], ['name'])[0]['name']\n   36:         default.update({'name':_('%s (copy)') % name})\n   37:         return super(ir_filters, self).copy(cr, uid, id, default, context)\n   38  \n   39      def _get_action_domain(self, cr, uid, action_id=None):\n   ..\n   54              a contextual action.\n   55          :return: list of :meth:`~osv.read`-like dicts containing the\n   56:             ``name``, ``is_default``, ``domain``, ``user_id`` (m2o tuple),\n   57              ``action_id`` (m2o tuple) and ``context`` of the matching ``ir.filters``.\n   58          \"\"\"\n   ..\n   63              [('model_id','=',model),('user_id','in',[uid, False])])\n   64          my_filters = self.read(cr, uid, filter_ids,\n   65:             ['name', 'is_default', 'domain', 'context', 'user_id'])\n   66          return my_filters\n   67  \n   68:     def _check_global_default(self, cr, uid, vals, matching_filters, context=None):\n   69:         \"\"\" _check_global_default(cursor, UID, dict, list(dict), dict) -> None\n   70  \n   71:         Checks if there is a global default for the model_id requested.\n   72  \n   73:         If there is, and the default is different than the record being written\n   74:         (-> we're not updating the current global default), raise an error\n   75:         to avoid users unknowingly overwriting existing global defaults (they\n   76:         have to explicitly remove the current default before setting a new one)\n   77  \n   78          This method should only be called if ``vals`` is trying to set\n   79:         ``is_default``\n   80  \n   81:         :raises openerp.exceptions.Warning: if there is an existing default and\n   82                                              we're not updating it\n   83          \"\"\"\n   84          action_domain = self._get_action_domain(cr, uid, vals.get('action_id'))\n   85:         existing_default = self.search(cr, uid, action_domain + [\n   86              ('model_id', '=', vals['model_id']),\n   87              ('user_id', '=', False),\n   88:             ('is_default', '=', True)], context=context)\n   89  \n   90:         if not existing_default: return\n   91          if matching_filters and \\\n   92:            (matching_filters[0]['id'] == existing_default[0]):\n   93              return\n   94  \n   95          raise exceptions.Warning(\n   96:             _(\"There is already a shared filter set as default for %(model)s, delete or change it before setting a new default\") % {\n   97                  'model': vals['model_id']\n   98              })\n   ..\n  109                                  if (f['user_id'] and f['user_id'][0]) == vals.get('user_id', False)]\n  110  \n  111:         if vals.get('is_default'):\n  112              if vals.get('user_id'):\n  113:                 # Setting new default: any other default that belongs to the user\n  114                  # should be turned off\n  115                  action_domain = self._get_action_domain(cr, uid, action_id)\n  ...\n  117                          ('model_id', '=', vals['model_id']),\n  118                          ('user_id', '=', vals['user_id']),\n  119:                         ('is_default', '=', True),\n  120                      ], context=context)\n  121                  if act_ids:\n  122:                     self.write(cr, uid, act_ids, {'is_default': False}, context=context)\n  123              else:\n  124:                 self._check_global_default(\n  125                      cr, uid, vals, matching_filters, context=None)\n  126  \n  ...\n  157          'context': fields.text('Context', required=True),\n  158          'model_id': fields.selection(_list_all_models, 'Model', required=True),\n  159:         'is_default': fields.boolean('Default filter'),\n  160          'action_id': fields.many2one('ir.actions.actions', 'Action', ondelete='cascade',\n  161                                       help=\"The menu action this filter applies to. \"\n  ...\n  163                                            \"for this model.\")\n  164      }\n  165:     _defaults = {\n  166          'domain': '[]',\n  167          'context':'{}',\n  168          'user_id': lambda self,cr,uid,context=None: uid,\n  169:         'is_default': False\n  170      }\n  171      _order = 'model_id, name, id desc'\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_filters.xml:\n   20                          <field name=\"user_id\"/>\n   21                          <field name=\"model_id\"/>\n   22:                         <field name=\"is_default\"/>\n   23                          <field name=\"action_id\"/>\n   24                      </group>\n   ..\n   38                      <field name=\"model_id\"/>\n   39                      <field name=\"user_id\"/>\n   40:                     <field name=\"is_default\"/>\n   41                      <field name=\"action_id\"/>\n   42                      <field name=\"domain\" groups=\"base.group_no_one\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_mail_server.py:\n  171                                                   \"- None: SMTP sessions are done in cleartext.\\n\"\n  172                                                   \"- TLS (STARTTLS): TLS encryption is requested at start of SMTP session (Recommended)\\n\"\n  173:                                                  \"- SSL/TLS: SMTP sessions are encrypted with SSL/TLS through a dedicated port (default: 465)\"),\n  174          'smtp_debug': fields.boolean('Debugging', help=\"If enabled, the full output of SMTP sessions will \"\n  175                                                         \"be written to the server log at DEBUG level\"\n  176                                                         \"(this is very verbose and may include confidential info!)\"),\n  177          'sequence': fields.integer('Priority', help=\"When no specific mail server is requested for a mail, the highest priority one \"\n  178:                                                     \"is used. Default priority is 10 (smaller number = higher priority)\"),\n  179          'active': fields.boolean('Active')\n  180      }\n  181  \n  182:     _defaults = {\n  183           'smtp_port': 25,\n  184           'active': True,\n  ...\n  265             :param list email_to: list of recipient addresses (to be joined with commas) \n  266             :param string subject: email subject (no pre-encoding/quoting necessary)\n  267:            :param string body: email body, of the type ``subtype`` (by default, plaintext).\n  268                                 If html subtype is used, the message will be automatically converted\n  269                                 to plaintext and wrapped in multipart/alternative, unless an explicit\n  ...\n  275                                      e.g. \"12345-crm.lead\".\n  276             :param string subtype: optional mime subtype for the text body (usually 'plain' or 'html'),\n  277:                                   must match the format of the ``body`` parameter. Default is 'plain',\n  278                                    making the content part of the mail \"text/plain\".\n  279             :param string subtype_alternative: optional mime subtype of ``body_alternative`` (usually 'plain'\n  280:                                               or 'html'). Default is 'plain'.\n  281             :param list attachments: list of (filename, filecontents) pairs, where filecontents is a string\n  282                                      containing the bytes of the attachment\n  ...\n  354                  part = MIMEBase('application', \"octet-stream\")\n  355  \n  356:                 # The default RFC2231 encoding of Message.add_header() works in Thunderbird but not GMail\n  357                  # so we fix it by using RFC2047 encoding for the filename instead.\n  358                  part.set_param('name', filename_rfc2047)\n  ...\n  373  \n  374          If the mail_server_id is provided, sends using this mail server, ignoring other smtp_* arguments.\n  375:         If mail_server_id is None and smtp_server is None, use the default mail server (highest priority).\n  376          If mail_server_id is None and smtp_server is not None, use the provided smtp_* arguments.\n  377          If both mail_server_id and smtp_server are None, look for an 'smtp_server' value in server config,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_model.py:\n   20  #\n   21  ##############################################################################\n   22: from collections import defaultdict\n   23  import logging\n   24  import re\n   ..\n  128      }\n  129  \n  130:     _defaults = {\n  131          'model': 'x_',\n  132          'state': lambda self,cr,uid,ctx=None: (ctx and ctx.get('manual',False)) and 'manual' or 'base',\n  ...\n  280      }\n  281      _rec_name='field_description'\n  282:     _defaults = {\n  283          'selection': \"\",\n  284          'domain': \"[]\",\n  ...\n  391                  if self.pool.fields_by_model is not None:\n  392                      cr.execute('SELECT * FROM ir_model_fields WHERE id=%s', (res,))\n  393:                     self.pool.fields_by_model.setdefault(vals['model'], []).append(cr.dictfetchone())\n  394  \n  395                  # re-initialize model in registry\n  ...\n  427  \n  428          # field patches {model: {field_name: {prop_name: prop_value, ...}, ...}, ...}\n  429:         patches = defaultdict(lambda: defaultdict(dict))\n  430  \n  431          # static table of properties\n  ...\n  669          'perm_unlink': fields.boolean('Delete Access'),\n  670      }\n  671:     _defaults = {\n  672          'active': True,\n  673      }\n  ...\n  851  \n  852      def name_get(self, cr, uid, ids, context=None):\n  853:         bymodel = defaultdict(dict)\n  854          names = {}\n  855  \n  ...\n  889          'date_init': fields.datetime('Init Date')\n  890      }\n  891:     _defaults = {\n  892          'date_init': fields.datetime.now,\n  893          'date_update': fields.datetime.now,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_qweb.py:\n   74  \n   75      def safe_eval(self, expr):\n   76:         locals_dict = collections.defaultdict(lambda: None)\n   77          locals_dict.update(self)\n   78          locals_dict.pop('cr', None)\n   ..\n  446          cr, uid, context = [getattr(qwebcontext, attr) for attr in ('cr', 'uid', 'context')]\n  447          bundle = AssetsBundle(xmlid, cr=cr, uid=uid, context=context, registry=self.pool)\n  448:         css = self.get_attr_bool(template_attributes.get('css'), default=True)\n  449:         js = self.get_attr_bool(template_attributes.get('js'), default=True)\n  450          return bundle.to_html(css=css, js=js, debug=bool(qwebcontext.get('debug')))\n  451  \n  ...\n  484          ``t-field``.\n  485  \n  486:         By default, tries to get the model named\n  487          :samp:`ir.qweb.field.{field_type}`, falling back on ``ir.qweb.field``.\n  488  \n  ...\n  500          return self.pool.get(widget_model) or self.pool['ir.qweb.widget']\n  501  \n  502:     def get_attr_bool(self, attr, default=False):\n  503          if attr:\n  504              attr = attr.lower()\n  ...\n  507              elif attr in ('true', '1'):\n  508                  return True\n  509:         return default\n  510  \n  511  #--------------------------------------------------------------------\n  ...\n  534          parent.\n  535  \n  536:         The default attributes are:\n  537  \n  538          * ``model``, the name of the record's model\n  ...\n  582          of configuration values.\n  583  \n  584:         A default configuration key is ``widget`` which can override the\n  585          field's own ``_type``.\n  586          \"\"\"\n  ...\n  619          \"\"\" render_element(cr, uid, source_element, t_att, g_att, qweb_context, content)\n  620  \n  621:         Final rendering hook, by default just calls ir.qweb's ``render_element``\n  622          \"\"\"\n  623          return self.qweb_object().render_element(\n  ...\n  680          if isinstance(value, basestring):\n  681              value = datetime.datetime.strptime(\n  682:                 value[:10], openerp.tools.DEFAULT_SERVER_DATE_FORMAT)\n  683  \n  684          if options and 'format' in options:\n  ...\n  703          if isinstance(value, basestring):\n  704              value = datetime.datetime.strptime(\n  705:                 value, openerp.tools.DEFAULT_SERVER_DATETIME_FORMAT)\n  706          value = fields.datetime.context_timestamp(\n  707              cr, uid, timestamp=value, context=context)\n  ...\n  811  \n  812          # lang.format mandates a sprintf-style format. These formats are non-\n  813:         # minimal (they have a default fixed precision instead), and\n  814:         # lang.format will not set one by default. currency.round will not\n  815          # provide one either. So we need to generate a precision value\n  816          # (integer > 0) from the currency's rounding (a float generally < 1.0).\n  ...\n  903  \n  904      def value_to_html(self, cr, uid, value, field, options=None, context=None):\n  905:         parse_format = openerp.tools.DEFAULT_SERVER_DATETIME_FORMAT\n  906          locale = babel.Locale.parse(\n  907              self.user_lang(cr, uid, context=context).code)\n  ...\n 1332                  return datetime.datetime.fromtimestamp(os.path.getmtime(self._filename))\n 1333              elif self._ir_attach:\n 1334:                 server_format = openerp.tools.misc.DEFAULT_SERVER_DATETIME_FORMAT\n 1335                  last_update = self._ir_attach['__last_update']\n 1336                  try:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_rule.py:\n   88      _order = 'model_id DESC'\n   89  \n   90:     _defaults = {\n   91          'active': True,\n   92          'perm_read': True,\n   ..\n  132                  for group in rule.groups:\n  133                      if group in user.groups_id:\n  134:                         group_domains.setdefault(group, []).append(dom)\n  135                  if not rule.groups:\n  136                      global_domains.append(dom)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_sequence.py:\n  101          'company_id': openerp.osv.fields.many2one('res.company', 'Company'),\n  102      }\n  103:     _defaults = {\n  104          'implementation': 'standard',\n  105          'active': True,\n  106:         'company_id': lambda s,cr,uid,c: s.pool.get('res.company')._company_default_get(cr, uid, 'ir.sequence', context=c),\n  107          'number_increment': 1,\n  108          'number_next': 1,\n  ...\n  148          names = ','.join('ir_sequence_%03d' % i for i in ids)\n  149  \n  150:         # RESTRICT is the default; it prevents dropping the sequence if an\n  151          # object depends on it.\n  152          cr.execute(\"DROP SEQUENCE IF EXISTS %s RESTRICT \" % names)\n  ...\n  173          \"\"\" Create a sequence, in implementation == standard a fast gaps-allowed PostgreSQL sequence is used.\n  174          \"\"\"\n  175:         values = self._add_missing_default_values(cr, uid, values, context)\n  176          values['id'] = super(ir_sequence, self).create(cr, uid, values, context)\n  177          if values['implementation'] == 'standard':\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_translation.py:\n  229      }\n  230  \n  231:     _defaults = {\n  232          'state': 'to_translate',\n  233      }\n  ...\n  438              f = trans_model._fields[field]\n  439              action['context'] = {\n  440:                 'search_default_name': \"%s,%s\" % (f.base_field.model_name, field)\n  441              }\n  442          return action\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_ui_menu.py:\n  186          return result\n  187  \n  188:     def copy(self, cr, uid, id, default=None, context=None):\n  189          ir_values_obj = self.pool.get('ir.values')\n  190:         res = super(ir_ui_menu, self).copy(cr, uid, id, default=default, context=context)\n  191          datas=self.read(cr,uid,[res],['name'])[0]\n  192          rex=re.compile('\\([0-9]+\\)')\n  ...\n  203              ])\n  204          for iv in ir_values_obj.browse(cr, uid, ids):\n  205:             ir_values_obj.copy(cr, uid, iv.id, default={'res_id': res},\n  206                                 context=context)\n  207          return res\n  ...\n  410                  parent = False\n  411              if parent in menu_items_map:\n  412:                 menu_items_map[parent].setdefault(\n  413                      'children', []).append(menu_item)\n  414  \n  415          # sort by sequence a tree using parent_id\n  416          for menu_item in menu_items:\n  417:             menu_item.setdefault('children', []).sort(\n  418                  key=operator.itemgetter('sequence'))\n  419  \n  ...\n  461          (osv.osv._check_recursion, _rec_message, ['parent_id'])\n  462      ]\n  463:     _defaults = {\n  464          'icon': 'STOCK_OPEN',\n  465          'icon_pict': ('stock', ('STOCK_OPEN', 'ICON_SIZE_MENU')),\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_ui_menu_view.xml:\n   28                                   in the context to see all submenus! -->\n   29                              <field name=\"child_id\"\n   30:                                     context=\"{'default_parent_id': active_id}\">\n   31                                  <tree string=\"Menu\">\n   32                                      <field name=\"sequence\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_ui_view.py:\n  160              help=\"\"\"Only applies if this view inherits from an other one (inherit_id is not False/Null).\n  161  \n  162: * if extension (default), if this view is requested the closest primary view\n  163    is looked up (via inherit_id), then all views inheriting from it with this\n  164    view's model are applied\n  ...\n  174               \"\"\"),\n  175      }\n  176:     _defaults = {\n  177          'mode': 'primary',\n  178          'active': True,\n  ...\n  242              cr.execute('CREATE INDEX ir_ui_view_model_type_inherit_id ON ir_ui_view (model, inherit_id)')\n  243  \n  244:     def _compute_defaults(self, cr, uid, values, context=None):\n  245          if 'inherit_id' in values:\n  246:             values.setdefault(\n  247                  'mode', 'extension' if values['inherit_id'] else 'primary')\n  248          return values\n  ...\n  261          return super(view, self).create(\n  262              cr, uid,\n  263:             self._compute_defaults(cr, uid, values, context=context),\n  264              context=context)\n  265  \n  ...\n  279          ret = super(view, self).write(\n  280              cr, uid, ids,\n  281:             self._compute_defaults(cr, uid, vals, context=context),\n  282              context)\n  283          return ret\n  ...\n  289              view.write({'active': not view.active})\n  290  \n  291:     # default view selection\n  292:     def default_view(self, cr, uid, model, view_type, context=None):\n  293:         \"\"\" Fetches the default view for the provided (model, view_type) pair:\n  294           primary view with the lowest priority.\n  295  \n  296          :param str model:\n  297          :param int view_type:\n  298:         :return: id of the default view of False if none found\n  299          :rtype: int\n  300          \"\"\"\n  ...\n  732          \"\"\"\n  733          # map each field object to its corresponding nodes in arch\n  734:         field_nodes = collections.defaultdict(list)\n  735  \n  736          def collect(node, model):\n  ...\n  819                      node.set(action, 'false')\n  820          if node.tag in ('kanban'):\n  821:             group_by_name = node.get('default_group_by')\n  822              if group_by_name in Model._fields:\n  823                  group_by_field = Model._fields[group_by_name]\n  ...\n  915                  # TODO: collections.Counter if remove p2.6 compat\n  916                  # running index by tag type, for XPath query generation\n  917:                 indexes = collections.defaultdict(lambda: 0)\n  918                  for child in e.iterchildren(tag=etree.Element):\n  919                      if child.get('data-oe-xpath'):\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_ui_view_view.xml:\n   32                          </page>\n   33                          <page name=\"inherit_children\" string=\"Inherited Views\">\n   34:                             <field name=\"inherit_children_ids\" context=\"{'default_model':model,'default_type':type,'default_inherit_id':active_id}\">\n   35                                  <tree>\n   36                                      <field name=\"priority\"/>\n   ..\n   88              <field name=\"res_model\">ir.ui.view</field>\n   89              <field name=\"view_id\" ref=\"view_view_tree\"/>\n   90:             <field name=\"context\">{'search_default_active': 1}</field>\n   91              <field name=\"help\">Views allows you to personalize each view of Odoo. You can add new fields, move fields, rename them or delete the ones that you do not need.</field>\n   92          </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_values.py:\n   40  \n   41  class ir_values(osv.osv):\n   42:     \"\"\"Holds internal model-specific action bindings and user-defined default\n   43         field values. definitions. This is a legacy internal model, mixing\n   44         two different concepts, and will likely be updated or replaced in a\n   ..\n   49         by the ``key`` column:\n   50  \n   51:         * 'default': user-defined default values, used when creating new\n   52            records of this model:\n   53          * 'action': binding of an action to a particular *action slot* of\n   ..\n   58         of the entry. The possible values are:\n   59  \n   60:         * for 'default' entries: an optional condition restricting the\n   61:           cases where this particular default value will be applicable,\n   62            or ``False`` for no condition\n   63          * for 'action' entries: the ``key2`` qualifier is one of the available\n   ..\n   82         should be executed.\n   83  \n   84:        .. rubric:: Usage: default values\n   85         \n   86:        The ``'default'`` entries are usually defined manually by the\n   87:        users, and set by their UI clients calling :meth:`~.set_default`.\n   88:        These default values are then automatically used by the\n   89         ORM every time a new record is about to be created, i.e. when\n   90:        :meth:`~openerp.osv.osv.osv.default_get`\n   91         or :meth:`~openerp.osv.osv.osv.create` are called.\n   92  \n   ..\n  105          for record in self.browse(cursor, user, ids, context=context):\n  106              value = record[name[:-9]]\n  107:             if record.key == 'default' and value:\n  108:                 # default values are pickled on the fly\n  109                  try:\n  110                      value = str(pickle.loads(value))\n  ...\n  121              del ctx[self.CONCURRENCY_CHECK_FIELD]\n  122          record = self.browse(cursor, user, id, context=context)\n  123:         if record.key == 'default':\n  124:             # default values are pickled on the fly\n  125              value = pickle.dumps(value)\n  126          self.write(cursor, user, id, {name[:-9]: value}, context=ctx)\n  ...\n  155                                           \"automatically set the correct reference\"),\n  156  \n  157:         'value': fields.text('Value', help=\"Default value (pickled) or reference to an action\"),\n  158          'value_unpickle': fields.function(_value_unpickle, fnct_inv=_value_pickle,\n  159                                            type='text',\n  160:                                           string='Default value or action reference'),\n  161:         'key': fields.selection([('action','Action'),('default','Default')],\n  162                                  'Type', select=True, required=True,\n  163                                  help=\"- Action: an action attached to one slot of the given model\\n\"\n  164:                                      \"- Default: a default value for a model field\"),\n  165          'key2' : fields.char('Qualifier', select=True,\n  166                               help=\"For actions, one of the possible action slots: \\n\"\n  ...\n  169                                    \"  - client_action_relate\\n\"\n  170                                    \"  - tree_but_open\\n\"\n  171:                                   \"For defaults, an optional condition\"\n  172                               ,),\n  173          'res_id': fields.integer('Record ID', select=True,\n  ...\n  179                                        help=\"If set, action binding only applies for this company\")\n  180      }\n  181:     _defaults = {\n  182          'key': 'action',\n  183          'key2': 'tree_but_open',\n  ...\n  192      def create(self, cr, uid, vals, context=None):\n  193          res = super(ir_values, self).create(cr, uid, vals, context=context)\n  194:         self.get_defaults_dict.clear_cache(self)\n  195          return res\n  196  \n  197      def write(self, cr, uid, ids, vals, context=None):\n  198          res = super(ir_values, self).write(cr, uid, ids, vals, context=context)\n  199:         self.get_defaults_dict.clear_cache(self)\n  200          return res\n  201  \n  202      def unlink(self, cr, uid, ids, context=None):\n  203          res = super(ir_values, self).unlink(cr, uid, ids, context=context)\n  204:         self.get_defaults_dict.clear_cache(self)\n  205          return res\n  206  \n  207:     def set_default(self, cr, uid, model, field_name, value, for_all_users=True, company_id=False, condition=False):\n  208:         \"\"\"Defines a default value for the given model and field_name. Any previous\n  209:            default for the same scope (model, field_name, value, for_all_users, company_id, condition)\n  210             will be replaced and lost in the process.\n  211  \n  212:            Defaults can be later retrieved via :meth:`~.get_defaults`, which will return\n  213:            the highest priority default for any given field. Defaults that are more specific\n  214             have a higher priority, in the following order (highest to lowest):\n  215  \n  ...\n  220  \n  221             :param string model: model name\n  222:            :param string field_name: field name to which the default applies\n  223:            :param value: the default field value to set\n  224             :type value: any serializable Python value\n  225:            :param bool for_all_users: whether the default should apply to everybody or only\n  226                                        the user calling the method\n  227:            :param int company_id: optional ID of the company to which the default should\n  228:                                   apply. If omitted, the default will be global. If True\n  229                                    is passed, the current user's company will be used.\n  230             :param string condition: optional condition specification that can be used to\n  231:                                     restrict the applicability of the default values\n  232                                      (e.g. based on another field's value). This is an\n  233                                      opaque string as far as the API is concerned, but client\n  ...\n  246              company_id = user.company_id.id\n  247  \n  248:         # remove existing defaults for the same scope\n  249          search_criteria = [\n  250:             ('key', '=', 'default'),\n  251              ('key2', '=', condition and condition[:200]),\n  252              ('model', '=', model),\n  ...\n  261              'value': pickle.dumps(value),\n  262              'model': model,\n  263:             'key': 'default',\n  264              'key2': condition and condition[:200],\n  265              'user_id': False if for_all_users else uid,\n  ...\n  267          })\n  268  \n  269:     def get_default(self, cr, uid, model, field_name, for_all_users=True, company_id=False, condition=False):\n  270:         \"\"\" Return the default value defined for model, field_name, users, company and condition.\n  271:             Return ``None`` if no such default exists.\n  272          \"\"\"\n  273          search_criteria = [\n  274:             ('key', '=', 'default'),\n  275              ('key2', '=', condition and condition[:200]),\n  276              ('model', '=', model),\n  ...\n  279              ('company_id','=', company_id)\n  280              ]\n  281:         defaults = self.browse(cr, uid, self.search(cr, uid, search_criteria))\n  282:         return pickle.loads(defaults[0].value.encode('utf-8')) if defaults else None\n  283  \n  284:     def get_defaults(self, cr, uid, model, condition=False):\n  285:         \"\"\"Returns any default values that are defined for the current model and user,\n  286             (and match ``condition``, if specified), previously registered via\n  287:            :meth:`~.set_default`.\n  288  \n  289:            Defaults are global to a model, not field-specific, but an optional\n  290:            ``condition`` can be provided to restrict matching default values\n  291             to those that were defined for the same condition (usually based\n  292             on another field's value).\n  293  \n  294:            Default values also have priorities depending on whom they apply\n  295             to: only the highest priority value will be returned for any\n  296:            field. See :meth:`~.set_default` for more details.\n  297  \n  298             :param string model: model name\n  299             :param string condition: optional condition specification that can be used to\n  300:                                     restrict the applicability of the default values\n  301                                      (e.g. based on another field's value). This is an\n  302                                      opaque string as far as the API is concerned, but client\n  ...\n  306                                      so values that share the same first 200 characters always\n  307                                      match)\n  308:            :return: list of default values tuples of the form ``(id, field_name, value)``\n  309:                     (``id`` is the ID of the default entry, usually irrelevant)\n  310          \"\"\"\n  311          # use a direct SQL query for performance reasons,\n  ...\n  321                        %s\n  322                     ORDER BY v.user_id, u.company_id\"\"\"\n  323:         params = ('default', model, uid, uid)\n  324          if condition:\n  325              query %= 'AND v.key2 = %s'\n  ...\n  329          cr.execute(query, params)\n  330  \n  331:         # keep only the highest priority default for each field\n  332:         defaults = {}\n  333          for row in cr.dictfetchall():\n  334:             defaults.setdefault(row['name'],\n  335                  (row['id'], row['name'], pickle.loads(row['value'].encode('utf-8'))))\n  336:         return defaults.values()\n  337  \n  338:     # use ormcache: this is called a lot by BaseModel.default_get()!\n  339      @tools.ormcache(skiparg=2)\n  340:     def get_defaults_dict(self, cr, uid, model, condition=False):\n  341          \"\"\" Returns a dictionary mapping field names with their corresponding\n  342:             default value. This method simply improves the returned value of\n  343:             :meth:`~.get_defaults`.\n  344          \"\"\"\n  345:         return dict((f, v) for i, f, v in self.get_defaults(cr, uid, model, condition))\n  346  \n  347      def set_action(self, cr, uid, name, action_slot, model, action, res_id=False):\n  ...\n  400                                specific record of the model, not all records.\n  401             :return: list of action tuples of the form ``(id, name, action_def)``,\n  402:                     where ``id`` is the ID of the default entry, ``name`` is the\n  403                      action label, and ``action_def`` is a dict containing the\n  404                      action definition as obtained by calling\n  ...\n  467      # Backards-compatibility adapter layer to retrofit into split API\n  468      def set(self, cr, uid, key, key2, name, models, value, replace=True, isobject=False, meta=False, preserve_user=False, company=False):\n  469:         \"\"\"Deprecated legacy method to set default values and bind actions to models' action slots.\n  470:            Now dispatches to the newer API methods according to the value of ``key``: :meth:`~.set_default`\n  471:            (``key=='default'``) or :meth:`~.set_action` (``key == 'action'``).\n  472  \n  473:           :deprecated: As of v6.1, ``set_default()`` or ``set_action()`` should be used directly.\n  474          \"\"\"\n  475:         assert key in ['default', 'action'], \"ir.values entry keys must be in ['default','action']\"\n  476:         if key == 'default':\n  477              def do_set(model,res_id):\n  478:                 return self.set_default(cr, uid, model, field_name=name, value=value,\n  479                                          for_all_users=(not preserve_user), company_id=company,\n  480                                          condition=key2)\n  ...\n  485  \n  486      def get(self, cr, uid, key, key2, models, meta=False, context=None, res_id_req=False, without_user=True, key2_req=True):\n  487:         \"\"\"Deprecated legacy method to get the list of default values or actions bound to models' action slots.\n  488:            Now dispatches to the newer API methods according to the value of ``key``: :meth:`~.get_defaults`\n  489:            (``key=='default'``) or :meth:`~.get_actions` (``key == 'action'``)\n  490  \n  491:           :deprecated: As of v6.1, ``get_defaults()`` or ``get_actions()`` should be used directly.\n  492  \n  493          \"\"\"\n  494:         assert key in ['default', 'action'], \"ir.values entry keys must be in ['default','action']\"\n  495:         if key == 'default':\n  496              def do_get(model,res_id):\n  497:                 return self.get_defaults(cr, uid, model, condition=key2)\n  498          elif key == 'action':\n  499              def do_get(model,res_id):\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_values_view.xml:\n   25          </record>\n   26  \n   27:         <record id=\"values_view_form_defaults\" model=\"ir.ui.view\">\n   28:             <field name=\"name\">ir.values.form.defaults</field>\n   29              <field name=\"model\">ir.values</field>\n   30              <field name=\"arch\" type=\"xml\">\n   31:                 <form string=\"User-defined Defaults\">\n   32                      <group>\n   33                          <group>\n   ..\n   41                              <field name=\"company_id\" groups=\"base.group_multi_company\"/>\n   42                          </group>\n   43:                         <separator string=\"Default value or action reference\"/>\n   44                          <field name=\"value_unpickle\" nolabel=\"1\" colspan=\"2\"/>\n   45                      </group>\n   ..\n   52              <field name=\"model\">ir.values</field>\n   53              <field name=\"arch\" type=\"xml\">\n   54:                 <tree string=\"Action Bindings/Defaults\">\n   55                      <field name=\"name\"/>\n   56                      <field name=\"model\"/>\n   ..\n   84              <field name=\"search_view_id\" ref=\"values_view_search_action\"/>\n   85              <field name=\"domain\">[('key','=','action')]</field>\n   86:             <field name=\"context\">{'default_key':'action'}</field>\n   87          </record>\n   88          <record model=\"ir.actions.act_window.view\" id=\"action_values_tree_view\">\n   ..\n  100          <menuitem action=\"act_values_form_action\" id=\"menu_values_form_action\" parent=\"next_id_6\"/>\n  101  \n  102:         <record id=\"act_values_form_defaults\" model=\"ir.actions.act_window\">\n  103:             <field name=\"name\">User-defined Defaults</field>\n  104              <field name=\"type\">ir.actions.act_window</field>\n  105              <field name=\"res_model\">ir.values</field>\n  ...\n  107              <field name=\"view_mode\">tree,form</field>\n  108              <field name=\"search_view_id\" ref=\"values_view_search_action\"/>\n  109:             <field name=\"domain\">[('key','=','default')]</field>\n  110:             <field name=\"context\">{'default_key':'default','default_key2':''}</field>\n  111          </record>\n  112:         <record model=\"ir.actions.act_window.view\" id=\"action_values_defaults_tree_view\">\n  113              <field name=\"sequence\" eval=\"1\"/>\n  114              <field name=\"view_mode\">tree</field>\n  115              <field name=\"view_id\" ref=\"values_view_tree_action\"/>\n  116:             <field name=\"act_window_id\" ref=\"act_values_form_defaults\"/>\n  117          </record>\n  118:         <record model=\"ir.actions.act_window.view\" id=\"action_values_defaults_form_view\">\n  119              <field name=\"sequence\" eval=\"2\"/>\n  120              <field name=\"view_mode\">form</field>\n  121:             <field name=\"view_id\" ref=\"values_view_form_defaults\"/>\n  122:             <field name=\"act_window_id\" ref=\"act_values_form_defaults\"/>\n  123          </record>\n  124:         <menuitem action=\"act_values_form_defaults\" id=\"menu_values_form_defaults\" parent=\"next_id_6\"/>\n  125  \n  126      </data>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\module\\module.py:\n  111      _order = 'name'\n  112  \n  113:     _defaults = {\n  114          'visible': 1,\n  115      }\n  ...\n  125      \"\"\"\n  126  \n  127:     default_priority = 870\n  128  \n  129      def apply(self):\n  ...\n  189  \n  190      def _get_latest_version(self, cr, uid, ids, field_name=None, arg=None, context=None):\n  191:         default_version = modules.adapt_version('1.0')\n  192:         res = dict.fromkeys(ids, default_version)\n  193          for m in self.browse(cr, uid, ids):\n  194:             res[m.id] = self.get_module_info(m.name).get('version', default_version)\n  195          return res\n  196  \n  ...\n  314      }\n  315  \n  316:     _defaults = {\n  317          'state': 'uninstalled',\n  318          'sequence': 100,\n  ...\n  611          res = [0, 0]    # [update, add]\n  612  \n  613:         default_version = modules.adapt_version('1.0')\n  614          known_mods = self.browse(cr, uid, self.search(cr, uid, []))\n  615          known_mods_names = dict([(m.name, m) for m in known_mods])\n  ...\n  630                  if terp.get('installable', True) and mod.state == 'uninstallable':\n  631                      updated_values['state'] = 'uninstalled'\n  632:                 if parse_version(terp.get('version', default_version)) > parse_version(mod.latest_version or default_version):\n  633                      res[0] += 1\n  634                  if updated_values:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\module\\module_view.xml:\n  185              <field name=\"view_type\">form</field>\n  186              <field name=\"view_mode\">kanban,tree,form</field>\n  187:             <field name=\"context\">{'search_default_app':1}</field>\n  188              <field name=\"search_view_id\" ref=\"view_module_filter\"/>\n  189              <field name=\"help\" type=\"html\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\module\\wizard\\base_export_language.py:\n   51                                         ('get', 'get')])        # get the file\n   52      }\n   53:     _defaults = { \n   54          'state': 'choose',\n   55          'lang': NEW_LANG_KEY,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\module\\wizard\\base_language_install.py:\n   34          'state':fields.selection([('init','init'),('done','done')], 'Status', readonly=True),\n   35      }\n   36:     _defaults = {\n   37          'state': 'init',\n   38          'overwrite': False\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\module\\wizard\\base_module_update.py:\n    9      updated = fields.Integer('Number of modules updated', readonly=True)\n   10      added = fields.Integer('Number of modules added', readonly=True)\n   11:     state = fields.Selection([('init', 'init'), ('done', 'done')], 'Status', readonly=True, default='init')\n   12  \n   13      @api.one\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\module\\wizard\\base_module_upgrade.py:\n   63          return ids\n   64  \n   65:     def default_get(self, cr, uid, fields, context=None):\n   66          mod_obj = self.pool.get('ir.module.module')\n   67          ids = self.get_module_list(cr, uid, context=context)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\module\\wizard\\base_update_translations.py:\n   50          return {'type': 'ir.actions.act_window_close'}\n   51  \n   52:     def default_get(self, cr, uid, fields, context=None):\n   53          if context is None:\n   54              context = {}\n   55:         res = super(base_update_translations, self).default_get(cr, uid, fields, context=context)\n   56          \n   57          if context.get('active_model') != \"res.lang\":\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\report\\corporate_odt_header.xml:\n    9  	</office:font-face-decls>\n   10  	<office:styles>\n   11: 		<style:default-style style:family=\"graphic\">\n   12  			<style:graphic-properties draw:shadow-offset-x=\"0.3cm\" draw:shadow-offset-y=\"0.3cm\" draw:start-line-spacing-horizontal=\"0.283cm\" draw:start-line-spacing-vertical=\"0.283cm\" draw:end-line-spacing-horizontal=\"0.283cm\" draw:end-line-spacing-vertical=\"0.283cm\" style:flow-with-text=\"true\"/>\n   13  			<style:paragraph-properties style:text-autospace=\"ideograph-alpha\" style:line-break=\"strict\" style:writing-mode=\"lr-tb\" style:font-independent-line-spacing=\"false\">\n   ..\n   15  			</style:paragraph-properties>\n   16  			<style:text-properties style:use-window-font-color=\"true\" fo:font-size=\"12pt\" fo:language=\"en\" fo:country=\"IN\" style:letter-kerning=\"true\" style:font-size-asian=\"10.5pt\" style:language-asian=\"zxx\" style:country-asian=\"none\" style:font-size-complex=\"12pt\" style:language-complex=\"zxx\" style:country-complex=\"none\"/>\n   17: 		</style:default-style>\n   18: 		<style:default-style style:family=\"paragraph\">\n   19  			<style:paragraph-properties fo:hyphenation-ladder-count=\"no-limit\" style:text-autospace=\"ideograph-alpha\" style:punctuation-wrap=\"hanging\" style:line-break=\"strict\" style:tab-stop-distance=\"1.251cm\" style:writing-mode=\"page\"/>\n   20  			<style:text-properties style:use-window-font-color=\"true\" style:font-name=\"Times\" fo:font-size=\"12pt\" fo:language=\"en\" fo:country=\"IN\" style:letter-kerning=\"true\" style:font-name-asian=\"DejaVu Sans\" style:font-size-asian=\"10.5pt\" style:language-asian=\"zxx\" style:country-asian=\"none\" style:font-name-complex=\"DejaVu Sans\" style:font-size-complex=\"12pt\" style:language-complex=\"zxx\" style:country-complex=\"none\" fo:hyphenate=\"false\" fo:hyphenation-remain-char-count=\"2\" fo:hyphenation-push-char-count=\"2\"/>\n   21: 		</style:default-style>\n   22: 		<style:default-style style:family=\"table\">\n   23  			<style:table-properties table:border-model=\"collapsing\"/>\n   24: 		</style:default-style>\n   25: 		<style:default-style style:family=\"table-row\">\n   26  			<style:table-row-properties fo:keep-together=\"always\"/>\n   27: 		</style:default-style>\n   28  		<style:style style:name=\"Standard\" style:family=\"paragraph\" style:class=\"text\"/>\n   29  			<style:style style:name=\"Text_20_body\" style:display-name=\"Text body\" style:family=\"paragraph\" style:parent-style-name=\"Standard\" style:class=\"text\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\report\\corporate_sxw_header.xml:\n    9      </office:font-decls>\n   10      <office:styles>\n   11:         <style:default-style style:family=\"graphics\">\n   12              <style:properties draw:shadow-offset-x=\"0.3cm\" draw:shadow-offset-y=\"0.3cm\" draw:start-line-spacing-horizontal=\"0.283cm\" draw:start-line-spacing-vertical=\"0.283cm\" draw:end-line-spacing-horizontal=\"0.283cm\" draw:end-line-spacing-vertical=\"0.283cm\" style:text-autospace=\"ideograph-alpha\" style:line-break=\"strict\" style:writing-mode=\"lr-tb\" style:font-independent-line-spacing=\"false\" style:use-window-font-color=\"true\" fo:font-size=\"12pt\" fo:language=\"en\" fo:country=\"IN\" style:letter-kerning=\"true\" style:font-size-asian=\"10.5pt\" style:language-asian=\"zxx\" style:country-asian=\"none\" style:font-size-complex=\"12pt\" style:language-complex=\"zxx\" style:country-complex=\"none\">\n   13                  <style:tab-stops/>\n   14              </style:properties>\n   15:         </style:default-style>\n   16:         <style:default-style style:family=\"paragraph\">\n   17              <style:properties fo:hyphenation-ladder-count=\"no-limit\" style:text-autospace=\"ideograph-alpha\" style:punctuation-wrap=\"hanging\" style:line-break=\"strict\" style:tab-stop-distance=\"1.251cm\" style:writing-mode=\"page\" style:use-window-font-color=\"true\" style:font-name=\"Times\" fo:font-size=\"12pt\" fo:language=\"en\" fo:country=\"IN\" style:letter-kerning=\"true\" style:font-name-asian=\"DejaVu Sans\" style:font-size-asian=\"10.5pt\" style:language-asian=\"zxx\" style:country-asian=\"none\" style:font-name-complex=\"DejaVu Sans\" style:font-size-complex=\"12pt\" style:language-complex=\"zxx\" style:country-complex=\"none\" fo:hyphenate=\"false\" fo:hyphenation-remain-char-count=\"2\" fo:hyphenation-push-char-count=\"2\"/>\n   18:         </style:default-style>\n   19:         <style:default-style style:family=\"table\">\n   20              <style:properties table:border-model=\"collapsing\"/>\n   21:         </style:default-style>\n   22:         <style:default-style style:family=\"table-row\">\n   23              <style:properties fo:keep-together=\"always\"/>\n   24:         </style:default-style>\n   25          <style:style style:name=\"Standard\" style:family=\"paragraph\" style:class=\"text\"/>\n   26          <style:style style:name=\"Text body\" style:family=\"paragraph\" style:parent-style-name=\"Standard\" style:class=\"text\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\res\\ir_property.py:\n   50          'name': fields.char('Name', select=1),\n   51  \n   52:         'res_id': fields.char('Resource', help=\"If not set, acts as a default value for new resources\", select=1),\n   53          'company_id': fields.many2one('res.company', 'Company', select=1),\n   54          'fields_id': fields.many2one('ir.model.fields', 'Field', ondelete='cascade', required=True, select=1),\n   ..\n   77      }\n   78  \n   79:     _defaults = {\n   80          'type': 'many2one',\n   81      }\n   ..\n   93                  type_ = prop.type\n   94              else:\n   95:                 type_ = self._defaults['type']\n   96  \n   97          field = TYPE2FIELD.get(type_)\n   ..\n  168          if not cid:\n  169              company = self.pool.get('res.company')\n  170:             cid = company._company_default_get(cr, uid, model, res[0], context=context)\n  171  \n  172          return [('fields_id', '=', res[0]), ('company_id', 'in', [cid, False])]\n  ...\n  185              return dict.fromkeys(ids, False)\n  186  \n  187:         # retrieve the values for the given ids and the default value, too\n  188          refs = {('%s,%s' % (model, id)): id for id in ids}\n  189          refs[False] = False\n  ...\n  199                  result[id] = self.get_by_record(prop)\n  200  \n  201:         # set the default value to the ids that are not in result\n  202:         default_value = result.pop(False, False)\n  203          for id in ids:\n  204:             result.setdefault(id, default_value)\n  205  \n  206          return result\n  ...\n  221              raise Exception()\n  222  \n  223:         # retrieve the default value for the field\n  224:         default_value = clean(self.get(name, model))\n  225  \n  226          # retrieve the properties corresponding to the given record ids\n  227          self._cr.execute(\"SELECT id FROM ir_model_fields WHERE name=%s AND model=%s\", (name, model))\n  228          field_id = self._cr.fetchone()[0]\n  229:         company_id = self.env['res.company']._company_default_get(model, field_id)\n  230          refs = {('%s,%s' % (model, id)): id for id in values}\n  231          props = self.search([\n  ...\n  239              id = refs.pop(prop.res_id)\n  240              value = clean(values[id])\n  241:             if value == default_value:\n  242                  prop.unlink()\n  243              elif value != clean(prop.get_by_record(prop)):\n  ...\n  247          for ref, id in refs.iteritems():\n  248              value = clean(values[id])\n  249:             if value != default_value:\n  250                  self.create({\n  251                      'fields_id': field_id,\n  ...\n  284          # retrieve the records corresponding to the properties that match\n  285          good_ids = []\n  286:         default_matches = False\n  287          for prop in props:\n  288              if prop.res_id:\n  ...\n  290                  good_ids.append(int(res_id))\n  291              else:\n  292:                 default_matches = True\n  293  \n  294:         if default_matches:\n  295              # exclude all records with a property that does not match\n  296              all_ids = []\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\res\\res_bank.py:\n   31          'street': fields.char('Street'),\n   32          'street2': fields.char('Street2'),\n   33:         'zip': fields.char('Zip', change_default=True, size=24),\n   34          'city': fields.char('City'),\n   35          'state': fields.many2one(\"res.country.state\", 'Fed. State',\n   ..\n   43              help=\"Sometimes called BIC or Swift.\"),\n   44      }\n   45:     _defaults = {\n   46          'active': lambda *a: 1,\n   47      }\n   ..\n   62          'format_layout': fields.text('Format Layout', translate=True)\n   63      }\n   64:     _defaults = {\n   65          'format_layout': lambda *args: \"%(bank_name)s: %(acc_number)s\"\n   66      }\n   ..\n   95          return result\n   96  \n   97:     def _default_value(self, cursor, user, field, context=None):\n   98          if context is None: context = {}\n   99          if field in ('country_id', 'state_id'):\n  ...\n  107              cursor, user, 'address', context['address'], ['type', field], context=context):\n  108  \n  109:             if address.get('type') == 'default':\n  110                  return address.get(field, value)\n  111              elif not address.get('type'):\n  ...\n  121          'owner_name': fields.char('Account Owner Name'),\n  122          'street': fields.char('Street'),\n  123:         'zip': fields.char('Zip', change_default=True, size=24),\n  124          'city': fields.char('City'),\n  125          'country_id': fields.many2one('res.country', 'Country',\n  126:             change_default=True),\n  127          'state_id': fields.many2one(\"res.country.state\", 'Fed. State',\n  128:             change_default=True, domain=\"[('country_id','=',country_id)]\"),\n  129          'company_id': fields.many2one('res.company', 'Company',\n  130              ondelete='cascade', help=\"Only if this bank account belong to your company\"),\n  131          'partner_id': fields.many2one('res.partner', 'Account Owner', ondelete='cascade', select=True, domain=['|',('is_company','=',True),('parent_id','=',False)]),\n  132          'state': fields.selection(_bank_type_get, 'Bank Account Type', required=True,\n  133:             change_default=True),\n  134          'sequence': fields.integer('Sequence'),\n  135          'footer': fields.boolean(\"Display on Reports\", help=\"Display this bank account on the footer of printed documents like invoices and sales orders.\")\n  136      }\n  137  \n  138:     _defaults = {\n  139:         'owner_name': lambda obj, cursor, user, context: obj._default_value(\n  140              cursor, user, 'name', context=context),\n  141:         'street': lambda obj, cursor, user, context: obj._default_value(\n  142              cursor, user, 'street', context=context),\n  143:         'city': lambda obj, cursor, user, context: obj._default_value(\n  144              cursor, user, 'city', context=context),\n  145:         'zip': lambda obj, cursor, user, context: obj._default_value(\n  146              cursor, user, 'zip', context=context),\n  147:         'country_id': lambda obj, cursor, user, context: obj._default_value(\n  148              cursor, user, 'country_id', context=context),\n  149:         'state_id': lambda obj, cursor, user, context: obj._default_value(\n  150              cursor, user, 'state_id', context=context),\n  151          'name': '/'\n  ...\n  160              for field in type.field_ids:\n  161                  if field.name in res:\n  162:                     res[field.name].setdefault('states', {})\n  163                      res[field.name]['states'][type.code] = [\n  164                              ('readonly', field.readonly),\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\res\\res_company.py:\n   29  from openerp.tools import image_resize_image\n   30    \n   31: class multi_company_default(osv.osv):\n   32      \"\"\"\n   33:     Manage multi company default value\n   34      \"\"\"\n   35:     _name = 'multi_company.default'\n   36:     _description = 'Default multi company'\n   37      _order = 'company_id,sequence,id'\n   38  \n   ..\n   42          'company_id': fields.many2one('res.company', 'Main Company', required=True,\n   43              help='Company where the user is connected'),\n   44:         'company_dest_id': fields.many2one('res.company', 'Default Company', required=True,\n   45              help='Company to store the current record'),\n   46          'object_id': fields.many2one('ir.model', 'Object', required=True,\n   ..\n   51      }\n   52  \n   53:     _defaults = {\n   54          'expression': 'True',\n   55          'sequence': 100,\n   56      }\n   57  \n   58:     def copy(self, cr, uid, id, default=None, context=None):\n   59          \"\"\"\n   60          Add (copy) in the name when duplicate record\n   ..\n   62          if not context:\n   63              context = {}\n   64:         if not default:\n   65:             default = {}\n   66          company = self.browse(cr, uid, id, context=context)\n   67:         default = default.copy()\n   68:         default['name'] = company.name + _(' (copy)')\n   69:         return super(multi_company_default, self).copy(cr, uid, id, default, context=context)\n   70  \n   71: multi_company_default()\n   72  \n   73  class res_company(osv.osv):\n   ..\n   83              result[company.id] = {}.fromkeys(field_names, False)\n   84              if company.partner_id:\n   85:                 address_data = part_obj.address_get(cr, openerp.SUPERUSER_ID, [company.partner_id.id], adr_pref=['default'])\n   86:                 if address_data['default']:\n   87:                     address = part_obj.read(cr, openerp.SUPERUSER_ID, [address_data['default']], field_names, context=context)[0]\n   88                      for field in field_names:\n   89                          result[company.id][field] = address[field] or False\n   ..\n   95          if company.partner_id:\n   96              part_obj = self.pool.get('res.partner')\n   97:             address_data = part_obj.address_get(cr, uid, [company.partner_id.id], adr_pref=['default'])\n   98:             address = address_data['default']\n   99              if address:\n  100                  part_obj.write(cr, uid, [address], {name: value or False}, context=context)\n  ...\n  119          'partner_id': fields.many2one('res.partner', 'Partner', required=True),\n  120          'rml_header': fields.text('RML Header', required=True),\n  121:         'rml_header1': fields.char('Company Tagline', help=\"Appears by default on the top right corner of your printed documents (report header).\"),\n  122          'rml_header2': fields.text('RML Internal Header', required=True),\n  123          'rml_header3': fields.text('RML Internal Header for Landscape Reports', required=True),\n  ...\n  126          'custom_footer': fields.boolean('Custom Footer', help=\"Check this to define the report footer manually.  Otherwise it will be filled in automatically.\"),\n  127          'font': fields.many2one('res.font', string=\"Font\", domain=[('mode', 'in', ('Normal', 'Regular', 'all', 'Book'))],\n  128:             help=\"Set the font into the report header, it will be used as default font in the RML reports of the user company\"),\n  129          'logo': fields.related('partner_id', 'image', string=\"Logo\", type=\"binary\"),\n  130          'logo_web': fields.function(_get_logo_web, string=\"Logo Web\", type=\"binary\", store={\n  ...\n  184          \n  185      def onchange_font_name(self, cr, uid, ids, font, rml_header, rml_header2, rml_header3, context=None):\n  186:         \"\"\" To change default header style of all <para> and drawstring. \"\"\"\n  187  \n  188          def _change_header(header,font):\n  189:             \"\"\" Replace default fontname use in header and setfont tag \"\"\"\n  190              \n  191:             default_para = re.sub('fontName.?=.?\".*\"', 'fontName=\"%s\"'% font, header)\n  192:             return re.sub('(<setFont.?name.?=.?)(\".*?\")(.)', '\\g<1>\"%s\"\\g<3>'% font, default_para)\n  193          \n  194          if not font:\n  ...\n  223          return super(res_company, self).name_search(cr, uid, name=name, args=args, operator=operator, context=context, limit=limit)\n  224  \n  225:     def _company_default_get(self, cr, uid, object=False, field=False, context=None):\n  226          \"\"\"\n  227:         Check if the object for this company have a default value\n  228          \"\"\"\n  229          if not context:\n  230              context = {}\n  231:         proxy = self.pool.get('multi_company.default')\n  232          args = [\n  233              ('object_id.model', '=', object),\n  ...\n  305      <frame id=\"first\" x1=\"28.0\" y1=\"28.0\" width=\"%s\" height=\"%s\"/>\n  306      <stylesheet>\n  307:        <!-- Set here the default font to use for all <para> tags -->\n  308         <paraStyle name='Normal' fontName=\"DejaVuSans\"/>\n  309      </stylesheet>\n  ...\n  317          <stroke color=\"#000000\"/>\n  318          <lines>%s</lines>\n  319:         <!-- Set here the default font to use for all <drawString> tags -->\n  320          <!-- don't forget to change the 2 other occurence of <setFont> above if needed --> \n  321          <setFont name=\"DejaVuSans\" size=\"8\"/>\n  ...\n  343          <frame id=\"first\" x1=\"1.3cm\" y1=\"3.0cm\" height=\"%s\" width=\"19.0cm\"/>\n  344           <stylesheet>\n  345:             <!-- Set here the default font to use for all <para> tags -->\n  346              <paraStyle name='Normal' fontName=\"DejaVuSans\"/>\n  347              <paraStyle name=\"main_footer\" fontSize=\"8.0\" alignment=\"CENTER\"/>\n  ...\n  349           </stylesheet>\n  350          <pageGraphics>\n  351:             <!-- Set here the default font to use for all <drawString> tags -->\n  352              <setFont name=\"DejaVuSans\" size=\"8\"/>\n  353              <!-- You Logo - Change X,Y,Width and Height -->\n  ...\n  397          return self.pool.get(\"res.font\").font_scan(cr, uid, context=context)\n  398  \n  399:     _defaults = {\n  400          'currency_id': _get_euro,\n  401          'rml_paper_format': 'a4',\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\res\\res_company_view.xml:\n   11              <field name=\"view_type\">form</field>\n   12              <field name=\"view_mode\">tree,form</field>\n   13:             <field name=\"context\" eval=\"{'default_partner_id':ref('base.main_partner'), 'company_hide':False, 'default_company_id':ref('base.main_company'), 'search_default_my_bank':1}\"/>\n   14          </record>\n   15          <record id=\"view_company_form\" model=\"ir.ui.view\">\n   ..\n   68                              </group>\n   69                              <group string=\"Bank Accounts\">\n   70:                                 <field name=\"bank_ids\" nolabel=\"1\" context=\"{'default_company_id': active_id, 'footer_hide': False}\"\n   71                                      on_change=\"onchange_footer(custom_footer, phone, fax, email, website, vat, company_registry, bank_ids)\"/>\n   72                              </group>\n   ..\n  153  \n  154          <record id=\"view_inventory_tree\" model=\"ir.ui.view\">\n  155:             <field name=\"name\">multi_company.default.tree</field>\n  156:             <field name=\"model\">multi_company.default</field>\n  157              <field name=\"priority\" eval=\"8\"/>\n  158              <field name=\"arch\" type=\"xml\">\n  ...\n  169          </record>\n  170          <record id=\"view_inventory_form\" model=\"ir.ui.view\">\n  171:             <field name=\"name\">multi_company.default.form</field>\n  172:             <field name=\"model\">multi_company.default</field>\n  173              <field name=\"priority\" eval=\"8\"/>\n  174              <field name=\"arch\" type=\"xml\">\n  ...\n  193          </record>\n  194          <record id=\"view_inventory_search\" model=\"ir.ui.view\">\n  195:             <field name=\"name\">multi_company.default.search</field>\n  196:             <field name=\"model\">multi_company.default</field>\n  197              <field name=\"priority\" eval=\"8\"/>\n  198              <field name=\"arch\" type=\"xml\">\n  ...\n  206          </record>\n  207          <record id=\"action_inventory_form\" model=\"ir.actions.act_window\">\n  208:             <field name=\"name\">Company Defaults</field>\n  209              <field name=\"type\">ir.actions.act_window</field>\n  210:             <field name=\"res_model\">multi_company.default</field>\n  211              <field name=\"view_type\">form</field>\n  212              <field name=\"search_view_id\" ref=\"view_inventory_search\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\res\\res_config.py:\n  114  \n  115      def next(self, cr, uid, ids, context=None):\n  116:         \"\"\" Returns the next todo action to execute (using the default\n  117          sort order)\n  118          \"\"\"\n  ...\n  136          ``cancel`` should be overloaded instead of ``action_skip``. As with\n  137          ``execute``, if it returns an action dictionary that action is\n  138:         executed in stead of the default (going to the next configuration item)\n  139  \n  140:         The default implementation is a NOOP.\n  141  \n  142:         ``cancel`` is also called by the default implementation of\n  143          ``action_cancel``.\n  144          \"\"\"\n  ...\n  352                      self.already_installed(cr, uid, context))\n  353  \n  354:     def default_get(self, cr, uid, fields_list, context=None):\n  355:         ''' If an addon is already installed, check it by default\n  356          '''\n  357:         defaults = super(res_config_installer, self).default_get(\n  358              cr, uid, fields_list, context=context)\n  359  \n  360:         return dict(defaults,\n  361                      **dict.fromkeys(\n  362                          self.already_installed(cr, uid, context=context),\n  ...\n  396  class res_config_settings(osv.osv_memory, res_config_module_installation_mixin):\n  397      \"\"\" Base configuration wizard for application settings.  It provides support for setting\n  398:         default values, assigning groups to employee users, and installing modules.\n  399          To make such a 'settings' wizard, define a model like::\n  400  \n  ...\n  403                  _inherit = 'res.config.settings'\n  404                  _columns = {\n  405:                     'default_foo': fields.type(..., default_model='my.model'),\n  406                      'group_bar': fields.boolean(..., group='base.group_user', implied_group='my.group'),\n  407                      'module_baz': fields.boolean(...),\n  ...\n  411          The method ``execute`` provides some support based on a naming convention:\n  412  \n  413:         *   For a field like 'default_XXX', ``execute`` sets the (global) default value of\n  414:             the field 'XXX' in the model named by ``default_model`` to the field's value.\n  415  \n  416          *   For a boolean field like 'group_XXX', ``execute`` adds/removes 'implied_group'\n  417              to/from the implied groups of 'group', depending on the field's value.\n  418:             By default 'group' is the group Employee.  Groups are given by their xml id.\n  419              The attribute 'group' may contain several xml ids, separated by commas.\n  420  \n  ...\n  426              of those fields.\n  427  \n  428:         The method ``default_get`` retrieves values that reflect the current status of the\n  429:         fields like 'default_XXX', 'group_XXX' and 'module_XXX'.  It also invokes all methods\n  430:         with a name that starts with 'get_default_'; such methods can be defined to provide\n  431          current values for other fields.\n  432      \"\"\"\n  ...\n  478          \"\"\" return a dictionary with the fields classified by category::\n  479  \n  480:                 {   'default': [('default_foo', 'model', 'foo'), ...],\n  481                      'group':   [('group_bar', [browse_group], browse_implied_group), ...],\n  482                      'module':  [('module_baz', browse_module), ...],\n  ...\n  490              return ir_model_data.get_object(cr, uid, mod, xml, context=context)\n  491  \n  492:         defaults, groups, modules, others = [], [], [], []\n  493          for name, field in self._columns.items():\n  494:             if name.startswith('default_') and hasattr(field, 'default_model'):\n  495:                 defaults.append((name, field.default_model, name[8:]))\n  496              elif name.startswith('group_') and isinstance(field, fields.boolean) and hasattr(field, 'implied_group'):\n  497                  field_groups = getattr(field, 'group', 'base.group_user').split(',')\n  ...\n  504                  others.append(name)\n  505  \n  506:         return {'default': defaults, 'group': groups, 'module': modules, 'other': others}\n  507  \n  508:     def default_get(self, cr, uid, fields, context=None):\n  509          ir_values = self.pool['ir.values']\n  510          classified = self._get_classified_fields(cr, uid, context)\n  511  \n  512:         res = super(res_config_settings, self).default_get(cr, uid, fields, context)\n  513  \n  514:         # defaults: take the corresponding default value they set\n  515:         for name, model, field in classified['default']:\n  516:             value = ir_values.get_default(cr, uid, model, field)\n  517              if value is not None:\n  518                  res[name] = value\n  ...\n  526              res[name] = module and module.state in ('installed', 'to install', 'to upgrade')\n  527  \n  528:         # other fields: call all methods that start with 'get_default_'\n  529          for method in dir(self):\n  530:             if method.startswith('get_default_'):\n  531                  res.update(getattr(self, method)(cr, uid, fields, context))\n  532  \n  ...\n  549          config = self.browse(cr, uid, ids[0], context)\n  550  \n  551:         # default values fields\n  552:         for name, model, field in classified['default']:\n  553:             ir_values.set_default(cr, SUPERUSER_ID, model, field, config[name])\n  554  \n  555          # group fields: modify group / implied groups\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\res\\res_country.py:\n   66              'The code of the country must be unique !')\n   67      ]\n   68:     _defaults = {\n   69          'address_format': \"%(street)s\\n%(street2)s\\n%(city)s %(state_code)s %(zip)s\\n%(country_name)s\",\n   70      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\res\\res_currency.py:\n   80          'position': fields.selection([('after','After Amount'),('before','Before Amount')], 'Symbol Position', help=\"Determines where the currency symbol should be placed after or before the amount.\")\n   81      }\n   82:     _defaults = {\n   83          'active': 1,\n   84          'position' : 'after',\n   ..\n  297          'currency_id': fields.many2one('res.currency', 'Currency', readonly=True),\n  298      }\n  299:     _defaults = {\n  300          'name': lambda *a: time.strftime('%Y-%m-%d 00:00:00'),\n  301      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\res\\res_font.py:\n   38  _logger = logging.getLogger(__name__)\n   39  \n   40: # Alternatives for the [broken] builtin PDF fonts. Default order chosen to match\n   41  # the pre-v8 mapping from openerp.report.render.rml2pdf.customfonts.CustomTTFonts.\n   42  # Format: [ (BuiltinFontFamily, mode, [AlternativeFontName, ...]), ...]\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\res\\res_lang.py:\n   43  \n   44          This method is called from openerp/addons/base/base_data.xml to load\n   45:         some language and set it as the default for every partners. The\n   46          language is set via tools.config by the RPC 'create' method on the\n   47          'db' object. This is a fragile solution and something else should be\n   ..\n   56              self.load_lang(cr, uid, lang)\n   57          ir_values_obj = self.pool.get('ir.values')\n   58:         default_value = ir_values_obj.get(cr, uid, 'default', False, ['res.partner'])\n   59:         if not default_value:\n   60:             ir_values_obj.set(cr, uid, 'default', False, 'lang', ['res.partner'], lang)\n   61          return True\n   62  \n   ..\n   73                  continue\n   74          if fail:\n   75:             lc = locale.getdefaultlocale()[0]\n   76:             msg = 'Unable to get information for locale %s. Information from the default locale (%s) have been used.'\n   77              _logger.warning(msg, lang, lc)\n   78  \n   ..\n  137          return True\n  138  \n  139:     def _get_default_date_format(self, cursor, user, context=None):\n  140          return '%m/%d/%Y'\n  141  \n  142:     def _get_default_time_format(self, cursor, user, context=None):\n  143          return '%H:%M:%S'\n  144  \n  ...\n  156          'thousands_sep':fields.char('Thousands Separator'),\n  157      }\n  158:     _defaults = {\n  159          'active': 1,\n  160          'translatable': 0,\n  161          'direction': 'ltr',\n  162:         'date_format':_get_default_date_format,\n  163:         'time_format':_get_default_time_format,\n  164          'grouping': '[]',\n  165          'decimal_point': '.',\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\res\\res_partner.py:\n   84      def name_get(self, cr, uid, ids, context=None):\n   85          \"\"\" Return the categories' display name, including their direct\n   86:             parent by default.\n   87  \n   88              If ``context['partner_category_display']`` is ``'short'``, the short\n   89              version of the category name (without the direct parent) is used.\n   90:             The default is the long version.\n   91          \"\"\"\n   92          if not isinstance(ids, list):\n   ..\n  137          (osv.osv._check_recursion, 'Error ! You can not create recursive categories.', ['parent_id'])\n  138      ]\n  139:     _defaults = {\n  140          'active': 1,\n  141      }\n  ...\n  153          'domain': fields.selection([('partner', 'Partner'), ('contact', 'Contact')], 'Domain', required=True)\n  154      }\n  155:     _defaults = {\n  156          'domain': 'contact',\n  157      }\n  ...\n  257          'employee': fields.boolean('Employee', help=\"Check this box if this contact is an Employee.\"),\n  258          'function': fields.char('Job Position'),\n  259:         'type': fields.selection([('default', 'Default'), ('invoice', 'Invoice'),\n  260                                     ('delivery', 'Shipping'), ('contact', 'Contact'),\n  261                                     ('other', 'Other')], 'Address Type',\n  ...\n  263          'street': fields.char('Street'),\n  264          'street2': fields.char('Street2'),\n  265:         'zip': fields.char('Zip', size=24, change_default=True),\n  266          'city': fields.char('City'),\n  267          'state_id': fields.many2one(\"res.country.state\", 'State', ondelete='restrict'),\n  ...\n  304  \n  305      @api.model\n  306:     def _default_category(self):\n  307          category_id = self.env.context.get('category_id', False)\n  308          return [category_id] if category_id else False\n  309  \n  310      @api.model\n  311:     def _get_default_image(self, is_company, colorize=False):\n  312          img_path = openerp.modules.get_module_resource(\n  313              'base', 'static/src/img', 'company_image.png' if is_company else 'avatar.png')\n  ...\n  330  \n  331      @api.model\n  332:     def _default_company(self):\n  333:         return self.env['res.company']._company_default_get('res.partner')\n  334  \n  335:     _defaults = {\n  336          'active': True,\n  337          'lang': api.model(lambda self: self.env.lang),\n  338          'tz': api.model(lambda self: self.env.context.get('tz', False)),\n  339          'customer': True,\n  340:         'category_id': _default_category,\n  341:         'company_id': _default_company,\n  342          'color': 0,\n  343          'is_company': False,\n  344:         'type': 'contact', # type 'default' is wildcard and thus inappropriate\n  345          'use_parent_address': False,\n  346          'image': False,\n  ...\n  352  \n  353      @api.one\n  354:     def copy(self, default=None):\n  355:         default = dict(default or {})\n  356:         default['name'] = _('%s (copy)') % self.name\n  357:         return super(res_partner, self).copy(default)\n  358  \n  359      @api.multi\n  ...\n  616          \"\"\" Supported syntax:\n  617              - 'Raoul <raoul@grosbedon.fr>': will find name and email address\n  618:             - otherwise: default, everything is set as the name \"\"\"\n  619          emails = tools.email_split(text.replace(' ',','))\n  620          if emails:\n  ...\n  733          through descendants within company boundaries (stop at entities flagged ``is_company``)\n  734          then continuing the search at the ancestors that are within the same company boundaries.\n  735:         Defaults to partners of type ``'default'`` when the exact type is not found, or to the\n  736:         provided partner itself if no type ``'default'`` is found either. \"\"\"\n  737          adr_pref = set(adr_pref or [])\n  738:         if 'default' not in adr_pref:\n  739:             adr_pref.add('default')\n  740          result = {}\n  741          visited = set()\n  ...\n  761                  current_partner = current_partner.parent_id\n  762  \n  763:         # default to type 'default' or the partner itself\n  764:         default = result.get('default', partner.id)\n  765          for adr_type in adr_pref:\n  766:             result[adr_type] = result.get(adr_type) or default \n  767          return result\n  768  \n  ...\n  787  \n  788          :param address: browse record of the res.partner to format\n  789:         :returns: the address formatted in a display that fit its country habits (or the default ones\n  790              if not country is specified)\n  791          :rtype: string\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\res\\res_partner_data.xml:\n   49          </record>\n   50  \n   51:         <!-- Default bank account description -->\n   52          <record id=\"bank_normal\" model=\"res.partner.bank.type\">\n   53              <field name=\"name\">Normal Bank Account</field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\res\\res_partner_demo.xml:\n  374              <field eval=\"[(6, 0, [ref('res_partner_category_5')])]\" name=\"category_id\"/>\n  375              <field name=\"is_company\">1</field>\n  376:             <field name=\"type\">default</field>\n  377              <field name=\"street\">Union Road</field>\n  378              <field name=\"city\">Liverpool</field>\n  ...\n  389              <field eval=\"0\" name=\"customer\"/>\n  390              <field name=\"is_company\">1</field>\n  391:              <field name=\"type\">default</field>\n  392              <field name=\"street\">Margaret Alley</field>\n  393              <field name=\"city\">Leicester</field>\n  ...\n  406              <field eval=\"1\" name=\"customer\"/>\n  407              <field name=\"is_company\">1</field>\n  408:              <field name=\"type\">default</field>\n  409              <field name=\"street\">3rd Floor, Room 3-C,</field>\n  410              <field name=\"street2\">Carretera Panamericana, Km 1, Urb. Delgado Chalbaud</field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\res\\res_partner_view.xml:\n   53              <field name=\"view_type\">form</field>\n   54              <field name=\"domain\">[('domain','=','partner')]</field>\n   55:             <field name=\"context\">{'default_domain': 'partner'}</field>\n   56              <field name=\"help\">Manage the partner titles you want to have available in your system. The partner titles is the legal status of the company: Private Limited, SA, etc.</field>\n   57          </record>\n   ..\n   65              <field name=\"view_type\">form</field>\n   66              <field name=\"domain\">[('domain','=','contact')]</field>\n   67:             <field name=\"context\">{'default_domain': 'contact'}</field>\n   68              <field name=\"help\">Manage the contact titles you want to have available in your system and the way you want to print them in letters and other documents. Some example: Mr., Mrs. </field>\n   69          </record>\n   ..\n  102                          </div>\n  103                          <h1>\n  104:                             <field name=\"name\" default_focus=\"1\" placeholder=\"Name\" />\n  105                          </h1>\n  106                          <field name=\"parent_id\"\n  107                              placeholder=\"Company\"\n  108:                             domain=\"[('is_company', '=', True)]\" context=\"{'default_is_company': True}\"\n  109                              attrs=\"{'invisible': [('is_company','=', True)]}\"/>\n  110                      </div>\n  ...\n  135                          </div>\n  136                          <h1>\n  137:                             <field name=\"name\" default_focus=\"1\" placeholder=\"Name\" />\n  138                          </h1>\n  139                          <field name=\"parent_id\"\n  140                              placeholder=\"Company\"\n  141:                             domain=\"[('is_company', '=', True)]\" context=\"{'default_is_company': True, 'default_supplier': supplier, 'default_customer': customer}\"\n  142                              attrs=\"{'invisible': [('is_company','=', True),('parent_id', '=', False)]}\"\n  143                              on_change=\"onchange_address(use_parent_address, parent_id)\"/>\n  ...\n  189                      <notebook colspan=\"4\">\n  190                          <page string=\"Contacts\" attrs=\"{'invisible': [('is_company','=',False), ('child_ids', '=', [])]}\" autofocus=\"autofocus\">\n  191:                             <field name=\"child_ids\" mode=\"kanban\" context=\"{'default_parent_id': active_id, 'default_street': street, 'default_street2': street2, 'default_city': city, 'default_state_id': state_id, 'default_zip': zip, 'default_country_id': country_id, 'default_supplier': supplier, 'default_customer': customer, 'default_use_parent_address': True}\">\n  192                                  <kanban>\n  193                                      <field name=\"color\"/>\n  ...\n  301                                  <group>\n  302                                      <field name=\"user_id\" \n  303:                                         context=\"{'default_groups_ref': ['base.group_partner_manager']}\"/>\n  304                                      <field name=\"company_id\" groups=\"base.group_multi_company\" options=\"{'no_create': True}\"/>\n  305                                  </group>\n  ...\n  418              <field name=\"view_type\">form</field>\n  419              <field name=\"view_mode\">kanban,tree,form</field>\n  420:             <field name=\"context\">{\"search_default_customer\":1}</field>\n  421              <field name=\"search_view_id\" ref=\"view_res_partner_filter\"/>\n  422              <field name=\"help\" type=\"html\">\n  ...\n  457              <field name=\"view_mode\">kanban,tree,form</field>\n  458              <field name=\"domain\">[]</field>\n  459:             <field name=\"context\">{'default_customer':1, 'search_default_customer':1}</field>\n  460              <field name=\"filter\" eval=\"True\"/>\n  461              <field name=\"help\" type=\"html\">\n  ...\n  477              <field name=\"domain\">[]</field>\n  478              <field name=\"view_mode\">kanban,tree,form</field>\n  479:             <field name=\"context\">{'search_default_supplier': 1,'default_customer': 0,'default_supplier': 1}</field>\n  480              <field name=\"filter\" eval=\"True\"/>\n  481              <field name=\"help\" type=\"html\">\n  ...\n  496              <field name=\"view_type\">form</field>\n  497              <field name=\"domain\">[('employee','=',1)]</field>\n  498:             <field name=\"context\">{'default_customer':0, 'default_supplier':0 , 'default_employee':1}</field>\n  499              <field name=\"filter\" eval=\"True\"/>\n  500          </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\res\\res_request.py:\n   35          'priority': fields.integer('Priority'),\n   36      }\n   37:     _defaults = {\n   38          'priority': 5,\n   39      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\res\\res_users.py:\n  116          return super(res_groups, self).search(cr, uid, args, offset, limit, order, context, count)\n  117  \n  118:     def copy(self, cr, uid, id, default=None, context=None):\n  119          group_name = self.read(cr, uid, [id], ['name'])[0]['name']\n  120:         default.update({'name': _('%s (copy)')%group_name})\n  121:         return super(res_groups, self).copy(cr, uid, id, default, context)\n  122  \n  123      def write(self, cr, uid, ids, vals, context=None):\n  ...\n  233          if not uid2:\n  234              uid2 = uid\n  235:         # Use read() to compute default company, and pass load=_classic_write to\n  236          # avoid useless name_get() calls. This will avoid prefetching fields\n  237:         # while computing default values for new db columns, as the\n  238          # db backend may not be fully initialized yet.\n  239          user_data = self.pool['res.users'].read(cr, uid, uid2, ['company_id'],\n  ...\n  261          return result\n  262  \n  263:     def _get_default_image(self, cr, uid, context=None):\n  264:         return self.pool['res.partner']._get_default_image(cr, uid, False, colorize=True, context=context)\n  265  \n  266:     _defaults = {\n  267          'password': '',\n  268          'active': True,\n  ...\n  271          'company_ids': _get_companies,\n  272          'groups_id': _get_group,\n  273:         'image': _get_default_image,\n  274      }\n  275  \n  ...\n  365          return self.name_get(cr, user, ids, context=context)\n  366  \n  367:     def copy(self, cr, uid, id, default=None, context=None):\n  368          user2copy = self.read(cr, uid, [id], ['login','name'])[0]\n  369:         default = dict(default or {})\n  370:         if ('name' not in default) and ('partner_id' not in default):\n  371:             default['name'] = _(\"%s (copy)\") % user2copy['name']\n  372:         if 'login' not in default:\n  373:             default['login'] = _(\"%s (copy)\") % user2copy['login']\n  374:         return super(res_users, self).copy(cr, uid, id, default, context)\n  375  \n  376      @tools.ormcache(skiparg=2)\n  ...\n  787          for g in self.browse(cr, uid, gids, context):\n  788              if g.category_id:\n  789:                 by_app.setdefault(g.category_id, []).append(g)\n  790              else:\n  791                  others.append(g)\n  ...\n  835          return values1\n  836  \n  837:     def default_get(self, cr, uid, fields, context=None):\n  838          group_fields, fields = partition(is_reified_group, fields)\n  839          fields1 = (fields + ['groups_id']) if group_fields else fields\n  840:         values = super(users_view, self).default_get(cr, uid, fields1, context)\n  841          self._add_reified_groups(group_fields, values)\n  842  \n  843:         # add \"default_groups_ref\" inside the context to set default value for group_id with xml values\n  844:         if 'groups_id' in fields and isinstance(context.get(\"default_groups_ref\"), list):\n  845              groups = []\n  846              ir_model_data = self.pool.get('ir.model.data')\n  847:             for group_xml_id in context[\"default_groups_ref\"]:\n  848                  group_split = group_xml_id.split('.')\n  849                  if len(group_split) != 2:\n  850:                     raise osv.except_osv(_('Invalid context value'), _('Invalid context default_groups_ref value (model.name_id) : \"%s\"') % group_xml_id)\n  851                  try:\n  852                      temp, group_id = ir_model_data.get_object_reference(cr, uid, group_split[0], group_split[1])\n  ...\n  933      }\n  934  \n  935:     def _default_user_ids(self, cr, uid, context=None):\n  936          if context is None:\n  937              context = {}\n  ...\n  943          ]\n  944  \n  945:     _defaults = {\n  946:         'user_ids': _default_user_ids,\n  947      }\n  948  \n  ...\n  975          'new_passwd': fields.char('New Password'),\n  976      }\n  977:     _defaults = {\n  978          'new_passwd': '',\n  979      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\res\\res_users_view.xml:\n  116              <field name=\"res_model\">res.groups</field>\n  117              <field name=\"view_type\">form</field>\n  118:             <field name=\"help\">A group is a set of functional areas that will be assigned to the user in order to give them access and rights to specific applications and tasks in the system. You can create custom groups or edit the ones existing by default in order to customize the view of the menu that users will be able to see. Whether they can have a read, write, create and delete access right can be managed from here.</field>\n  119          </record>\n  120          <menuitem action=\"action_res_groups\" id=\"menu_action_res_groups\" parent=\"base.menu_users\" groups=\"base.group_no_one\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\security\\base_security.xml:\n   47              <!--\n   48                  Show partners from ancestors and descendants companies\n   49:                 (or company-less), this is usually a better default for\n   50                  multicompany setups.\n   51              -->\n   ..\n   63          </record>\n   64  \n   65:         <record model=\"ir.rule\" id=\"multi_company_default_rule\">\n   66:             <field name=\"name\">Multi_company_default company</field>\n   67:             <field name=\"model_id\" ref=\"model_multi_company_default\"/>\n   68              <field name=\"domain_force\">[('company_id','child_of',[user.company_id.id])]</field>\n   69          </record>\n   70  \n   71:         <record model=\"ir.rule\" id=\"ir_values_default_rule\">\n   72:             <field name=\"name\">Defaults: alter personal values only</field>\n   73              <field name=\"model_id\" ref=\"model_ir_values\"/>\n   74:             <field name=\"domain_force\">[('key','=','default'),('user_id','=',user.id)]</field>\n   75              <field name=\"perm_read\" eval=\"False\"/>\n   76          </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\tests\\test_base.py:\n   50              ('ryu+giga-Sushi@aizubange.fukushima.jp', True),\n   51          ]:\n   52:             partner_id, dummy = self.res_partner.name_create(cr, uid, name, context={'default_active': active})\n   53          partners = self.res_partner.name_search(cr, uid, 'Raoul')\n   54          self.assertEqual(len(partners), 2, 'Incorrect search number result for name_search')\n   ..\n   66                                                                                'email': 'info@ghoststep.com',\n   67                                                                                'vat': 'BE0477472701',\n   68:                                                                               'type': 'default'}))\n   69          p1 = self.res_partner.browse(cr, uid, self.res_partner.name_create(cr, uid, 'Denis Bladesmith <denis.bladesmith@ghoststep.com>')[0])\n   70:         self.assertEqual(p1.type, 'contact', 'Default type must be \"contact\"')\n   71          p1phone = '123456789#34'\n   72          p1.write({'phone': p1phone,\n   ..\n  114          cr, uid = self.cr, self.uid\n  115          ironshield = self.res_partner.browse(cr, uid, self.res_partner.name_create(cr, uid, 'IronShield')[0])\n  116:         self.assertFalse(ironshield.is_company, 'Partners are not companies by default')\n  117:         self.assertFalse(ironshield.use_parent_address, 'use_parent_address defaults to False')\n  118:         self.assertEqual(ironshield.type, 'contact', 'Default type must be \"contact\"')\n  119:         ironshield.write({'type': 'default'}) # force default type to double-check sync \n  120          p1 = self.res_partner.browse(cr, uid, self.res_partner.create(cr, uid,\n  121                                                                        {'name': 'Isen Hardearth',\n  122                                                                         'street': 'Strongarm Avenue, 12',\n  123                                                                         'parent_id': ironshield.id}))\n  124:         self.assertEquals(p1.type, 'contact', 'Default type must be \"contact\", not the copied parent type')\n  125          ironshield.refresh()\n  126          self.assertEqual(ironshield.street, p1.street, 'Address fields should be copied to company')\n  ...\n  157          leaf23 = self.res_partner.browse(cr, uid, self.res_partner.create(cr, uid, {'name': 'Leaf 23',\n  158                                                                                      'parent_id': branch2.id,\n  159:                                                                                     'type': 'default'}))\n  160          # go up, stop at branch1\n  161:         self.assertEqual(self.res_partner.address_get(cr, uid, [leaf111.id], ['delivery', 'invoice', 'contact', 'other', 'default']),\n  162                           {'delivery': leaf111.id,\n  163                            'invoice': leaf10.id,\n  164                            'contact': branch1.id,\n  165                            'other': branch11.id,\n  166:                           'default': leaf111.id}, 'Invalid address resolution')\n  167:         self.assertEqual(self.res_partner.address_get(cr, uid, [branch11.id], ['delivery', 'invoice', 'contact', 'other', 'default']),\n  168                           {'delivery': leaf111.id,\n  169                            'invoice': leaf10.id,\n  170                            'contact': branch1.id,\n  171                            'other': branch11.id,\n  172:                           'default': branch11.id}, 'Invalid address resolution')\n  173  \n  174          # go down, stop at at all child companies\n  175:         self.assertEqual(self.res_partner.address_get(cr, uid, [elmtree.id], ['delivery', 'invoice', 'contact', 'other', 'default']),\n  176                           {'delivery': elmtree.id,\n  177                            'invoice': elmtree.id,\n  178                            'contact': elmtree.id,\n  179                            'other': elmtree.id,\n  180:                           'default': elmtree.id}, 'Invalid address resolution')\n  181  \n  182          # go down through children\n  183:         self.assertEqual(self.res_partner.address_get(cr, uid, [branch1.id], ['delivery', 'invoice', 'contact', 'other', 'default']),\n  184                           {'delivery': leaf111.id,\n  185                            'invoice': leaf10.id,\n  186                            'contact': branch1.id,\n  187                            'other': branch11.id,\n  188:                           'default': branch1.id}, 'Invalid address resolution')\n  189:         self.assertEqual(self.res_partner.address_get(cr, uid, [branch2.id], ['delivery', 'invoice', 'contact', 'other', 'default']),\n  190                           {'delivery': leaf21.id,\n  191                            'invoice': leaf23.id,\n  192                            'contact': branch2.id,\n  193                            'other': leaf23.id,\n  194:                           'default': leaf23.id}, 'Invalid address resolution')\n  195  \n  196          # go up then down through siblings\n  197:         self.assertEqual(self.res_partner.address_get(cr, uid, [leaf21.id], ['delivery', 'invoice', 'contact', 'other', 'default']),\n  198                           {'delivery': leaf21.id,\n  199                            'invoice': leaf23.id,\n  200                            'contact': branch2.id,\n  201                            'other': leaf23.id,\n  202:                           'default': leaf23.id\n  203                            }, 'Invalid address resolution, should scan commercial entity ancestor and its descendants')\n  204:         self.assertEqual(self.res_partner.address_get(cr, uid, [leaf22.id], ['delivery', 'invoice', 'contact', 'other', 'default']),\n  205                           {'delivery': leaf21.id,\n  206                            'invoice': leaf23.id,\n  207                            'contact': leaf22.id,\n  208                            'other': leaf23.id,\n  209:                           'default': leaf23.id}, 'Invalid address resolution, should scan commercial entity ancestor and its descendants')\n  210:         self.assertEqual(self.res_partner.address_get(cr, uid, [leaf23.id], ['delivery', 'invoice', 'contact', 'other', 'default']),\n  211                           {'delivery': leaf21.id,\n  212                            'invoice': leaf23.id,\n  213                            'contact': branch2.id,\n  214                            'other': leaf23.id,\n  215:                           'default': leaf23.id}, 'Invalid address resolution, `default` should only override if no partner with specific type exists')\n  216  \n  217:         # empty adr_pref means only 'default'\n  218          self.assertEqual(self.res_partner.address_get(cr, uid, [elmtree.id], []),\n  219:                         {'default': elmtree.id}, 'Invalid address resolution, no default means commercial entity ancestor')\n  220          self.assertEqual(self.res_partner.address_get(cr, uid, [leaf111.id], []),\n  221:                         {'default': leaf111.id}, 'Invalid address resolution, no default means contact itself')\n  222:         branch11.write({'type': 'default'})\n  223          self.assertEqual(self.res_partner.address_get(cr, uid, [leaf111.id], []),\n  224:                         {'default': branch11.id}, 'Invalid address resolution, branch11 should now be default')\n  225  \n  226  \n  ...\n  325          self.assertEqual(['Nab', 'Eve', 'Bob', 'Alice'], [g['name'] for g in groups_data], 'Incorrect ordering of the list')\n  326  \n  327:         # group on int field, default ordering\n  328          groups_data = self.res_users.read_group(cr, uid, domain, fields=['color'], groupby='color')\n  329          self.assertEqual([-3, 0, 1, 2, 3, 6], [g['color'] for g in groups_data], 'Incorrect ordering of the list')\n  ...\n  340          self.assertEqual([1, 2, 1, 2], [g['name_count'] for g in groups_data], 'Incorrect number of results')\n  341  \n  342:         # group on inherited date column (res_partner.date) -> Year-Month, default ordering\n  343          groups_data = self.res_users.read_group(cr, uid, domain, fields=['function', 'color', 'date'], groupby=['date'])\n  344          self.assertEqual(len(groups_data), 4, \"Incorrect number of results when grouping on a field\")\n  ...\n  352          self.assertEqual([3, 1, 1, 1], [g['date_count'] for g in groups_data], 'Incorrect number of results')\n  353  \n  354:         # group on inherited many2one (res_partner.title), default order\n  355          groups_data = self.res_users.read_group(cr, uid, domain, fields=['function', 'color', 'title'], groupby=['title'])\n  356          self.assertEqual(len(groups_data), 2, \"Incorrect number of results when grouping on a field\")\n  ...\n  454      def test_103_duplicate_record_fr(self):\n  455          cr, uid = self.cr, self.uid\n  456:         self.new_fr_cat_id = self.res_category.copy(cr, uid, self.cat_id, default={'name': 'Clients (copie)'}, context={'lang':'fr_FR'})\n  457  \n  458          no_context_cat = self.res_category.browse(cr, uid, self.new_fr_cat_id)\n  ...\n  460  \n  461          fr_context_cat = self.res_category.browse(cr, uid, self.new_fr_cat_id, context={'lang':'fr_FR'})\n  462:         self.assertEqual(fr_context_cat.name, 'Clients (copie)', \"Did not used default value for translated value\")\n  463  \n  464  test_state = None\n  ...\n  494      at_install = False\n  495  \n  496:     def test_default_norun(self):\n  497          self.fail(\"An unmarket test in a non-at-install case should not run\")\n  498  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\tests\\test_ir_actions.py:\n  268          self.assertFalse(run_res, 'ir_actions_server: create record action correctly finished should return False')\n  269          # Test: new partner created\n  270:         pids = self.res_partner.search(cr, uid, [('name', 'ilike', 'TestingPartner (copy)')])  # currently res_partner overrides default['name'] whatever its value\n  271          self.assertEqual(len(pids), 1, 'ir_actions_server: TODO')\n  272          partner = self.res_partner.browse(cr, uid, pids[0])\n  ...\n  393  \n  394          # Test: new partner created\n  395:         pids = self.res_partner.search(cr, uid, [('name', 'ilike', 'TestingPartner (copy)')])  # currently res_partner overrides default['name'] whatever its value\n  396          self.assertEqual(len(pids), 1, 'ir_actions_server: TODO')\n  397          # Test: action returned\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\tests\\test_ir_filters.py:\n   35  \n   36          self.assertItemsEqual(map(noid, filters), [\n   37:             dict(name='a', is_default=False, user_id=self.USER, domain='[]', context='{}'),\n   38:             dict(name='b', is_default=False, user_id=self.USER, domain='[]', context='{}'),\n   39:             dict(name='c', is_default=False, user_id=self.USER, domain='[]', context='{}'),\n   40:             dict(name='d', is_default=False, user_id=self.USER, domain='[]', context='{}'),\n   41          ])\n   42  \n   ..\n   54  \n   55          self.assertItemsEqual(map(noid, filters), [\n   56:             dict(name='a', is_default=False, user_id=False, domain='[]', context='{}'),\n   57:             dict(name='b', is_default=False, user_id=False, domain='[]', context='{}'),\n   58:             dict(name='c', is_default=False, user_id=False, domain='[]', context='{}'),\n   59:             dict(name='d', is_default=False, user_id=False, domain='[]', context='{}'),\n   60          ])\n   61  \n   ..\n   72  \n   73          self.assertItemsEqual(map(noid, filters), [\n   74:             dict(name='a', is_default=False, user_id=False, domain='[]', context='{}'),\n   75:             dict(name='c', is_default=False, user_id=self.USER, domain='[]', context='{}'),\n   76          ])\n   77  \n   78: class TestOwnDefaults(FiltersCase):\n   79      def setUp(self):\n   80:         super(TestOwnDefaults, self).setUp()\n   81          self.USER = self.registry('res.users').name_search(self.cr, self.uid, 'demo')[0]\n   82          self.USER_ID = self.USER[0]                 \n   ..\n   84      def test_new_no_filter(self):\n   85          \"\"\"\n   86:         When creating a @is_default filter with no existing filter, that new\n   87:         filter gets the default flag\n   88          \"\"\"\n   89          Filters = self.registry('ir.filters')\n   ..\n   92              'model_id': 'ir.filters',\n   93              'user_id': self.USER_ID,\n   94:             'is_default': True,\n   95          })\n   96          filters = Filters.get_filters(self.cr, self.USER_ID, 'ir.filters')\n   97  \n   98          self.assertItemsEqual(map(noid, filters), [\n   99:             dict(name='a', user_id=self.USER, is_default=True,\n  100                   domain='[]', context='{}')\n  101          ])\n  102  \n  103:     def test_new_filter_not_default(self):\n  104          \"\"\"\n  105:         When creating a @is_default filter with existing non-default filters,\n  106          the new filter gets the flag\n  107          \"\"\"\n  ...\n  117              'model_id': 'ir.filters',\n  118              'user_id': self.USER_ID,\n  119:             'is_default': True,\n  120          })\n  121          filters = Filters.get_filters(self.cr, self.USER_ID, 'ir.filters')\n  122  \n  123          self.assertItemsEqual(map(noid, filters), [\n  124:             dict(name='a', user_id=self.USER, is_default=False, domain='[]', context='{}'),\n  125:             dict(name='b', user_id=self.USER, is_default=False, domain='[]', context='{}'),\n  126:             dict(name='c', user_id=self.USER, is_default=True, domain='[]', context='{}'),\n  127          ])\n  128  \n  129:     def test_new_filter_existing_default(self):\n  130          \"\"\"\n  131:         When creating a @is_default filter where an existing filter is already\n  132:         @is_default, the flag should be *moved* from the old to the new filter\n  133          \"\"\"\n  134          self.build(\n  135              'ir.filters',\n  136              dict(name='a', user_id=self.USER_ID, model_id='ir.filters'),\n  137:             dict(name='b', is_default=True, user_id=self.USER_ID, model_id='ir.filters'),\n  138          )\n  139  \n  ...\n  143              'model_id': 'ir.filters',\n  144              'user_id': self.USER_ID,\n  145:             'is_default': True,\n  146          })\n  147          filters = Filters.get_filters(self.cr, self.USER_ID, 'ir.filters')\n  148  \n  149          self.assertItemsEqual(map(noid, filters), [\n  150:             dict(name='a', user_id=self.USER, is_default=False, domain='[]', context='{}'),\n  151:             dict(name='b', user_id=self.USER, is_default=False, domain='[]', context='{}'),\n  152:             dict(name='c', user_id=self.USER, is_default=True, domain='[]', context='{}'),\n  153          ])\n  154  \n  155:     def test_update_filter_set_default(self):\n  156          \"\"\"\n  157:         When updating an existing filter to @is_default, if an other filter\n  158          already has the flag the flag should be moved\n  159          \"\"\"\n  ...\n  161              'ir.filters',\n  162              dict(name='a', user_id=self.USER_ID, model_id='ir.filters'),\n  163:             dict(name='b', is_default=True, user_id=self.USER_ID, model_id='ir.filters'),\n  164          )\n  165  \n  ...\n  169              'model_id': 'ir.filters',\n  170              'user_id': self.USER_ID,\n  171:             'is_default': True,\n  172          })\n  173          filters = Filters.get_filters(self.cr, self.USER_ID, 'ir.filters')\n  174  \n  175          self.assertItemsEqual(map(noid, filters), [\n  176:             dict(name='a', user_id=self.USER, is_default=True, domain='[]', context='{}'),\n  177:             dict(name='b', user_id=self.USER, is_default=False, domain='[]', context='{}'),\n  178          ])\n  179  \n  180: class TestGlobalDefaults(FiltersCase):\n  181      def setUp(self):\n  182:         super(TestGlobalDefaults, self).setUp()\n  183          self.USER = self.registry('res.users').name_search(self.cr, self.uid, 'demo')[0]\n  184          self.USER_ID = self.USER[0]\n  185  \n  186:     def test_new_filter_not_default(self):\n  187          \"\"\"\n  188:         When creating a @is_default filter with existing non-default filters,\n  189          the new filter gets the flag\n  190          \"\"\"\n  ...\n  200              'model_id': 'ir.filters',\n  201              'user_id': False,\n  202:             'is_default': True,\n  203          })\n  204          filters = Filters.get_filters(self.cr, self.USER_ID, 'ir.filters')\n  205  \n  206          self.assertItemsEqual(map(noid, filters), [\n  207:             dict(name='a', user_id=False, is_default=False, domain='[]', context='{}'),\n  208:             dict(name='b', user_id=False, is_default=False, domain='[]', context='{}'),\n  209:             dict(name='c', user_id=False, is_default=True, domain='[]', context='{}'),\n  210          ])\n  211  \n  212:     def test_new_filter_existing_default(self):\n  213          \"\"\"\n  214:         When creating a @is_default filter where an existing filter is already\n  215:         @is_default, an error should be generated\n  216          \"\"\"\n  217          self.build(\n  218              'ir.filters',\n  219              dict(name='a', user_id=False, model_id='ir.filters'),\n  220:             dict(name='b', is_default=True, user_id=False, model_id='ir.filters'),\n  221          )\n  222  \n  ...\n  227                  'model_id': 'ir.filters',\n  228                  'user_id': False,\n  229:                 'is_default': True,\n  230              })\n  231  \n  232:     def test_update_filter_set_default(self):\n  233          \"\"\"\n  234:         When updating an existing filter to @is_default, if an other filter\n  235          already has the flag an error should be generated\n  236          \"\"\"\n  ...\n  238              'ir.filters',\n  239              dict(name='a', user_id=False, model_id='ir.filters'),\n  240:             dict(name='b', is_default=True, user_id=False, model_id='ir.filters'),\n  241          )\n  242  \n  ...\n  248                  'model_id': 'ir.filters',\n  249                  'user_id': False,\n  250:                 'is_default': True,\n  251              })\n  252  \n  253:     def test_update_default_filter(self):\n  254          \"\"\"\n  255:         Replacing the current default global filter should not generate any error\n  256          \"\"\"\n  257          self.build(\n  258              'ir.filters',\n  259              dict(name='a', user_id=False, model_id='ir.filters'),\n  260:             dict(name='b', is_default=True, user_id=False, model_id='ir.filters'),\n  261          )\n  262  \n  ...\n  268              'user_id': False,\n  269              'context': context_value,\n  270:             'is_default': True,\n  271          })\n  272          filters = Filters.get_filters(self.cr, self.USER_ID, 'ir.filters')\n  273  \n  274          self.assertItemsEqual(map(noid, filters), [\n  275:             dict(name='a', user_id=False, is_default=False, domain='[]', context='{}'),\n  276:             dict(name='b', user_id=False, is_default=True, domain='[]', context=context_value),\n  277          ])\n  278  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\tests\\test_ir_sequence.py:\n  112          cr0 = cursor()\n  113          cr1 = cursor()\n  114:         cr1._default_log_exceptions = False # Prevent logging a traceback\n  115          with self.assertRaises(psycopg2.OperationalError) as e:\n  116              n0 = registry('ir.sequence').next_by_code(cr0, ADMIN_USER_ID, 'test_sequence_type_2', {})\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\tests\\test_ir_values.py:\n    6  \n    7      def test_00(self):\n    8:         # Create some default value for some (non-existing) model, for all users.\n    9  \n   10          ir_values = self.registry('ir.values')\n   11          # use the old API\n   12:         ir_values.set(self.cr, self.uid, 'default', False, 'my_test_field',\n   13              ['unexisting_model'], 'global value')\n   14          # use the new API\n   15:         ir_values.set_default(self.cr, self.uid, 'other_unexisting_model',\n   16              'my_other_test_field', 'conditional value', condition='foo=bar')\n   17  \n   ..\n   22          # d is a list of triplets (id, name, value)\n   23          # Old API\n   24:         d = ir_values.get(self.cr, self.uid, 'default', False, ['unexisting_model'])\n   25          assert len(d) == 1, \"Only one single value should be retrieved for this model\"\n   26:         assert d[0][1] == 'my_test_field', \"Can't retrieve the created default value. (1)\"\n   27:         assert d[0][2] == 'global value', \"Can't retrieve the created default value. (2)\"\n   28  \n   29          # New API, Conditional version\n   30:         d = ir_values.get_defaults(self.cr, self.uid, 'other_unexisting_model')\n   31          assert len(d) == 0, \"No value should be retrieved, the condition is not met\"\n   32:         d = ir_values.get_defaults(self.cr, self.uid, 'other_unexisting_model', condition=\"foo=eggs\")\n   33:         assert len(d) == 0, 'Condition is not met either, no defaults should be returned'\n   34:         d = ir_values.get_defaults(self.cr, self.uid, 'other_unexisting_model', condition=\"foo=bar\")\n   35          assert len(d) == 1, \"Only one single value should be retrieved\"\n   36:         assert d[0][1] == 'my_other_test_field', \"Can't retrieve the created default value. (5)\"\n   37:         assert d[0][2] == 'conditional value', \"Can't retrieve the created default value. (6)\"\n   38  \n   39          # Do it again but for a specific user.\n   40  \n   41          ir_values = self.registry('ir.values')\n   42:         ir_values.set(self.cr, self.uid, 'default', False, 'my_test_field',['unexisting_model'], 'specific value', preserve_user=True)\n   43  \n   44          # Retrieve it and check it is the one for the current user.\n   45          ir_values = self.registry('ir.values')\n   46:         d = ir_values.get(self.cr, self.uid, 'default', False, ['unexisting_model'])\n   47:         assert len(d) == 1, \"Only one default must be returned per field\"\n   48:         assert d[0][1] == 'my_test_field', \"Can't retrieve the created default value.\"\n   49:         assert d[0][2] == 'specific value', \"Can't retrieve the created default value.\"\n   50  \n   51          # Create some action bindings for a non-existing model.\n   52  \n   53          act_id_1 = self.ref('base.act_values_form_action')\n   54:         act_id_2 = self.ref('base.act_values_form_defaults')\n   55          act_id_3 = self.ref('base.action_res_company_form')\n   56          act_id_4 = self.ref('base.action_res_company_tree')\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\tests\\test_mail_examples.py:\n 1143  </li>\n 1144  <li><p class=\"first\">Faster and Improved Search view: Search drawer now appears on top of the results, and is open\n 1145: by default in reporting views</p>\n 1146  </li>\n 1147  <li><p class=\"first\">Improved User Interface:</p>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\tests\\test_orm.py:\n    1: from collections import defaultdict\n    2  from openerp.tools import mute_logger\n    3  from openerp.tests import common\n    .\n  136  \n  137          all_partners = []\n  138:         partners_by_day = defaultdict(set)\n  139:         partners_by_month = defaultdict(set)\n  140:         partners_by_year = defaultdict(set)\n  141  \n  142          for name, date in partners.items():\n  ...\n  179          self.user = self.registry('res.users')\n  180  \n  181:     def test_default(self):\n  182:         \"\"\" `default_get` cannot return a dictionary or a new id \"\"\"\n  183:         defaults = self.user.default_get(self.cr, UID, ['partner_id'])\n  184:         if 'partner_id' in defaults:\n  185:             self.assertIsInstance(defaults['partner_id'], (bool, int, long))\n  186  \n  187      def test_create(self):\n  ...\n  237      @mute_logger('openerp.models')\n  238      def test_copy_with_ancestor(self):\n  239:         \"\"\" copying a user with 'parent_id' in defaults should not duplicate the partner \"\"\"\n  240          foo_id = self.user.create(self.cr, UID, {'name': 'Foo', 'login': 'foo', 'password': 'foo',\n  241                                                   'login_date': '2016-01-01', 'signature': 'XXX'})\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\tests\\test_search.py:\n   12          # Create 6 partners with a given name, and a given creation order to\n   13          # ensure the order of their ID. Some are set as unactive to verify they\n   14:         # are by default excluded from the searches and to provide a second\n   15          # `order` argument.\n   16  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\tests\\test_views.py:\n  178              'arch': arch or self.arch_for(name, parent=parent),\n  179              'inherit_id': parent,\n  180:             'priority': 5, # higher than default views\n  181          })\n  182          self.ids[name] = view_id\n  ...\n  226              [(self.arch_for('A111', parent=True), self.ids['A111'])])\n  227  \n  228:     def test_default_view(self):\n  229:         default = self.View.default_view(\n  230              self.cr, self.uid, model=self.model, view_type='form')\n  231:         self.assertEqual(default, self.ids['A'])\n  232  \n  233:         default_tree = self.View.default_view(\n  234              self.cr, self.uid, model=self.model, view_type='tree')\n  235:         self.assertEqual(default_tree, self.ids['C'])\n  236  \n  237:     def test_no_default_view(self):\n  238          self.assertFalse(\n  239:             self.View.default_view(\n  240                  self.cr, self.uid, model='does.not.exist', view_type='form'))\n  241  \n  242          self.assertFalse(\n  243:             self.View.default_view(\n  244                  self.cr, self.uid, model=self.model, view_type='graph'))\n  245  \n  ...\n  316  \n  317      def test_insert_inside(self):\n  318:         default = Field(Field(name=\"inserted\"), name=\"target\")\n  319          spec = Field(Field(name=\"inserted 2\"), name=\"target\", position='inside')\n  320  \n  321          self.View.apply_inheritance_specs(self.cr, self.uid,\n  322                                            self.base_arch,\n  323:                                           default, None)\n  324          self.View.apply_inheritance_specs(self.cr, self.uid,\n  325                                            self.base_arch,\n  ...\n  642          \"\"\"Insert view into database via a query to passtrough validation\"\"\"\n  643          kw.pop('id', None)\n  644:         kw.setdefault('mode', 'extension' if kw.get('inherit_id') else 'primary')\n  645:         kw.setdefault('active', True)\n  646  \n  647          keys = sorted(kw.keys())\n  ...\n  889          view.write({'mode': 'extension'})\n  890  \n  891:     def testDefaultExtensionToPrimary(self):\n  892          \"\"\"\n  893          An extension view can be converted to primary\n  ...\n  901          view.write({'mode': 'primary'})\n  902  \n  903: class TestDefaultView(ViewCase):\n  904:     def testDefaultViewBase(self):\n  905          self.create({\n  906              'inherit_id': False,\n  ...\n  916          })\n  917  \n  918:         default = self.Views.default_view(self.cr, self.uid, False, 'qweb')\n  919          self.assertEqual(\n  920:             default, v2,\n  921:             \"default_view should get the view with the lowest priority for \"\n  922              \"a (model, view_type) pair\"\n  923          )\n  924  \n  925:     def testDefaultViewPrimary(self):\n  926          v1 = self.create({\n  927              'inherit_id': False,\n  ...\n  943          })\n  944  \n  945:         default = self.Views.default_view(self.cr, self.uid, False, 'qweb')\n  946          self.assertEqual(\n  947:             default, v3,\n  948:             \"default_view should get the view with the lowest priority for \"\n  949              \"a (model, view_type) pair in all the primary tables\"\n  950          )\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\workflow\\workflow.py:\n   35          'activities': fields.one2many('workflow.activity', 'wkf_id', 'Activities'),\n   36      }\n   37:     _defaults = {\n   38          'on_create': lambda *a: True\n   39      }\n   ..\n   90          'in_transitions': fields.one2many('workflow.transition', 'act_to', 'Incoming Transitions'),\n   91      }\n   92:     _defaults = {\n   93          'kind': lambda *a: 'dummy',\n   94          'join_mode': lambda *a: 'XOR',\n   ..\n  126          'wkf_id': fields.related('act_from','wkf_id', type='many2one', relation='workflow', string='Workflow', select=True),\n  127      }\n  128:     _defaults = {\n  129          'condition': lambda *a: 'True',\n  130          'sequence': 10,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\workflow\\workflow_view.xml:\n   53              <field name=\"signal\"/>\n   54            </arrow>\n   55:           <label string=\"When customizing a workflow, be sure you do not modify an existing node or arrow, but rather add new nodes or arrows. If you absolutly need to modify a node or arrow, you can only change fields that are empty or set to the default value. If you don't do that, your customization will be overwrited at the next update or upgrade to a future version of Odoo.\"/>\n   56          </diagram>\n   57        </field>\n   ..\n  303        <field name=\"view_type\">form</field>\n  304        <field name=\"view_id\" ref=\"view_workflow_instance_tree\"/>\n  305:       <field name=\"context\">{'search_default_active':1}</field>\n  306        <field name=\"search_view_id\" ref=\"view_workflow_instance_search\"/>\n  307      </record>\n  ...\n  364        <field name=\"view_type\">form</field>\n  365        <field name=\"view_id\" ref=\"view_workflow_workitem_tree\"/>\n  366:       <field name=\"context\">{'search_default_active':1}</field>\n  367        <field name=\"search_view_id\" ref=\"view_workflow_workitem_search\"/>\n  368      </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_action_rule\\base_action_rule.py:\n   27  from openerp import SUPERUSER_ID\n   28  from openerp.osv import fields, osv\n   29: from openerp.tools import DEFAULT_SERVER_DATETIME_FORMAT\n   30  \n   31  _logger = logging.getLogger(__name__)\n   ..\n   44      if ' ' not in date_str:\n   45          date_str = date_str + \" 00:00:00\"\n   46:     return datetime.strptime(date_str, DEFAULT_SERVER_DATETIME_FORMAT)\n   47  \n   48  \n   ..\n  100      }\n  101  \n  102:     _defaults = {\n  103          'active': True,\n  104          'trg_date_range_type': 'day',\n  ...\n  133          values = {}\n  134          if 'date_action_last' in model._fields:\n  135:             values['date_action_last'] = time.strftime(DEFAULT_SERVER_DATETIME_FORMAT)\n  136          if action.act_user_id and 'user_id' in model._fields:\n  137              values['user_id'] = action.act_user_id.id\n  ...\n  340                          _logger.error(traceback.format_exc())\n  341  \n  342:             action.write({'last_run': now.strftime(DEFAULT_SERVER_DATETIME_FORMAT)})\n  343  \n  344              if automatic:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_action_rule\\base_action_rule_view.xml:\n   28                                      <field name=\"filter_pre_id\"\n   29                                          domain=\"[('model_id','=',model), ('user_id', '=', False)]\"\n   30:                                         context=\"{'default_model_id': model}\"\n   31                                          attrs=\"{'invisible': [('kind', '!=', 'on_write')]}\"/>\n   32                                      <field name=\"filter_id\"\n   33                                          domain=\"[('model_id','=',model), ('user_id', '=', False)]\"\n   34:                                         context=\"{'default_model_id': model}\"/>\n   35                                      <field name=\"trg_date_id\"\n   36                                          attrs=\"{'invisible': [('kind', '!=', 'on_time')], 'required': [('kind', '=', 'on_time')]}\"/>\n   ..\n   61                                  </group>\n   62                                  <group name=\"action_server\" string=\"Server actions to run\">\n   63:                                     <field name=\"server_action_ids\" domain=\"[('model_id','=', model_id)]\" nolabel=\"1\" context=\"{'default_model_id': model_id}\">\n   64                                          <tree string=\"Server Actions\">\n   65                                              <field name=\"sequence\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_action_rule\\test_models.py:\n   22      }\n   23  \n   24:     _defaults = {\n   25          'state' : 'draft',\n   26          'active' : True,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_action_rule\\tests\\base_action_rule_test.py:\n   18          return filter_pool.create(cr, uid, {\n   19              'name': \"Lead is in done state\",\n   20:             'is_default': False,\n   21              'model_id': 'base.action.rule.lead.test',\n   22              'domain': \"[('state','=','done')]\",\n   ..\n   27          return filter_pool.create(cr, uid, {\n   28              'name': \"Lead is in draft state\",\n   29:             'is_default': False,\n   30              'model_id': \"base.action.rule.lead.test\",\n   31              'domain' : \"[('state','=','draft')]\",\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_gengo\\controller\\gengo_callback.py:\n   15      def get_gengo_key(self, cr):\n   16          icp = request.registry['ir.config_parameter']\n   17:         return icp.get_param(cr, SUPERUSER_ID, request.registry['base.gengo.translations'].GENGO_KEY, default=\"\")\n   18  \n   19      @http.route('/website/gengo_callback', type='http', auth='none')\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_gengo\\res_company.py:\n   34      }\n   35  \n   36:     _defaults = {\n   37          \"gengo_auto_approve\": True,\n   38      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_gengo\\wizard\\base_gengo_translations.py:\n   36      _logger.warning('Gengo library not found, Gengo features disabled. If you plan to use it, please install the gengo library from http://pypi.python.org/pypi/gengo')\n   37  \n   38: GENGO_DEFAULT_LIMIT = 20\n   39  \n   40  \n   ..\n   51          'sync_limit': fields.integer(\"No. of terms to sync\"),\n   52      }\n   53:     _defaults = {\n   54          'sync_type': 'both',\n   55          'sync_limit': 20\n   ..\n   58      def init(self, cr):\n   59          icp = self.pool['ir.config_parameter']\n   60:         if not icp.get_param(cr, SUPERUSER_ID, self.GENGO_KEY, default=None):\n   61              icp.set_param(cr, SUPERUSER_ID, self.GENGO_KEY, str(uuid.uuid4()), groups=self.GROUPS)\n   62  \n   63      def get_gengo_key(self, cr):\n   64          icp = self.pool['ir.config_parameter']\n   65:         return icp.get_param(cr, SUPERUSER_ID, self.GENGO_KEY, default=\"Undefined\")\n   66  \n   67      def gengo_authentication(self, cr, uid, context=None):\n   ..\n  117          return {'type': 'ir.actions.act_window_close'}\n  118  \n  119:     def _sync_response(self, cr, uid, limit=GENGO_DEFAULT_LIMIT, context=None):\n  120          \"\"\"\n  121          This method will be called by cron services to get translations from\n  ...\n  240          return True\n  241  \n  242:     def _sync_request(self, cr, uid, limit=GENGO_DEFAULT_LIMIT, context=None):\n  243          \"\"\"\n  244          This scheduler will send a job request to the gengo , which terms are\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_iban\\base_iban.py:\n  130      def _construct_constraint_msg(self, cr, uid, ids, context=None):\n  131  \n  132:         def default_iban_check(iban_cn):\n  133               return iban_cn and iban_cn[0] in string.ascii_lowercase and iban_cn[1] in string.ascii_lowercase\n  134  \n  135          iban_country = self.browse(cr, uid, ids)[0].acc_number and self.browse(cr, uid, ids)[0].acc_number[:2].lower()\n  136:         if default_iban_check(iban_country):\n  137              if iban_country in _ref_iban:\n  138                  return _('The IBAN does not seem to be correct. You should have entered something like this %s'), \\\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_iban\\base_iban_data.xml:\n    4  \n    5          <!--\n    6:         Default bank account description\n    7          -->\n    8          <record id=\"bank_iban\" model=\"res.partner.bank.type\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_import\\static\\src\\xml\\import.xml:\n  103                          displayed correctly?</a></dt>\n  104                      <dd>\n  105:                         <p>By default the Import preview is set on commas as \n  106                          field separators and quotation marks as text \n  107                          delimiters. If your csv file does not have these \n  ...\n  270                      <dd>\n  271                          <p>If you do not set all fields in your CSV file, \n  272:                         Odoo will assign the default value for every non \n  273                          defined fields. But if you\n  274                          set fields with empty values in your CSV file, Odoo \n  275                          will set the EMPTY value in the field, instead of \n  276:                         assigning the default value.</p>\n  277                      </dd>\n  278                  </dl>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_import\\test_models.py:\n   58          'value': fields.integer()\n   59      }\n   60:     _defaults = {\n   61          'value': 42\n   62      }\n   ..\n   74          'value': fields.integer()\n   75      }\n   76:     _defaults = {\n   77          'value': 42\n   78      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_import_module\\models\\base_import_module.py:\n   16      }\n   17  \n   18:     _defaults = {\n   19          'state': 'init',\n   20          'force': False,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_report_designer\\installer.py:\n   29      _inherit = 'res.config.installer'\n   30  \n   31:     def default_get(self, cr, uid, fields, context=None):\n   32:         data = super(base_report_designer_installer, self).default_get(cr, uid, fields, context=context)\n   33          base_url = self.pool.get('ir.config_parameter').get_param(cr, uid, 'web.base.url')\n   34          data['plugin_file'] = base_url + '/base_report_designer/static/base-report-designer-plugin/openerp_report_designer.zip'\n   ..\n   41      }\n   42  \n   43:     _defaults = {\n   44          'name' : 'openerp_report_designer.zip',\n   45          'description' : \"\"\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_report_designer\\openerp_sxw2rml\\openerp_sxw2rml.py:\n  340          version=\"Odoo Report v%s\" % __version__,\n  341          usage = 'openerp_sxw2rml.py [options] file.sxw')\n  342:     parser.add_option(\"-v\", \"--verbose\", default=False, dest=\"verbose\", help=\"enable basic debugging\")\n  343:     parser.add_option(\"-o\", \"--output\", dest=\"output\", default='.', help=\"directory of image output\")\n  344      (opt, args) = parser.parse_args()\n  345      if len(args) != 1:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_report_designer\\plugin\\openerp_report_designer\\bin\\script\\AddAttachment.py:\n   75              ids = self.sock.execute(database, uid, self.password, 'ir.module.module', 'search', [('name','=','base_report_model'),('state', '=', 'installed')])\n   76              if not len(ids):\n   77:                 # If the module 'base_report_model' is not installed, use the default model\n   78                  self.dModel = {\n   79                      \"Partner\":'res.partner',\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_report_designer\\plugin\\openerp_report_designer\\bin\\script\\ExportToRML.py:\n   31  \n   32  reload(sys)\n   33: sys.setdefaultencoding(\"utf8\")\n   34  from com.sun.star.task import XJobExecutor\n   35  if __name__<>\"package\":\n   ..\n   98              oFileDialog.setDisplayDirectory('file://' + ( os.name == 'nt' and '/' or '' ) + initPath )\n   99  \n  100:         oFileDialog.setDefaultName(f_path )\n  101  \n  102          sPath = oFileDialog.execute() == 1 and oFileDialog.Files[0] or ''\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_report_designer\\wizard\\base_report_designer_modify.py:\n   60      _name = 'base.report.file.sxw'\n   61  \n   62:     def default_get(self, cr, uid, fields, context=None):\n   63          \"\"\"\n   64:              To get default values for the object.\n   65  \n   66               @param self: The object pointer.\n   67               @param cr: A database cursor\n   68               @param uid: ID of the user currently logged in\n   69:              @param fields: List of fields for which we want default values\n   70               @param context: A standard dictionary\n   71  \n   ..\n   73  \n   74          \"\"\"\n   75:         res = super(base_report_file_sxw, self).default_get(cr, uid, fields, context=context)\n   76          report_id1 = self.pool['base.report.sxw'].search(cr,uid,[])\n   77          data = self.pool['base.report.sxw'].read(cr, uid, report_id1, context=context)[0]\n   ..\n  120      \"\"\"Base Report file Save\"\"\"\n  121      _name = 'base.report.rml.save'\n  122:     def default_get(self, cr, uid, fields, context=None):\n  123          \"\"\"\n  124:              To get default values for the object.\n  125  \n  126               @param self: The object pointer.\n  127               @param cr: A database cursor\n  128               @param uid: ID of the user currently logged in\n  129:              @param fields: List of fields for which we want default values\n  130               @param context: A standard dictionary\n  131               @return: A dictionary which of fields with values.\n  ...\n  133          \"\"\"\n  134          \n  135:         res = super(base_report_rml_save, self).default_get(cr, uid, fields, context=context)\n  136          report_ids = self.pool['base.report.sxw'].search(cr,uid,[], context=context)\n  137  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_setup\\base_setup.py:\n   43          ], 'How do you call a Customer', required=True ),\n   44      }\n   45:     _defaults={\n   46          'partner' :'Customer',\n   47      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_setup\\res_config.py:\n   43                                                help=\"\"\"This installs the module google_calendar.\"\"\"),\n   44          'font': fields.many2one('res.font', string=\"Report Font\", domain=[('mode', 'in', ('Normal', 'Regular', 'all', 'Book'))],\n   45:             help=\"Set the font into the report header, it will be used as default font in the RML reports of the user company\"),\n   46  \n   47      }\n   48      \n   49:     _defaults= {\n   50          'font': lambda self,cr,uid,c: self.pool.get('res.users').browse(cr, uid, uid, c).company_id.font.id,\n   51      }\n   ..\n   64  \n   65      def _change_header(self, header,font):\n   66:         \"\"\" Replace default fontname use in header and setfont tag \"\"\"\n   67          \n   68:         default_para = re.sub('fontName.?=.?\".*\"', 'fontName=\"%s\"'% font,header)\n   69:         return re.sub('(<setFont.?name.?=.?)(\".*?\")(.)', '\\g<1>\"%s\"\\g<3>'% font,default_para)\n   70      \n   71:     def set_base_defaults(self, cr, uid, ids, context=None):\n   72          ir_model_data = self.pool.get('ir.model.data')\n   73          wizard = self.browse(cr, uid, ids, context)[0]\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_vat\\__openerp__.py:\n   35  There are two different levels of VAT number validation:\n   36  --------------------------------------------------------\n   37:     * By default, a simple off-line check is performed using the known validation\n   38        rules for the country, usually a simple check digit. This is quick and \n   39        always available, but allows numbers that are perhaps not truly allocated,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_vat\\base_vat.py:\n   91                          getattr(vatnumber, check_func_name, None)\n   92          if not check_func:\n   93:             # No VAT validation available, default to check that the country code exists\n   94              res_country = self.pool.get('res.country')\n   95              return bool(res_country.search(cr, uid, [('code', '=ilike', country_code)], context=context))\n   ..\n  139  \n  140      def _construct_constraint_msg(self, cr, uid, ids, context=None):\n  141:         def default_vat_check(cn, vn):\n  142:             # by default, a VAT number is valid if:\n  143              #  it starts with 2 letters\n  144              #  has more than 3 characters\n  ...\n  147          vat_no = \"'CC##' (CC=Country Code, ##=VAT Number)\"\n  148          error_partner = self.browse(cr, uid, ids, context=context)\n  149:         if default_vat_check(vat_country, vat_number):\n  150              vat_no = _ref_vat[vat_country] if vat_country in _ref_vat else vat_no\n  151              if self.pool['res.users'].browse(cr, uid, uid).company_id.vat_check_vies:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\board\\board.py:\n  160          }\n  161  \n  162:     def _default_menu_parent_id(self, cr, uid, context=None):\n  163          _, menu_id = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'base', 'menu_reporting_dashboard')\n  164          return menu_id\n  ...\n  172      }\n  173  \n  174:     _defaults = {\n  175:         'menu_parent_id': _default_menu_parent_id,\n  176      }\n  177  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\bus\\bus.py:\n   12  from openerp.osv import osv, fields\n   13  from openerp.http import request\n   14: from openerp.tools.misc import DEFAULT_SERVER_DATETIME_FORMAT\n   15  \n   16  _logger = logging.getLogger(__name__)\n   ..\n   40      def gc(self, cr, uid):\n   41          timeout_ago = datetime.datetime.utcnow()-datetime.timedelta(seconds=TIMEOUT*2)\n   42:         domain = [('create_date', '<', timeout_ago.strftime(DEFAULT_SERVER_DATETIME_FORMAT))]\n   43          ids  = self.search(cr, openerp.SUPERUSER_ID, domain)\n   44          self.unlink(cr, openerp.SUPERUSER_ID, ids)\n   ..\n   67          if last == 0:\n   68              timeout_ago = datetime.datetime.utcnow()-datetime.timedelta(seconds=TIMEOUT)\n   69:             domain = [('create_date', '>', timeout_ago.strftime(DEFAULT_SERVER_DATETIME_FORMAT))]\n   70          else:\n   71              # else returns the unread notifications\n   ..\n   99              event = self.Event()\n  100              for c in channels:\n  101:                 self.channels.setdefault(hashable(c), []).append(event)\n  102              try:\n  103                  event.wait(timeout=timeout)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\calendar\\calendar.py:\n   16  from openerp import tools, SUPERUSER_ID\n   17  from openerp.osv import fields, osv\n   18: from openerp.tools import DEFAULT_SERVER_DATE_FORMAT, DEFAULT_SERVER_DATETIME_FORMAT\n   19  from openerp.tools.translate import _\n   20  from openerp.http import request\n   ..\n   38              real_id = res[0]\n   39              if with_date:\n   40:                 real_date = time.strftime(DEFAULT_SERVER_DATETIME_FORMAT, time.strptime(res[1], \"%Y%m%d%H%M%S\"))\n   41:                 start = datetime.strptime(real_date, DEFAULT_SERVER_DATETIME_FORMAT)\n   42                  end = start + timedelta(hours=with_date)\n   43:                 return (int(real_id), real_date, end.strftime(DEFAULT_SERVER_DATETIME_FORMAT))\n   44              return int(real_id)\n   45      return calendar_id and int(calendar_id) or calendar_id\n   ..\n   97          'event_id': fields.many2one('calendar.event', 'Meeting linked'),\n   98      }\n   99:     _defaults = {\n  100          'state': 'needsAction',\n  101      }\n  102  \n  103:     def copy(self, cr, uid, id, default=None, context=None):\n  104          raise osv.except_osv(_('Warning!'), _('You cannot duplicate a calendar attendee.'))\n  105  \n  ...\n  125              if idate:\n  126                  if allday:\n  127:                     return datetime.strptime(idate.split(' ')[0], DEFAULT_SERVER_DATE_FORMAT).replace(tzinfo=pytz.timezone('UTC'))\n  128                  else:\n  129:                     return datetime.strptime(idate.split('.')[0], DEFAULT_SERVER_DATETIME_FORMAT).replace(tzinfo=pytz.timezone('UTC'))\n  130              return False\n  131  \n  ...\n  140          if not event_obj.start or not event_obj.stop:\n  141              raise osv.except_osv(_('Warning!'), _(\"First you have to specify the date of the invitation.\"))\n  142:         event.add('created').value = ics_datetime(time.strftime(DEFAULT_SERVER_DATETIME_FORMAT))\n  143          event.add('dtstart').value = ics_datetime(event_obj.start, event_obj.allday)\n  144          event.add('dtend').value = ics_datetime(event_obj.stop, event_obj.allday)\n  ...\n  180          res = False\n  181  \n  182:         if self.pool['ir.config_parameter'].get_param(cr, uid, 'calendar.block_mail', default=False) or context.get(\"no_mail_to_attendees\"):\n  183              return res\n  184  \n  ...\n  205              'action_id': self.pool['ir.actions.act_window'].search(cr, uid, [('view_id', '=', act_id)], context=context)[0],\n  206              'dbname': cr.dbname,\n  207:             'base_url': self.pool['ir.config_parameter'].get_param(cr, uid, 'web.base.url', default='http://localhost:8069', context=context)\n  208          })\n  209  \n  ...\n  408                  if alarm.type in alarm_type and \\\n  409                      one_date - timedelta(minutes=alarm.duration_minutes) < datetime.now() + timedelta(seconds=in_the_next_X_seconds) and \\\n  410:                         (not after or one_date - timedelta(minutes=alarm.duration_minutes) > datetime.strptime(after.split('.')[0], DEFAULT_SERVER_DATETIME_FORMAT)):\n  411                          alert = {\n  412                              'alarm_id': alarm.id,\n  ...\n  462                          break\n  463              else:\n  464:                 in_date_format = datetime.strptime(curEvent.start, DEFAULT_SERVER_DATETIME_FORMAT)\n  465                  LastFound = self.do_check_alarm_for_one_date(cr, uid, in_date_format, curEvent, max_delta, cron_interval, notif=False, context=context)\n  466                  if LastFound:\n  ...\n  495                          break\n  496              else:\n  497:                 in_date_format = datetime.strptime(curEvent.start, DEFAULT_SERVER_DATETIME_FORMAT)\n  498                  LastFound = self.do_check_alarm_for_one_date(cr, uid, in_date_format, curEvent, max_delta, ajax_check_every_seconds, partner.calendar_last_notif_ack, mail=False, context=context)\n  499                  if LastFound:\n  ...\n  530                  'message': message,\n  531                  'timer': delta,\n  532:                 'notify_at': alert['notify_at'].strftime(DEFAULT_SERVER_DATETIME_FORMAT),\n  533              }\n  534  \n  ...\n  559      }\n  560  \n  561:     _defaults = {\n  562          'type': 'notification',\n  563          'duration': 1,\n  ...\n  685  \n  686          timezone = pytz.timezone(context.get('tz') or 'UTC')\n  687:         startdate = pytz.UTC.localize(datetime.strptime(event.start, DEFAULT_SERVER_DATETIME_FORMAT))  # Add \"+hh:mm\" timezone\n  688          if not startdate:\n  689              startdate = datetime.now()\n  ...\n  716              }[data['rrule_type']]\n  717  \n  718:             deadline = datetime.strptime(data['stop'], tools.DEFAULT_SERVER_DATETIME_FORMAT)\n  719              return deadline + relativedelta(**{delay: count * mult})\n  720          return final_date\n  ...\n  762  \n  763          tz = context.get('tz', False)\n  764:         if not tz:  # tz can have a value False, so dont do it in the default value of get !\n  765              context['tz'] = self.pool.get('res.users').read(cr, SUPERUSER_ID, uid, ['tz'])['tz']\n  766              tz = context['tz']\n  ...\n  768  \n  769          format_date, format_time = self.get_date_formats(cr, uid, context=context)\n  770:         date = fields.datetime.context_timestamp(cr, uid, datetime.strptime(start, tools.DEFAULT_SERVER_DATETIME_FORMAT), context=context)\n  771:         date_deadline = fields.datetime.context_timestamp(cr, uid, datetime.strptime(stop, tools.DEFAULT_SERVER_DATETIME_FORMAT), context=context)\n  772          event_date = date.strftime(format_date)\n  773          display_time = date.strftime(format_time)\n  ...\n  877                  start_date = values.get('start_date') or event.start_date\n  878                  if stop_date and start_date:\n  879:                     diff = datetime.strptime(stop_date.split(' ')[0], DEFAULT_SERVER_DATE_FORMAT) - datetime.strptime(start_date.split(' ')[0], DEFAULT_SERVER_DATE_FORMAT)\n  880              elif values.get('stop_datetime') or values.get('start_datetime'):\n  881                  stop_datetime = values.get('stop_datetime') or event.stop_datetime\n  882                  start_datetime = values.get('start_datetime') or event.start_datetime\n  883                  if stop_datetime and start_datetime:\n  884:                     diff = datetime.strptime(stop_datetime.split('.')[0], DEFAULT_SERVER_DATETIME_FORMAT) - datetime.strptime(start_datetime.split('.')[0], DEFAULT_SERVER_DATETIME_FORMAT)\n  885              if diff:\n  886                  duration = float(diff.days) * 24 + (float(diff.seconds) / 3600)\n  ...\n  947      }\n  948  \n  949:     def _get_default_partners(self, cr, uid, ctx=None):\n  950          ret = [self.pool['res.users'].browse(cr, uid, uid, context=ctx).partner_id.id]\n  951          active_id = ctx.get('active_id')\n  ...\n  955          return ret\n  956  \n  957:     _defaults = {\n  958          'end_type': 'count',\n  959          'count': 1,\n  ...\n  967          'active': 1,\n  968          'user_id': lambda self, cr, uid, ctx: uid,\n  969:         'partner_ids': _get_default_partners,\n  970      }\n  971  \n  ...\n  992              startdatetime = startdatetime or start\n  993              if startdatetime:\n  994:                 start = datetime.strptime(startdatetime, DEFAULT_SERVER_DATETIME_FORMAT)\n  995:                 value['start_date'] = datetime.strftime(start, DEFAULT_SERVER_DATE_FORMAT)\n  996  \n  997              enddatetime = enddatetime or end\n  998              if enddatetime:\n  999:                 end = datetime.strptime(enddatetime, DEFAULT_SERVER_DATETIME_FORMAT)\n 1000:                 value['stop_date'] = datetime.strftime(end, DEFAULT_SERVER_DATE_FORMAT)\n 1001          else:  # from date to datetime\n 1002              user = self.pool['res.users'].browse(cr, uid, uid, context)\n ....\n 1004  \n 1005              if starttime:\n 1006:                 start = datetime.strptime(starttime.split(' ')[0], DEFAULT_SERVER_DATE_FORMAT)\n 1007                  startdate = tz.localize(start)  # Add \"+hh:mm\" timezone\n 1008                  startdate = startdate.replace(hour=8)  # Set 8 AM in localtime\n 1009                  startdate = startdate.astimezone(pytz.utc)  # Convert to UTC\n 1010:                 value['start_datetime'] = datetime.strftime(startdate, DEFAULT_SERVER_DATETIME_FORMAT)\n 1011              elif start:\n 1012                  value['start_datetime'] = start\n 1013  \n 1014              if endtime:\n 1015:                 end = datetime.strptime(endtime.split(' ')[0], DEFAULT_SERVER_DATE_FORMAT)\n 1016                  enddate = tz.localize(end).replace(hour=18).astimezone(pytz.utc)\n 1017  \n 1018:                 value['stop_datetime'] = datetime.strftime(enddate, DEFAULT_SERVER_DATETIME_FORMAT)\n 1019              elif end:\n 1020                  value['stop_datetime'] = end\n ....\n 1036          if allday:\n 1037              if fromtype == 'start' and start:\n 1038:                 start = datetime.strptime(start, DEFAULT_SERVER_DATE_FORMAT)\n 1039:                 value['start_datetime'] = datetime.strftime(start, DEFAULT_SERVER_DATETIME_FORMAT)\n 1040:                 value['start'] = datetime.strftime(start, DEFAULT_SERVER_DATETIME_FORMAT)\n 1041  \n 1042              if fromtype == 'stop' and end:\n 1043:                 end = datetime.strptime(end, DEFAULT_SERVER_DATE_FORMAT)\n 1044:                 value['stop_datetime'] = datetime.strftime(end, DEFAULT_SERVER_DATETIME_FORMAT)\n 1045:                 value['stop'] = datetime.strftime(end, DEFAULT_SERVER_DATETIME_FORMAT)\n 1046  \n 1047          else:\n 1048              if fromtype == 'start' and start:\n 1049:                 start = datetime.strptime(start, DEFAULT_SERVER_DATETIME_FORMAT)\n 1050:                 value['start_date'] = datetime.strftime(start, DEFAULT_SERVER_DATE_FORMAT)\n 1051:                 value['start'] = datetime.strftime(start, DEFAULT_SERVER_DATETIME_FORMAT)\n 1052              if fromtype == 'stop' and end:\n 1053:                 end = datetime.strptime(end, DEFAULT_SERVER_DATETIME_FORMAT)\n 1054:                 value['stop_date'] = datetime.strftime(end, DEFAULT_SERVER_DATE_FORMAT)\n 1055:                 value['stop'] = datetime.strftime(end, DEFAULT_SERVER_DATETIME_FORMAT)\n 1056  \n 1057          return {'value': value}\n ....\n 1305          day_list = ['mo', 'tu', 'we', 'th', 'fr', 'sa', 'su']\n 1306          rrule_type = ['yearly', 'monthly', 'weekly', 'daily']\n 1307:         r = rrule.rrulestr(rule, dtstart=datetime.strptime(date_start, DEFAULT_SERVER_DATETIME_FORMAT))\n 1308  \n 1309          if r._freq > 0 and r._freq < 4:\n ....\n 1311          data['count'] = r._count\n 1312          data['interval'] = r._interval\n 1313:         data['final_date'] = r._until and r._until.strftime(DEFAULT_SERVER_DATETIME_FORMAT)\n 1314          #repeat weekly\n 1315          if r._byweekday:\n ....\n 1386      def _needaction_domain_get(self, cr, uid, context=None):\n 1387          return [\n 1388:             ('stop', '<=', time.strftime(DEFAULT_SERVER_DATE_FORMAT + ' 23:59:59')),\n 1389:             ('start', '>=', time.strftime(DEFAULT_SERVER_DATE_FORMAT + ' 00:00:00')),\n 1390              ('user_id', '=', uid),\n 1391          ]\n ....\n 1395          if isinstance(thread_id, basestring):\n 1396              thread_id = get_real_ids(thread_id)\n 1397:         if context.get('default_date'):\n 1398:             del context['default_date']\n 1399          return super(calendar_event, self).message_post(cr, uid, thread_id, body=body, subject=subject, type=type, subtype=subtype, parent_id=parent_id, attachments=attachments, context=context, **kwargs)\n 1400  \n ....\n 1425      def get_interval(self, cr, uid, ids, date, interval, tz=None, context=None):\n 1426          #Function used only in calendar_event_data.xml for email template\n 1427:         date = datetime.strptime(date.split('.')[0], DEFAULT_SERVER_DATETIME_FORMAT)\n 1428  \n 1429          if tz:\n ....\n 1474          return res\n 1475  \n 1476:     def copy(self, cr, uid, id, default=None, context=None):\n 1477:         default = default or {}\n 1478:         self._set_date(cr, uid, default, id=default.get('id'), context=context)\n 1479:         return super(calendar_event, self).copy(cr, uid, calendar_id2real_id(id), default, context)\n 1480  \n 1481      def _detach_one_event(self, cr, uid, id, values=dict(), context=None):\n ....\n 1492                  rrule='',\n 1493                  recurrency=False,\n 1494:                 final_date=datetime.strptime(data.get('start'), DEFAULT_SERVER_DATETIME_FORMAT if data['allday'] else DEFAULT_SERVER_DATETIME_FORMAT) + timedelta(hours=values.get('duration', False) or data.get('duration'))\n 1495              )\n 1496  \n ....\n 1498              if data.get('id'):\n 1499                  del(data['id'])\n 1500:             new_id = self.copy(cr, uid, real_event_id, default=data, context=context)\n 1501              return new_id\n 1502  \n ....\n 1731              order = context.get('order', self._order)\n 1732              for virtual_id in self.pool[doc_model].get_recurrent_ids(cr, uid, doc_dict.keys(), [], order=order, context=context):\n 1733:                 doc_dict.setdefault(virtual_id, doc_dict[get_real_ids(virtual_id)])\n 1734          return super(mail_message, self)._find_allowed_model_wise(cr, uid, doc_model, doc_dict, context=context)\n 1735  \n ....\n 1786      _inherit = 'mail.wizard.invite'\n 1787  \n 1788:     def default_get(self, cr, uid, fields, context=None):\n 1789          '''\n 1790          in case someone clicked on 'invite others' wizard in the followers widget, transform virtual ids in real ids\n 1791          '''\n 1792:         result = super(invite_wizard, self).default_get(cr, uid, fields, context=context)\n 1793          if 'res_id' in result:\n 1794              result['res_id'] = get_real_ids(result['res_id'])\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\calendar\\calendar_data.xml:\n    8              <field name=\"res_model\">calendar.event</field>\n    9              <field name=\"description\">Warning, a mandatory field has been modified since the creation of this event</field>\n   10:             <field name=\"default\" eval=\"False\"/>\n   11          </record>\n   12          <record model=\"calendar.alarm\" id=\"alarm_notif_1\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\calendar\\contacts.py:\n   30          'active':fields.boolean('active'),        \n   31       }\n   32:     _defaults = {\n   33          'user_id': lambda self, cr, uid, ctx: uid,\n   34          'active' : True,        \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\claim_from_delivery\\claim_delivery_view.xml:\n    7              <field name=\"view_type\">form</field>\n    8              <field name=\"view_id\" ref=\"crm_claim.crm_case_claims_tree_view\"/>\n    9:             <field name=\"context\">{'default_ref': 'stock.picking,'+str(context.get('active_id', False))}</field>\n   10              <field name=\"domain\">[('ref','=','stock.picking,'+str(context.get('active_id',False)))]</field>\n   11          </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\base_partner_merge.py:\n  111      }\n  112  \n  113:     def default_get(self, cr, uid, fields, context=None):\n  114          if context is None:\n  115              context = {}\n  116:         res = super(MergePartnerAutomatic, self).default_get(cr, uid, fields, context)\n  117          if context.get('active_model') == 'res.partner' and context.get('active_ids'):\n  118              partner_ids = context['active_ids']\n  ...\n  122          return res\n  123  \n  124:     _defaults = {\n  125          'state': 'option'\n  126      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\crm.py:\n   41          'active': fields.boolean('Active'),\n   42      }\n   43:     _defaults = {\n   44          'active': lambda *a: 1,\n   45      }\n   ..\n   99          return vals\n  100  \n  101:     def _get_default_track(self, cr, uid, field, context=None):\n  102          return self.tracking_get_values(cr, uid, {}, context=context).get(field)\n  103  \n  104:     _defaults = {\n  105:         'source_id': lambda self, cr, uid, ctx: self._get_default_track(cr, uid, 'source_id', ctx),\n  106:         'campaign_id': lambda self, cr, uid, ctx: self._get_default_track(cr, uid, 'campaign_id', ctx),\n  107:         'medium_id': lambda self, cr, uid, ctx: self._get_default_track(cr, uid, 'medium_id', ctx),\n  108      }\n  109  \n  ...\n  123          'name': fields.char('Stage Name', required=True, translate=True),\n  124          'sequence': fields.integer('Sequence', help=\"Used to order stages. Lower is better.\"),\n  125:         'probability': fields.float('Probability (%)', required=True, help=\"This percentage depicts the default/average probability of the Case for this stage to be a success\"),\n  126          'on_change': fields.boolean('Change Probability Automatically', help=\"Setting this stage will change the probability automatically on the opportunity.\"),\n  127          'requirements': fields.text('Requirements'),\n  128          'section_ids': fields.many2many('crm.case.section', 'section_stage_rel', 'stage_id', 'section_id', string='Sections',\n  129                                          help=\"Link between stages and sales teams. When set, this limitate the current stage to the selected sales teams.\"),\n  130:         'case_default': fields.boolean('Default to New Sales Team',\n  131:                                        help=\"If you check this field, this stage will be proposed by default on each sales team. It will not assign this stage to existing teams.\"),\n  132          'fold': fields.boolean('Folded in Kanban View',\n  133                                 help='This stage is folded in the kanban view when'\n  ...\n  138      }\n  139  \n  140:     _defaults = {\n  141          'sequence': 1,\n  142          'probability': 0.0,\n  ...\n  144          'fold': False,\n  145          'type': 'both',\n  146:         'case_default': True,\n  147      }\n  148  \n  ...\n  164          ids = self.pool.get('ir.model').search(cr, uid, ['|', ('id', '=', object_id), ('model', '=', context.get('object_name', False))])\n  165          return ids and ids[0] or False\n  166:     _defaults = {\n  167          'object_id': _find_object_id\n  168      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\crm_data.xml:\n   71          </record>\n   72  \n   73:         <!--default alias for leads-->\n   74          <record id=\"mail_alias_lead_info\" model=\"mail.alias\">\n   75              <field name=\"alias_name\">info</field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\crm_lead.py:\n   86      def get_empty_list_help(self, cr, uid, help, context=None):\n   87          context = dict(context or {})\n   88:         if context.get('default_type') == 'lead':\n   89              context['empty_list_help_model'] = 'crm.case.section'\n   90:             context['empty_list_help_id'] = context.get('default_section_id')\n   91          context['empty_list_help_document_name'] = _(\"leads\")\n   92          return super(crm_lead, self).get_empty_list_help(cr, uid, help, context=context)\n   93  \n   94:     def _get_default_section_id(self, cr, uid, user_id=False, context=None):\n   95:         \"\"\" Gives default section by checking if present in the context \"\"\"\n   96          section_id = self._resolve_section_id_from_context(cr, uid, context=context) or False\n   97          if not section_id:\n   98:             section_id = self.pool.get('res.users').browse(cr, uid, user_id or uid, context).default_section_id.id or False\n   99          return section_id\n  100  \n  101:     def _get_default_stage_id(self, cr, uid, context=None):\n  102:         \"\"\" Gives default stage_id \"\"\"\n  103:         section_id = self._get_default_section_id(cr, uid, context=context)\n  104          return self.stage_find(cr, uid, [], section_id, [('fold', '=', False)], context=context)\n  105  \n  ...\n  111          if context is None:\n  112              context = {}\n  113:         if type(context.get('default_section_id')) in (int, long):\n  114:             return context.get('default_section_id')\n  115:         if isinstance(context.get('default_section_id'), basestring):\n  116:             section_ids = self.pool.get('crm.case.section').name_search(cr, uid, name=context['default_section_id'], context=context)\n  117              if len(section_ids) == 1:\n  118                  return int(section_ids[0][0])\n  ...\n  125          if context is None:\n  126              context = {}\n  127:         return context.get('default_type')\n  128  \n  129      def _read_group_stage_ids(self, cr, uid, ids, domain, read_group_order=None, access_rights_uid=None, context=None):\n  ...\n  136          # retrieve section_id from the context and write the domain\n  137          # - ('id', 'in', 'ids'): add columns that should be present\n  138:         # - OR ('case_default', '=', True), ('fold', '=', False): add default columns that are not folded\n  139          # - OR ('section_ids', '=', section_id), ('fold', '=', False) if section_id: add section columns that are not folded\n  140          search_domain = []\n  ...\n  144              search_domain += [('id', 'in', ids)]\n  145          else:\n  146:             search_domain += ['|', ('id', 'in', ids), ('case_default', '=', True)]\n  147          # retrieve type from the context (if set: choose 'type' or 'both')\n  148          type = self._resolve_type_from_context(cr, uid, context=context)\n  ...\n  215          'email_from': fields.char('Email', size=128, help=\"Email address of the contact\", select=1),\n  216          'section_id': fields.many2one('crm.case.section', 'Sales Team',\n  217:                         select=True, track_visibility='onchange', help='When sending mails, the default email address is taken from the sales team.'),\n  218          'create_date': fields.datetime('Creation Date', readonly=True),\n  219          'email_cc': fields.text('Global CC', help=\"These email addresses will be added to the CC field of all inbound and outbound emails for this record before being sent. Separate multiple email addresses with a comma\"),\n  ...\n  264          'street': fields.char('Street'),\n  265          'street2': fields.char('Street2'),\n  266:         'zip': fields.char('Zip', change_default=True, size=24),\n  267          'city': fields.char('City'),\n  268          'state_id': fields.many2one(\"res.country.state\", 'State'),\n  ...\n  280      }\n  281  \n  282:     _defaults = {\n  283          'active': 1,\n  284          'type': 'lead',\n  285          'user_id': lambda s, cr, uid, c: uid,\n  286:         'stage_id': lambda s, cr, uid, c: s._get_default_stage_id(cr, uid, c),\n  287:         'section_id': lambda s, cr, uid, c: s._get_default_section_id(cr, uid, context=c),\n  288:         'company_id': lambda s, cr, uid, c: s.pool.get('res.company')._company_default_get(cr, uid, 'crm.lead', context=c),\n  289          'priority': lambda *a: crm.AVAILABLE_PRIORITIES[2][0],\n  290          'color': 0,\n  ...\n  330          \"\"\" When changing the user, also set a section_id or restrict section id\n  331              to the ones user_id is member of. \"\"\"\n  332:         section_id = self._get_default_section_id(cr, uid, user_id=user_id, context=context) or False\n  333          if user_id and self.pool['res.users'].has_group(cr, uid, 'base.group_multi_salesteams') and not section_id:\n  334              section_ids = self.pool.get('crm.case.section').search(cr, uid, ['|', ('user_id', '=', user_id), ('member_ids', '=', user_id)], context=context)\n  ...\n  342              - type: stage type must be the same or 'both'\n  343              - section_id: if set, stages must belong to this section or\n  344:               be a default stage; if not set, stages must be default\n  345                stages\n  346          \"\"\"\n  ...\n  354          section_ids = set()\n  355          types = ['both']\n  356:         if not cases and context.get('default_type'):\n  357:             ctx_type = context.get('default_type')\n  358              types += [ctx_type]\n  359          if section_id:\n  ...\n  364              if lead.type not in types:\n  365                  types.append(lead.type)\n  366:         # OR all section_ids and OR with case_default\n  367          search_domain = []\n  368          if section_ids:\n  ...\n  370              for section_id in section_ids:\n  371                  search_domain.append(('section_ids', '=', section_id))\n  372:         search_domain.append(('case_default', '=', True))\n  373          # AND with cases types\n  374          if not avoid_add_type_term:\n  ...\n  693          contact_id = False\n  694          if customer:\n  695:             contact_id = self.pool.get('res.partner').address_get(cr, uid, [customer.id])['default']\n  696          if not section_id:\n  697              section_id = lead.section_id and lead.section_id.id or False\n  ...\n  915              partner_ids.append(lead.partner_id.id)\n  916          res['context'] = {\n  917:             'default_opportunity_id': lead.type == 'opportunity' and lead.id or False,\n  918:             'default_partner_id': lead.partner_id and lead.partner_id.id or False,\n  919:             'default_partner_ids': partner_ids,\n  920:             'default_section_id': lead.section_id and lead.section_id.id or False,\n  921:             'default_name': lead.name,\n  922          }\n  923          return res\n  ...\n  925      def create(self, cr, uid, vals, context=None):\n  926          context = dict(context or {})\n  927:         if vals.get('type') and not context.get('default_type'):\n  928:             context['default_type'] = vals.get('type')\n  929:         if vals.get('section_id') and not context.get('default_section_id'):\n  930:             context['default_section_id'] = vals.get('section_id')\n  931          if vals.get('user_id'):\n  932              vals['date_open'] = fields.datetime.now()\n  ...\n  948          return super(crm_lead, self).write(cr, uid, ids, vals, context=context)\n  949  \n  950:     def copy(self, cr, uid, id, default=None, context=None):\n  951:         if not default:\n  952:             default = {}\n  953          if not context:\n  954              context = {}\n  955          lead = self.browse(cr, uid, id, context=context)\n  956          local_context = dict(context)\n  957:         local_context.setdefault('default_type', lead.type)\n  958:         local_context.setdefault('default_section_id', lead.section_id.id)\n  959          if lead.type == 'opportunity':\n  960:             default['date_open'] = fields.datetime.now()\n  961          else:\n  962:             default['date_open'] = False\n  963:         return super(crm_lead, self).copy(cr, uid, id, default, context=local_context)\n  964  \n  965      def get_empty_list_help(self, cr, uid, help, context=None):\n  966          context = dict(context or {})\n  967          context['empty_list_help_model'] = 'crm.case.section'\n  968:         context['empty_list_help_id'] = context.get('default_section_id', None)\n  969          context['empty_list_help_document_name'] = _(\"opportunity\")\n  970:         if context.get('default_type') == 'lead':\n  971              context['empty_list_help_document_name'] = _(\"lead\")\n  972          return super(crm_lead, self).get_empty_list_help(cr, uid, help, context=context)\n  ...\n 1010          if custom_values is None:\n 1011              custom_values = {}\n 1012:         defaults = {\n 1013              'name':  msg.get('subject') or _(\"No Subject\"),\n 1014              'email_from': msg.get('from'),\n ....\n 1018          }\n 1019          if msg.get('author_id'):\n 1020:             defaults.update(self.on_change_partner_id(cr, uid, None, msg.get('author_id'), context=context)['value'])\n 1021          if msg.get('priority') in dict(crm.AVAILABLE_PRIORITIES):\n 1022:             defaults['priority'] = msg.get('priority')\n 1023:         defaults.update(custom_values)\n 1024:         return super(crm_lead, self).message_new(cr, uid, msg, custom_values=defaults, context=context)\n 1025  \n 1026      def message_update(self, cr, uid, ids, msg, update_vals=None, context=None):\n ....\n 1059          else:\n 1060              message = _('Scheduled a call for %(date)s. %(description)s')\n 1061:         phonecall_date = datetime.strptime(phonecall.date, tools.DEFAULT_SERVER_DATETIME_FORMAT)\n 1062:         phonecall_usertime = fields.datetime.context_timestamp(cr, uid, phonecall_date, context=context).strftime(tools.DEFAULT_SERVER_DATETIME_FORMAT)\n 1063          html_time = \"<time datetime='%s+00:00'>%s</time>\" % (phonecall.date, phonecall_usertime)\n 1064          message = message % dict(date=html_time, description=phonecall.description)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\crm_lead_data.xml:\n    6          <record model=\"crm.case.stage\" id=\"stage_lead1\">\n    7              <field name=\"name\">New</field>\n    8:             <field name=\"case_default\">1</field>\n    9              <field name=\"probability\">0</field>\n   10              <field name=\"on_change\">1</field>\n   ..\n   14          <record model=\"crm.case.stage\" id=\"stage_lead2\">\n   15              <field name=\"name\">Dead</field>\n   16:             <field name=\"case_default\">1</field>\n   17              <field name=\"fold\">1</field>\n   18              <field name=\"probability\">0</field>\n   ..\n   23          <record model=\"crm.case.stage\" id=\"stage_lead3\">\n   24              <field name=\"name\">Qualification</field>\n   25:             <field name=\"case_default\">1</field>\n   26              <field name=\"probability\">20</field>\n   27              <field name=\"on_change\">1</field>\n   ..\n   31          <record model=\"crm.case.stage\" id=\"stage_lead4\">\n   32              <field name=\"name\">Proposition</field>\n   33:             <field name=\"case_default\">1</field>\n   34              <field name=\"probability\">40</field>\n   35              <field name=\"sequence\">50</field>\n   ..\n   38          <record model=\"crm.case.stage\" id=\"stage_lead5\">\n   39              <field name=\"name\">Negotiation</field>\n   40:             <field name=\"case_default\">1</field>\n   41              <field name=\"probability\">60</field>\n   42              <field name=\"sequence\">60</field>\n   ..\n   45          <record model=\"crm.case.stage\" id=\"stage_lead6\">\n   46              <field name=\"name\">Won</field>\n   47:             <field name=\"case_default\">1</field>\n   48              <field name=\"fold\">1</field>\n   49              <field name=\"probability\">100</field>\n   ..\n   54          <record model=\"crm.case.stage\" id=\"stage_lead7\">\n   55              <field name=\"name\">Lost</field>\n   56:             <field name=\"case_default\">1</field>\n   57              <field name=\"fold\">1</field>\n   58              <field name=\"probability\">0</field>\n   ..\n  117              <field name=\"hidden\" eval=\"True\"/>\n  118              <field name=\"res_model\">crm.lead</field>\n  119:             <field name=\"default\" eval=\"False\"/>\n  120              <field name=\"description\">Lead created</field>\n  121          </record>\n  ...\n  123              <field name=\"name\">Stage Changed</field>\n  124              <field name=\"res_model\">crm.lead</field>\n  125:             <field name=\"default\" eval=\"False\"/>\n  126              <field name=\"description\">Stage changed</field>\n  127          </record>\n  ...\n  129              <field name=\"name\">Opportunity Won</field>\n  130              <field name=\"res_model\">crm.lead</field>\n  131:             <field name=\"default\" eval=\"False\"/>\n  132              <field name=\"description\">Opportunity won</field>\n  133          </record>\n  ...\n  135              <field name=\"name\">Opportunity Lost</field>\n  136              <field name=\"res_model\">crm.lead</field>\n  137:             <field name=\"default\" eval=\"False\"/>\n  138              <field name=\"description\">Opportunity lost</field>\n  139          </record>\n  ...\n  143              <field name=\"sequence\">10</field>\n  144              <field name=\"res_model\">crm.case.section</field>\n  145:             <field name=\"default\" eval=\"False\"/>\n  146              <field name=\"parent_id\" eval=\"ref('mt_lead_create')\"/>\n  147              <field name=\"relation_field\">section_id</field>\n  ...\n  165              <field name=\"sequence\">13</field>\n  166              <field name=\"res_model\">crm.case.section</field>\n  167:             <field name=\"default\" eval=\"False\"/>\n  168              <field name=\"parent_id\" eval=\"ref('mt_lead_lost')\"/>\n  169              <field name=\"relation_field\">section_id</field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\crm_lead_menu.xml:\n   11          <field name=\"search_view_id\" ref=\"crm.view_crm_case_leads_filter\"/>\n   12          <field name=\"context\">{\n   13:                 'default_type':'lead',\n   14                  'stage_type':'lead',\n   15                  'empty_list_help_model': 'crm.case.section',\n   16                  'needaction_menu_ref': 'crm.menu_crm_opportunities',\n   17:                 'search_default_unassigned':1,\n   18              }\n   19          </field>\n   ..\n   38          <field name=\"context\">{\n   39                  'stage_type': 'opportunity',\n   40:                 'default_type': 'opportunity',\n   41:                 'default_user_id': uid\n   42              }\n   43          </field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\crm_lead_view.xml:\n   74                  res_model=\"crm.phonecall\"\n   75                  view_mode=\"tree,calendar,form\"\n   76:                 context=\"{'default_duration': 1.0 ,'default_opportunity_id': active_id}\"\n   77                  view_type=\"form\"/>\n   78  \n   ..\n   82                  res_model=\"calendar.event\"\n   83                  view_mode=\"tree,form,calendar\"\n   84:                 context=\"{'default_duration': 4.0, 'default_opportunity_id': active_id}\"\n   85                  view_type=\"form\"/>\n   86  \n   ..\n   96                              help=\"Convert to Opportunity\" class=\"oe_highlight\"/>\n   97                      <field name=\"stage_id\" widget=\"statusbar\" clickable=\"True\"\n   98:                             domain=\"['&amp;', '|', ('case_default', '=', True), ('section_ids', '=', section_id), '|', ('type', '=', type), ('type', '=', 'both')]\"\n   99                              options=\"{'fold_field': 'fold'}\"\n  100                              on_change=\"onchange_stage_id(stage_id)\"/>\n  ...\n  103                      <div class=\"oe_right oe_button_box\" name=\"buttons\">\n  104                          <button class=\"oe_inline oe_stat_button\" type=\"action\"\n  105:                             context=\"{'default_opportunity_id': active_id, 'search_default_opportunity_id': active_id, 'default_partner_id': partner_id, 'default_duration': 1.0}\"\n  106                              name=\"%(crm.crm_case_categ_phone_incoming0)d\" icon=\"fa-phone\">\n  107                              <div>Schedule/Log<br/>Calls</div>\n  ...\n  119                                  on_change=\"on_change_partner_id(partner_id)\"\n  120                                  options='{\"create_name_field\": \"name\"}'\n  121:                                 context=\"{'default_name': contact_name, 'default_street': street, 'default_city': city, 'default_state_id': state_id, 'default_zip': zip, 'default_country_id': country_id, 'default_function': function, 'default_phone': phone, 'default_mobile': mobile, 'default_fax': fax, 'default_email': email_from, 'default_user_id': user_id, 'default_section_id': section_id}\"/>\n  122                              <label for=\"street\" string=\"Address\"/>\n  123                              <div>\n  ...\n  146                          <group>\n  147                              <field name=\"user_id\" on_change=\"on_change_user(user_id, context)\"\n  148:                                 context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'base.group_sale_salesman_all_leads'] }\"/>\n  149                              <label for=\"section_id\" groups=\"base.group_multi_salesteams\"/>\n  150                              <div groups=\"base.group_multi_salesteams\">\n  ...\n  259              <field name=\"model\">crm.lead</field>\n  260              <field name=\"arch\" type=\"xml\">\n  261:                 <kanban default_group_by=\"stage_id\">\n  262                      <field name=\"stage_id\"/>\n  263                      <field name=\"color\"/>\n  ...\n  383                              <button class=\"oe_inline oe_stat_button\" type=\"action\"\n  384                                  name=\"%(crm.crm_case_categ_phone_incoming0)d\" icon=\"fa-phone\"\n  385:                                 context=\"{'default_opportunity_id': active_id, 'search_default_opportunity_id': active_id, 'default_partner_id': partner_id, 'default_duration': 1.0}\">\n  386                                  <div>Schedule/Log<br/>Calls</div>\n  387                              </button>\n  ...\n  408                                      on_change=\"on_change_partner_id(partner_id)\"\n  409                                      string=\"Customer\"\n  410:                                     context=\"{'default_name': partner_name, 'default_email': email_from, 'default_phone': phone}\"/>\n  411                                  <field name=\"email_from\" string=\"Email\" widget=\"email\"/>\n  412                                  <field name=\"phone\"/>\n  ...\n  424  \n  425                              <group>\n  426:                                 <field name=\"user_id\" on_change=\"on_change_user(user_id, context)\" context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'base.group_sale_salesman_all_leads']}\"/>\n  427                                  <label for=\"section_id\" groups=\"base.group_multi_salesteams\"/>\n  428                                  <div groups=\"base.group_multi_salesteams\">\n  ...\n  591                  id=\"crm.action_lead_mass_mail\"\n  592                  context=\"{\n  593:                             'default_composition_mode': 'mass_mail',\n  594:                             'default_email_to':'{($object.email or \\'\\')|safe}',\n  595:                             'default_use_template': True,\n  596:                             'default_template_id': ref('crm.email_template_opportunity_mail'),\n  597                          }\"\n  598                  groups=\"base.group_sale_salesman\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\crm_phonecall.py:\n   23  from datetime import datetime\n   24  from openerp.osv import fields, osv\n   25: from openerp.tools import DEFAULT_SERVER_DATETIME_FORMAT\n   26  from openerp.tools.translate import _\n   27  \n   ..\n   69      }\n   70  \n   71:     def _get_default_state(self, cr, uid, context=None):\n   72:         if context and context.get('default_state'):\n   73:             return context.get('default_state')\n   74          return 'open'\n   75  \n   76:     _defaults = {\n   77          'date': fields.datetime.now,\n   78          'priority': '1',\n   79:         'state':  _get_default_state,\n   80          'user_id': lambda self, cr, uid, ctx: uid,\n   81          'active': 1\n   ..\n  106          for phonecall in self.browse(cr, uid, ids, context=context):\n  107              if phonecall.duration <= 0:\n  108:                 duration = datetime.now() - datetime.strptime(phonecall.date, DEFAULT_SERVER_DATETIME_FORMAT)\n  109                  values = {'duration': duration.seconds/float(60)}\n  110                  self.write(cr, uid, [phonecall.id], values, context=context)\n  ...\n  232          opportunity = self.pool.get('crm.lead')\n  233          opportunity_dict = {}\n  234:         default_contact = False\n  235          for call in self.browse(cr, uid, ids, context=context):\n  236              if not partner_id:\n  237                  partner_id = call.partner_id and call.partner_id.id or False\n  238              if partner_id:\n  239:                 address_id = partner.address_get(cr, uid, [partner_id])['default']\n  240                  if address_id:\n  241:                     default_contact = partner.browse(cr, uid, address_id, context=context)\n  242              opportunity_id = opportunity.create(cr, uid, {\n  243                              'name': opportunity_summary or call.name,\n  ...\n  245                              'probability': probability,\n  246                              'partner_id': partner_id or False,\n  247:                             'mobile': default_contact and default_contact.mobile,\n  248                              'section_id': call.section_id and call.section_id.id or False,\n  249                              'description': call.description or False,\n  ...\n  251                              'type': 'opportunity',\n  252                              'phone': call.partner_phone or False,\n  253:                             'email_from': default_contact and default_contact.email,\n  254                          })\n  255              vals = {\n  ...\n  273          res = self.pool.get('ir.actions.act_window').for_xml_id(cr, uid, 'calendar', 'action_calendar_event', context)\n  274          res['context'] = {\n  275:             'default_phonecall_id': phonecall.id,\n  276:             'default_partner_ids': partner_ids,\n  277:             'default_user_id': uid,\n  278:             'default_email_from': phonecall.email_from,\n  279:             'default_name': phonecall.name,\n  280          }\n  281          return res\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\crm_phonecall_menu.xml:\n   11              src_model=\"crm.phonecall\"\n   12              view_mode=\"tree,form,calendar\"\n   13:             context=\"{'default_duration': 4.0, 'default_phonecall_id': active_id}\"\n   14              domain=\"[('phonecall_id', '=', active_id)]\"\n   15              view_type=\"form\"/-->\n   ..\n   23          <field name=\"view_mode\">tree,calendar</field>\n   24          <field name=\"view_id\" ref=\"crm_case_phone_tree_view\"/>\n   25:         <field name=\"context\">{\"search_default_user_id\":uid}</field>\n   26          <field name=\"search_view_id\" ref=\"crm.view_crm_case_phonecalls_filter\"/>\n   27      </record>\n   ..\n   59          <field name=\"view_id\" ref=\"crm_case_inbound_phone_tree_view\"/>\n   60          <field name=\"domain\">[]</field>\n   61:         <field name=\"context\">{'search_default_state': 'done', 'default_state': 'done'}</field>\n   62          <field name=\"search_view_id\" ref=\"crm.view_crm_case_phonecalls_filter\"/>\n   63          <field name=\"help\" type=\"html\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\crm_phonecall_view.xml:\n   93                      <group col=\"4\">\n   94                          <field name=\"date\"/>\n   95:                         <field name=\"user_id\" context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'base.group_sale_salesman_all_leads']}\"/>\n   96                          <label for=\"duration\"/>\n   97                          <div>\n   ..\n  129                  <field name=\"partner_phone\"\n  130                      invisible=\"1\"/>\n  131:                 <field name=\"user_id\" context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'base.group_sale_salesman_all_leads']}\"/>\n  132                  <field name=\"categ_id\" widget=\"selection\"\n  133                      domain=\"[('object_id.model', '=', 'crm.phonecall')]\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\crm_segmentation.py:\n   45          'sales_purchase_active': fields.boolean('Use The Sales Purchase Rules', help='Check if you want to use this tab as part of the segmentation rule. If not checked, the criteria beneath will be ignored')\n   46      }\n   47:     _defaults = {\n   48          'partner_id': lambda *a: 0,\n   49          'state': lambda *a: 'not running',\n   ..\n  126                          ('or','Optional Expression')],'Mandatory / Optional', required=True),\n  127      }\n  128:     _defaults = {\n  129          'expr_name': lambda *a: 'sale',\n  130          'expr_operator': lambda *a: '>',\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\crm_view.xml:\n  141                              <field name=\"fold\"/>\n  142                              <field name=\"on_change\"/>\n  143:                             <field name=\"case_default\" groups=\"base.group_multi_salesteams\"/>\n  144                          </group>\n  145  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\report\\crm_opportunity_report_view.xml:\n  106               <field name=\"view_type\">form</field>\n  107               <field name=\"view_mode\">graph</field>\n  108:              <field name=\"context\">{'search_default_opportunity': 1}</field>\n  109               <field name=\"help\">Opportunities Analysis gives you an instant access to your opportunities with information such as the expected revenue, planned cost, missed deadlines or the number of interactions per opportunity. This report is mainly used by the sales manager in order to do the periodic review with the teams of the sales pipeline.</field>\n  110           </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\report\\report_businessopp.py:\n   79  \n   80              tuple_benefit = (proba * 100,  benefit)\n   81:             responsible_data.setdefault(userid, [])\n   82              responsible_data[userid].append(tuple_benefit)\n   83  \n   ..\n  111          can = canvas.init(fname = pdf_string, format = 'pdf')\n  112  \n  113:         chart_object.set_defaults(line_plot.T, line_style=None)\n  114  \n  115          xaxis = axis.X(label=None, format=\"%d%%\", tic_interval=20)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\res_config.py:\n   38              help='Allows you to communicate with Customer, process Customer query, and provide better help and support.\\n'\n   39                   '-This installs the module crm_helpdesk.'),\n   40:         'alias_prefix': fields.char('Default Alias Name for Leads'),\n   41          'alias_domain' : fields.char('Alias Domain'),\n   42          'group_scheduled_calls': fields.boolean(\"Schedule calls to manage call center\",\n   ..\n   45      }\n   46  \n   47:     _defaults = {\n   48          'alias_domain': lambda self, cr, uid, context: self.pool['mail.alias']._get_alias_domain(cr, SUPERUSER_ID, [1], None, None)[1],\n   49      }\n   50  \n   51:     def _find_default_lead_alias_id(self, cr, uid, context=None):\n   52          alias_id = self.pool['ir.model.data'].xmlid_to_res_id(cr, uid, 'crm.mail_alias_lead_info')\n   53          if not alias_id:\n   ..\n   58                      ('alias_parent_model_id.model', '=', 'crm.case.section'),\n   59                      ('alias_parent_thread_id', '=', False),\n   60:                     ('alias_defaults', '=', '{}')\n   61                  ], context=context)\n   62              alias_id = alias_ids and alias_ids[0] or False\n   63          return alias_id\n   64  \n   65:     def get_default_alias_prefix(self, cr, uid, ids, context=None):\n   66          alias_name = False\n   67:         alias_id = self._find_default_lead_alias_id(cr, uid, context=context)\n   68          if alias_id:\n   69              alias_name = self.pool['mail.alias'].browse(cr, uid, alias_id, context=context).alias_name\n   70          return {'alias_prefix': alias_name}\n   71  \n   72:     def set_default_alias_prefix(self, cr, uid, ids, context=None):\n   73          mail_alias = self.pool['mail.alias']\n   74          for record in self.browse(cr, uid, ids, context=context):\n   75:             alias_id = self._find_default_lead_alias_id(cr, uid, context=context)\n   76              if not alias_id:\n   77                  create_ctx = dict(context, alias_model_name='crm.lead', alias_parent_model_name='crm.case.section')\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\res_config_view.xml:\n   35  	            </div>\n   36                  <xpath expr=\"//p[@name='config_email_integration']\" position=\"after\">\n   37:                     <group name=\"default_alias\">\n   38                          <label for=\"id\" string=\"Leads Email Alias\"/>\n   39                          <div attrs=\"{'invisible': [('alias_domain', '=', False)]}\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\res_partner.py:\n   94          res = self.pool.get('ir.actions.act_window').for_xml_id(cr, uid, 'calendar', 'action_calendar_event', context)\n   95          res['context'] = {\n   96:             'search_default_partner_ids': list(ids),\n   97:             'default_partner_ids': partner_ids,\n   98          }\n   99          return res\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\res_partner_view.xml:\n    9              <field name=\"res_model\">calendar.event</field>\n   10              <field name=\"view_mode\">calendar,tree,form,gantt</field>\n   11:             <field name=\"context\">{'default_partner_ids': [active_id]}</field>\n   12          </record>\n   13  \n   ..\n   19              <field name=\"domain\">[('type','=','opportunity')]</field>\n   20              <field name=\"context\">{\n   21:                 'search_default_partner_id': active_id,\n   22                  'stage_type': 'opportunity', \n   23:                 'default_type': 'opportunity'\n   24              }</field>\n   25              <field name=\"view_id\" eval=\"False\"/>\n   ..\n   95                              name=\"%(crm.crm_case_category_act_oppor11)d\"\n   96                              icon=\"fa-star\"\n   97:                             context=\"{'search_default_partner_id': active_id}\">\n   98                              <field string=\"Opportunities\" name=\"opportunity_count\" widget=\"statinfo\"/>\n   99                          </button>\n  ...\n  107                              name=\"%(crm.crm_case_categ_phone_incoming0)d\" \n  108                              icon=\"fa-phone\"\n  109:                             context=\"{'search_default_partner_id': active_id, 'default_duration': 1.0}\">\n  110                              <field string=\"Calls\" name=\"phonecall_count\" widget=\"statinfo\"/>\n  111                          </button>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\sales_team.py:\n   24          date_begin = month_begin - relativedelta.relativedelta(months=self._period_number - 1)\n   25          date_end = month_begin.replace(day=calendar.monthrange(month_begin.year, month_begin.month)[1])\n   26:         lead_pre_domain = [('create_date', '>=', date_begin.strftime(tools.DEFAULT_SERVER_DATE_FORMAT)),\n   27:                 ('create_date', '<=', date_end.strftime(tools.DEFAULT_SERVER_DATE_FORMAT)),\n   28                                ('type', '=', 'lead')]\n   29:         opp_pre_domain = [('date_deadline', '>=', date_begin.strftime(tools.DEFAULT_SERVER_DATETIME_FORMAT)),\n   30:                       ('date_deadline', '<=', date_end.strftime(tools.DEFAULT_SERVER_DATETIME_FORMAT)),\n   31                        ('type', '=', 'opportunity')]\n   32          for id in ids:\n   ..\n   56          \"\"\"Installation hook to create aliases for all lead and avoid constraint errors.\"\"\"\n   57          return self.pool.get('mail.alias').migrate_to_alias(cr, self._name, self._table, super(crm_case_section, self)._auto_init,\n   58:             'crm.lead', self._columns['alias_id'], 'name', alias_prefix='Lead+', alias_defaults={}, context=context)\n   59  \n   60      def _get_stage_common(self, cr, uid, context):\n   61:         ids = self.pool.get('crm.case.stage').search(cr, uid, [('case_default', '=', 1)], context=context)\n   62          return ids\n   63  \n   64:     _defaults = {\n   65          'stage_ids': _get_stage_common,\n   66          'use_leads': True,\n   ..\n   74          section_id = super(crm_case_section, self).create(cr, uid, vals, context=create_context)\n   75          section = self.browse(cr, uid, section_id, context=context)\n   76:         self.pool.get('mail.alias').write(cr, uid, [section.alias_id.id], {'alias_parent_thread_id': section_id, 'alias_defaults': {'section_id': section_id, 'type': 'lead'}}, context=context)\n   77          return section_id\n   78  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\sales_team_view.xml:\n   13              <field name=\"search_view_id\" ref=\"crm.view_crm_case_leads_filter\"/>\n   14              <field name=\"context\">{\n   15:                     'search_default_section_id': [active_id],\n   16:                     'default_section_id': active_id,\n   17:                     'default_type': 'lead',\n   18                      'stage_type': 'lead',\n   19                  }\n   ..\n   42              <field name=\"search_view_id\" ref=\"crm.view_crm_case_opportunities_filter\"/>\n   43              <field name=\"context\">{\n   44:                     'search_default_section_id': [active_id],\n   45:                     'default_section_id': active_id,\n   46                      'stage_type': 'opportunity',\n   47:                     'default_type': 'opportunity',\n   48:                     'default_user_id': uid,\n   49                  }\n   50              </field>\n   ..\n   64             <field name=\"name\">Leads Analysis</field>\n   65             <field name=\"res_model\">crm.lead.report</field>\n   66:            <field name=\"context\">{\"search_default_month\":1}</field>\n   67             <field name=\"view_mode\">graph</field>\n   68             <field name=\"view_id\" ref=\"crm.view_report_crm_lead_graph_two\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\wizard\\crm_lead_to_opportunity.py:\n   48          return self.pool.get('crm.lead')._get_duplicated_leads_by_emails(cr, uid, partner_id, email, include_lost=include_lost, context=context)\n   49  \n   50:     def default_get(self, cr, uid, fields, context=None):\n   51          \"\"\"\n   52:         Default get for name, opportunity_ids.\n   53          If there is an exisitng partner link to the lead, find all existing\n   54          opportunities links with this partner to merge all information together\n   ..\n   56          lead_obj = self.pool.get('crm.lead')\n   57  \n   58:         res = super(crm_lead2opportunity_partner, self).default_get(cr, uid, fields, context=context)\n   59          if context.get('active_id'):\n   60              tomerge = [int(context['active_id'])]\n   ..\n  198      }\n  199  \n  200:     _defaults = {\n  201          'deduplicate': True,\n  202      }\n  203  \n  204:     def default_get(self, cr, uid, fields, context=None):\n  205:         res = super(crm_lead2opportunity_mass_convert, self).default_get(cr, uid, fields, context)\n  206          if 'partner_id' in fields:\n  207:             # avoid forcing the partner of the first lead as default\n  208              res['partner_id'] = False\n  209          if 'action' in fields:\n  ...\n  230              duplicated_leads = self._get_duplicated_leads(cr, uid, partner_id, email)\n  231              if len(duplicated_leads) > 1:\n  232:                 partners_duplicated_leads.setdefault((partner_id, email), []).extend(duplicated_leads)\n  233          leads_with_duplicates = []\n  234          for lead in active_leads:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\wizard\\crm_merge_opportunities.py:\n   59              return lead_obj.redirect_lead_view(cr, uid, merge_id, context=context)\n   60  \n   61:     def default_get(self, cr, uid, fields, context=None):\n   62          \"\"\"\n   63          Use active_ids from the context to fetch the leads/opps to merge.\n   ..\n   67              context = {}\n   68          record_ids = context.get('active_ids', False)\n   69:         res = super(crm_merge_opportunity, self).default_get(cr, uid, fields, context=context)\n   70  \n   71          if record_ids:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\wizard\\crm_partner_binding.py:\n   86          return partner_id\n   87  \n   88:     def default_get(self, cr, uid, fields, context=None):\n   89:         res = super(crm_partner_binding, self).default_get(cr, uid, fields, context=context)\n   90          partner_id = self._find_matching_partner(cr, uid, context=context)\n   91  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\wizard\\crm_phonecall_to_meeting.py:\n   51              res = self.pool.get('ir.actions.act_window').for_xml_id(cr, uid, 'calendar', 'action_calendar_event', context)\n   52              res['context'] = {\n   53:                 'default_phonecall_id': phonecall.id,\n   54:                 'default_partner_id': phonecall.partner_id and phonecall.partner_id.id or False,\n   55:                 'default_user_id': uid,\n   56:                 'default_email_from': phonecall.email_from,\n   57:                 'default_state': 'open',\n   58:                 'default_name': phonecall.name,\n   59              }\n   60          return res\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\wizard\\crm_phonecall_to_phonecall.py:\n   66          return phonecall.redirect_phonecall_view(cr, uid, phocall_ids[phonecall_ids[0]], context=context)\n   67      \n   68:     def default_get(self, cr, uid, fields, context=None):\n   69          \"\"\"\n   70:         This function gets default values\n   71          \n   72          \"\"\"\n   73:         res = super(crm_phonecall2phonecall, self).default_get(cr, uid, fields, context=context)\n   74          record_id = context and context.get('active_id', False) or False\n   75          res.update({'action': 'schedule', 'date': time.strftime('%Y-%m-%d %H:%M:%S')})\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\wizard\\crm_phonecall_to_phonecall_view.xml:\n   15                          <field name=\"date\" string=\"Planned Date\" attrs=\"{'invisible': [('action','=','log')]}\"/>\n   16                          <field name=\"partner_id\" readonly=\"True\"/>\n   17:                         <field name=\"user_id\" context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'base.group_sale_salesman_all_leads']}\"/>\n   18                          <field name=\"section_id\" groups=\"base.group_multi_salesteams\"/>\n   19                      </group>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm_claim\\crm_claim.py:\n   44          'section_ids':fields.many2many('crm.case.section', 'section_claim_stage_rel', 'stage_id', 'section_id', string='Sections',\n   45                          help=\"Link between stages and sales teams. When set, this limitate the current stage to the selected sales teams.\"),\n   46:         'case_default': fields.boolean('Common to All Teams',\n   47:                         help=\"If you check this field, this stage will be proposed by default on each sales team. It will not assign this stage to existing teams.\"),\n   48      }\n   49  \n   50:     _defaults = {\n   51          'sequence': lambda *args: 1,\n   52      }\n   ..\n   60      _inherit = ['mail.thread']\n   61  \n   62:     def _get_default_section_id(self, cr, uid, context=None):\n   63:         \"\"\" Gives default section by checking if present in the context \"\"\"\n   64          return self.pool.get('crm.lead')._resolve_section_id_from_context(cr, uid, context=context) or False\n   65  \n   66:     def _get_default_stage_id(self, cr, uid, context=None):\n   67:         \"\"\" Gives default stage_id \"\"\"\n   68:         section_id = self._get_default_section_id(cr, uid, context=context)\n   69          return self.stage_find(cr, uid, [], section_id, [('sequence', '=', '1')], context=context)\n   70  \n   ..\n  100          'partner_phone': fields.char('Phone'),\n  101          'stage_id': fields.many2one ('crm.claim.stage', 'Stage', track_visibility='onchange',\n  102:                 domain=\"['|', ('section_ids', '=', section_id), ('case_default', '=', True)]\"),\n  103          'cause': fields.text('Root Cause'),\n  104      }\n  105  \n  106:     _defaults = {\n  107          'user_id': lambda s, cr, uid, c: uid,\n  108:         'section_id': lambda s, cr, uid, c: s._get_default_section_id(cr, uid, c),\n  109          'date': fields.datetime.now,\n  110:         'company_id': lambda s, cr, uid, c: s.pool.get('res.company')._company_default_get(cr, uid, 'crm.case', context=c),\n  111          'priority': '1',\n  112          'active': lambda *a: 1,\n  113:         'stage_id': lambda s, cr, uid, c: s._get_default_stage_id(cr, uid, c)\n  114      }\n  115  \n  ...\n  118              Parameter of the stage search taken from the lead:\n  119              - section_id: if set, stages must belong to this section or\n  120:               be a default case\n  121          \"\"\"\n  122          if isinstance(cases, (int, long)):\n  ...\n  129              if claim.section_id:\n  130                  section_ids.append(claim.section_id.id)\n  131:         # OR all section_ids and OR with case_default\n  132          search_domain = []\n  133          if section_ids:\n  ...\n  135              for section_id in section_ids:\n  136                  search_domain.append(('section_ids', '=', section_id))\n  137:         search_domain.append(('case_default', '=', True))\n  138          # AND with the domain in parameter\n  139          search_domain += list(domain)\n  ...\n  155      def create(self, cr, uid, vals, context=None):\n  156          context = dict(context or {})\n  157:         if vals.get('section_id') and not context.get('default_section_id'):\n  158:             context['default_section_id'] = vals.get('section_id')\n  159  \n  160          # context: no_log, because subtype already handle this\n  161          return super(crm_claim, self).create(cr, uid, vals, context=context)\n  162  \n  163:     def copy(self, cr, uid, id, default=None, context=None):\n  164          claim = self.browse(cr, uid, id, context=context)\n  165:         default = dict(default or {},\n  166:             stage_id = self._get_default_stage_id(cr, uid, context=context),\n  167              name = _('%s (copy)') % claim.name)\n  168:         return super(crm_claim, self).copy(cr, uid, id, default, context=context)\n  169  \n  170      # -------------------------------------------------------\n  ...\n  180              custom_values = {}\n  181          desc = html2plaintext(msg.get('body')) if msg.get('body') else ''\n  182:         defaults = {\n  183              'name': msg.get('subject') or _(\"No Subject\"),\n  184              'description': desc,\n  ...\n  188          }\n  189          if msg.get('priority'):\n  190:             defaults['priority'] = msg.get('priority')\n  191:         defaults.update(custom_values)\n  192:         return super(crm_claim, self).message_new(cr, uid, msg, custom_values=defaults, context=context)\n  193  \n  194  class res_partner(osv.osv):\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm_claim\\crm_claim_data.xml:\n   46              <field name=\"name\">New</field>\n   47              <field name=\"sequence\">1</field>\n   48:             <field name=\"case_default\" eval=\"True\"/>\n   49          </record>\n   50          <record model=\"crm.claim.stage\" id=\"stage_claim5\">\n   51              <field name=\"name\">In Progress</field>\n   52              <field name=\"sequence\">27</field>\n   53:             <field name=\"case_default\" eval=\"True\"/>\n   54          </record>\n   55          <record model=\"crm.claim.stage\" id=\"stage_claim2\">\n   56              <field name=\"name\">Settled</field>\n   57              <field name=\"sequence\">28</field>\n   58:             <field name=\"case_default\" eval=\"True\"/>\n   59          </record>\n   60          <record model=\"crm.claim.stage\" id=\"stage_claim3\">\n   61              <field name=\"name\">Rejected</field>\n   62              <field name=\"sequence\">29</field>\n   63:             <field name=\"case_default\" eval=\"True\"/>\n   64          </record>\n   65          \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm_claim\\crm_claim_menu.xml:\n   14              <field name=\"view_mode\">tree,calendar,form</field>\n   15              <field name=\"view_id\" ref=\"crm_case_claims_tree_view\"/>\n   16:             <field name=\"context\">{\"search_default_user_id\":uid, \"stage_type\":'claim'}</field>\n   17              <field name=\"search_view_id\" ref=\"crm_claim.view_crm_case_claims_filter\"/>\n   18              <field name=\"help\" type=\"html\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm_claim\\crm_claim_view.xml:\n   50                      <group col=\"4\">\n   51                          <field name=\"name\"/>\n   52:                         <field name=\"case_default\"/>\n   53                          <field name=\"sequence\"/>\n   54                      </group>\n   ..\n  108                      </group>\n  109                      <group colspan=\"4\" col=\"4\"  groups=\"base.group_user\">\n  110:                         <field name=\"user_id\" context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'base.group_sale_salesman_all_leads']}\"/>\n  111                          <field name=\"priority\" widget=\"priority\"/>\n  112                          <field name=\"section_id\" groups=\"base.group_multi_salesteams\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm_claim\\report\\crm_claim_report_view.xml:\n   72              <field name=\"view_type\">form</field>\n   73              <field name=\"view_mode\">graph</field>\n   74:             <field name=\"context\">{\"search_default_year\":1,\"search_default_User\":1,\"search_default_This Month\":1,'group_by_no_leaf':1,'group_by':[]}</field>\n   75              <field name=\"view_id\" ref=\"view_report_crm_claim_graph\"/>\n   76              <field name=\"search_view_id\" ref=\"view_report_crm_claim_filter\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm_claim\\res_partner_view.xml:\n   11                  <xpath expr=\"//div[@name='buttons']\" position=\"inside\">\n   12                      <button class=\"oe_inline oe_stat_button\" type=\"action\" \n   13:                         context=\"{'search_default_partner_id': active_id, 'default_partner_id': active_id}\"\n   14                          name=\"%(crm_case_categ_claim0)d\" icon=\"fa-comments\" groups=\"base.group_sale_salesman\">\n   15                          <field string=\"Claims\" name=\"claim_count\" widget=\"statinfo\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm_helpdesk\\crm_helpdesk.py:\n   78      }\n   79  \n   80:     _defaults = {\n   81          'active': lambda *a: 1,\n   82          'user_id': lambda s, cr, uid, c: uid,\n   83          'state': lambda *a: 'draft',\n   84          'date': fields.datetime.now,\n   85:         'company_id': lambda s, cr, uid, c: s.pool.get('res.company')._company_default_get(cr, uid, 'crm.helpdesk', context=c),\n   86          'priority': '1',\n   87      }\n   ..\n  131              custom_values = {}\n  132          desc = html2plaintext(msg.get('body')) if msg.get('body') else ''\n  133:         defaults = {\n  134              'name': msg.get('subject') or _(\"No Subject\"),\n  135              'description': desc,\n  ...\n  139              'partner_id': msg.get('author_id', False),\n  140          }\n  141:         defaults.update(custom_values)\n  142:         return super(crm_helpdesk, self).message_new(cr, uid, msg, custom_values=defaults, context=context)\n  143  \n  144  # vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm_helpdesk\\crm_helpdesk_menu.xml:\n   17              <field name=\"view_id\" ref=\"crm_case_tree_view_helpdesk\"/>\n   18              <field name=\"search_view_id\" ref=\"view_crm_case_helpdesk_filter\"/>\n   19:             <field name=\"context\">{\"search_default_user_id\":uid}</field>\n   20              <field name=\"help\" type=\"html\">\n   21                <p class=\"oe_view_nocontent_create\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm_helpdesk\\crm_helpdesk_view.xml:\n   39                          <field name=\"name\" string=\"Query\"/>\n   40                          <field name=\"section_id\" widget=\"selection\" groups=\"base.group_multi_salesteams\"/>\n   41:                         <field name=\"user_id\" context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'base.group_sale_salesman_all_leads']}\"/>\n   42                          <field name=\"date\"/>\n   43                          <field name=\"date_deadline\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm_helpdesk\\report\\crm_helpdesk_report_view.xml:\n   64              <field name=\"view_type\">form</field>\n   65              <field name=\"view_mode\">graph</field>\n   66:             <field name=\"context\">{\"search_default_year\":1,\"search_default_User\":1,\"search_default_this_month\":1,'group_by_no_leaf':1,'group_by':[]}</field>\n   67              <field name=\"view_id\" ref=\"view_report_crm_helpdesk_graph\"/>\n   68              <field name=\"search_view_id\" ref=\"view_report_crm_helpdesk_filter\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm_partner_assign\\crm_lead_view.xml:\n   33                                              name=\"%(crm_lead_forward_to_partner_act)d\"\n   34                                              type=\"action\"\n   35:                                             context=\"{'default_composition_mode': 'forward','hide_forward_type': 1 , 'default_partner_ids': [partner_assigned_id]}\"/>\n   36                                      </div>\n   37                                  </group>\n   ..\n  103                                              name=\"%(crm_lead_forward_to_partner_act)d\"\n  104                                              type=\"action\"\n  105:                                             context=\"{'default_composition_mode': 'forward','hide_forward_type': 1 , 'default_partner_ids': [partner_assigned_id]}\"/>\n  106                                      </div>\n  107                                  </group>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm_partner_assign\\crm_partner_assign.py:\n   37              help=\"Gives the probability to assign a lead to this partner. (0 means no assignation.)\"),\n   38      }\n   39:     _defaults = {\n   40          'active': lambda *args: 1,\n   41          'partner_weight':1\n   ..\n   73          ),\n   74      }\n   75:     _defaults = {\n   76          'partner_weight': lambda *args: 0\n   77      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm_partner_assign\\crm_partner_assign_data.xml:\n    4          <record model=\"crm.case.stage\" id=\"stage_portal_lead_assigned\">\n    5              <field name=\"name\">Assigned</field>\n    6:             <field eval=\"1\" name=\"case_default\"/>\n    7              <field eval=\"10\" name=\"probability\"/>\n    8              <field eval=\"12\" name=\"sequence\"/>\n    .\n   11          <record model=\"crm.case.stage\" id=\"stage_portal_lead_recycle\">\n   12              <field name=\"name\">To Recycle</field>\n   13:             <field eval=\"1\" name=\"case_default\"/>\n   14              <field eval=\"5\" name=\"probability\"/>\n   15              <field eval=\"11\" name=\"sequence\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm_partner_assign\\report\\crm_lead_report_view.xml:\n   58              <field name=\"res_model\">crm.lead.report.assign</field>\n   59              <field name=\"view_type\">form</field>\n   60:             <field name=\"context\">{'default_type': 'opportunity', 'group_by_no_leaf':1,'group_by':[]}</field>\n   61              <field name=\"view_mode\">graph</field>\n   62              <field name=\"domain\">[('type', '=', 'opportunity')]</field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm_partner_assign\\wizard\\crm_channel_interested.py:\n   34          'comment': fields.text('Comment', help=\"What are the elements that have led to this decision?\", required=True),\n   35      }\n   36:     _defaults = {\n   37          'interested': lambda self, cr, uid, c: c.get('interested', True),\n   38          'contacted': False,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm_partner_assign\\wizard\\crm_forward_to_partner.py:\n   48                  }\n   49  \n   50:     def default_get(self, cr, uid, fields, context=None):\n   51          if context is None:\n   52              context = {}\n   ..\n   57          except ValueError:\n   58              template_id = False\n   59:         res = super(crm_lead_forward_to_partner, self).default_get(cr, uid, fields, context=context)\n   60          active_ids = context.get('active_ids')\n   61:         default_composition_mode = context.get('default_composition_mode')\n   62          res['assignation_lines'] = []\n   63          if template_id:\n   ..\n   65          if active_ids:\n   66              lead_ids = lead_obj.browse(cr, uid, active_ids, context=context)\n   67:             if default_composition_mode == 'mass_mail':\n   68                  partner_assigned_ids = lead_obj.search_geo_partner(cr, uid, active_ids, context=context)\n   69              else:\n   ..\n  141                  values['stage_id'] = stage_id\n  142              if partner_leads['partner'].user_id:\n  143:                 values['section_id'] = partner_leads['partner'].user_id.default_section_id.id\n  144              lead_obj.write(cr, uid, lead_ids, values)\n  145              self.pool.get('crm.lead').message_subscribe(cr, uid, lead_ids, [partner_id], context=context)\n  ...\n  166      }\n  167  \n  168:     _defaults = {\n  169          'forward_type': lambda self, cr, uid, c: c.get('forward_type') or 'single',\n  170      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm_partner_assign\\wizard\\crm_forward_to_partner_view.xml:\n   52              src_model=\"crm.lead\" view_mode=\"form\" target=\"new\" view_type=\"form\"\n   53              groups=\"base.group_sale_manager\"\n   54:             context=\"{'default_composition_mode' : 'mass_mail'}\" view_id=\"crm_lead_forward_to_partner_form\" />\n   55  \n   56      </data>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm_profiling\\wizard\\open_questionnaire.py:\n   40      }\n   41  \n   42:     def default_get(self, cr, uid, fields, context=None):\n   43          if context is None: context = {}\n   44:         res = super(open_questionnaire, self).default_get(cr, uid, fields, context=context)\n   45          questionnaire_id = context.get('questionnaire_id', False)\n   46          if questionnaire_id and 'question_ans_ids' in fields:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm_project_issue\\project_issue.py:\n   13      }\n   14  \n   15:     _defaults = {\n   16          \"lead_id\": lambda self, cr, uid, context=None: context.get('active_id')\n   17      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\decimal_precision\\decimal_precision.py:\n   32          'digits': fields.integer('Digits', required=True),\n   33      }\n   34:     _defaults = {\n   35          'digits': 2,\n   36      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\delivery\\delivery.py:\n   91      }\n   92  \n   93:     _defaults = {\n   94          'active': 1,\n   95          'free_if_more_than': False,\n   ..\n  160                  line_data = {\n  161                      'grid_id': grid_id and grid_id[0],\n  162:                     'name': _('Default price'),\n  163                      'type': 'price',\n  164                      'operator': '>=',\n  ...\n  197          'active': fields.boolean('Active', help=\"If the active field is set to False, it will allow you to hide the delivery grid without removing it.\"),\n  198      }\n  199:     _defaults = {\n  200          'active': lambda *a: 1,\n  201          'sequence': lambda *a: 1,\n  ...\n  258          'standard_price': fields.float('Cost Price', digits_compute= dp.get_precision('Product Price'), required=True),\n  259      }\n  260:     _defaults = {\n  261          'sequence': lambda *args: 10,\n  262          'type': lambda *args: 'weight',\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\delivery\\delivery_demo.xml:\n   20          <record id=\"product_product_delivery\" model=\"product.product\">\n   21              <field name=\"name\">Delivery by Poste</field>\n   22:             <field name=\"default_code\">Delivery</field>\n   23              <field name=\"type\">service</field>\n   24              <field name=\"categ_id\" ref=\"product.product_category_3\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\delivery\\delivery_view.xml:\n  255              <field name=\"domain\">[('invoice_state','=','2binvoiced'),('state','=','done'),('type','=','out')]</field>\n  256              <field name=\"filter\" eval=\"True\"/>\n  257:             <field name=\"context\">{'default_invoice_state': '2binvoiced', 'default_type': 'out', 'contact_display': 'partner'}</field>\n  258              <field name=\"search_view_id\" eval=\"False\"/>\n  259          </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\delivery\\sale.py:\n   32      }\n   33  \n   34:     _defaults = {\n   35          'is_delivery': False\n   36      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\delivery\\stock.py:\n  130          return invoice_id\n  131  \n  132:     def _get_default_uom(self, cr, uid, context=None):\n  133          uom_categ_id = self.pool.get('ir.model.data').xmlid_to_res_id(cr, uid, 'product.product_uom_categ_kgm')\n  134          return self.pool.get('product.uom').search(cr, uid, [('category_id', '=', uom_categ_id), ('factor', '=', 1)])[0]\n  135  \n  136:     _defaults = {\n  137:         'weight_uom_id': lambda self, cr, uid, c: self._get_default_uom(cr, uid, c),\n  138      }\n  139  \n  ...\n  190  \n  191  \n  192:     def _get_default_uom(self, cr, uid, context=None):\n  193          uom_categ_id = self.pool.get('ir.model.data').xmlid_to_res_id(cr, uid, 'product.product_uom_categ_kgm')\n  194          return self.pool.get('product.uom').search(cr, uid, [('category_id', '=', uom_categ_id),('factor','=',1)])[0]\n  195  \n  196:     _defaults = {\n  197:         'weight_uom_id': lambda self, cr, uid, c: self._get_default_uom(cr, uid, c),\n  198      }\n  199  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\document\\document.py:\n   54          # Fields of document:\n   55          'user_id': fields.many2one('res.users', 'Owner', select=1),\n   56:         'parent_id': fields.many2one('document.directory', 'Directory', select=1, change_default=True),\n   57          'index_content': fields.text('Indexed Content'),\n   58          'partner_id':fields.many2one('res.partner', 'Partner', select=1),\n   ..\n   61      _order = \"id desc\"\n   62  \n   63:     _defaults = {\n   64          'user_id': lambda self, cr, uid, ctx:uid,\n   65      }\n   ..\n   97          parents = {}\n   98          for attach_id, attach_parent in cr.fetchall():\n   99:             parents.setdefault(attach_parent, []).append(attach_id)\n  100          parent_ids = parents.keys()\n  101  \n  ...\n  110          return len(ids) if count else ids\n  111  \n  112:     def copy(self, cr, uid, id, default=None, context=None):\n  113:         if not default:\n  114:             default = {}\n  115:         if 'name' not in default:\n  116              name = self.read(cr, uid, [id], ['name'])[0]['name']\n  117:             default.update(name=_(\"%s (copy)\") % (name))\n  118:         return super(document_file, self).copy(cr, uid, id, default, context=context)\n  119  \n  120      def create(self, cr, uid, vals, context=None):\n  ...\n  166          'user_id': fields.many2one('res.users', 'Owner'),\n  167          'group_ids': fields.many2many('res.groups', 'document_directory_group_rel', 'item_id', 'group_id', 'Groups'),\n  168:         'parent_id': fields.many2one('document.directory', 'Parent Directory', select=1, change_default=True),\n  169          'child_ids': fields.one2many('document.directory', 'parent_id', 'Children'),\n  170          'file_ids': fields.one2many('ir.attachment', 'parent_id', 'Files'),\n  171          'content_ids': fields.one2many('document.directory.content', 'directory_id', 'Virtual Files'),\n  172          'type': fields.selection([ ('directory','Static Directory'), ('ressource','Folders per resource'), ],\n  173:             'Type', required=True, select=1, change_default=True,\n  174              help=\"Each directory can either have the type Static or be linked to another resource. A static directory, as with Operating Systems, is the classic directory that can contain a set of files. The directories linked to systems resources automatically possess sub-directories for each of resource types defined in the parent directory.\"),\n  175          'domain': fields.char('Domain', help=\"Use a domain if you want to apply an automatic filter on visible resources.\"),\n  176:         'ressource_type_id': fields.many2one('ir.model', 'Resource model', change_default=True,\n  177              help=\"Select an object here and there will be one folder per record of that resource.\"),\n  178          'resource_field': fields.many2one('ir.model.fields', 'Name field', help='Field to be used as name on resource directories. If empty, the \"name\" will be used.'),\n  ...\n  180                  help=\"If true, all attachments that match this resource will \" \\\n  181                      \" be located. If false, only ones that have this as parent.\" ),\n  182:         'ressource_parent_type_id': fields.many2one('ir.model', 'Parent Model', change_default=True,\n  183              help=\"If you put an object here, this directory template will appear bellow all of these objects. \" \\\n  184                   \"Such directories are \\\"attached\\\" to the specific model or record, just like attachments. \" \\\n  ...\n  189              help=\"Check this if you want to use the same tree structure as the object selected in the system.\"),\n  190          'dctx_ids': fields.one2many('document.directory.dctx', 'dir_id', 'Context fields'),\n  191:         'company_id': fields.many2one('res.company', 'Company', change_default=True),\n  192      }\n  193  \n  194:     _defaults = {\n  195:         'company_id': lambda s,cr,uid,c: s.pool.get('res.company')._company_default_get(cr, uid, 'document.directory', context=c),\n  196          'user_id': lambda self,cr,uid,ctx: uid,\n  197          'domain': '[]',\n  ...\n  301          return (node_database(context=ncontext), uri)\n  302  \n  303:     def copy(self, cr, uid, id, default=None, context=None):\n  304:         if not default:\n  305:             default ={}\n  306          name = self.read(cr, uid, [id])[0]['name']\n  307:         default.update(name=_(\"%s (copy)\") % (name))\n  308:         return super(document_directory,self).copy(cr, uid, id, default, context=context)\n  309  \n  310      def _check_duplication(self, cr, uid, vals, ids=None, op='create'):\n  ...\n  375          'mimetype': fields.char('Mime Type')\n  376      }\n  377:     _defaults = {\n  378          'active': lambda *args: 1\n  379      }\n  ...\n  401          'directory_id': fields.many2one('document.directory', 'Directory'),\n  402      }\n  403:     _defaults = {\n  404          'extension': lambda *args: '.pdf',\n  405          'sequence': lambda *args: 1,\n  ...\n  641          return not self.__eq__(other)\n  642  \n  643:     def get(self, name, default=None):\n  644:         return self.context.get(name, default)\n  645  \n  646      def get_uri(self, cr, uri):\n  ...\n  966          return 'db-%s' % cr.dbname\n  967  \n  968: def mkdosname(company_name, default='noname'):\n  969      \"\"\" convert a string to a dos-like name\"\"\"\n  970      if not company_name:\n  971:         return default\n  972      badchars = ' !@#$%^`~*()+={}[];:\\'\"/?.<>'\n  973      n = ''\n  ...\n 1010          except Exception:\n 1011              self.uuser = 'nobody'\n 1012:         self.ugroup = mkdosname(dirr.company_id and dirr.company_id.name, default='nogroup')\n 1013          self.uidperms = dirr.get_dir_permissions()\n 1014          self.unixperms = 040000 | _uid2unixperms(self.uidperms, dirr and dirr.user_id)\n ....\n 1093          # because static dirs are /never/ related to a record.\n 1094          # In fact, files related to some model and parented by the root dir\n 1095:         # (the default), will NOT be accessible in the node system unless\n 1096          # a resource folder for that model exists (with resource_find_all=True).\n 1097          # Having resource attachments in a common folder is bad practice,\n ....\n 1248          except Exception:\n 1249              self.uuser = 'nobody'\n 1250:         self.ugroup = mkdosname(dirr.company_id and dirr.company_id.name, default='nogroup')\n 1251          self.uidperms = dirr.get_dir_permissions()\n 1252          self.unixperms = 040000 | _uid2unixperms(self.uidperms, dirr and dirr.user_id)\n ....\n 1669          except Exception:\n 1670              self.uuser = 'nobody'\n 1671:         self.ugroup = mkdosname(fil.company_id and fil.company_id.name, default='nogroup')\n 1672  \n 1673      def __eq__(self, other):\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\document\\document_view.xml:\n   12                      <field name=\"name\"/>\n   13                      <field name=\"parent_id\"/>\n   14:                     <field name=\"user_id\" context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'base.group_document_user']}\"/>\n   15                      <field name=\"company_id\" groups=\"base.group_multi_company\" widget=\"selection\"/>\n   16                  </group>\n   ..\n  171              </xpath>\n  172              <field name=\"url\" position=\"after\">\n  173:                 <field name=\"user_id\" context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'base.group_document_user']}\"/>\n  174              </field>\n  175              <field name=\"company_id\" position=\"before\">\n  ...\n  273  \n  274      <act_window domain=\"[('partner_id', '=', active_id)]\"\n  275:         context=\"{'default_partner_id': active_id}\"\n  276          id=\"act_res_partner_document\" name=\"Related Documents\"\n  277          res_model=\"ir.attachment\"\n  ...\n  280      <act_window\n  281          domain=\"[('parent_id', '=', active_id)]\"\n  282:         context=\"{'default_parent_id': active_id}\"\n  283          id=\"zoom_directory\" name=\"Related Documents\"\n  284          res_model=\"ir.attachment\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\document\\test_cindex.py:\n   13  parser = OptionParser()\n   14  parser.add_option(\"-q\", \"--quiet\",\n   15:                   action=\"store_false\", dest=\"verbose\", default=True,\n   16                    help=\"don't print status messages to stdout\")\n   17  \n   18  parser.add_option(\"-C\", \"--content\",\n   19:                   action=\"store_true\", dest=\"docontent\", default=False,\n   20                    help=\"Disect content, rather than the file.\")\n   21  \n   22  parser.add_option(\"--delay\",\n   23:                   action=\"store_true\", dest=\"delay\", default=False,\n   24                    help=\"delay after the operation, to inspect child processes\")\n   25  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\edi\\models\\edi.py:\n  409      def _edi_generate_report_attachment(self, cr, uid, record, context=None):\n  410          \"\"\"Utility method to generate the first PDF-type report declared for the\n  411:            current model with ``usage`` attribute set to ``default``.\n  412             This must be called explicitly by models that need it, usually\n  413             at the beginning of ``edi_export``, before the call to ``super()``.\"\"\"\n  ...\n  415          matching_reports = ir_actions_report.search(cr, uid, [('model','=',self._name),\n  416                                                                ('report_type','=','pdf'),\n  417:                                                               ('usage','=','default')])\n  418          if matching_reports:\n  419              report = ir_actions_report.browse(cr, uid, matching_reports[0])\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\edi\\models\\res_company.py:\n   31          \"\"\"Returns a dict representation of the address of the company record, suitable for\n   32             inclusion in an EDI document, and matching the given edi_address_struct if provided.\n   33:            The first found address is returned, in order of preference: invoice, contact, default.\n   34  \n   35             :param browse_record company: company to export\n   ..\n   38          \"\"\"\n   39          res_partner = self.pool.get('res.partner')\n   40:         addresses = res_partner.address_get(cr, uid, [company.partner_id.id], ['default', 'contact', 'invoice'])\n   41:         addr_id = addresses['invoice'] or addresses['contact'] or addresses['default']\n   42          result = {}\n   43          if addr_id:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\edi\\models\\res_partner.py:\n   52  \n   53      def _get_bank_type(self, cr, uid, context=None):\n   54:         # first option: the \"normal\" bank type, installed by default\n   55          res_partner_bank_type = self.pool.get('res.partner.bank.type')\n   56          try:\n   ..\n   77              contact = self.browse(cr, uid, contact_id, context=context)\n   78              import_ctx = dict((context or {}),\n   79:                               default_partner_id = contact.id,\n   80:                               default_state=self._get_bank_type(cr, uid, context))\n   81              for ext_bank_id, bank_name in edi_bank_ids:\n   82                  try:\n   ..\n   84                                               bank_name, ext_bank_id, context=import_ctx)\n   85                  except osv.except_osv:\n   86:                     # failed to import it, try again with unrestricted default type\n   87                      _logger.warning('Failed to import bank account using'\n   88:                                                                  'bank type: %s, ignoring', import_ctx['default_state'],\n   89                                                                   exc_info=True)\n   90          return contact_id\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\email_template\\__openerp__.py:\n   39  For advanced use, the templates may include dynamic attributes of the document\n   40  they are related to. For example, you may use the name of a Partner's country\n   41: when writing to them, also providing a safe default in case the attribute is\n   42  not defined. Each template contains a built-in assistant to help with the\n   43  inclusion of these dynamic values.\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\email_template\\email_template.py:\n   42      if tz:\n   43          context['tz'] = tz or pool.get('res.users').read(cr, SUPERUSER_ID, uid, ['tz'])['tz'] or \"UTC\"\n   44:     timestamp = datetime.datetime.strptime(dt, tools.DEFAULT_SERVER_DATETIME_FORMAT)\n   45  \n   46      ts = fields.datetime.context_timestamp(cr, uid, timestamp, context)\n   ..\n  114      _order = 'name'\n  115  \n  116:     def default_get(self, cr, uid, fields, context=None):\n  117:         res = super(email_template, self).default_get(cr, uid, fields, context)\n  118          if res.get('model'):\n  119              res['model_id'] = self.pool['ir.model'].search(cr, uid, [('model', '=', res.pop('model'))], context=context)[0]\n  ...\n  257          'subject': fields.char('Subject', translate=True, help=\"Subject (placeholders may be used here)\",),\n  258          'email_from': fields.char('From',\n  259:             help=\"Sender address (placeholders may be used here). If not set, the default \"\n  260                      \"value will be the author's email alias if configured, or email address.\"),\n  261:         'use_default_to': fields.boolean(\n  262:             'Default recipients',\n  263:             help=\"Default recipients of the record:\\n\"\n  264                   \"- partner (using id on a partner or the partner_id field) OR\\n\"\n  265                   \"- email (using email_from or email field)\"),\n  ...\n  301                                                         \"this field lets you select the target field within the \"\n  302                                                         \"destination document model (sub-model).\"),\n  303:         'null_value': fields.char('Default Value', help=\"Optional value to use if the target field is empty\"),\n  304          'copyvalue': fields.char('Placeholder Expression', help=\"Final placeholder expression, to be copy-pasted in the desired template field.\"),\n  305      }\n  306  \n  307:     _defaults = {\n  308          'auto_delete': True,\n  309      }\n  ...\n  323                   'src_model': src_obj,\n  324                   'view_type': 'form',\n  325:                  'context': \"{'default_composition_mode': 'mass_mail', 'default_template_id' : %d, 'default_use_template': True}\" % (template.id),\n  326                   'view_mode':'form,tree',\n  327                   'view_id': res_id,\n  ...\n  360          return super(email_template, self).unlink(cr, uid, ids, context=context)\n  361  \n  362:     def copy(self, cr, uid, id, default=None, context=None):\n  363          template = self.browse(cr, uid, id, context=context)\n  364:         default = dict(default or {},\n  365                         name=_(\"%s (copy)\") % template.name)\n  366:         return super(email_template, self).copy(cr, uid, id, default, context)\n  367  \n  368      def build_expression(self, field_name, sub_field_name, null_value):\n  ...\n  372            :param field_name: main field name\n  373            :param sub_field_name: sub field name (M2O)\n  374:           :param null_value: default value if the target value is empty\n  375            :return: final placeholder expression\n  376          \"\"\"\n  ...\n  415  \n  416      def generate_recipients_batch(self, cr, uid, results, template_id, res_ids, context=None):\n  417:         \"\"\"Generates the recipients of the template. Default values can ben generated\n  418          instead of the template values if requested by template or context.\n  419          Emails (email_to, email_cc) can be transformed into partners if requested\n  ...\n  423          template = self.browse(cr, uid, template_id, context=context)\n  424  \n  425:         if template.use_default_to or context.get('tpl_force_default_to'):\n  426              ctx = dict(context, thread_model=template.model)\n  427:             default_recipients = self.pool['mail.thread'].message_get_default_recipients(cr, uid, res_ids, context=ctx)\n  428:             for res_id, recipients in default_recipients.iteritems():\n  429                  results[res_id].pop('partner_to', None)\n  430                  results[res_id].update(recipients)\n  ...\n  467          templates_to_res_ids = {}\n  468          for res_id, template in res_ids_to_templates.iteritems():\n  469:             templates_to_res_ids.setdefault(template, []).append(res_id)\n  470  \n  471          results = dict()\n  ...\n  481                      context=ctx)\n  482                  for res_id, field_value in generated_field_values.iteritems():\n  483:                     results.setdefault(res_id, dict())[field] = field_value\n  484              # compute recipients\n  485              results = self.generate_recipients_batch(cr, uid, results, template.id, template_res_ids, context=context)\n  ...\n  566              }\n  567              context = dict(context)\n  568:             context.pop('default_type', None)\n  569              attachment_ids.append(ir_attachment.create(cr, uid, attachment_data, context=context))\n  570          if attachment_ids:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\email_template\\email_template_view.xml:\n   43                                      <field name=\"email_from\"\n   44                                              placeholder=\"Override author's email\"/>\n   45:                                     <field name=\"use_default_to\"/>\n   46:                                     <field name=\"email_to\" attrs=\"{'invisible': [('use_default_to', '=', True)]}\"\n   47                                              placeholder=\"Comma-separated recipient addresses\"/>\n   48:                                     <field name=\"partner_to\" attrs=\"{'invisible': [('use_default_to', '=', True)]}\"\n   49                                              placeholder=\"Comma-separated ids of recipient partners\"/>\n   50:                                     <field name=\"email_cc\" attrs=\"{'invisible': [('use_default_to', '=', True)]}\"\n   51                                              placeholder=\"Comma-separated carbon copy recipients addresses\"/>\n   52                                      <field name=\"reply_to\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\email_template\\res_partner.py:\n   25      \"\"\"Inherit res.partner to add a generic opt-out field that can be used\n   26         to restrict usage of automatic email templates.\n   27:        This field is unused by default. \"\"\"\n   28      _inherit = 'res.partner'\n   29  \n   ..\n   34      }\n   35  \n   36:     _defaults = {\n   37          'opt_out': False,\n   38      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\email_template\\res_partner_view.xml:\n   36          </record>\n   37  \n   38:         <!--  Replace the default mass-mailing wizard in base with the composition wizard -->\n   39          <act_window name=\"Partner Mass Mailing\"\n   40                  res_model=\"mail.compose.message\"\n   ..\n   46                  id=\"base.action_partner_mass_mail\"\n   47                  context=\"{\n   48:                             'default_composition_mode': 'mass_mail',\n   49:                             'default_partner_to': '${object.id or \\'\\'}',\n   50:                             'default_use_template': True,\n   51:                             'default_template_id': ref('email_template_partner'),\n   52                          }\"/>\n   53  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\email_template\\tests\\test_mail.py:\n   76          compose_id = mail_compose.create(cr, uid,\n   77              {'subject': 'Forget me subject', 'body': '<p>Dummy body</p>'},\n   78:             {'default_composition_mode': 'comment',\n   79:                 'default_model': 'mail.group',\n   80:                 'default_res_id': self.group_pigs_id,\n   81                  'active_ids': [self.group_pigs_id, self.group_bird_id]})\n   82          compose = mail_compose.browse(cr, uid, compose_id)\n   83  \n   84          # 2. Save current composition form as a template\n   85:         mail_compose.save_as_template(cr, uid, [compose_id], context={'default_model': 'mail.group'})\n   86          # Test: email_template subject, body_html, model\n   87          last_template_id = email_template.search(cr, uid, [('model', '=', 'mail.group'), ('subject', '=', 'Forget me subject')], limit=1)[0]\n   ..\n   96          # 1. Comment on pigs\n   97          context = {\n   98:             'default_composition_mode': 'comment',\n   99:             'default_model': 'mail.group',\n  100:             'default_res_id': self.group_pigs_id,\n  101:             'default_use_template': False,\n  102:             'default_template_id': email_template_id,\n  103              'active_ids': [self.group_pigs_id, self.group_bird_id]\n  104          }\n  ...\n  137          # ----------------------------------------\n  138  \n  139:         # 1. Mass_mail on pigs and bird, with a default_partner_ids set to check he is correctly added\n  140          context = {\n  141:             'default_composition_mode': 'mass_mail',\n  142:             'default_notify': True,\n  143:             'default_model': 'mail.group',\n  144:             'default_res_id': self.group_pigs_id,\n  145:             'default_template_id': email_template_id,\n  146:             'default_partner_ids': [p_a_id],\n  147              'active_ids': [self.group_pigs_id, self.group_bird_id]\n  148          }\n  ...\n  162  \n  163          # 2. Post the comment, get created message\n  164:         mail_compose.send_mail(cr, uid, [compose_id],  {'default_res_id': -1, 'active_ids': [self.group_pigs_id, self.group_bird_id]})\n  165          group_pigs.refresh()\n  166          group_bird.refresh()\n  ...\n  172          self.assertIn(_body_html1, message_pigs.body, 'mail.message body on Pigs incorrect')\n  173          self.assertIn(_body_html2, message_bird.body, 'mail.message body on Bird incorrect')\n  174:         # Test: partner_ids: p_a_id (default) + 3 newly created partners\n  175          # message_pigs_pids = [partner.id for partner in message_pigs.notified_partner_ids]\n  176          # message_bird_pids = [partner.id for partner in message_bird.notified_partner_ids]\n  ...\n  199          # patner by email + partner by id (no double)\n  200          send_to = [p_a_id, p_b_id, p_c_id, p_d_id]\n  201:         # Generate messsage with default email and partner on template\n  202          mail_value = mail_compose.generate_email_for_composer(cr, uid, email_template_id, uid)\n  203          self.assertEqual(set(mail_value['partner_ids']), set(send_to), 'mail.message partner_ids list created by template is incorrect')\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\email_template\\wizard\\email_template_preview.py:\n   43          model =  self.pool[template_object.model]\n   44          record_ids = model.search(cr, uid, [], 0, 10, 'id', context=context)\n   45:         default_id = context.get('default_res_id')\n   46  \n   47:         if default_id and default_id not in record_ids:\n   48:             record_ids.insert(0, default_id)\n   49  \n   50          return model.name_get(cr, uid, record_ids, context)\n   51  \n   52  \n   53:     def default_get(self, cr, uid, fields, context=None):\n   54          if context is None:\n   55              context = {}\n   56:         result = super(email_template_preview, self).default_get(cr, uid, fields, context=context)\n   57  \n   58          email_template = self.pool.get('email.template')\n   ..\n   60          if 'res_id' in fields and not result.get('res_id'):\n   61              records = self._get_records(cr, uid, context=context)\n   62:             result['res_id'] = records and records[0][0] or False # select first record as a Default\n   63          if template_id and 'model_id' in fields and not result.get('model_id'):\n   64              result['model_id'] = email_template.read(cr, uid, int(template_id), ['model_id'], context).get('model_id', False)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\email_template\\wizard\\mail_compose_message.py:\n   34              # templates requires a model in context\n   35              'context': {\n   36:                 'default_model': model,\n   37              },\n   38              }\n   ..\n   42      _inherit = 'mail.compose.message'\n   43  \n   44:     def default_get(self, cr, uid, fields, context=None):\n   45          \"\"\" Override to pre-fill the data when having a template in single-email mode\n   46          and not going through the view: the on_change is not called in that case. \"\"\"\n   47          if context is None:\n   48              context = {}\n   49:         res = super(mail_compose_message, self).default_get(cr, uid, fields, context=context)\n   50:         if res.get('composition_mode') != 'mass_mail' and context.get('default_template_id') and res.get('model') and res.get('res_id'):\n   51              res.update(\n   52                  self.onchange_template_id(\n   53:                     cr, uid, [], context['default_template_id'], res.get('composition_mode'),\n   54                      res.get('model'), res.get('res_id'), context=context\n   55                  )['value']\n   ..\n  112                      'res_model': 'mail.compose.message',\n  113                      'res_id': 0,\n  114:                     'type': 'binary',  # override default_type from context, possibly meant for another model!\n  115                  }\n  116:                 values.setdefault('attachment_ids', list()).append(ir_attach_obj.create(cr, uid, data_attach, context=context))\n  117          else:\n  118:             default_context = dict(context, default_composition_mode=composition_mode, default_model=model, default_res_id=res_id)\n  119:             default_values = self.default_get(cr, uid, ['composition_mode', 'model', 'res_id', 'subject', 'body', 'email_from', 'reply_to', 'attachment_ids', 'mail_server_id'], context=default_context)\n  120:             values = dict((key, default_values[key]) for key in ['subject', 'body', 'email_from', 'reply_to', 'attachment_ids', 'mail_server_id'] if key in default_values)\n  121  \n  122          if values.get('body_html'):\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\email_template\\wizard\\mail_compose_message_view.xml:\n   16                                  options=\"{'no_create': True}\"\n   17                                  on_change=\"onchange_template_id(template_id, composition_mode, model, res_id, context)\" domain=\"[('model_id.model','=',model)]\"\n   18:                                 context=\"{'default_model': model, 'default_body_html': body, 'default_subject': subject}\"/>\n   19                          </div>\n   20                          <button icon=\"/email_template/static/src/img/email_template_save.png\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\event\\email_template.xml:\n   33          </record>\n   34  \n   35:         <!-- Default Values -->\n   36:         <record model=\"ir.values\" id=\"default_value_event_mail_confirmation\">\n   37:             <field name=\"name\">default_email_event</field>\n   38:             <field name=\"key\">default</field>\n   39              <field name=\"key2\"></field>\n   40              <field eval=\"ref('confirmation_event')\" name=\"value_unpickle\"/>\n   41              <field name=\"model\">event.type</field>\n   42          </record>\n   43:         <record model=\"ir.values\" id=\"default_value_registration_mail_confirmation\">\n   44:             <field name=\"name\">default_email_registration</field>\n   45:             <field name=\"key\">default</field>\n   46              <field name=\"key2\"></field>\n   47              <field eval=\"ref('confirmation_registration')\" name=\"value_unpickle\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\event\\event.py:\n   32  \n   33      name = fields.Char(string='Event Type', required=True)\n   34:     default_reply_to = fields.Char(string='Default Reply-To',\n   35          help=\"The email address of the organizer which is put in the 'Reply-To' of all emails sent automatically at event or registrations confirmation. You can also put your email address of your mail gateway if you use one.\")\n   36:     default_email_event = fields.Many2one('email.template', string='Event Confirmation Email',\n   37:         help=\"It will select this default confirmation event mail value when you choose this event\")\n   38:     default_email_registration = fields.Many2one('email.template', string='Registration Confirmation Email',\n   39:         help=\"It will select this default confirmation registration mail value when you choose this event\")\n   40:     default_registration_min = fields.Integer(string='Default Minimum Registration', default=0,\n   41:         help=\"It will select this default minimum value when you choose this event\")\n   42:     default_registration_max = fields.Integer(string='Default Maximum Registration', default=0,\n   43:         help=\"It will select this default maximum value when you choose this event\")\n   44  \n   45  \n   ..\n   54          readonly=False, states={'done': [('readonly', True)]})\n   55      user_id = fields.Many2one('res.users', string='Responsible User',\n   56:         default=lambda self: self.env.user,\n   57          readonly=False, states={'done': [('readonly', True)]})\n   58      type = fields.Many2one('event.type', string='Type of Event',\n   ..\n  118  \n  119      date_tz = fields.Selection('_tz_get', string='Timezone',\n  120:                         default=lambda self: self._context.get('tz', 'UTC'))\n  121  \n  122      @api.one\n  ...\n  153              ('confirm', 'Confirmed'),\n  154              ('done', 'Done')\n  155:         ], string='Status', default='draft', readonly=True, required=True, copy=False,\n  156          help=\"If event is created, the status is 'Draft'. If event is confirmed for the particular dates the status is set to 'Confirmed'. If the event is over, the status is set to 'Done'. If event is cancelled the status is set to 'Cancelled'.\")\n  157      email_registration_id = fields.Many2one(\n  ...\n  167          help=\"The email address of the organizer is likely to be put here, with the effect to be in the 'Reply-To' of the mails sent automatically at event or registrations confirmation. You can also put the email address of your mail gateway if you use one.\")\n  168      address_id = fields.Many2one('res.partner', string='Location',\n  169:         default=lambda self: self.env.user.company_id.partner_id,\n  170          readonly=False, states={'done': [('readonly', True)]})\n  171      country_id = fields.Many2one('res.country', string='Country',\n  ...\n  173      description = fields.Html(string='Description', oldname='note', translate=True,\n  174          readonly=False, states={'done': [('readonly', True)]})\n  175:     company_id = fields.Many2one('res.company', string='Company', change_default=True,\n  176:         default=lambda self: self.env['res.company']._company_default_get('event.event'),\n  177          required=False, readonly=False, states={'done': [('readonly', True)]})\n  178      organizer_id = fields.Many2one('res.partner', string='Organizer',\n  179:         default=lambda self: self.env.user.company_id.partner_id)\n  180  \n  181      is_subscribed = fields.Boolean(string='Subscribed',\n  ...\n  280      def _onchange_type(self):\n  281          if self.type:\n  282:             self.reply_to = self.type.default_reply_to\n  283:             self.email_registration_id = self.type.default_email_registration\n  284:             self.email_confirmation_id = self.type.default_email_event\n  285:             self.seats_min = self.type.default_registration_min\n  286:             self.seats_max = self.type.default_registration_max\n  287  \n  288      @api.onchange('date_begin')\n  ...\n  301      origin = fields.Char(string='Source Document', readonly=True,\n  302          help=\"Reference of the sales order which created the registration\")\n  303:     nb_register = fields.Integer(string='Number of Participants', required=True, default=1,\n  304          readonly=True, states={'draft': [('readonly', False)]})\n  305      event_id = fields.Many2one('event.event', string='Event', required=True,\n  ...\n  325              ('open', 'Confirmed'),\n  326              ('done', 'Attended'),\n  327:         ], string='Status', default='draft', readonly=True, copy=False)\n  328      email = fields.Char(string='Email')\n  329      phone = fields.Char(string='Phone')\n  ...\n  388      def _onchange_partner(self):\n  389          if self.partner_id:\n  390:             contact_id = self.partner_id.address_get().get('default', False)\n  391              if contact_id:\n  392                  contact = self.env['res.partner'].browse(contact_id)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\event\\event_data.xml:\n   17              <field name=\"name\">New Registration</field>\n   18              <field name=\"res_model\">event.event</field>\n   19:             <field name=\"default\" eval=\"False\"/>\n   20          </record>\n   21  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\event\\event_view.xml:\n    8              <field name=\"name\">Registrations</field>\n    9              <field name=\"view_mode\">tree,form,calendar,graph</field>\n   10:             <field name=\"context\">{'search_default_event_id': active_id, 'default_event_id': active_id}</field>\n   11          </record>\n   12          <menuitem name=\"Events\" parent=\"base.marketing_menu\" id=\"event_main_menu\"/>\n   ..\n   22                      <group col=\"4\">\n   23                          <field name=\"name\"/>\n   24:                         <field name=\"default_reply_to\"/>\n   25:                         <field name=\"default_registration_min\"/>\n   26:                         <field name=\"default_email_event\" domain=\"[('model_id.model','=','event.registration')]\"/>\n   27:                         <field name=\"default_registration_max\"/>\n   28:                         <field name=\"default_email_registration\" domain=\"[('model_id.model','=','event.registration')]\"/>\n   29                      </group>\n   30                  </form>\n   ..\n  299             <field name=\"view_type\">form</field>\n  300             <field name=\"view_mode\">kanban,calendar,tree,form</field>\n  301:            <field name=\"context\">{\"search_default_upcoming\":1}</field>\n  302             <field name=\"search_view_id\" ref=\"view_event_search\"/>\n  303             <field name=\"help\" type=\"html\">\n  ...\n  318              src_model=\"res.partner\"\n  319              view_mode=\"tree,form,calendar,graph\"\n  320:             context=\"{'search_default_partner_id': [active_id], 'default_partner_id': active_id}\"\n  321              view_type=\"form\"/>\n  322  \n  ...\n  375                                      <button class=\"oe_inline oe_right\" string=\"Send Email\"\n  376                                          name=\"%(mail.action_email_compose_message_wizard)d\"\n  377:                                         icon=\"terp-mail-message-new\" context= '{\"default_email_to\":email}' type=\"action\"/>\n  378                                  </div>\n  379                              </group>\n  380                              <group>\n  381                                  <field name=\"nb_register\"/>\n  382:                                 <field name=\"user_id\" attrs=\"{'readonly':[('state','!=', 'draft')]}\" context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'event.group_event_user']}\"/>\n  383                              </group>\n  384                              <group groups=\"base.group_no_one\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\event_sale\\event_sale.py:\n  137  \n  138      event_ticket_ids = One2many('event.event.ticket', 'event_id', string='Event Ticket',\n  139:         default=lambda rec: rec._default_tickets(), copy=True)\n  140      seats_max = Integer(string='Maximum Available Seats',\n  141          help=\"The maximum registration level is equal to the sum of the maximum registration of event ticket. \" +\n  ...\n  148  \n  149      @api.model\n  150:     def _default_tickets(self):\n  151          try:\n  152              product = self.env.ref('event_sale.product_product_event')\n  ...\n  214      }\n  215  \n  216:     def _default_product_id(self, cr, uid, context={}):\n  217          imd = self.pool.get('ir.model.data')\n  218          try:\n  ...\n  222          return product.id\n  223  \n  224:     _defaults = {\n  225:         'product_id': _default_product_id\n  226      }\n  227  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\event_sale\\event_sale_report.xml:\n    5      <record id=\"paperformat_euro_lowmargin\" model=\"report.paperformat\">\n    6          <field name=\"name\">European A4 low margin</field>\n    7:         <field name=\"default\" eval=\"True\" />\n    8          <field name=\"format\">A4</field>\n    9          <field name=\"page_height\">0</field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\event_sale\\event_sale_view.xml:\n   80                      <xpath expr=\"//notebook\" position=\"inside\">\n   81                          <page string=\"Ticket Types\">\n   82:                             <field name=\"event_ticket_ids\" context=\"{'default_name': name}\">\n   83                                  <tree string=\"Payments\" editable=\"bottom\">\n   84                                      <field name=\"name\"/>\n   ..\n  109                      <xpath expr=\"//notebook\" position=\"inside\">\n  110                          <page string=\"Ticket Types\">\n  111:                             <field name=\"event_ticket_ids\" context=\"{'default_name': name}\">\n  112                                  <tree string=\"Payments\" editable=\"bottom\">\n  113                                      <field name=\"name\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\fetchmail\\fetchmail.py:\n   61              ('local', 'Local Server'),\n   62          ], 'Server Type', select=True, required=True, readonly=False),\n   63:         'is_ssl':fields.boolean('SSL/TLS', help=\"Connections are encrypted with SSL/TLS through a dedicated port (default: IMAPS=993, POP3S=995)\"),\n   64          'attach':fields.boolean('Keep Attachments', help=\"Whether attachments should be downloaded. \"\n   65                                                           \"If not enabled, incoming emails will be stripped of any attachments before being processed\"),\n   ..\n   81          'script' : fields.char('Script', readonly=True),\n   82      }\n   83:     _defaults = {\n   84          'state': \"draft\",\n   85          'type': \"pop\",\n   ..\n  249                      if pop_server:\n  250                          pop_server.quit()\n  251:             server.write({'date': time.strftime(tools.DEFAULT_SERVER_DATETIME_FORMAT)})\n  252          return True\n  253  \n  ...\n  260                  cr, uid, 'fetchmail', 'ir_cron_mail_gateway_action', context=context)\n  261          except ValueError:\n  262:             # Nevermind if default cron cannot be found\n  263              return\n  264  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\fetchmail\\fetchmail_view.xml:\n  132  \n  133        <act_window\n  134:             context=\"{'search_default_server_id': active_id, 'default_fetchmail_server_id': active_id}\"\n  135              id=\"act_server_history\" name=\"Messages\" domain=\"[('email_from', '!=', False), ('fetchmail_server_id', '=', active_id)]\"\n  136              res_model=\"mail.mail\" src_model=\"fetchmail.server\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\fetchmail\\res_config.py:\n   45              <button type=\"object\" name=\"configure_fetchmail_stuff\"/>\n   46  \n   47:         The method ``get_default_fetchmail`` determines the value of all fields that start\n   48          with 'fetchmail_'.  It looks up fetchmail server configurations that match the given\n   49          model name (``fetchmail_model``) and are active.\n   ..\n   55      _name = 'fetchmail.config.settings'\n   56  \n   57:     def get_default_fetchmail(self, cr, uid, fields, context=None):\n   58          \"\"\" determine the value of all fields like 'fetchmail_XXX' \"\"\"\n   59          ir_model = self.pool.get('ir.model')\n   ..\n   95          else:\n   96              action['context'] = {\n   97:                 'default_name': self._columns[field].fetchmail_name,\n   98:                 'default_object_id': model_id,\n   99              }\n  100          return action\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\fleet\\fleet.py:\n   29  \n   30  def str_to_datetime(strdate):\n   31:     return datetime.datetime.strptime(strdate, tools.DEFAULT_SERVER_DATE_FORMAT)\n   32  \n   33  class fleet_vehicle_cost(osv.Model):\n   ..\n   70      }\n   71  \n   72:     _defaults ={\n   73          'cost_type': 'other',\n   74      }\n   ..\n  200              res = self.pool.get('ir.actions.act_window').for_xml_id(cr, uid ,'fleet', context['xml_id'], context=context)\n  201              res['context'] = context\n  202:             res['context'].update({'default_vehicle_id': ids[0]})\n  203              res['domain'] = [('vehicle_id','=', ids[0])]\n  204              return res\n  ...\n  206  \n  207      def act_show_log_cost(self, cr, uid, ids, context=None):\n  208:         \"\"\" This opens log view to view and add new log for this vehicle, groupby default to only show effective costs\n  209              @return: the costs log view\n  210          \"\"\"\n  ...\n  214          res['context'] = context\n  215          res['context'].update({\n  216:             'default_vehicle_id': ids[0],\n  217:             'search_default_parent_false': True\n  218          })\n  219          res['domain'] = [('vehicle_id','=', ids[0])]\n  ...\n  257                  search_operator = 'not in'\n  258              today = fields.date.context_today(self, cr, uid, context=context)\n  259:             datetime_today = datetime.datetime.strptime(today, tools.DEFAULT_SERVER_DATE_FORMAT)\n  260:             limit_date = str((datetime_today + relativedelta(days=+15)).strftime(tools.DEFAULT_SERVER_DATE_FORMAT))\n  261              cr.execute('select cost.vehicle_id, count(contract.id) as contract_number FROM fleet_vehicle_cost cost left join fleet_vehicle_log_contract contract on contract.cost_id = cost.id WHERE contract.expiration_date is not null AND contract.expiration_date > %s AND contract.expiration_date < %s AND contract.state IN (\\'open\\', \\'toclose\\') GROUP BY cost.vehicle_id', (today, limit_date))\n  262              res_ids = [x[0] for x in cr.fetchall()]\n  ...\n  298          return res\n  299  \n  300:     def _get_default_state(self, cr, uid, context):\n  301          try:\n  302              model, model_id = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'fleet', 'vehicle_state_active')\n  ...\n  365          }\n  366  \n  367:     _defaults = {\n  368          'doors': 5,\n  369          'odometer_unit': 'kilometers',\n  370:         'state_id': _get_default_state,\n  371      }\n  372  \n  ...\n  451          'unit': fields.related('vehicle_id', 'odometer_unit', type=\"char\", string=\"Unit\", readonly=True),\n  452      }\n  453:     _defaults = {\n  454          'date': fields.date.context_today,\n  455      }\n  ...\n  531              return {}\n  532  \n  533:     def _get_default_service_type(self, cr, uid, context):\n  534          try:\n  535              model, model_id = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'fleet', 'type_service_refueling')\n  ...\n  552          'cost_amount': fields.related('cost_id', 'amount', string='Amount', type='float', store=True), #we need to keep this field as a related with store=True because the graph view doesn't support (1) to address fields from inherited table and (2) fields that aren't stored in database\n  553      }\n  554:     _defaults = {\n  555          'date': fields.date.context_today,\n  556:         'cost_subtype_id': _get_default_service_type,\n  557          'cost_type': 'fuel',\n  558      }\n  ...\n  574          }\n  575  \n  576:     def _get_default_service_type(self, cr, uid, context):\n  577          try:\n  578              model, model_id = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'fleet', 'type_service_service_8')\n  ...\n  592          'cost_id': fields.many2one('fleet.vehicle.cost', 'Cost', required=True, ondelete='cascade'),\n  593      }\n  594:     _defaults = {\n  595          'date': fields.date.context_today,\n  596:         'cost_subtype_id': _get_default_service_type,\n  597          'cost_type': 'services'\n  598      }\n  ...\n  618          #If the contract has no start_date, no cost will be created, even if the contract has recurring costs\n  619          vehicle_cost_obj = self.pool.get('fleet.vehicle.cost')\n  620:         d = datetime.datetime.strptime(fields.date.context_today(self, cr, uid, context=context), tools.DEFAULT_SERVER_DATE_FORMAT).date()\n  621          contract_ids = self.pool.get('fleet.vehicle.log.contract').search(cr, uid, [('state','!=','closed')], offset=0, limit=None, order=None,context=None, count=False)\n  622          deltas = {'yearly': relativedelta(years=+1), 'monthly': relativedelta(months=+1), 'weekly': relativedelta(weeks=+1), 'daily': relativedelta(days=+1)}\n  ...\n  631                      found = True\n  632                      last_cost_date = vehicle_cost_obj.browse(cr, uid, last_autogenerated_cost_id[0], context=context).date\n  633:             startdate = datetime.datetime.strptime(last_cost_date, tools.DEFAULT_SERVER_DATE_FORMAT).date()\n  634              if found:\n  635                  startdate += deltas.get(contract.cost_frequency)\n  636:             while (startdate <= d) & (startdate <= datetime.datetime.strptime(contract.expiration_date, tools.DEFAULT_SERVER_DATE_FORMAT).date()):\n  637                  data = {\n  638                      'amount': contract.cost_generated,\n  639:                     'date': startdate.strftime(tools.DEFAULT_SERVER_DATE_FORMAT),\n  640                      'vehicle_id': contract.vehicle_id.id,\n  641                      'cost_subtype_id': contract.cost_subtype_id.id,\n  ...\n  650          #This method is called by a cron task\n  651          #It manages the state of a contract, possibly by posting a message on the vehicle concerned and updating its status\n  652:         datetime_today = datetime.datetime.strptime(fields.date.context_today(self, cr, uid, context=context), tools.DEFAULT_SERVER_DATE_FORMAT)\n  653:         limit_date = (datetime_today + relativedelta(days=+15)).strftime(tools.DEFAULT_SERVER_DATE_FORMAT)\n  654          ids = self.search(cr, uid, ['&', ('state', '=', 'open'), ('expiration_date', '<', limit_date)], offset=0, limit=None, order=None, context=context, count=False)\n  655          res = {}\n  ...\n  693          oneyear = datetime.timedelta(days=365)\n  694          curdate = str_to_datetime(strdate)\n  695:         return datetime.datetime.strftime(curdate + oneyear, tools.DEFAULT_SERVER_DATE_FORMAT)\n  696  \n  697      def on_change_start_date(self, cr, uid, ids, strdate, enddate, context=None):\n  ...\n  709          for record in self.browse(cr, uid, ids, context=context):\n  710              if (record.expiration_date and (record.state == 'open' or record.state == 'toclose')):\n  711:                 today = str_to_datetime(time.strftime(tools.DEFAULT_SERVER_DATE_FORMAT))\n  712                  renew_date = str_to_datetime(record.expiration_date)\n  713                  diff_time = (renew_date-today).days\n  ...\n  724              enddate = str_to_datetime(element.expiration_date)\n  725              diffdate = (enddate - startdate)\n  726:             default = {\n  727                  'date': fields.date.context_today(self, cr, uid, context=context),\n  728:                 'start_date': datetime.datetime.strftime(str_to_datetime(element.expiration_date) + datetime.timedelta(days=1), tools.DEFAULT_SERVER_DATE_FORMAT),\n  729:                 'expiration_date': datetime.datetime.strftime(enddate + diffdate, tools.DEFAULT_SERVER_DATE_FORMAT),\n  730              }\n  731:             newid = super(fleet_vehicle_log_contract, self).copy(cr, uid, element.id, default, context=context)\n  732          mod, modid = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'fleet', 'fleet_vehicle_log_contract_form')\n  733          return {\n  ...\n  744          }\n  745  \n  746:     def _get_default_contract_type(self, cr, uid, context=None):\n  747          try:\n  748              model, model_id = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'fleet', 'type_contract_leasing')\n  ...\n  778          'name': fields.function(_vehicle_contract_name_get_fnc, type=\"text\", string='Name', store=True),\n  779          'start_date': fields.date('Contract Start Date', help='Date when the coverage of the contract begins'),\n  780:         'expiration_date': fields.date('Contract Expiration Date', help='Date when the coverage of the contract expirates (by default, one year after begin date)'),\n  781          'days_left': fields.function(get_days_left, type='integer', string='Warning Date'),\n  782          'insurer_id' :fields.many2one('res.partner', 'Supplier'),\n  ...\n  794          'cost_amount': fields.related('cost_id', 'amount', string='Amount', type='float', store=True), #we need to keep this field as a related with store=True because the graph view doesn't support (1) to address fields from inherited table and (2) fields that aren't stored in database\n  795      }\n  796:     _defaults = {\n  797          'purchaser_id': lambda self, cr, uid, ctx: self.pool.get('res.users').browse(cr, uid, uid, context=ctx).partner_id.id or False,\n  798          'date': fields.date.context_today,\n  ...\n  801          'expiration_date': lambda self, cr, uid, ctx: self.compute_next_year_date(fields.date.context_today(self, cr, uid, context=ctx)),\n  802          'cost_frequency': 'no',\n  803:         'cost_subtype_id': _get_default_contract_type,\n  804          'cost_type': 'contract',\n  805      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\fleet\\fleet_board_view.xml:\n    8        <field name=\"view_type\">form</field>\n    9        <field name=\"view_mode\">graph</field>\n   10:       <field name=\"context\">{\"search_default_parent_false\" : True,}</field>\n   11        <field name=\"help\" type=\"html\">\n   12          <p>\n   ..\n   27        <field name=\"view_type\">form</field>\n   28        <field name=\"view_mode\">graph</field>\n   29:       <field name=\"context\">{\"search_default_parent_true\" : True,}</field>\n   30        <field name=\"help\" type=\"html\">\n   31          <p>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\fleet\\fleet_view.xml:\n   74              <field name=\"view_type\">form</field>\n   75              <field name=\"view_mode\">tree,form</field>\n   76:             <field name=\"context\">{\"search_default_groupby_brand\" : True,}</field>\n   77              <field name=\"help\" type=\"html\">\n   78                <p class=\"oe_view_nocontent_create\">\n   ..\n  469                              </group>\n  470                              <group>\n  471:                                 <field name=\"insurer_id\" context=\"{'default_supplier': True}\"/>\n  472                                  <field name=\"purchaser_id\" />\n  473                                  <field name=\"ins_ref\" />\n  ...\n  634              <field name=\"view_type\">form</field>\n  635              <field name=\"view_mode\">tree,graph</field>\n  636:             <field name=\"context\">{\"search_default_groupby_vehicle\" : True}</field>\n  637              <field name=\"help\" type=\"html\">\n  638                <p class=\"oe_view_nocontent_create\">\n  ...\n  677                                  <field name=\"purchaser_id\" />\n  678                                  <field name=\"inv_ref\" />\n  679:                                 <field name=\"vendor_id\" context=\"{'default_supplier': True}\"/>\n  680                              </group>\n  681                          </group>\n  ...\n  740              <field name=\"view_type\">form</field>\n  741              <field name=\"view_mode\">tree,form,graph</field>\n  742:             <field name=\"context\">{\"search_default_groupby_vehicle\" : True}</field>\n  743              <field name=\"help\" type=\"html\">\n  744                <p class=\"oe_view_nocontent_create\">\n  ...\n  779                                  <field name=\"date\" />\n  780                                  <field name=\"purchaser_id\" />\n  781:                                 <field name=\"vendor_id\" context=\"{'default_supplier': True}\"/>\n  782                                  <field name=\"inv_ref\" />\n  783                              </group>\n  ...\n  987              <field name=\"view_type\">form</field>\n  988              <field name=\"view_mode\">tree,form,graph</field>\n  989:             <field name=\"context\">{\"search_default_parent_false\" : True, \"search_default_groupby_vehicle_id\" : True,}</field>\n  990              <field name=\"help\" type=\"html\">\n  991                <p class=\"oe_view_nocontent_create\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\gamification\\data\\badge.xml:\n   37              <field name=\"name\">Badge Granted</field>\n   38              <field name=\"res_model\">res.users</field>\n   39:             <field name=\"default\" eval=\"True\"/>\n   40              <field name=\"hidden\" eval=\"True\"/>\n   41              <field name=\"description\">Badge Granted</field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\gamification\\data\\goal_base.xml:\n  132              <field name=\"target\">current</field>\n  133              <field name=\"view_id\" ref=\"base.view_users_simple_form\"/>\n  134:             <field name=\"context\">{'default_groups_ref': ['base.group_user']}</field>\n  135              <field name=\"help\">Create and manage users that will connect to the system. Users can be deactivated should there be a period of time during which they will/should not connect to the system. You can assign them groups in order to give them specific access to the applications they need to use in the system.</field>\n  136          </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\gamification\\models\\badge.py:\n   22  from openerp import SUPERUSER_ID\n   23  from openerp.osv import fields, osv\n   24: from openerp.tools import DEFAULT_SERVER_DATE_FORMAT as DF\n   25  from openerp.tools.translate import _\n   26  \n   ..\n  221      }\n  222  \n  223:     _defaults = {\n  224          'rule_auth': 'everyone',\n  225          'active': True,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\gamification\\models\\challenge.py:\n   22  from openerp import SUPERUSER_ID\n   23  from openerp.osv import fields, osv\n   24: from openerp.tools import ustr, DEFAULT_SERVER_DATE_FORMAT as DF\n   25  from openerp.tools.safe_eval import safe_eval as eval\n   26  from openerp.tools.translate import _\n   ..\n   34  MAX_VISIBILITY_RANKING = 3\n   35  \n   36: def start_end_date_for_period(period, default_start_date=False, default_end_date=False):\n   37      \"\"\"Return the start and end date for a goal period based on today\n   38  \n   ..\n   55          end_date = today.replace(month=12, day=31)\n   56      else:  # period == 'once':\n   57:         start_date = default_start_date  # for manual goal, start each time\n   58:         end_date = default_end_date\n   59  \n   60      if start_date and end_date:\n   ..\n   83          period.\n   84  \n   85:         :return: a string in DEFAULT_SERVER_DATE_FORMAT representing the date\"\"\"\n   86          res = {}\n   87          for challenge in self.browse(cr, uid, ids, context=context):\n   ..\n  195          }\n  196  \n  197:     _defaults = {\n  198          'period': 'once',\n  199          'state': 'draft',\n  ...\n  890      }\n  891  \n  892:     _default = {\n  893          'sequence': 1,\n  894      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\gamification\\models\\goal.py:\n   22  from openerp import SUPERUSER_ID\n   23  from openerp.osv import fields, osv\n   24: from openerp.tools import DEFAULT_SERVER_DATE_FORMAT as DF\n   25  from openerp.tools.safe_eval import safe_eval\n   26  from openerp.tools.translate import _\n   ..\n  116      }\n  117  \n  118:     _defaults = {\n  119          'condition': 'higher',\n  120          'computation_mode': 'manually',\n  ...\n  244      }\n  245  \n  246:     _defaults = {\n  247          'current': 0,\n  248          'state': 'draft',\n  ...\n  302          goals_by_definition = {}\n  303          for goal in self.browse(cr, uid, ids, context=context):\n  304:             goals_by_definition.setdefault(goal.definition_id, []).append(goal)\n  305  \n  306          for definition, goals in goals_by_definition.items():\n  ...\n  347                          start_date = field_date_name and goal.start_date or False\n  348                          end_date = field_date_name and goal.end_date or False\n  349:                         subqueries.setdefault((start_date, end_date), {}).update({goal.id:safe_eval(definition.batch_user_expression, {'user': goal.user_id})})\n  350  \n  351                      # the global query should be split by time periods (especially for recurrent goals)\n  ...\n  494                  'views': [[False, 'form']],\n  495                  'target': 'new',\n  496:                 'context': {'default_goal_id': goal_id, 'default_current': goal.current},\n  497                  'res_model': 'gamification.goal.wizard'\n  498              }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\gamification\\views\\badge.xml:\n   76                          </group>\n   77                          <group string=\"Rewards for challenges\">\n   78:                             <field name=\"challenge_ids\" widget=\"many2many_kanban\" nolabel=\"1\" context=\"{'default_reward_id': active_id}\" />\n   79                          </group>\n   80                          <group string=\"Statistics\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\gamification\\views\\challenge.xml:\n   20              <field name=\"name\">Related Goals</field>\n   21              <field name=\"view_mode\">kanban,tree</field>\n   22:             <field name=\"context\">{'search_default_group_by_definition': True, 'search_default_inprogress': True, 'search_default_challenge_id': active_id, 'default_challenge_id': active_id}</field>\n   23              <field name=\"help\" type=\"html\">\n   24                <p>\n   ..\n  171              <field name=\"res_model\">gamification.challenge</field>\n  172              <field name=\"view_mode\">kanban,tree,form</field>\n  173:             <field name=\"context\">{'search_default_inprogress':True, 'default_inprogress':True}</field>\n  174              <field name=\"help\" type=\"html\">\n  175                  <p class=\"oe_view_nocontent_create\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\gamification\\views\\goal.xml:\n    8              <field name=\"res_model\">gamification.goal</field>\n    9              <field name=\"view_mode\">tree,form,kanban</field>\n   10:             <field name=\"context\">{'search_default_group_by_user': True, 'search_default_group_by_definition': True}</field>\n   11              <field name=\"help\" type=\"html\">\n   12                  <p class=\"oe_view_nocontent_create\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\gamification\\wizard\\grant_badge.xml:\n   26              target=\"new\"\n   27              res_model=\"gamification.badge.user.wizard\"\n   28:             context=\"{'default_badge_id': active_id, 'badge_id': active_id}\"\n   29              view_type=\"form\" view_mode=\"form\"\n   30              view_id=\"gamification.view_badge_wizard_grant\" />\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\google_account\\google_account.py:\n    7  from openerp.tools.translate import _\n    8  from datetime import datetime\n    9: from openerp.tools import DEFAULT_SERVER_DATETIME_FORMAT\n   10  \n   11  import werkzeug.urls\n   ..\n   52          return uri\n   53  \n   54:     # If no scope is passed, we use service by default to get a default scope\n   55      def _get_authorize_uri(self, cr, uid, from_url, service, scope=False, context=None):\n   56          \"\"\" This method return the url needed to allow this instance of OpenErp to access to the scope of gmail specified as parameters \"\"\"\n   ..\n  160                  ask_time = datetime.strptime(request.headers.get('date'), \"%a, %d %b %Y %H:%M:%S %Z\")\n  161              except:\n  162:                 ask_time = datetime.now().strftime(DEFAULT_SERVER_DATETIME_FORMAT)\n  163          except urllib2.HTTPError, e:\n  164              if e.code in (400, 401, 410):\n  ...\n  170  \n  171      def get_base_url(self, cr, uid, context=None):\n  172:         return self.pool.get('ir.config_parameter').get_param(cr, uid, 'web.base.url', default='http://www.openerp.com?NoBaseUrl', context=context)\n  173  \n  174      def get_client_id(self, cr, uid, service, context=None):\n  175:         return self.pool.get('ir.config_parameter').get_param(cr, SUPERUSER_ID, 'google_%s_client_id' % (service,), default=False, context=context)\n  176  \n  177      def get_client_secret(self, cr, uid, service, context=None):\n  178:         return self.pool.get('ir.config_parameter').get_param(cr, SUPERUSER_ID, 'google_%s_client_secret' % (service,), default=False, context=context)\n  179  \n  180      def get_uri_oauth(self, a=''):  # a = optional action\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\google_calendar\\google_calendar.py:\n    8  from openerp import tools\n    9  from openerp import SUPERUSER_ID\n   10: from openerp.tools import DEFAULT_SERVER_DATE_FORMAT, DEFAULT_SERVER_DATETIME_FORMAT, exception_to_unicode\n   11  \n   12  from openerp.tools.translate import _\n   ..\n  203      def generate_data(self, cr, uid, event, isCreating=False, context=None):\n  204          if event.allday:\n  205:             start_date = fields.datetime.context_timestamp(cr, uid, datetime.strptime(event.start, tools.DEFAULT_SERVER_DATETIME_FORMAT), context=context).isoformat('T').split('T')[0]\n  206:             final_date = fields.datetime.context_timestamp(cr, uid, datetime.strptime(event.start, tools.DEFAULT_SERVER_DATETIME_FORMAT) + timedelta(hours=event.duration) + timedelta(days=isCreating and 1 or 0), context=context).isoformat('T').split('T')[0]\n  207              type = 'date'\n  208              vstype = 'dateTime'\n  209          else:\n  210:             start_date = fields.datetime.context_timestamp(cr, uid, datetime.strptime(event.start, tools.DEFAULT_SERVER_DATETIME_FORMAT), context=context).isoformat('T')\n  211:             final_date = fields.datetime.context_timestamp(cr, uid, datetime.strptime(event.stop, tools.DEFAULT_SERVER_DATETIME_FORMAT), context=context).isoformat('T')\n  212              type = 'dateTime'\n  213              vstype = 'date'\n  ...\n  445                  date = (single_event_dict['start']['date'])\n  446                  stop = (single_event_dict['end']['date'])\n  447:                 d_end = datetime.strptime(stop, DEFAULT_SERVER_DATE_FORMAT)\n  448                  allday = True\n  449                  d_end = d_end + timedelta(days=-1)\n  450:                 stop = d_end.strftime(DEFAULT_SERVER_DATE_FORMAT)\n  451  \n  452              update_date = datetime.strptime(single_event_dict['updated'], \"%Y-%m-%dT%H:%M:%S.%fz\")\n  ...\n  548              if lastSync and self.get_last_sync_date(cr, uid, context=context) and not self.get_disable_since_synchro(cr, uid, context=context):\n  549                  lastSync = self.get_last_sync_date(cr, uid, context)\n  550:                 _logger.info(\"[%s] Calendar Synchro - MODE SINCE_MODIFIED : %s !\" % (user_to_sync, lastSync.strftime(DEFAULT_SERVER_DATETIME_FORMAT)))\n  551              else:\n  552                  lastSync = False\n  ...\n  584                                      ('google_internal_event_id', '=', False),\n  585                                      '|',\n  586:                                     ('event_id.stop', '>', self.get_minTime(cr, uid, context=context).strftime(DEFAULT_SERVER_DATETIME_FORMAT)),\n  587:                                     ('event_id.final_date', '>', self.get_minTime(cr, uid, context=context).strftime(DEFAULT_SERVER_DATETIME_FORMAT)),\n  588                                      ], context=context_norecurrent)\n  589          for att in att_obj.browse(cr, uid, my_att_ids, context=context):\n  ...\n  680              my_openerp_att_ids = att_obj.search(cr, uid, [\n  681                  ('partner_id', '=', myPartnerID),\n  682:                 ('event_id.oe_update_date', '>', lastSync and lastSync.strftime(DEFAULT_SERVER_DATETIME_FORMAT) or self.get_minTime(cr, uid, context).strftime(DEFAULT_SERVER_DATETIME_FORMAT)),\n  683                  ('google_internal_event_id', '!=', False),\n  684              ], context=context_novirtual)\n  ...\n  706                  ('google_internal_event_id', '!=', False),\n  707                  '|',\n  708:                 ('event_id.stop', '>', self.get_minTime(cr, uid, context).strftime(DEFAULT_SERVER_DATETIME_FORMAT)),\n  709:                 ('event_id.final_date', '>', self.get_minTime(cr, uid, context).strftime(DEFAULT_SERVER_DATETIME_FORMAT)),\n  710              ]\n  711  \n  ...\n  867          current_user = self.pool['res.users'].browse(cr, uid, uid, context=context)\n  868          if not current_user.google_calendar_token_validity or \\\n  869:                 datetime.strptime(current_user.google_calendar_token_validity.split('.')[0], DEFAULT_SERVER_DATETIME_FORMAT) < (datetime.now() + timedelta(minutes=1)):\n  870              self.do_refresh_token(cr, uid, context=context)\n  871              current_user.refresh()\n  ...\n  874      def get_last_sync_date(self, cr, uid, context=None):\n  875          current_user = self.pool['res.users'].browse(cr, uid, uid, context=context)\n  876:         return current_user.google_calendar_last_sync_date and datetime.strptime(current_user.google_calendar_last_sync_date, DEFAULT_SERVER_DATETIME_FORMAT) + timedelta(minutes=0) or False\n  877  \n  878      def do_refresh_token(self, cr, uid, context=None):\n  ...\n  914  \n  915      def get_minTime(self, cr, uid, context=None):\n  916:         number_of_week = self.pool['ir.config_parameter'].get_param(cr, uid, 'calendar.week_synchro', default=13)\n  917          return datetime.now() - timedelta(weeks=number_of_week)\n  918  \n  919      def get_need_synchro_attendee(self, cr, uid, context=None):\n  920:         return self.pool['ir.config_parameter'].get_param(cr, uid, 'calendar.block_synchro_attendee', default=True)\n  921  \n  922      def get_disable_since_synchro(self, cr, uid, context=None):\n  923:         return self.pool['ir.config_parameter'].get_param(cr, uid, 'calendar.block_since_synchro', default=False)\n  924  \n  925      def get_print_log(self, cr, uid, context=None):\n  926:         return self.pool['ir.config_parameter'].get_param(cr, uid, 'calendar.debug_print', default=False)\n  927  \n  928  \n  ...\n  955          return super(calendar_event, self).write(cr, uid, ids, vals, context=context)\n  956  \n  957:     def copy(self, cr, uid, id, default=None, context=None):\n  958:         default = default or {}\n  959:         if default.get('write_type', False):\n  960:             del default['write_type']\n  961:         elif default.get('recurrent_id', False):\n  962:             default['oe_update_date'] = datetime.now()\n  963          else:\n  964:             default['oe_update_date'] = False\n  965:         return super(calendar_event, self).copy(cr, uid, id, default, context)\n  966  \n  967      def unlink(self, cr, uid, ids, can_be_deleted=False, context=None):\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\google_calendar\\res_config.py:\n   18          \n   19  \n   20:     def get_default_all(self,cr,uid,ids,context=None):\n   21          params = self.pool.get('ir.config_parameter')\n   22          \n   23:         cal_client_id = params.get_param(cr, uid, 'google_calendar_client_id',default='',context=context)\n   24:         cal_client_secret = params.get_param(cr, uid, 'google_calendar_client_secret',default='',context=context)\n   25:         server_uri= \"%s/google_account/authentication\" % params.get_param(cr, uid, 'web.base.url',default=\"http://yourcompany.odoo.com\",context=context)\n   26          return dict(cal_client_id=cal_client_id,cal_client_secret=cal_client_secret,server_uri=server_uri)\n   27          \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\google_drive\\google_drive.py:\n  147          will first seek for a google.docs.config associated with the model `res_model` to find out what's the template\n  148          of google doc to copy (this is usefull if you want to start with a non-empty document, a type or a name\n  149:         different than the default values). If no config is associated with the `res_model`, then a blank text document\n  150:         with a default name is created.\n  151            :param res_model: the object for which the google doc is created\n  152            :param ids: the list of ids of the objects for which the google doc is created. This list is supposed to have\n  ...\n  218          return res\n  219  \n  220:     _defaults = {\n  221          'name_template': 'Document %(name)s',\n  222          'active': True,\n  ...\n  244          'google_drive_uri': fields.char('URI', readonly=True, help=\"The URL to generate the authorization code from Google\"),\n  245      }\n  246:     _defaults = {\n  247          'google_drive_uri': lambda s, cr, uid, c: s.pool['google.service']._get_google_token_uri(cr, uid, 'drive', scope=s.pool['google.drive.config'].get_google_scope(), context=c),\n  248          'google_drive_authorization_code': lambda s, cr, uid, c: s.pool['ir.config_parameter'].get_param(cr, SUPERUSER_ID, 'google_drive_authorization_code', context=c),\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr\\hr.py:\n  123                                    string='Status', readonly=True, required=True,\n  124                                    track_visibility='always', copy=False,\n  125:                                   help=\"By default 'Closed', set it to 'In Recruitment' if recruitment process is going on for this job position.\"),\n  126          'write_date': fields.datetime('Update Date', readonly=True),\n  127      }\n  128  \n  129:     _defaults = {\n  130:         'company_id': lambda self, cr, uid, ctx=None: self.pool.get('res.company')._company_default_get(cr, uid, 'hr.job', context=ctx),\n  131          'state': 'open',\n  132      }\n  ...\n  151          return True\n  152  \n  153:     def copy(self, cr, uid, id, default=None, context=None):\n  154:         if default is None:\n  155:             default = {}\n  156:         if 'name' not in default:\n  157              job = self.browse(cr, uid, id, context=context)\n  158:             default['name'] = _(\"%s (copy)\") % (job.name)\n  159:         return super(hr_job, self).copy(cr, uid, id, default=default, context=context)\n  160  \n  161      # ----------------------------------------\n  ...\n  237      }\n  238  \n  239:     def _get_default_image(self, cr, uid, context=None):\n  240:         image_path = get_module_resource('hr', 'static/src/img', 'default_image.png')\n  241          return tools.image_resize_image_big(open(image_path, 'rb').read().encode('base64'))\n  242  \n  243:     defaults = {\n  244          'active': 1,\n  245:         'image': _get_default_image,\n  246          'color': 0,\n  247      }\n  ...\n  261              company_id = employee.department_id.company_id.id\n  262          else:\n  263:             company_id = self.pool['res.company']._company_default_get(cr, uid, 'hr.employee', context=context)\n  264          res_users = self.pool['res.users']\n  265          user_ids = res_users.search(\n  ...\n  305          if company:\n  306              company_id = self.pool.get('res.company').browse(cr, uid, company, context=context)\n  307:             address = self.pool.get('res.partner').address_get(cr, uid, [company_id.partner_id.id], ['default'])\n  308:             address_id = address and address['default'] or False\n  309          return {'value': {'address_id': address_id}}\n  310  \n  ...\n  387      }\n  388  \n  389:     _defaults = {\n  390:         'company_id': lambda self, cr, uid, c: self.pool.get('res.company')._company_default_get(cr, uid, 'hr.department', context=c),\n  391      }\n  392  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr\\hr_view.xml:\n   42                                      <group string=\"Contact Information\">\n   43                                          <field name=\"address_id\" on_change=\"onchange_address_id(address_id)\"\n   44:                                             context=\"{'show_address': 1, 'default_customer': False}\"\n   45                                              options='{\"always_reload\": True, \"highlight_first_line\": True}'/>\n   46                                          <field name=\"mobile_phone\"/>\n   ..\n   56                                          <field name=\"company_id\" groups=\"base.group_multi_company\" on_change=\"onchange_company(company_id)\"/>\n   57                                          <field name=\"user_id\" on_change=\"onchange_user(user_id)\" string=\"Related User\"\n   58:                                             context=\"{'default_groups_ref': ['base.group_user']}\"/>\n   59                                      </group>\n   60                                  </group>\n   ..\n   72                                      <group string=\"Contact Information\">\n   73                                          <field name=\"address_home_id\"\n   74:                                             context=\"{'show_address': 1, 'default_customer': False}\"\n   75                                              options='{\"always_reload\": True, \"highlight_first_line\": True}'/>\n   76                                      </group>\n   ..\n  414              <field name=\"view_mode\">tree,form</field>\n  415              <field name=\"search_view_id\" ref=\"view_job_filter\"/>\n  416:             <field name=\"context\">{\"search_default_Current\":1}</field>\n  417              <field name=\"help\" type=\"html\">\n  418                <p class=\"oe_view_nocontent_create\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr\\res_config_view.xml:\n   18              <field name=\"res_model\">ir.module.module</field>\n   19              <field name=\"view_mode\">kanban,tree,form</field>\n   20:             <field name=\"context\" eval=\"{'search_default_category_id': ref('base.module_category_localization')}\"/>\n   21              <field name=\"search_view_id\" ref=\"base.view_module_filter\"/>\n   22          </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr\\res_users.py:\n   15      }\n   16  \n   17:     _defaults = {\n   18          'display_employees_suggestions': True,\n   19      }\n   ..\n   22          \"\"\" Override of __init__ to add access rights on\n   23          display_employees_suggestions fields. Access rights are disabled by\n   24:         default, but allowed on some specific fields defined in\n   25          self.SELF_{READ/WRITE}ABLE_FIELDS.\n   26          \"\"\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_attendance\\hr_attendance.py:\n   34          'action_type': fields.selection([('sign_in', 'Sign in'), ('sign_out', 'Sign out')], \"Action Type\"),\n   35      }\n   36:     _defaults = {\n   37          'action_type': 'sign_in',\n   38      }\n   ..\n   81          'worked_hours': fields.function(_worked_hours_compute, type='float', string='Worked Hours', store=True),\n   82      }\n   83:     _defaults = {\n   84          'name': lambda *a: time.strftime('%Y-%m-%d %H:%M:%S'), #please don't remove the lambda, if you remove it then the current time will not change\n   85          'employee_id': _employee_get,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_attendance\\hr_attendance_view.xml:\n   83              <field name=\"view_type\">form</field>\n   84              <field name=\"view_mode\">tree,form</field>\n   85:             <field name=\"context\">{\"search_default_today\":1}</field>\n   86              <field name=\"search_view_id\" ref=\"view_hr_attendance_filter\" />\n   87              <field name=\"help\">The Time Tracking functionality aims to manage employee attendances from Sign in/Sign out actions. You can also link this feature to an attendance device using Odoo's web service features.</field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_attendance\\wizard\\hr_attendance_error.py:\n   34          'max_delay': fields.integer('Max. Delay (Min)', required=True)\n   35      }\n   36:     _defaults = {\n   37           'init_date': lambda *a: time.strftime('%Y-%m-%d'),\n   38           'end_date': lambda *a: time.strftime('%Y-%m-%d'),\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_contract\\base_action_rule.py:\n   38      def _check_delay(self, cr, uid, action, record, record_dt, context=None):\n   39          \"\"\" Override the check of delay to try to use a user-related calendar.\n   40:         If no calendar is found, fallback on the default behavior. \"\"\"\n   41          if action.trg_date_calendar_id and action.trg_date_range_type == 'day' and action.trg_date_resource_field_id:\n   42              user = record[action.trg_date_resource_field_id.name]\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_contract\\hr_contract.py:\n   93          return type_ids and type_ids[0] or False\n   94  \n   95:     _defaults = {\n   96          'date_start': lambda *a: time.strftime(\"%Y-%m-%d\"),\n   97          'type_id': _get_type\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_contract\\hr_contract_view.xml:\n   11              <field name=\"name\">Contracts</field>\n   12              <field name=\"view_mode\">tree,form</field>\n   13:             <field name=\"context\">{'search_default_employee_id': [active_id], 'default_employee_id': active_id}</field>\n   14          </record>\n   15          \n   ..\n  152              <field name=\"view_mode\">tree,form</field>\n  153              <field name=\"domain\">[]</field>\n  154:             <field name=\"context\">{'search_default_current':1}</field>\n  155              <field name=\"search_view_id\" ref=\"hr_contract_view_search\"/>\n  156          </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_evaluation\\hr_evaluation.py:\n   27  from openerp.osv import fields, osv\n   28  from openerp.tools.translate import _\n   29: from openerp.tools import DEFAULT_SERVER_DATETIME_FORMAT as DF\n   30  \n   31  \n   ..\n   41          'active': fields.boolean('Active')\n   42      }\n   43:     _defaults = {\n   44          'active': True,\n   45          'month_first': 6,\n   46          'month_next': 12,\n   47:         'company_id': lambda s, cr, uid, c: s.pool.get('res.company')._company_default_get(cr, uid, 'account.account', context=c),\n   48      }\n   49  \n   ..\n   79          'email_subject': fields.text('Subject')\n   80      }\n   81:     _defaults = {\n   82          'sequence': 1,\n   83          'email_subject': _('''Regarding '''),\n   ..\n  161          'date_close': fields.date('Ending Date', select=True),\n  162      }\n  163:     _defaults = {\n  164          'date': lambda *a: (parser.parse(datetime.now().strftime('%Y-%m-%d')) + relativedelta(months=+1)).strftime('%Y-%m-%d'),\n  165          'state': lambda *a: 'draft',\n  ...\n  288          'deadline': fields.related('request_id', 'deadline', type=\"datetime\", string=\"Deadline\"),\n  289      }\n  290:     _defaults = {\n  291          'state': 'draft'\n  292      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_evaluation\\hr_evaluation_view.xml:\n   69              <field name=\"name\">Interviews</field>\n   70              <field name=\"view_mode\">tree,form</field>\n   71:             <field name=\"context\">{'search_default_user_to_review_id': [active_id], 'default_user_to_review_id': active_id}</field>\n   72          </record>\n   73  \n   ..\n  244              <field name=\"view_mode\">tree,form</field>\n  245              <field name=\"search_view_id\" ref=\"hr_evaluation.evaluation_search\"/>\n  246:              <field name=\"context\">{\"search_default_next_month\":1}</field>\n  247              <field name=\"help\" type=\"html\">\n  248                <p class=\"oe_view_nocontent_create\">\n  ...\n  282                              <button string=\"Send Reminder Email\" name=\"%(mail.action_email_compose_message_wizard)d\" type=\"action\"\n  283                                  states=\"waiting_answer\"\n  284:                                 context=\"{'default_body': 'Hello,\\n\\nKindly post your response for the survey interview.\\n\\nThanks',\n  285:                                             'default_subject': 'Reminder to fill up Survey' }\"/>\n  286                          </div>\n  287                          <group>\n  ...\n  292                              </group>\n  293                              <group>\n  294:                                 <field name=\"user_id\" string=\"Interviewer\" context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'base.group_hr_manager']}\"/>\n  295                                  <field name=\"deadline\"/>\n  296                              </group>\n  ...\n  358              <field name=\"view_type\">form</field>\n  359              <field name=\"view_id\" eval=\"False\"/>\n  360:             <field name=\"context\">{\"search_default_todo\":1,\"search_default_user_id\":uid}</field>\n  361              <field name=\"search_view_id\" ref=\"view_hr_evaluation_interview_search\"/>\n  362              <field name=\"help\" type=\"html\">\n  ...\n  402          target=\"new\" multi=\"True\"\n  403          key2=\"client_action_multi\"\n  404:         context=\"{'default_composition_mode': 'mass_mail',\n  405:                     'default_body': 'Hello,\\n\\nKindly post your response for the survey interview.\\n\\nThanks',\n  406:                     'default_subject': 'Reminder to fill up Survey'}\"/>\n  407  \n  408      </data>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_evaluation\\report\\hr_evaluation_report_view.xml:\n   48          <field name=\"view_type\">form</field>\n   49          <field name=\"view_mode\">graph</field>\n   50:         <field name=\"context\">{'search_default_year':1,'search_default_month':1,'search_default_employee':1,'group_by_no_leaf':1,'group_by':[]}</field>\n   51          <field name=\"search_view_id\" ref=\"view_evaluation_report_search\"/>\n   52      </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_expense\\hr_expense.py:\n  102  \n  103      }\n  104:     _defaults = {\n  105:         'company_id': lambda s, cr, uid, c: s.pool.get('res.company')._company_default_get(cr, uid, 'hr.employee', context=c),\n  106          'date': fields.date.context_today,\n  107          'state': 'draft',\n  ...\n  279              res.append(mres)\n  280              \n  281:             #Calculate tax according to default tax on product\n  282              taxes = []\n  283              #Taken from product_id_onchange in account.invoice\n  ...\n  346              acc = property_obj.get(cr, uid, 'property_account_expense_categ', 'product.category', context={'force_company': company.id})\n  347              if not acc:\n  348:                 raise osv.except_osv(_('Error!'), _('Please configure Default Expense account for Product purchase: `property_account_expense_categ`.'))\n  349          return {\n  350              'type':'src',\n  ...\n  420          'sequence': fields.integer('Sequence', select=True, help=\"Gives the sequence order when displaying a list of expense lines.\"),\n  421          }\n  422:     _defaults = {\n  423          'unit_quantity': 1,\n  424          'date_value': lambda *a: time.strftime('%Y-%m-%d'),\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_expense\\hr_expense_demo.xml:\n   11              <field name=\"type\">service</field>\n   12              <field name=\"name\">Car Travel Expenses</field>\n   13:             <field name=\"default_code\">CarTRA</field>\n   14              <field name=\"uom_id\" ref=\"product.product_uom_km\"/>\n   15              <field name=\"uom_po_id\" ref=\"product.product_uom_km\"/>\n   ..\n   24              <field name=\"type\">service</field>\n   25              <field name=\"name\">Air Ticket</field>\n   26:             <field name=\"default_code\">AT</field>\n   27              <field name=\"categ_id\" ref=\"hr_expense.cat_expense\"/>\n   28              <field name=\"hr_expense_ok\" eval=\"True\" />\n   ..\n   34              <field name=\"type\">service</field>\n   35              <field name=\"name\">Hotel Accommodation</field>\n   36:             <field name=\"default_code\">HA0</field>\n   37              <field name=\"categ_id\" ref=\"hr_expense.cat_expense\"/>\n   38              <field name=\"hr_expense_ok\" eval=\"True\" />\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_expense\\hr_expense_installer_view.xml:\n   28             <field name=\"view_type\">form</field>\n   29             <field name=\"view_mode\">tree,form</field>\n   30:            <field name=\"context\" eval=\"'{\\'default_type\\':\\'service\\',\\'default_purchase_ok\\':True, \\'default_sale_ok\\':False, \\'default_hr_expense_ok\\':True,\\'default_categ_id\\': ' + str(ref('cat_expense')) +'}'\"/>\n   31             <field name=\"domain\">[('hr_expense_ok','=',True)]</field>\n   32             <field name=\"view_id\" ref=\"product_expense_installer_tree_view\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_expense\\hr_expense_view.xml:\n   81                          <group>\n   82                              <field name=\"name\"/>\n   83:                             <field name=\"user_valid\" attrs=\"{'invisible': [('state','=','draft')]}\" context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'base.group_hr_user']}\"/>\n   84                              <field name=\"currency_id\" groups=\"base.group_multi_currency\" on_change=\"onchange_currency_id(currency_id, company_id)\"/>\n   85                          </group>\n   ..\n   87                      <notebook>\n   88                          <page string=\"Description\">\n   89:                             <field name=\"line_ids\" context=\"{'currency_id': currency_id, 'default_analytic_account': context.get('analytic_account', '')}\">\n   90                                  <form string=\"Expense Lines\">\n   91                                      <group>\n   92                                          <group>\n   93:                                             <field name=\"product_id\" on_change=\"onchange_product_id(product_id, context)\" context=\"{'default_hr_expense_ok':1}\"/>\n   94                                              <field name=\"name\"/>\n   95                                              <field name=\"ref\"/>\n   ..\n  109                                  <tree string=\"Expense Lines\" editable=\"bottom\">\n  110                                      <field name=\"sequence\" invisible=\"1\"/>\n  111:                                     <field name=\"product_id\" on_change=\"onchange_product_id(product_id, context)\" context=\"{'default_hr_expense_ok':1}\"/>\n  112                                      <field name=\"date_value\" string=\"Expense Date\"/>\n  113                                      <field name=\"name\"/>\n  ...\n  210              <field name=\"view_type\">form</field>\n  211              <field name=\"view_mode\">kanban,tree,form</field>\n  212:             <field name=\"context\">{\"default_hr_expense_ok\":1}</field>\n  213              <field name=\"domain\">[('hr_expense_ok','=',True)]</field>\n  214              <field name=\"search_view_id\" ref=\"product.product_search_form_view\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_expense\\report\\hr_expense_report_view.xml:\n   52          <field name=\"view_type\">form</field>\n   53          <field name=\"view_mode\">graph</field>\n   54:         <field name=\"context\">{'search_default_year':1,'search_default_month':1,'search_default_employee':1,'group_by_no_leaf':1,'group_by':[]}</field>\n   55          <field name=\"search_view_id\" ref=\"view_hr_expense_report_search\"/>\n   56      </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_gamification\\views\\gamification.xml:\n   49              <field name=\"name\">Goals History</field>\n   50              <field name=\"view_mode\">tree,kanban</field>\n   51:             <field name=\"context\">{'search_default_group_by_user': True, 'search_default_group_by_definition': True}</field>\n   52              <field name=\"domain\">[('challenge_id.category', '=', 'hr')]</field>\n   53              <field name=\"help\" type=\"html\">\n   ..\n   68              <field name=\"view_mode\">kanban,tree,form</field>\n   69              <field name=\"domain\">[('category', '=', 'hr')]</field>\n   70:             <field name=\"context\">{'search_default_inprogress':True, 'default_inprogress':True}</field>\n   71              <field name=\"help\" type=\"html\">\n   72                  <p class=\"oe_view_nocontent_create\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_gamification\\wizard\\grant_badge.xml:\n   39              target=\"new\"\n   40              res_model=\"gamification.badge.user.wizard\"\n   41:             context=\"{'default_employee_id': active_id, 'employee_id': active_id}\"\n   42              view_type=\"form\" view_mode=\"form\"\n   43              view_id=\"view_badge_wizard_reward\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_holidays\\hr_holidays.py:\n   85          'double_validation': fields.boolean('Apply Double Validation', help=\"When selected, the Allocation/Leave Requests for this type require a second validation to be approved.\"),\n   86      }\n   87:     _defaults = {\n   88          'color_name': 'red',\n   89          'active': True,\n   ..\n  120  \n  121      def _employee_get(self, cr, uid, context=None):        \n  122:         emp_id = context.get('default_employee_id', False)\n  123          if emp_id:\n  124              return emp_id\n  ...\n  198              type='boolean'),\n  199      }\n  200:     _defaults = {\n  201          'employee_id': _employee_get,\n  202          'state': 'confirm',\n  ...\n  290          # No date_to set so far: automatically compute one 8 hours later\n  291          if date_from and not date_to:\n  292:             date_to_with_delta = datetime.datetime.strptime(date_from, tools.DEFAULT_SERVER_DATETIME_FORMAT) + datetime.timedelta(hours=8)\n  293              result['value']['date_to'] = str(date_to_with_delta)\n  294  \n  ...\n  450              leave_days = self.pool.get('hr.holidays.status').get_days(cr, uid, [record.holiday_status_id.id], record.employee_id.id, context=context)[record.holiday_status_id.id]\n  451              if leave_days['remaining_leaves'] < 0 or leave_days['virtual_remaining_leaves'] < 0:\n  452:                 # Raising a warning gives a more user-friendly feedback than the default constraint error\n  453                  raise Warning(_('The number of remaining leaves is not sufficient for this leave type.\\n'\n  454                                  'Please verify also the leaves waiting for validation.'))\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_holidays\\hr_holidays_data.xml:\n   60              <field name=\"name\">Refused</field>\n   61              <field name=\"res_model\">hr.holidays</field>\n   62:             <field name=\"default\" eval=\"False\"/>\n   63              <field name=\"description\">Request refused</field>\n   64          </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_holidays\\hr_holidays_view.xml:\n  210              <field name=\"view_type\">form</field>\n  211              <field name=\"view_id\" ref=\"edit_holiday_new\"/>\n  212:             <field name=\"context\">{'default_type': 'remove', 'search_default_my_leaves':1}</field>\n  213              <field name=\"domain\">[('type','=','remove')]</field>\n  214              <field name=\"search_view_id\" ref=\"view_hr_holidays_filter\"/>\n  ...\n  252              <field name=\"res_model\">hr.holidays</field>\n  253              <field name=\"view_type\">form</field>\n  254:             <field name=\"context\">{'default_type': 'remove', 'search_default_approve':1}</field>\n  255              <field name=\"domain\">[('type','=','remove')]</field>\n  256              <field name=\"view_id\" ref=\"edit_holiday_new\"/>\n  ...\n  278              <field name=\"res_model\">hr.holidays</field>\n  279              <field name=\"view_type\">form</field>\n  280:             <field name=\"context\">{'default_type':'add', 'search_default_my_leaves':1}</field>\n  281              <field name=\"domain\">[('type','=','add')]</field>\n  282              <field name=\"view_id\" ref=\"edit_holiday_new\"/>\n  ...\n  304              <field name=\"res_model\">hr.holidays</field>\n  305              <field name=\"view_type\">form</field>\n  306:             <field name=\"context\">{'default_type': 'add', 'search_default_approve':1}</field>\n  307              <field name=\"domain\">[('type','=','add')]</field>\n  308              <field name=\"view_id\" ref=\"edit_holiday_new\"/>\n  ...\n  332              <field name=\"view_mode\">tree,form</field>\n  333              <field name=\"view_id\" eval=\"view_holiday_simple\"/>\n  334:             <field name=\"context\">{'search_default_group_type': 1}</field>\n  335              <field name=\"domain\">[('holiday_type','=','employee'), ('state', '!=', 'refuse')]</field>\n  336              <field name=\"search_view_id\" ref=\"view_hr_holidays_filter\"/>\n  ...\n  449              <field name=\"view_type\">form</field>\n  450              <field name=\"view_mode\">tree,form</field>\n  451:             <field name=\"context\">{'search_default_employee_id': [active_id], 'default_employee_id': active_id}</field>\n  452              <field name=\"domain\">[('type','=','remove')]</field>\n  453              <field name=\"view_id\" eval=\"view_holiday\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_holidays\\wizard\\hr_holidays_summary_department.py:\n   34      }\n   35  \n   36:     _defaults = {\n   37           'date_from': lambda *a: time.strftime('%Y-%m-01'),\n   38           'holiday_type': 'Approved'\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_holidays\\wizard\\hr_holidays_summary_employees.py:\n   32      }\n   33  \n   34:     _defaults = {\n   35           'date_from': lambda *a: time.strftime('%Y-%m-01'),\n   36           'holiday_type': 'Approved',\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_payroll\\hr_payroll.py:\n   62          return res\n   63  \n   64:     _defaults = {\n   65          'company_id': lambda self, cr, uid, context: \\\n   66                  self.pool.get('res.users').browse(cr, uid, uid,\n   ..\n   73      ]\n   74          \n   75:     def copy(self, cr, uid, id, default=None, context=None):\n   76:         default = dict(default or {},\n   77                         code=_(\"%s (copy)\") % (self.browse(cr, uid, id, context=context).code))\n   78:         return super(hr_payroll_structure, self).copy(cr, uid, id, default, context=context)\n   79  \n   80      @api.cr_uid_ids_context\n   ..\n  124      }\n  125  \n  126:     _defaults = {\n  127          'schedule_pay': 'monthly',\n  128      }\n  ...\n  155          'note': fields.text('Description'),\n  156      }\n  157:     _defaults = {\n  158          'company_id': lambda self, cr, uid, context: \\\n  159                  self.pool.get('res.users').browse(cr, uid, uid,\n  ...\n  178      }\n  179  \n  180:     _defaults = {\n  181          'company_id': lambda self, cr, uid, context: \\\n  182                  self.pool.get('res.users').browse(cr, uid, uid,\n  ...\n  221          'credit_note': fields.boolean('Credit Note', readonly=True, states={'draft': [('readonly', False)]}, help=\"If its checked, indicates that all payslips generated from here are refund payslips.\"),\n  222      }\n  223:     _defaults = {\n  224          'state': 'draft',\n  225          'date_start': lambda *a: time.strftime('%Y-%m-01'),\n  ...\n  246          if not ids: return result\n  247          for id in ids:\n  248:             result.setdefault(id, [])\n  249          cr.execute('''SELECT pl.slip_id, pl.id FROM hr_payslip_line AS pl \\\n  250                      LEFT JOIN hr_salary_rule_category AS sh on (pl.category_id = sh.id) \\\n  ...\n  291          'payslip_count': fields.function(_count_detail_payslip, type='integer', string=\"Payslip Computation Details\"),\n  292      }\n  293:     _defaults = {\n  294          'date_from': lambda *a: time.strftime('%Y-%m-01'),\n  295          'date_to': lambda *a: str(datetime.now() + relativedelta.relativedelta(months=+1, day=1, days=-1))[:10],\n  ...\n  640  \n  641  \n  642:         #defaults\n  643          res = {'value':{\n  644                        'line_ids':[],\n  ...\n  722      }\n  723      _order = 'payslip_id, sequence'\n  724:     _defaults = {\n  725          'sequence': 10,\n  726      }\n  ...\n  742      }\n  743      _order = 'payslip_id, sequence'\n  744:     _defaults = {\n  745          'sequence': 10,\n  746          'amount': 0.0,\n  ...\n  780          'note':fields.text('Description'),\n  781       }\n  782:     _defaults = {\n  783          'amount_python_compute': '''\n  784  # Available variables:\n  ...\n  928      }\n  929  \n  930:     _defaults = {\n  931          'quantity': 1.0,\n  932          'rate': 100.0,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_payroll\\hr_payroll_demo.xml:\n  148              <field name=\"struct_id\" ref=\"hr_payroll.structure_001\"/>\n  149              <field name=\"employee_id\" ref=\"hr_employee_payroll\"/>\n  150:             <field name=\"notes\">Default contract for marketing executives</field>\n  151              <field eval=\"4000.0\" name=\"wage\"/>\n  152              <field name=\"working_hours\" ref=\"resource.timesheet_group1\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_payroll\\hr_payroll_view.xml:\n  203          \n  204          <act_window name=\"Payslip Computation Details\"\n  205:             context=\"{'default_slip_id': active_id,'search_default_slip_id': active_id}\"\n  206              res_model=\"hr.payslip.line\"\n  207              src_model=\"hr.payslip\"\n  ...\n  239                              <field name=\"date_from\" on_change=\"onchange_employee_id(date_from, date_to, employee_id, contract_id)\" class=\"oe_inline\"/> - <field name=\"date_to\" class=\"oe_inline\"/>\n  240                          </div>\n  241:                         <field name=\"contract_id\" domain=\"[('employee_id','=',employee_id),('date_start','&lt;=',date_to),'|',('date_end','&gt;=',date_from),('date_end','=',False)]\" on_change=\"onchange_contract_id(date_from, date_to, employee_id, contract_id)\" context=\"{'default_employee_id': employee_id}\"/>\n  242                          <field name=\"number\"/>\n  243                          <field name=\"struct_id\" attrs=\"{'required':[('contract_id','&lt;&gt;',False)]}\"/>\n  ...\n  382              <field name=\"view_type\">form</field>\n  383              <field name=\"view_mode\">tree,form</field>\n  384:             <field name=\"context\">{'search_default_employee_id': [active_id], 'default_employee_id': active_id}</field>\n  385          </record>\n  386  \n  ...\n  741          <act_window name=\"Payslip Lines\"\n  742              domain=\"[('register_id', '=', active_id)]\"\n  743:             context=\"{'default_register_id': active_id, 'search_default_register_id': 1}\"\n  744              res_model=\"hr.payslip.line\"\n  745              src_model=\"hr.contribution.register\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_payroll\\report\\report_payslip_details.py:\n   59                  ORDER BY pl.sequence, rc.parent_id''',(tuple(ids),))\n   60              for x in self.cr.fetchall():\n   61:                 result.setdefault(x[1], [])\n   62                  result[x[1]].append(x[0])\n   63              for key, value in result.iteritems():\n   ..\n   94          for id in range(len(obj)):\n   95              if obj[id].register_id:\n   96:                 result.setdefault(obj[id].register_id.name, [])\n   97                  result[obj[id].register_id.name].append(obj[id].id)\n   98          for key, value in result.iteritems():\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_payroll\\wizard\\hr_payroll_contribution_register_report.py:\n   34      }\n   35  \n   36:     _defaults = {\n   37          'date_from': lambda *a: time.strftime('%Y-%m-01'),\n   38          'date_to': lambda *a: str(datetime.now() + relativedelta.relativedelta(months=+1, day=1, days=-1))[:10],\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_payroll_account\\hr_payroll_account.py:\n   40      }\n   41  \n   42:     def _get_default_journal(self, cr, uid, context=None):\n   43          model_data = self.pool.get('ir.model.data')\n   44          res = model_data.search(cr, uid, [('name', '=', 'expenses_journal')])\n   ..\n   47          return False\n   48  \n   49:     _defaults = {\n   50:         'journal_id': _get_default_journal,\n   51      }\n   52  \n   ..\n   94                  period_id = slip.period_id.id\n   95  \n   96:             default_partner_id = slip.employee_id.address_home_id.id\n   97              name = _('Payslip of %s') % (slip.employee_id.name)\n   98              move = {\n   ..\n  107                  if float_is_zero(amt, precision_digits=precision):\n  108                      continue\n  109:                 partner_id = line.salary_rule_id.register_id.partner_id and line.salary_rule_id.register_id.partner_id.id or default_partner_id\n  110                  debit_account_id = line.salary_rule_id.account_debit.id\n  111                  credit_account_id = line.salary_rule_id.account_credit.id\n  ...\n  148  \n  149              if float_compare(credit_sum, debit_sum, precision_digits=precision) == -1:\n  150:                 acc_id = slip.journal_id.default_credit_account_id.id\n  151                  if not acc_id:\n  152                      raise osv.except_osv(_('Configuration Error!'),_('The Expense Journal \"%s\" has not properly configured the Credit Account!')%(slip.journal_id.name))\n  ...\n  164  \n  165              elif float_compare(debit_sum, credit_sum, precision_digits=precision) == -1:\n  166:                 acc_id = slip.journal_id.default_debit_account_id.id\n  167                  if not acc_id:\n  168                      raise osv.except_osv(_('Configuration Error!'),_('The Expense Journal \"%s\" has not properly configured the Debit Account!')%(slip.journal_id.name))\n  ...\n  213      }\n  214  \n  215:     def _get_default_journal(self, cr, uid, context=None):\n  216          model_data = self.pool.get('ir.model.data')\n  217          res = model_data.search(cr, uid, [('name', '=', 'expenses_journal')])\n  ...\n  220          return False\n  221  \n  222:     _defaults = {\n  223:         'journal_id': _get_default_journal,\n  224      }\n  225  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_recruitment\\hr_recruitment.py:\n   59                                 'there are no records in that stage to display.'),\n   60      }\n   61:     _defaults = {\n   62          'sequence': 1,\n   63      }\n   ..\n   71          'sequence': fields.integer('Sequence', help=\"Gives the sequence order when displaying a list of degrees.\"),\n   72      }\n   73:     _defaults = {\n   74          'sequence': 1,\n   75      }\n   ..\n   93      _mail_mass_mailing = _('Applicants')\n   94  \n   95:     def _get_default_department_id(self, cr, uid, context=None):\n   96:         \"\"\" Gives default department by checking if present in the context \"\"\"\n   97          return (self._resolve_department_id_from_context(cr, uid, context=context) or False)\n   98  \n   99:     def _get_default_stage_id(self, cr, uid, context=None):\n  100:         \"\"\" Gives default stage_id \"\"\"\n  101:         department_id = self._get_default_department_id(cr, uid, context=context)\n  102          return self.stage_find(cr, uid, [], department_id, [('fold', '=', False)], context=context)\n  103  \n  104      def _resolve_department_id_from_context(self, cr, uid, context=None):\n  105:         \"\"\" Returns ID of department based on the value of 'default_department_id'\n  106              context key, or None if it cannot be resolved to a single\n  107              department.\n  ...\n  109          if context is None:\n  110              context = {}\n  111:         if type(context.get('default_department_id')) in (int, long):\n  112:             return context.get('default_department_id')\n  113:         if isinstance(context.get('default_department_id'), basestring):\n  114:             department_name = context['default_department_id']\n  115              department_ids = self.pool.get('hr.department').name_search(cr, uid, name=department_name, context=context)\n  116              if len(department_ids) == 1:\n  ...\n  118          return None\n  119  \n  120:     def _get_default_company_id(self, cr, uid, department_id=None, context=None):\n  121          company_id = False\n  122          if department_id:\n  ...\n  124              company_id = department.company_id.id if department and department.company_id else False\n  125          if not company_id:\n  126:             company_id = self.pool['res.company']._company_default_get(cr, uid, 'hr.applicant', context=context)\n  127          return company_id            \n  128  \n  ...\n  136          # retrieve section_id from the context and write the domain\n  137          # - ('id', 'in', 'ids'): add columns that should be present\n  138:         # - OR ('department_id', '=', False), ('fold', '=', False): add default columns that are not folded\n  139          # - OR ('department_id', 'in', department_id), ('fold', '=', False) if department_id: add department columns that are not folded\n  140          department_id = self._resolve_department_id_from_context(cr, uid, context=context)\n  ...\n  162  \n  163              if issue.date_open:\n  164:                 date_create = datetime.strptime(issue.create_date, tools.DEFAULT_SERVER_DATETIME_FORMAT)\n  165:                 date_open = datetime.strptime(issue.date_open, tools.DEFAULT_SERVER_DATETIME_FORMAT)\n  166                  values['day_open'] = (date_open - date_create).total_seconds() / (24.0 * 3600)\n  167  \n  168              if issue.date_closed:\n  169:                 date_create = datetime.strptime(issue.create_date, tools.DEFAULT_SERVER_DATETIME_FORMAT)\n  170:                 date_closed = datetime.strptime(issue.date_closed, tools.DEFAULT_SERVER_DATETIME_FORMAT)\n  171                  values['day_close'] = (date_closed - date_create).total_seconds() / (24.0 * 3600)\n  172  \n  ...\n  232      }\n  233  \n  234:     _defaults = {\n  235          'active': lambda *a: 1,\n  236          'user_id': lambda s, cr, uid, c: uid,\n  237:         'stage_id': lambda s, cr, uid, c: s._get_default_stage_id(cr, uid, c),\n  238:         'department_id': lambda s, cr, uid, c: s._get_default_department_id(cr, uid, c),\n  239:         'company_id': lambda s, cr, uid, c: s._get_default_company_id(cr, uid, s._get_default_department_id(cr, uid, c), c),\n  240          'color': 0,\n  241          'priority': '0',\n  ...\n  288              Parameter of the stage search taken from the lead:\n  289              - department_id: if set, stages must belong to this section or\n  290:               be a default case\n  291          \"\"\"\n  292          if isinstance(cases, (int, long)):\n  ...\n  299              if case.department_id:\n  300                  department_ids.append(case.department_id.id)\n  301:         # OR all section_ids and OR with case_default\n  302          search_domain = []\n  303          if department_ids:\n  ...\n  325          res = self.pool.get('ir.actions.act_window').for_xml_id(cr, uid, 'calendar', 'action_calendar_event', context)\n  326          res['context'] = {\n  327:             'default_partner_ids': applicant_ids,\n  328:             'default_user_id': uid,\n  329:             'default_name': applicant.name,\n  330:             'default_categ_ids': category and [category.id] or False,\n  331          }\n  332          return res\n  ...\n  364          model, action_id = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'base', 'action_attachment')\n  365          action = self.pool.get(model).read(cr, uid, action_id, context=context)\n  366:         action['context'] = {'default_res_model': self._name, 'default_res_id': ids[0]}\n  367          action['domain'] = str(['&', ('res_model', '=', self._name), ('res_id', 'in', ids)])\n  368          return action\n  ...\n  392              custom_values = {}\n  393          val = msg.get('from').split('<')[0]\n  394:         defaults = {\n  395              'name':  msg.get('subject') or _(\"No Subject\"),\n  396              'partner_name': val,\n  ...\n  401          }\n  402          if msg.get('priority'):\n  403:             defaults['priority'] = msg.get('priority')\n  404:         defaults.update(custom_values)\n  405:         return super(hr_applicant, self).message_new(cr, uid, msg, custom_values=defaults, context=context)\n  406  \n  407      def create(self, cr, uid, vals, context=None):\n  408          context = dict(context or {})\n  409          context['mail_create_nolog'] = True\n  410:         if vals.get('department_id') and not context.get('default_department_id'):\n  411:             context['default_department_id'] = vals.get('department_id')\n  412:         if vals.get('job_id') or context.get('default_job_id'):\n  413:             job_id = vals.get('job_id') or context.get('default_job_id')\n  414              vals.update(self.onchange_job(cr, uid, [], job_id, context=context)['value'])\n  415          if vals.get('user_id'):\n  ...\n  521          context = dict(context or {})\n  522          context['empty_list_help_model'] = 'hr.job'\n  523:         context['empty_list_help_id'] = context.get('default_job_id', None)\n  524          context['empty_list_help_document_name'] = _(\"job applicants\")\n  525          return super(hr_applicant, self).get_empty_list_help(cr, uid, help, context=context)\n  ...\n  573          return user.company_id.partner_id.id\n  574  \n  575:     _defaults = {\n  576          'address_id': _address_get\n  577      }\n  ...\n  580          \"\"\"Installation hook to create aliases for all jobs and avoid constraint errors.\"\"\"\n  581          return self.pool.get('mail.alias').migrate_to_alias(cr, self._name, self._table, super(hr_job, self)._auto_init,\n  582:             'hr.applicant', self._columns['alias_id'], 'name', alias_prefix='job+', alias_defaults={'job_id': 'id'}, context=context)\n  583  \n  584      def create(self, cr, uid, vals, context=None):\n  ...\n  586          job_id = super(hr_job, self).create(cr, uid, vals, context=alias_context)\n  587          job = self.browse(cr, uid, job_id, context=context)\n  588:         self.pool.get('mail.alias').write(cr, uid, [job.alias_id.id], {'alias_parent_thread_id': job_id, \"alias_defaults\": {'job_id': job_id}}, context)\n  589          return job_id\n  590  \n  ...\n  607          action = self.pool.get(model).read(cr, uid, action_id, context=context)\n  608          applicant_ids = self.pool.get('hr.applicant').search(cr, uid, [('job_id', 'in', ids)], context=context)\n  609:         action['context'] = {'default_res_model': self._name, 'default_res_id': ids[0]}\n  610          action['domain'] = str(['|', '&', ('res_model', '=', 'hr.job'), ('res_id', 'in', ids), '&', ('res_model', '=', 'hr.applicant'), ('res_id', 'in', applicant_ids)])\n  611          return action\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_recruitment\\hr_recruitment_data.xml:\n  130          <field name=\"name\">New Applicant</field>\n  131          <field name=\"res_model\">hr.applicant</field>\n  132:         <field name=\"default\" eval=\"False\"/>\n  133          <field name=\"description\">Applicant created</field>\n  134      </record>\n  ...\n  136          <field name=\"name\">Stage Changed</field>\n  137          <field name=\"res_model\">hr.applicant</field>\n  138:         <field name=\"default\" eval=\"False\"/>\n  139          <field name=\"description\">Stage changed</field>\n  140      </record>\n  ...\n  142          <field name=\"name\">Applicant Hired</field>\n  143          <field name=\"res_model\">hr.applicant</field>\n  144:         <field name=\"default\" eval=\"False\"/>\n  145          <field name=\"description\">Applicant hired</field>\n  146      </record>\n  ...\n  149          <field name=\"name\">Applicant Created</field>\n  150          <field name=\"res_model\">hr.job</field>\n  151:         <field name=\"default\" eval=\"True\"/>\n  152          <field name=\"parent_id\" eval=\"ref('mt_applicant_new')\"/>\n  153          <field name=\"relation_field\">job_id</field>\n  ...\n  156          <field name=\"name\">Applicant Stage Changed</field>\n  157          <field name=\"res_model\">hr.job</field>\n  158:         <field name=\"default\" eval=\"True\"/>\n  159          <field name=\"parent_id\" eval=\"ref('mt_applicant_stage_changed')\"/>\n  160          <field name=\"relation_field\">job_id</field>\n  ...\n  163          <field name=\"name\">Applicant Hired</field>\n  164          <field name=\"res_model\">hr.job</field>\n  165:         <field name=\"default\" eval=\"True\"/>\n  166          <field name=\"parent_id\" eval=\"ref('mt_applicant_hired')\"/>\n  167          <field name=\"relation_field\">job_id</field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_recruitment\\hr_recruitment_view.xml:\n  125                      <group>\n  126                          <field name=\"user_id\"\n  127:                             context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'base.group_hr_manager']}\"/>\n  128                          <label for=\"title_action\"/>\n  129                          <div>\n  ...\n  240          <field name=\"model\">hr.applicant</field>\n  241          <field name=\"arch\" type=\"xml\">\n  242:             <kanban default_group_by=\"stage_id\">\n  243                  <field name=\"stage_id\"/>\n  244                  <field name=\"color\"/>\n  ...\n  312          <field name=\"res_model\">hr.applicant</field>\n  313          <field name=\"view_mode\">kanban,tree,form,graph,calendar</field>\n  314:         <field name=\"context\">{'search_default_job_id': [active_id], 'default_job_id': active_id, 'empty_list_help_model': 'hr.job'}</field>\n  315          <field name=\"help\" type=\"html\">\n  316                <p>\n  ...\n  356              </group>\n  357              <xpath expr=\"//field[@name='department_id']\" position=\"after\">\n  358:                     <label for=\"alias_name\" string=\"Specific Email Address\" attrs=\"{'invisible': [('alias_domain', '=', False)]}\" help =\"Define a specific contact address for this job position. If you keep it empty, the default email address will be used which is in human resources settings\"/>\n  359                      <div name=\"alias_def\" attrs=\"{'invisible': [('alias_domain', '=', False)]}\">\n  360                          <field name=\"alias_id\" class=\"oe_read_only oe_inline\"\n  ...\n  373                          icon=\"fa-file-o\"\n  374                          name=\"%(action_hr_job_applications)d\" \n  375:                         context=\"{'default_user_id': user_id}\" \n  376                          type=\"action\">\n  377                          <field name=\"application_count\" widget=\"statinfo\" string=\"Applications\"/>\n  ...\n  495              <field name=\"view_type\">form</field>\n  496              <field name=\"view_mode\">kanban,tree,form</field>\n  497:             <field name=\"context\">{'search_default_in_recruitment': 1}</field>\n  498              <field name=\"help\" type=\"html\">\n  499                <p class=\"oe_view_nocontent_create\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_recruitment\\res_config.py:\n   32              help='Manage your CV\\'s and motivation letter related to all applicants.\\n'\n   33                   '-This installs the module document_ftp. This will install the knowledge management  module in order to allow you to search using specific keywords through  the content of all documents (PDF, .DOCx...)'),\n   34:         'alias_prefix': fields.char('Default Alias Name for Jobs'),\n   35          'alias_domain': fields.char('Alias Domain'),\n   36      }\n   37  \n   38:     _defaults = {\n   39          'alias_domain': lambda self, cr, uid, context: self.pool['mail.alias']._get_alias_domain(cr, SUPERUSER_ID, [1], None, None)[1],\n   40      }\n   41  \n   42:     def _find_default_job_alias_id(self, cr, uid, context=None):\n   43          alias_id = self.pool['ir.model.data'].xmlid_to_res_id(cr, uid, 'hr_recruitment.mail_alias_jobs')\n   44          if not alias_id:\n   ..\n   49                      ('alias_parent_model_id.model', '=', 'hr.job'),\n   50                      ('alias_parent_thread_id', '=', False),\n   51:                     ('alias_defaults', '=', '{}')\n   52                  ], context=context)\n   53              alias_id = alias_ids and alias_ids[0] or False\n   54          return alias_id\n   55  \n   56:     def get_default_alias_prefix(self, cr, uid, ids, context=None):\n   57          alias_name = False\n   58:         alias_id = self._find_default_job_alias_id(cr, uid, context=context)\n   59          if alias_id:\n   60              alias_name = self.pool['mail.alias'].browse(cr, uid, alias_id, context=context).alias_name\n   61          return {'alias_prefix': alias_name}\n   62  \n   63:     def set_default_alias_prefix(self, cr, uid, ids, context=None):\n   64          mail_alias = self.pool.get('mail.alias')\n   65          for record in self.browse(cr, uid, ids, context=context):\n   66:             alias_id = self._find_default_job_alias_id(cr, uid, context=context)\n   67              if not alias_id:\n   68                  create_ctx = dict(context, alias_model_name='hr.applicant', alias_parent_model_name='hr.job')\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_recruitment\\res_config_view.xml:\n   22                  <xpath expr=\"//div[@name='hr_recruitment']\" position=\"after\">\n   23                      <div attrs=\"{'invisible': ['|',('module_hr_recruitment','=',False),('alias_domain', '=', False)]}\">\n   24:                         <label string=\"Default job email address\"/>\n   25                          <field name=\"alias_prefix\" class=\"oe_inline\" attrs=\"{'required': [('alias_domain', '!=', False)]}\"/>\n   26                          @\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_timesheet\\hr_timesheet.py:\n   60          return False\n   61  \n   62:     _defaults = {\n   63          'journal_id': _getAnalyticJournal,\n   64          'product_id': _getEmployeeProduct\n   ..\n   90          if prod_id and unit_amount:\n   91              # find company\n   92:             company_id = self.pool.get('res.company')._company_default_get(cr, uid, 'account.analytic.line', context=context)\n   93              r = self.pool.get('account.analytic.line').on_change_unit_amount(cr, uid, id, prod_id, unit_amount, company_id, unit, journal_id, context=context)\n   94              if r:\n   ..\n  159  \n  160  \n  161:     _defaults = {\n  162          'product_uom_id': _getEmployeeUnit,\n  163          'product_id': _getEmployeeProduct,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_timesheet\\hr_timesheet_view.xml:\n   10                      <field name=\"date\" on_change=\"on_change_date(date)\"/>\n   11                      <field name=\"user_id\" on_change=\"on_change_user_id(user_id)\" required=\"1\" options='{\"no_open\": True}'\n   12:                         context=\"{'default_groups_ref': ['base.group_user']}\"/>\n   13                      <field name=\"name\"/>\n   14:                     <field domain=\"[('type','=','normal'),('use_timesheets','=',1)]\" name=\"account_id\" context=\"{'default_use_timesheets': 1, 'default_type': 'contract'}\"/>\n   15                      <field name=\"unit_amount\" string=\"Duration\" on_change=\"on_change_unit_amount(product_id, unit_amount, False, product_uom_id,journal_id)\" sum=\"Total time\" widget=\"float_time\"/>\n   16                      <field name=\"product_uom_id\" on_change=\"on_change_unit_amount(product_id, unit_amount, False, product_uom_id,journal_id)\" invisible=\"1\"/>\n   ..\n   32                              <field name=\"name\"/>\n   33                              <field name=\"user_id\" on_change=\"on_change_user_id(user_id)\" required=\"1\"\n   34:                                 context=\"{'default_groups_ref': ['base.group_user']}\"/>\n   35                          </group>\n   36                          <group>\n   ..\n   82  \n   83          <record model=\"ir.actions.act_window\" id=\"act_analytic_cost_revenue\">\n   84:             <field name=\"context\">{'search_default_group_date': 1, 'search_default_group_journal': 1}</field>\n   85              <field name=\"domain\">[('account_id','child_of', active_id)]</field>\n   86              <field name=\"name\">Costs &amp; Revenues</field>\n   ..\n  132              <field name=\"view_mode\">tree,form</field>\n  133              <field name=\"domain\">[('use_timesheets','=', True)]</field>\n  134:             <field name=\"context\">{'default_use_timesheets':1}</field>\n  135          </record>\n  136  \n  ...\n  143              <field name=\"view_type\">form</field>\n  144              <field name=\"view_mode\">tree,form</field>\n  145:             <field name=\"context\">{\"search_default_today\":1}</field>\n  146              <field name=\"search_view_id\" ref=\"hr_timesheet_line_search\"/>\n  147              <field name=\"help\" type=\"html\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_timesheet\\wizard\\hr_timesheet_sign_in_out.py:\n   57          return res\n   58  \n   59:     def default_get(self, cr, uid, fields_list, context=None):\n   60:         res = super(hr_so_project, self).default_get(cr, uid, fields_list, context=context)\n   61          res.update(self._get_empid2(cr, uid, context=context))\n   62          return res\n   ..\n   72          if minimum:\n   73              hour = round(round((hour + minimum / 2) / minimum) * minimum, 2)\n   74:         res = timesheet_obj.default_get(cr, uid, ['product_id','product_uom_id'], context=context)\n   75  \n   76          if not res['product_uom_id']:\n   ..\n  123          @param cr: the current row, from the database cursor,\n  124          @param uid: the current user’s ID for security checks,\n  125:         @param fields: List of fields for default value\n  126          @param context: A standard dictionary for contextual values\n  127          \"\"\"\n  ...\n  134      def check_state(self, cr, uid, ids, context=None):\n  135          obj_model = self.pool.get('ir.model.data')\n  136:         emp_id = self.default_get(cr, uid, ['emp_id'], context)['emp_id']\n  137          # get the latest action (sign_in or out) for this employee\n  138          cr.execute('select action from hr_attendance where employee_id=%s and action in (\\'sign_in\\',\\'sign_out\\') order by name desc limit 1', (emp_id,))\n  ...\n  159          return {'type': 'ir.actions.act_window_close'}\n  160  \n  161:     def default_get(self, cr, uid, fields_list, context=None):\n  162:         res = super(hr_si_project, self).default_get(cr, uid, fields_list, context=context)\n  163          emp_obj = self.pool.get('hr.employee')\n  164          emp_id = emp_obj.search(cr, uid, [('user_id', '=', uid)], context=context)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_timesheet_invoice\\hr_timesheet_invoice.py:\n   34          'factor': fields.float('Discount (%)', required=True, help=\"Discount in percentage\"),\n   35      }\n   36:     _defaults = {\n   37          'factor': lambda *a: 0.0,\n   38      }\n   ..\n   51          account_to_invoice_map = {}\n   52          for rec in cr.dictfetchall():\n   53:             account_to_invoice_map.setdefault(rec['account_id'], []).append(rec['invoice_id'])\n   54  \n   55          for account in self.browse(cr, uid, ids, context=context):\n   56              invoice_ids = filter(None, list(set(account_to_invoice_map.get(account.id, []))))\n   57              for invoice in obj_invoice.browse(cr, uid, invoice_ids, context=context):\n   58:                 res.setdefault(account.id, 0.0)\n   59                  res[account.id] += invoice.amount_untaxed\n   60          for id in ids:\n   ..\n  104      }\n  105  \n  106:     def _default_journal(self, cr, uid, context=None):\n  107          proxy = self.pool.get('hr.employee')\n  108          record_ids = proxy.search(cr, uid, [('user_id', '=', uid)], context=context)\n  ...\n  112          return False\n  113  \n  114:     def _default_general_account(self, cr, uid, context=None):\n  115          proxy = self.pool.get('hr.employee')\n  116          record_ids = proxy.search(cr, uid, [('user_id', '=', uid)], context=context)\n  ...\n  121          return False\n  122  \n  123:     _defaults = {\n  124:         'journal_id' : _default_journal,\n  125:         'general_account_id' : _default_general_account,\n  126      }\n  127  \n  ...\n  202                  context2 = context.copy()\n  203                  context2['lang'] = partner.lang\n  204:                 # set company_id in context, so the correct default journal will be selected\n  205                  context2['force_company'] = curr_invoice['company_id']\n  206                  # set force_company in context so the correct product properties are selected (eg. income account)\n  ...\n  297          if not account_id:\n  298              return res\n  299:         res.setdefault('value',{})\n  300          acc = self.pool.get('account.analytic.account').browse(cr, uid, account_id)\n  301          st = acc.to_invoice.id\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_timesheet_invoice\\hr_timesheet_invoice_view.xml:\n   50              <field name=\"arch\" type=\"xml\">\n   51                  <field name=\"account_id\" position=\"replace\">\n   52:                     <field domain=\"[('type','in',['normal','contract']),('state', '&lt;&gt;', 'close'),('use_timesheets','=',1)]\" name=\"account_id\" on_change=\"on_change_account_id(account_id, user_id)\" context=\"{'default_use_timesheets': 1}\"/>\n   53                  </field>\n   54              </field>\n   ..\n   72              <field name=\"arch\" type=\"xml\">\n   73                  <field name=\"account_id\" position=\"replace\">\n   74:                     <field domain=\"[('type','in',['normal','contract']),('state', '&lt;&gt;', 'close'),('use_timesheets','=',1)]\" name=\"account_id\" on_change=\"on_change_account_id(account_id, user_id)\" context=\"{'default_use_timesheets': 1}\"/>\n   75                  </field>\n   76              </field>\n   ..\n  171                  Click to add a new type of invoicing.\n  172                </p><p>\n  173:                 Odoo allows you to create default invoicing types. You might\n  174                  have to regularly assign discounts because of a specific\n  175                  contract or agreement with a customer. From this menu, you can\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_timesheet_invoice\\report\\hr_timesheet_invoice_report_view.xml:\n   70              <field name=\"view_type\">form</field>\n   71              <field name=\"view_mode\">tree,graph</field>\n   72:             <field name=\"context\">{'search_default_month':1,'search_default_User':1,'search_default_user_id':uid,'group_by_no_leaf':1,'group_by':[]}</field>\n   73              <field name=\"search_view_id\" ref=\"view_timesheet_line_search\"/>\n   74          </record>\n   ..\n  146              <field name=\"view_type\">form</field>\n  147              <field name=\"view_mode\">graph,tree</field>\n  148:             <field name=\"context\">{\"search_default_user_id\":uid}</field>\n  149              <field name=\"search_view_id\" ref=\"view_timesheet_user_search\"/>\n  150          </record>\n  ...\n  208              <field name=\"view_type\">form</field>\n  209              <field name=\"view_mode\">graph,tree</field>\n  210:             <field name=\"context\">{\"search_default_user_id\":uid}</field>\n  211              <field name=\"search_view_id\" ref=\"view_timesheet_invoice_search\"/>\n  212          </record>\n  ...\n  272              <field name=\"view_type\">form</field>\n  273              <field name=\"view_mode\">graph,tree</field>\n  274:             <field name=\"context\">{\"search_default_user_id\":uid}</field>\n  275              <field name=\"search_view_id\" ref=\"view_timesheet_account_date_search\"/>\n  276          </record>\n  ...\n  341  \n  342          <act_window\n  343:         context=\"{'search_default_user_id': [active_id]}\"\n  344          id=\"act_res_users_2_report_timesheet_user\"\n  345          name=\"Timesheets per day\"\n  ...\n  349  \n  350          <act_window\n  351:         context=\"{'search_default_user_id': [active_id]}\"\n  352          id=\"act_res_users_2_report_timehsheet_account\"\n  353          name=\"Timesheets per account\"\n  ...\n  356  \n  357          <act_window\n  358:             context=\"{'search_default_manager_id': [active_id]}\"\n  359              id=\"act_res_users_2_report_timesheet_invoice\"\n  360              name=\"Costs to invoice\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_timesheet_invoice\\report\\report_analytic_view.xml:\n  129          <record id=\"act_acc_analytic_acc_2_report_acc_analytic_line_to_invoice\" model=\"ir.actions.act_window\">\n  130              <field name=\"domain\">[]</field>\n  131:             <field name=\"context\">{'search_default_account_id': [active_id], 'default_account_id': active_id,'search_default_to_invoice': 1}</field>\n  132              <field name=\"name\">To Invoice</field>\n  133              <field name=\"res_model\">account.analytic.line</field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_timesheet_invoice\\wizard\\hr_timesheet_analytic_profit.py:\n   41          return datetime.date.today().strftime('%Y-%m-%d')\n   42  \n   43:     _defaults = {\n   44          'date_from': _date_from,\n   45          'date_to': _date_to\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_timesheet_invoice\\wizard\\hr_timesheet_final_invoice_create.py:\n   46          data = self.read(cr, uid, ids, context=context)[0]\n   47          # hack for fixing small issue (context should not propagate implicitly between actions)\n   48:         if 'default_type' in context:\n   49:             del context['default_type']\n   50          ids = self.pool.get('account.analytic.line').search(cr, uid, [('invoice_id','=',False),('to_invoice','<>', False), ('account_id', 'in', context['active_ids'])], context=context)\n   51          invs = self.pool.get('account.analytic.line').invoice_cost_create(cr, uid, ids, data, context=context)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_timesheet_invoice\\wizard\\hr_timesheet_invoice_create.py:\n   36      }\n   37  \n   38:     _defaults = {\n   39           'date':  1,\n   40           'name':  1,\n   ..\n   47          @param cr: the current row, from the database cursor,\n   48          @param uid: the current user’s ID for security checks,\n   49:         @param fields: List of fields for default value\n   50          @param context: A standard dictionary for contextual values\n   51          \"\"\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_timesheet_sheet\\hr_timesheet_sheet.py:\n   27  \n   28  from openerp.osv import fields, osv\n   29: from openerp.tools import DEFAULT_SERVER_DATE_FORMAT, DEFAULT_SERVER_DATETIME_FORMAT\n   30  from openerp.tools.translate import _\n   31  \n   ..\n   44          res = {}\n   45          for sheet in self.browse(cr, uid, ids, context=context or {}):\n   46:             res.setdefault(sheet.id, {\n   47                  'total_attendance': 0.0,\n   48                  'total_timesheet': 0.0,\n   ..\n  184      }\n  185  \n  186:     def _default_date_from(self, cr, uid, context=None):\n  187          user = self.pool.get('res.users').browse(cr, uid, uid, context=context)\n  188          r = user.company_id and user.company_id.timesheet_range or 'month'\n  ...\n  195          return time.strftime('%Y-%m-%d')\n  196  \n  197:     def _default_date_to(self, cr, uid, context=None):\n  198          user = self.pool.get('res.users').browse(cr, uid, uid, context=context)\n  199          r = user.company_id and user.company_id.timesheet_range or 'month'\n  ...\n  206          return time.strftime('%Y-%m-%d')\n  207  \n  208:     def _default_employee(self, cr, uid, context=None):\n  209          emp_ids = self.pool.get('hr.employee').search(cr, uid, [('user_id','=',uid)], context=context)\n  210          return emp_ids and emp_ids[0] or False\n  211  \n  212:     _defaults = {\n  213:         'date_from' : _default_date_from,\n  214:         'date_to' : _default_date_to,\n  215          'state': 'new',\n  216:         'employee_id': _default_employee,\n  217:         'company_id': lambda self, cr, uid, c: self.pool.get('res.company')._company_default_get(cr, uid, 'hr_timesheet_sheet.sheet', context=c)\n  218      }\n  219  \n  ...\n  284      _inherit = \"account.analytic.line\"\n  285  \n  286:     def _get_default_date(self, cr, uid, context=None):\n  287          if context is None:\n  288              context = {}\n  289:         #get the default date (should be: today)\n  290:         res = super(account_analytic_line, self)._get_default_date(cr, uid, context=context)\n  291:         #if we got the dates from and to from the timesheet and if the default date is in between, we use the default\n  292:         #but if the default isn't included in those dates, we use the date start of the timesheet as default\n  293          if context.get('timesheet_date_from') and context.get('timesheet_date_to'):\n  294              if context['timesheet_date_from'] <= res <= context['timesheet_date_to']:\n  295                  return res\n  296              return context.get('timesheet_date_from')\n  297:         #if we don't get the dates from the timesheet, we return the default value from super()\n  298          return res\n  299  \n  ...\n  305              context = {}\n  306          group_template_required = self.pool['res.users'].has_group(cr, uid, 'account_analytic_analysis.group_template_required')\n  307:         if not context.get('default_use_timesheets') or group_template_required:\n  308              return super(account_analytic_account, self).name_create(cr, uid, name, context=context)\n  309          rec_id = self.create(cr, uid, {self._rec_name: name}, context)\n  ...\n  390      _inherit = \"hr.attendance\"\n  391  \n  392:     def _get_default_date(self, cr, uid, context=None):\n  393          if context is None:\n  394              context = {}\n  ...\n  431  \n  432          if not date:\n  433:             date = time.strftime(DEFAULT_SERVER_DATETIME_FORMAT)\n  434  \n  435          att_tz = timezone(tz or 'utc')\n  436  \n  437:         attendance_dt = datetime.strptime(date, DEFAULT_SERVER_DATETIME_FORMAT)\n  438          att_tz_dt = pytz.utc.localize(attendance_dt)\n  439          att_tz_dt = att_tz_dt.astimezone(att_tz)\n  ...\n  441          # date_from which is a date format thus using hours would lead to\n  442          # be out of scope of timesheet\n  443:         att_tz_date_str = datetime.strftime(att_tz_dt, DEFAULT_SERVER_DATE_FORMAT)\n  444          return att_tz_date_str\n  445  \n  ...\n  448          sheet_obj = self.pool['hr_timesheet_sheet.sheet']\n  449          if not date:\n  450:             date = time.strftime(DEFAULT_SERVER_DATETIME_FORMAT)\n  451  \n  452          att_tz_date_str = self._get_attendance_employee_tz(\n  ...\n  477              )\n  478      }\n  479:     _defaults = {\n  480:         'name': _get_default_date,\n  481      }\n  482  \n  ...\n  657                   \"computation for one sheet. Set this to 0 if you do not want any control.\"),\n  658      }\n  659:     _defaults = {\n  660          'timesheet_range': lambda *args: 'week',\n  661          'timesheet_max_difference': lambda *args: 0.0\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_timesheet_sheet\\hr_timesheet_sheet_view.xml:\n   43  \n   44          <record model=\"ir.actions.act_window\" id=\"act_hr_timesheet_sheet_sheet_2_hr_analytic_timesheet\">\n   45:             <field name=\"context\">{'search_default_sheet_id': [active_id]}</field>\n   46              <field name=\"name\">Timesheet Activities</field>\n   47              <field name=\"res_model\">hr.analytic.timesheet</field>\n   ..\n   51  \n   52          <record model=\"ir.actions.act_window\" id=\"act_hr_timesheet_sheet_sheet_2_hr_attendance\">\n   53:             <field name=\"context\">{'search_default_sheet_id': [active_id]}</field>\n   54              <field name=\"name\">Attendances</field>\n   55              <field name=\"res_model\">hr.attendance</field>\n   ..\n  112                                  <tree editable=\"top\" string=\"Timesheet Activities\">\n  113                                      <field name=\"date\"/>\n  114:                                     <field domain=\"[('type','in',['normal', 'contract']), ('state', '&lt;&gt;', 'close'),('use_timesheets','=',1)]\" name=\"account_id\" on_change=\"on_change_account_id(account_id, user_id)\" context=\"{'default_use_timesheets': 1}\"/>\n  115                                      <field name=\"name\"/>\n  116                                      <field name=\"unit_amount\" on_change=\"on_change_unit_amount(product_id, unit_amount, False, product_uom_id,journal_id)\" widget=\"float_time\" string=\"Hours\" sum=\"Hours\"/>\n  ...\n  140                          <page string=\"Attendances\" groups=\"base.group_hr_attendance\">\n  141                              <group>\n  142:                                 <field context=\"{'default_employee_id': employee_id, 'user_id':user_id}\" name=\"attendances_ids\" nolabel=\"1\">\n  143                                      <tree string=\"Attendances\" editable=\"bottom\">\n  144                                          <field name=\"name\"/>\n  ...\n  199              <field name=\"view_type\">form</field>\n  200              <field name=\"view_id\" eval=\"False\"/>\n  201:             <field name=\"context\">{'search_default_to_approve':1}</field>\n  202              <field name=\"search_view_id\" ref=\"view_hr_timesheet_sheet_filter\"/>\n  203              <field name=\"help\" type=\"html\">\n  ...\n  309  \n  310          <act_window\n  311:             context=\"{'search_default_sheet_id': [active_id]}\"\n  312              id=\"act_hr_timesheet_sheet_sheet_by_account\"\n  313              name=\"Timesheet by Account\"\n  ...\n  317  \n  318          <act_window\n  319:             context=\"{'search_default_sheet_id': [active_id]}\"\n  320              id=\"act_hr_timesheet_sheet_sheet_by_day\"\n  321              name=\"Timesheet by Day\"\n  ...\n  362          <field name=\"name\">Timesheets</field>\n  363          <field name=\"view_mode\">tree,form</field>\n  364:         <field name=\"context\">{'search_default_employee_id': [active_id], 'default_employee_id': active_id}</field>\n  365      </record>\n  366           \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_timesheet_sheet\\res_config.py:\n   33      }\n   34  \n   35:     def get_default_timesheet(self, cr, uid, fields, context=None):\n   36          user = self.pool.get('res.users').browse(cr, uid, uid, context=context)\n   37          return {\n   ..\n   40          }\n   41  \n   42:     def set_default_timesheet(self, cr, uid, ids, context=None):\n   43          config = self.browse(cr, uid, ids[0], context)\n   44          user = self.pool.get('res.users').browse(cr, uid, uid, context)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hw_escpos\\controllers\\main.py:\n  373          except Exception as e:\n  374              pass\n  375:         return 'The list of supported devices has been reset to factory defaults.<br/><a href=\"/hw_proxy/status\">Ok</a>'\n  376  \n  377      \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hw_escpos\\escpos\\constants.py:\n   34  TXT_ALIGN_CT    = '\\x1b\\x61\\x01' # Centering\n   35  TXT_ALIGN_RT    = '\\x1b\\x61\\x02' # Right justification\n   36: TXT_COLOR_BLACK = '\\x1b\\x72\\x00' # Default Color\n   37  TXT_COLOR_RED   = '\\x1b\\x72\\x01' # Alternative Color ( Usually Red )\n   38  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hw_escpos\\escpos\\escpos.py:\n   54      def __init__(self):\n   55          self.stack = []\n   56:         self.defaults = {   # default style values\n   57              'align':     'left',\n   58              'underline': 'off',\n   ..\n   77          }\n   78  \n   79:         self.types = { # attribute types, default is string and can be ommitted\n   80              'width':    'int',\n   81              'indent':   'int',\n   ..\n  132          }\n  133  \n  134:         self.push(self.defaults) \n  135  \n  136      def get(self,style):\n  ...\n  505          if font.upper() == \"B\":\n  506              self._raw(BARCODE_FONT_B)\n  507:         else: # DEFAULT FONT: A\n  508              self._raw(BARCODE_FONT_A)\n  509          # Position\n  ...\n  514          elif pos.upper() == \"ABOVE\":\n  515              self._raw(BARCODE_TXT_ABV)\n  516:         else:  # DEFAULT POSITION: BELOW \n  517              self._raw(BARCODE_TXT_BLW)\n  518          # Type \n  ...\n  850          if font.upper() == \"B\":\n  851              self._raw(TXT_FONT_B)\n  852:         else:  # DEFAULT FONT: A\n  853              self._raw(TXT_FONT_A)\n  854          # Type\n  ...\n  881              self._raw(TXT_2WIDTH)\n  882              self._raw(TXT_2HEIGHT)\n  883:         else: # DEFAULT SIZE: NORMAL\n  884              self._raw(TXT_NORMAL)\n  885  \n  ...\n  892          if mode.upper() == \"PART\":\n  893              self._raw(PAPER_PART_CUT)\n  894:         else: # DEFAULT MODE: FULL CUT\n  895              self._raw(PAPER_FULL_CUT)\n  896  \n  ...\n  914          elif hw.upper() == \"RESET\":\n  915              self._raw(HW_RESET)\n  916:         else: # DEFAULT: DOES NOTHING\n  917              pass\n  918  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hw_proxy\\controllers\\main.py:\n  100              your printer's description in the device list above. If you find that your printer works\n  101              well, please send your printer's description to <a href='mailto:support@odoo.com'>\n  102:             support@openerp.com</a> so that we can add it to the default list of supported devices.\n  103              </p>\n  104              <form action='/hw_proxy/escpos/add_supported_device' method='GET'>\n  ...\n  106                  <input type='submit' value='submit' />\n  107              </form>\n  108:             <h2>Reset To Defaults</h2>\n  109              <p>If the added devices cause problems, you can <a href='/hw_proxy/escpos/reset_supported_devices'>Reset the\n  110:             device list to factory default.</a> This operation cannot be undone.</p>\n  111          \"\"\"\n  112          resp += \"</body>\\n</html>\\n\\n\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\im_chat\\im_chat.py:\n   12  from openerp.http import request\n   13  from openerp.osv import osv, fields\n   14: from openerp.tools.misc import DEFAULT_SERVER_DATETIME_FORMAT\n   15  from openerp.addons.bus.bus import TIMEOUT\n   16  \n   ..\n   33          \"user_id\" : fields.many2one('res.users', 'Users', required=True, ondelete=\"cascade\"),\n   34      }\n   35:     _defaults = {\n   36          \"state\" : 'open'\n   37      }\n   ..\n   49          'session_res_users_rel': fields.one2many('im_chat.conversation_state', 'session_id', 'Relation Session Users'),\n   50      }\n   51:     _defaults = {\n   52          'uuid': lambda *args: '%s' % uuid.uuid4(),\n   53      }\n   ..\n  136      def get_image(self, cr, uid, uuid, user_id, context=None):\n  137          \"\"\" get the avatar of a user in the given session \"\"\"\n  138:         #default image\n  139          image_b64 = 'R0lGODlhAQABAIABAP///wAAACH5BAEKAAEALAAAAAABAAEAAAICTAEAOw=='\n  140          # get the session\n  ...\n  162          'message': fields.char('Message'),\n  163      }\n  164:     _defaults = {\n  165          'type' : 'message',\n  166      }\n  ...\n  172          # get the message since the AWAY_TIMER\n  173          threshold = datetime.datetime.now() - datetime.timedelta(seconds=AWAY_TIMER)\n  174:         threshold = threshold.strftime(DEFAULT_SERVER_DATETIME_FORMAT)\n  175          domain = [('to_id.user_ids', 'in', [uid]), ('create_date','>',threshold)]\n  176  \n  ...\n  251          'status' : fields.selection([('online','Online'), ('away','Away'), ('offline','Offline')], 'IM Status'),\n  252      }\n  253:     _defaults = {\n  254          'last_poll' : fields.datetime.now,\n  255          'last_presence' : fields.datetime.now,\n  ...\n  262          presence_ids = self.search(cr, uid, [('user_id', '=', uid)], context=context)\n  263          presences = self.browse(cr, uid, presence_ids, context=context)\n  264:         # set the default values\n  265          send_notification = True\n  266          vals = {\n  267:             'last_poll': time.strftime(DEFAULT_SERVER_DATETIME_FORMAT),\n  268              'status' : presences and presences[0].status or 'offline'\n  269          }\n  ...\n  275          else:\n  276              if presence:\n  277:                 vals['last_presence'] = time.strftime(DEFAULT_SERVER_DATETIME_FORMAT)\n  278                  vals['status'] = 'online'\n  279              else:\n  280                  threshold = datetime.datetime.now() - datetime.timedelta(seconds=AWAY_TIMER)\n  281:                 if datetime.datetime.strptime(presences[0].last_presence, DEFAULT_SERVER_DATETIME_FORMAT) < threshold:\n  282                      vals['status'] = 'away'\n  283              send_notification = presences[0].status != vals['status']\n  284              # write only if the last_poll is passed TIMEOUT, or if the status has changed\n  285:             delta = datetime.datetime.now() - datetime.datetime.strptime(presences[0].last_poll, DEFAULT_SERVER_DATETIME_FORMAT)\n  286              if (delta > datetime.timedelta(seconds=TIMEOUT) or send_notification):\n  287                  self.write(cr, uid, presence_ids, vals, context=context)\n  ...\n  298      def check_users_disconnection(self, cr, uid, context=None):\n  299          \"\"\" disconnect the users having a too old last_poll \"\"\"\n  300:         dt = (datetime.datetime.now() - datetime.timedelta(0, DISCONNECTION_TIMER)).strftime(DEFAULT_SERVER_DATETIME_FORMAT)\n  301          presence_ids = self.search(cr, uid, [('last_poll', '<', dt), ('status' , '!=', 'offline')], context=context)\n  302          self.write(cr, uid, presence_ids, {'status': 'offline'}, context=context)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\im_livechat\\im_livechat.py:\n   33      _name = 'im_livechat.channel'\n   34  \n   35:     def _get_default_image(self, cr, uid, context=None):\n   36:         image_path = openerp.modules.get_module_resource('im_livechat', 'static/src/img', 'default.png')\n   37          return tools.image_resize_image_big(open(image_path, 'rb').read().encode('base64'))\n   38      def _get_image(self, cr, uid, ids, name, args, context=None):\n   ..\n   92          'button_text': fields.char(string=\"Text of the Button\"),\n   93          'input_placeholder': fields.char(string=\"Chat Input Placeholder\"),\n   94:         'default_message': fields.char(string=\"Welcome Message\", help=\"This is an automated 'welcome' message that your visitor will see when they initiate a new chat session.\"),\n   95          # image: all image fields are base64 encoded and PIL-supported\n   96          'image': fields.binary(\"Photo\",\n   ..\n  114      }\n  115  \n  116:     def _default_user_ids(self, cr, uid, context=None):\n  117          return [(6, 0, [uid])]\n  118  \n  119:     _defaults = {\n  120          'button_text': \"Have a Question? Chat with us.\",\n  121          'input_placeholder': \"How may I help you?\",\n  122:         'default_message': '',\n  123:         'user_ids': _default_user_ids,\n  124:         'image': _get_default_image,\n  125      }\n  126  \n  ...\n  161              'buttonText': chan.button_text,\n  162              'inputPlaceholder': chan.input_placeholder,\n  163:             'defaultMessage': chan.default_message,\n  164              \"channelName\": chan.name,\n  165          }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\im_livechat\\im_livechat_demo.xml:\n    5          <record id=\"channel_website\" model=\"im_livechat.channel\">\n    6              <field name=\"name\">YourWebsite.com</field>\n    7:             <field name=\"default_message\">Hello, how may I help you?</field>\n    8          </record>\n    9  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\im_livechat\\views\\im_livechat.xml:\n  132                          buttonText: \"<t t-esc=\"buttonText\"/>\",\n  133                          inputPlaceholder: \"<t t-esc=\"inputPlaceholder\"/>\",\n  134:                         defaultMessage: \"<t t-esc=\"defaultMessage\"/>\" || '',\n  135                          auto: window.oe_im_livechat_auto || false,\n  136:                         defaultUsername: \"<t t-esc=\"username\"/>\" || undefined,\n  137                      });\n  138              })();\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\im_livechat\\views\\im_livechat_view.xml:\n  100                              <field name=\"button_text\"/>\n  101                              <field name=\"input_placeholder\"/>\n  102:                             <field name=\"default_message\" placeholder=\"e.g. Hello, how may I help you?\"/>\n  103                          </group>\n  104                      </group>\n  ...\n  127              <field name=\"view_mode\">list</field>\n  128              <field name=\"domain\">[('to_id.channel_id', '!=', None)]</field>\n  129:             <field name=\"context\">{'search_default_group_by_to_id': 1}</field>\n  130          </record>\n  131          <menuitem name=\"History\" parent=\"im_livechat\" id=\"history\" action=\"action_history\" groups=\"group_im_livechat_manager\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_at\\account_wizard.py:\n   27  	_inherit='wizard.multi.charts.accounts'\n   28  	\n   29: 	_defaults = {\n   30  		'code_digits' : 0,\n   31  	}\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_be\\account_financial_report.xml:\n  773               <field name=\"view_id\" ref=\"account.accounting_report_view\"/>\n  774               <field name=\"target\">new</field>\n  775:              <field name=\"context\" eval=\"{'default_account_report_id':ref('account_financial_report_belgium_bs')}\"/>\n  776          </record>\n  777          <menuitem icon=\"STOCK_PRINT\" name=\"Balance Sheet\" action=\"action_account_report_be_bs\" id=\"menu_account_report_be_bs\" parent=\"menu_finance_belgian_statement\" sequence=\"1\"/>\n  ...\n  786               <field name=\"target\">new</field>\n  787               <field name=\"context\">{}</field>\n  788:              <field name=\"context\" eval=\"{'default_account_report_id':ref('account_financial_report_belgiumpl0')}\"/>\n  789          </record>\n  790          <menuitem icon=\"STOCK_PRINT\" name=\"Profit And Loss\" action=\"action_account_report_be_pl\" id=\"menu_account_report_be_pl\" parent=\"menu_finance_belgian_statement\" sequence=\"2\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_be\\wizard\\l10n_be_account_vat_declaration.py:\n   60          return tax_code_ids and tax_code_ids[0] or False\n   61  \n   62:     _defaults = {\n   63          'msg': 'Save the File with '\".xml\"' extension.',\n   64          'file_save': _get_xml_data,\n   ..\n   95          tax_info = obj_tax_code.read(cr, uid, tax_code_ids, ['code','sum_period'], context=ctx)\n   96  \n   97:         default_address = obj_partner.address_get(cr, uid, [obj_company.partner_id.id])\n   98:         default_address_id = default_address.get(\"default\", obj_company.partner_id.id)\n   99:         address_id= obj_partner.browse(cr, uid, default_address_id, context)\n  100  \n  101          account_period = obj_acc_period.browse(cr, uid, data['period_id'][0], context=context)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_be\\wizard\\l10n_be_account_vat_declaration_view.xml:\n   22                      <field name=\"comments\"/>\n   23                      <footer>\n   24:                         <button name=\"create_xml\" string=\"Create XML\" type=\"object\" default_focus=\"1\" class=\"oe_highlight\"  />\n   25                          or\n   26                          <button string=\"Cancel\" class=\"oe_link\" special=\"cancel\" />\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_be\\wizard\\l10n_be_partner_vat_listing.py:\n  111      }\n  112  \n  113:     _defaults={\n  114          'year': lambda *a: str(int(time.strftime('%Y'))-1),\n  115          'limit_amount': 250,\n  ...\n  130          return context.get('partner_ids', [])\n  131  \n  132:     _defaults={\n  133          'partner_ids': _get_partners,\n  134      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_be\\wizard\\l10n_be_partner_vat_listing.xml:\n   44                  <page string=\"Customer List\">\n   45                    <separator string=\"Customers\" colspan=\"4\"/>\n   46:                   <field name=\"partner_ids\" colspan=\"4\" nolabel=\"1\" default_focus=\"1\" height=\"300\" width=\"500\" readonly=\"1\"/>\n   47                  </page>\n   48                  <page string=\"Comments\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_be\\wizard\\l10n_be_vat_intra.py:\n   75          return tax_code_ids and tax_code_ids[0] or False\n   76  \n   77:     _defaults = {\n   78          'country_ids': _get_europe_country,\n   79          'file_save': _get_xml_data,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_be_coda\\wizard\\account_coda_import.py:\n   40      }\n   41  \n   42:     _defaults = {\n   43          'coda_fname': 'coda.txt',\n   44      }\n   ..\n   73                  statement['globalisation_stack'] = []\n   74                  statement['lines'] = []\n   75:                 statement['date'] = time.strftime(tools.DEFAULT_SERVER_DATE_FORMAT, time.strptime(rmspaces(line[5:11]), '%d%m%y'))\n   76                  statement['separateApplication'] = rmspaces(line[83:88])\n   77              elif line[0] == '1':\n   ..\n  123                  if line[42] == '1':    #1 = Debit, the starting balance is negative\n  124                      statement['balance_start'] = - statement['balance_start']\n  125:                 statement['balance_start_date'] = time.strftime(tools.DEFAULT_SERVER_DATE_FORMAT, time.strptime(rmspaces(line[58:64]), '%d%m%y'))\n  126                  statement['accountHolder'] = rmspaces(line[64:90])\n  127                  statement['paperSeqNumber'] = rmspaces(line[2:5])\n  ...\n  140                      if statementLine['debit'] == '1':\n  141                          statementLine['amount'] = - statementLine['amount']\n  142:                     statementLine['transactionDate'] = time.strftime(tools.DEFAULT_SERVER_DATE_FORMAT, time.strptime(rmspaces(line[47:53]), '%d%m%y'))\n  143                      statementLine['transaction_family'] = rmspaces(line[54:56])\n  144                      statementLine['transaction_code'] = rmspaces(line[56:58])\n  ...\n  153                          statementLine['communication_struct'] = False\n  154                          statementLine['communication'] = rmspaces(line[62:115])\n  155:                     statementLine['entryDate'] = time.strftime(tools.DEFAULT_SERVER_DATE_FORMAT, time.strptime(rmspaces(line[115:121]), '%d%m%y'))\n  156                      statementLine['type'] = 'normal'\n  157                      statementLine['globalisation'] = int(line[124])\n  ...\n  225                  statement['paperSeqNumber'] = rmspaces(line[1:4])\n  226                  statement['balance_end_real'] = float(rmspaces(line[42:57])) / 1000\n  227:                 statement['balance_end_realDate'] = time.strftime(tools.DEFAULT_SERVER_DATE_FORMAT, time.strptime(rmspaces(line[57:63]), '%d%m%y'))\n  228                  if statement['debit'] == '1':    # 1=Debit\n  229                      statement['balance_end_real'] = - statement['balance_end_real']\n  ...\n  250              balance_start_check = res and res[0]\n  251              if balance_start_check == None:\n  252:                 if statement['journal_id'].default_debit_account_id and (statement['journal_id'].default_credit_account_id == statement['journal_id'].default_debit_account_id):\n  253:                     balance_start_check = statement['journal_id'].default_debit_account_id.balance\n  254                  else:\n  255:                     raise osv.except_osv(_('Error'), _(\"Configuration Error in journal %s!\\nPlease verify the Default Debit and Credit Account settings.\") % statement['journal_id'].name)\n  256              if balance_start_check != statement['balance_start']:\n  257                  statement['coda_note'] = _(\"The CODA Statement %s Starting Balance (%.2f) does not correspond with the previous Closing Balance (%.2f) in journal %s!\") % (statement['description'] + ' #' + statement['paperSeqNumber'], statement['balance_start'], balance_start_check, statement['journal_id'].name)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_be_invoice_bba\\invoice.py:\n   72          result = super(account_invoice, self).onchange_partner_id(cr, uid, ids, type, partner_id,\n   73              date_invoice, payment_term, partner_bank_id, company_id, context)\n   74: #        reference_type = self.default_get(cr, uid, ['reference_type'])['reference_type']\n   75  #        _logger.warning('partner_id %s' % partner_id)\n   76          reference = False\n   ..\n  161          reference_type = vals.get('reference_type', False)\n  162          if vals.get('type') == 'out_invoice' and not reference_type:\n  163:             # fallback on default communication type for partner\n  164              reference_type = self.pool.get('res.partner').browse(cr, uid, vals['partner_id']).out_inv_comm_type\n  165              if reference_type == 'bba':\n  ...\n  212          return super(account_invoice, self).write(cr, uid, ids, vals, context)\n  213  \n  214:     def copy(self, cr, uid, id, default=None, context=None):\n  215:         default = default or {}\n  216          invoice = self.browse(cr, uid, id, context=context)\n  217          if invoice.type in ['out_invoice']:\n  218              reference_type = invoice.reference_type or 'none'\n  219:             default['reference_type'] = reference_type\n  220              if reference_type == 'bba':\n  221                  partner = invoice.partner_id\n  222:                 default['reference'] = self.generate_bbacomm(cr, uid, id,\n  223                      invoice.type, reference_type,\n  224                      partner.id, '', context=context)['value']['reference']\n  225:         return super(account_invoice, self).copy(cr, uid, id, default, context=context)\n  226  \n  227      _columns = {\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_be_invoice_bba\\partner.py:\n   27  \n   28  class res_partner(osv.osv):  \n   29:     \"\"\" add field to indicate default 'Communication Type' on customer invoices \"\"\"\n   30      _inherit = 'res.partner'\n   31      \n   ..\n   35      \n   36      _columns = {\n   37:         'out_inv_comm_type': fields.selection(_get_comm_type, 'Communication Type', change_default=True,\n   38:             help='Select Default Communication Type for Outgoing Invoices.' ),\n   39          'out_inv_comm_algorithm': fields.selection([\n   40              ('random','Random'),\n   ..\n   50  \n   51  \n   52:     _default = {\n   53          'out_inv_comm_type': 'none',\n   54      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_br\\account.py:\n   28                      }\n   29  \n   30: TAX_DEFAULTS = {\n   31                  'base_reduction': 0,\n   32                  'amount_mva': 0,\n   ..\n  119                                          help=\"The computation method for the tax amount.\"),\n  120                 }\n  121:     _defaults = TAX_DEFAULTS\n  122      \n  123      def _generate_tax(self, cr, uid, tax_templates, tax_code_template_ref, company_id, context=None):\n  ...\n  185                                          help=\"The computation method for the tax amount.\"),\n  186                 }\n  187:     _defaults = TAX_DEFAULTS\n  188      \n  189      def onchange_tax_code_id(self, cr, uid, ids, tax_code_id, context=None):\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_ca\\fiscal_templates_en.xml:\n   75      </record>\n   76  \n   77:     <!--  Company is in Alberta (default is gst) -->\n   78  \n   79      <record id=\"fiscal_position_tax_template_ab2nb_sale_en\" model=\"account.fiscal.position.tax.template\">\n   ..\n  119      </record>\n  120  \n  121:     <!-- Company is in British Columbia (default is gstpst_bc) -->\n  122  \n  123      <!-- Sale taxes -->\n  ...\n  279      </record>\n  280  \n  281:     <!-- Company is in Manitoba (default is gstpst_mb) -->\n  282  \n  283      <!-- Sale Taxes -->\n  ...\n  439      </record>\n  440  \n  441:     <!--  Company is in New Brunswick (default is hst13) -->\n  442  \n  443      <record id=\"fiscal_position_tax_template_nb2ab_sale_en\" model=\"account.fiscal.position.tax.template\">\n  ...\n  519      </record>\n  520  \n  521:     <!--  Company is in Newfoundland and Labrador (default is hst13) -->\n  522      \n  523      <!-- Already created by nb2ab_sale\n  ...\n  607      -->\n  608  \n  609:     <!--  Company is in Nova Scotia (default is hst15) -->\n  610  \n  611      <record id=\"fiscal_position_tax_template_ns2ab_sale_en\" model=\"account.fiscal.position.tax.template\">\n  ...\n  693      </record>\n  694  \n  695:     <!--  Company is in Northwest Territories (default is gst) -->\n  696  \n  697      <!-- Already created by ab2nb_sale\n  ...\n  746      -->\n  747  \n  748:     <!--  Company is in Nunavut (default is gst) -->\n  749  \n  750      <!-- Already created by ab2nb_sale\n  ...\n  799      -->\n  800  \n  801:     <!--  Company is in Ontario (default is hst13) -->\n  802  \n  803      <!-- Already created nb2ab_sale\n  ...\n  887      -->\n  888  \n  889:     <!--  Company is in Prince Edward Islands (default is hst14) -->\n  890  \n  891      <record id=\"fiscal_position_tax_template_pe2ab_sale_en\" model=\"account.fiscal.position.tax.template\">\n  ...\n  973      </record>\n  974  \n  975:     <!--  Company is in Quebec (default is gstqst) -->\n  976  \n  977      <!-- Sale Taxes -->\n  ...\n 1133      </record>\n 1134  \n 1135:     <!--  Company is in Saskatchewan (default is gstpst_sk) -->\n 1136  \n 1137      <!-- Sale Taxes -->\n ....\n 1293      </record>\n 1294  \n 1295:     <!--  Company is in Yukon (default is gst) -->\n 1296  \n 1297      <!-- Already created by ab2nb_sale\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_ca\\fiscal_templates_fr.xml:\n   75      </record>\n   76  \n   77:     <!--  Company is in Alberta (default is gst) -->\n   78  \n   79      <record id=\"fiscal_position_tax_template_ab2nb_sale_fr\" model=\"account.fiscal.position.tax.template\">\n   ..\n  119      </record>\n  120  \n  121:     <!-- Company is in British Columbia (default is gstpst_bc) -->\n  122  \n  123      <!-- Sale taxes -->\n  ...\n  279      </record>\n  280  \n  281:     <!-- Company is in Manitoba (default is gstpst_mb) -->\n  282  \n  283      <!-- Sale Taxes -->\n  ...\n  439      </record>\n  440  \n  441:     <!--  Company is in New Brunswick (default is hst13) -->\n  442  \n  443      <record id=\"fiscal_position_tax_template_nb2ab_sale_fr\" model=\"account.fiscal.position.tax.template\">\n  ...\n  519      </record>\n  520  \n  521:     <!--  Company is in Newfoundland and Labrador (default is hst13) -->\n  522      \n  523      <!-- Already created by nb2ab_sale\n  ...\n  607      -->\n  608  \n  609:     <!--  Company is in Nova Scotia (default is hst15) -->\n  610  \n  611      <record id=\"fiscal_position_tax_template_ns2ab_sale_fr\" model=\"account.fiscal.position.tax.template\">\n  ...\n  693      </record>\n  694  \n  695:     <!--  Company is in Northwest Territories (default is gst) -->\n  696  \n  697      <!-- Already created by ab2nb_sale\n  ...\n  746      -->\n  747  \n  748:     <!--  Company is in Nunavut (default is gst) -->\n  749  \n  750      <!-- Already created by ab2nb_sale\n  ...\n  799      -->\n  800  \n  801:     <!--  Company is in Ontario (default is hst13) -->\n  802  \n  803      <!-- Already created nb2ab_sale\n  ...\n  887      -->\n  888  \n  889:     <!--  Company is in Prince Edward Islands (default is hst14) -->\n  890  \n  891      <record id=\"fiscal_position_tax_template_pe2ab_sale_fr\" model=\"account.fiscal.position.tax.template\">\n  ...\n  973      </record>\n  974  \n  975:     <!--  Company is in Quebec (default is gstqst) -->\n  976  \n  977      <!-- Sale Taxes -->\n  ...\n 1133      </record>\n 1134  \n 1135:     <!--  Company is in Saskatchewan (default is gstpst_sk) -->\n 1136  \n 1137      <!-- Sale Taxes -->\n ....\n 1293      </record>\n 1294  \n 1295:     <!--  Company is in Yukon (default is gst) -->\n 1296  \n 1297      <!-- Already created by ab2nb_sale\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_cn\\account_chart_small_business_template.xml:\n  611              <field name=\"name\">小企业会计科目表（财会[2011]17号《小企业会计准则》）</field>\n  612              <field name=\"model\">account.chart.template</field>\n  613:             <field name=\"key\">default</field>\n  614              <field name=\"res_id\" ref=\"l10n_chart_china_small_business\"/>\n  615              <field name=\"value\" ref=\"base.CNY\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_cn\\account_chart_template.xml:\n  855              <field name=\"name\">中国会计科目表  （财会[2006]3号《企业会计准则》）</field>\n  856              <field name=\"model\">account.chart.template</field>\n  857:             <field name=\"key\">default</field>\n  858              <field name=\"res_id\" ref=\"l10n_chart_china\"/>\n  859              <field name=\"value\" ref=\"base.CNY\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_cn\\base_data.xml:\n    7  \n    8  依据《 中华人民共和国行政区划代码（国家标准  GB/T 2260-2007》 编制\n    9: http://www.cvh.org.cn/cms/sites/default/files/GBT2260-2007.pdf\n   10  -->\n   11  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_do\\data\\account_chart_template.xml:\n    3      <data>\n    4  \n    5:         <record id=\"default_chart_a\" model=\"account.chart.template\">\n    6              <field name=\"name\">Catálogo de Cuentas Empresas Privadas</field>\n    7:             <field name=\"account_root_id\" ref=\"default_chart_a_account_1\"/>\n    8:             <field name=\"bank_account_view_id\" ref=\"default_chart_a_account_9\"/>\n    9:             <field name=\"tax_code_root_id\" ref=\"default_chart_a_tax_code_21\"/>\n   10:             <field name=\"property_account_receivable\" ref=\"default_chart_a_account_13\"/>\n   11:             <field name=\"property_account_payable\" ref=\"default_chart_a_account_61\"/>\n   12:             <field name=\"property_account_expense_categ\" ref=\"default_chart_a_account_101\"/>\n   13:             <field name=\"property_account_income_categ\" ref=\"default_chart_a_account_87\"/>\n   14:             <field name=\"property_account_income_opening\" ref=\"default_chart_a_account_87\"/>\n   15:             <field name=\"property_account_expense_opening\" ref=\"default_chart_a_account_101\"/>\n   16              <field name=\"currency_id\" ref=\"base.DOP\"/>\n   17          </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_es\\account_chart_template.xml:\n   19              <field name=\"name\">PGCE entidades sin ánimo de lucro 2008</field>\n   20              <field name=\"model\">account.chart.template</field>\n   21:             <field name=\"key\">default</field>\n   22              <field name=\"res_id\" ref=\"account_chart_template_assoc\"/>\n   23              <field name=\"value\" ref=\"base.EUR\"/>\n   ..\n   33              <field name=\"name\">PGCE PYMEs 2008</field>\n   34              <field name=\"model\">account.chart.template</field>\n   35:             <field name=\"key\">default</field>\n   36              <field name=\"res_id\" ref=\"account_chart_template_pymes\"/>\n   37              <field name=\"value\" ref=\"base.EUR\"/>\n   ..\n   47              <field name=\"name\">PGCE completo 2008</field>\n   48              <field name=\"model\">account.chart.template</field>\n   49:             <field name=\"key\">default</field>\n   50              <field name=\"res_id\" ref=\"account_chart_template_full\"/>\n   51              <field name=\"value\" ref=\"base.EUR\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_fr\\__openerp__.py:\n   48  company sells services to a company based in the DOMs. We could manage it in the\n   49  fiscal positions, but it would require to differentiate between 'product' VAT taxes\n   50: and 'service' VAT taxes. We consider that it is too 'heavy' to have this by default\n   51  in l10n_fr; companies that sell services to DOM-based companies should update the\n   52  configuration of their taxes and fiscal positions manually.\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_fr\\wizard\\fr_report_bilan.py:\n   34      _description = 'Account Bilan Report'\n   35  \n   36:     def _get_default_fiscalyear(self, cr, uid, context=None):\n   37          fiscalyear_id = self.pool.get('account.fiscalyear').find(cr, uid)\n   38          return fiscalyear_id\n   ..\n   42      }\n   43  \n   44:     _defaults = {\n   45:         'fiscalyear_id': _get_default_fiscalyear\n   46      }\n   47  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_fr\\wizard\\fr_report_compute_resultant.py:\n   34      _description = 'Account CDR Report'\n   35  \n   36:     def _get_defaults(self, cr, uid, context=None):\n   37          fiscalyear_id = self.pool.get('account.fiscalyear').find(cr, uid)\n   38          return fiscalyear_id\n   ..\n   42      }\n   43  \n   44:     _defaults = {\n   45:         'fiscalyear_id': _get_defaults\n   46      }\n   47  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_fr_rib\\bank.py:\n   63                                                          context=context)\n   64          if bank_id:\n   65:             value = result.setdefault('value', {})\n   66              bank = self.pool.get('res.bank').browse(cr, uid, bank_id, \n   67                                                      context=context)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_in_hr_payroll\\l10n_in_hr_payroll.py:\n   74      }\n   75  \n   76:     _defaults = {\n   77          'date': lambda * a: time.strftime('%Y-%m-%d'),\n   78          'state': lambda * a: 'draft',\n   ..\n  238          'ifsc': fields.related('advice_id', 'neft', type='boolean', string='IFSC'),\n  239      }\n  240:     _defaults = {\n  241          'debit_credit': 'C',\n  242      }\n  ...\n  259          'dearness_allowance': fields.boolean('Dearness Allowance', help=\"Check this box if your company provide Dearness Allowance to employee\")\n  260      }\n  261:     _defaults = {\n  262          'dearness_allowance': True,\n  263      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_in_hr_payroll\\report\\payment_advice_report_view.xml:\n   75          <field name=\"view_mode\">tree</field>\n   76          <field name=\"view_id\" ref=\"view_payment_advice_tree\"/>\n   77:         <field name=\"context\">{'search_default_confirm':1,'group_by_no_leaf':1,'group_by':[]}</field>\n   78          <field name=\"help\">This report performs analysis on Payment Advices</field>\n   79      </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_in_hr_payroll\\report\\payslip_report_view.xml:\n   73          <field name=\"view_mode\">tree</field>\n   74          <field name=\"view_id\" ref=\"view_payslip_tree\"/>\n   75:         <field name=\"context\">{'search_default_employee':1,'search_default_category':1,'group_by_no_leaf':uid,'group_by':[]}</field>\n   76          <field name=\"help\">This report performs analysis on Payslip</field>\n   77      </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_in_hr_payroll\\report\\report_hr_yearly_salary_detail.py:\n  115          for category in salary:\n  116              if category[0] not in salaries:\n  117:                 salaries.setdefault(category[0], {})\n  118                  salaries[category[0]].update({category[1]: {category[3]: category[2]}})\n  119              elif category[1] not in salaries[category[0]]:\n  120:                 salaries[category[0]].setdefault(category[1], {})\n  121                  salaries[category[0]][category[1]].update({category[3]: category[2]})\n  122              else:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_in_hr_payroll\\wizard\\hr_salary_employee_bymonth.py:\n   34      }\n   35  \n   36:     def _get_default_category(self, cr, uid, context=None):\n   37          category_ids = self.pool.get('hr.salary.rule.category').search(cr, uid, [('code', '=', 'NET')], context=context)\n   38          return category_ids and category_ids[0] or False\n   39  \n   40:     _defaults = {\n   41           'start_date': lambda *a: time.strftime('%Y-01-01'),\n   42           'end_date': lambda *a: time.strftime('%Y-%m-%d'),\n   43:          'category_id': _get_default_category\n   44      }\n   45  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_in_hr_payroll\\wizard\\hr_yearly_salary_detail.py:\n   34      }\n   35  \n   36:    _defaults = {\n   37          'date_from': lambda *a: time.strftime('%Y-01-01'),\n   38          'date_to': lambda *a: time.strftime('%Y-%m-%d'),\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_lu\\__openerp__.py:\n   34      * the Tax Code Chart for Luxembourg\n   35      * the main taxes used in Luxembourg\n   36:     * default fiscal position for local, intracom, extracom \"\"\",\n   37      'author': 'OpenERP SA & ADN',\n   38      'website': 'http://www.openerp.com http://www.adn-luxembourg.com',\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_ma\\l10n_ma_journal.xml:\n   17              comptes par défaul\n   18  \n   19:             <field name=\"default_debit_account_id\" ref=\"pcg_34211\" />\n   20:             <field name=\"default_credit_account_id\" ref=\"pcg_7111\" />\n   21              -->\n   22  <!--        </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_si\\account_wizard.py:\n   25  	_inherit='wizard.multi.charts.accounts'\n   26  		\n   27: 	_defaults = {\n   28          'code_digits' : 6,\n   29  	}\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_uk\\demo\\demo.xml:\n   20              <field name=\"email\">vadim@smartmode.example.com</field>\n   21              <field name=\"active\">1</field>\n   22:             <field name=\"type\">default</field>\n   23              <field name=\"street\">88 Wood Street, 10th floor</field>\n   24              <field name=\"zip\">EC2V 7RS</field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_us\\account_tax_code_template.xml:\n   23  \n   24                  <record id=\"tax_code_input_S\" model=\"account.tax.code.template\">\n   25:                     <field name=\"name\">Tax Received at default rate</field>\n   26                      <field name=\"parent_id\" ref=\"tax_code_input\"/>\n   27                  </record>\n   ..\n   41  \n   42                  <record id=\"tax_code_output_S\" model=\"account.tax.code.template\">\n   43:                     <field name=\"name\">Tax Paid at default rate</field>\n   44                      <field name=\"parent_id\" ref=\"tax_code_output\"/>\n   45                  </record>\n   ..\n   66  \n   67                      <record id=\"tax_code_purch_S\" model=\"account.tax.code.template\">\n   68:                         <field name=\"name\">Taxable Purchases at default rate</field>\n   69                          <field name=\"parent_id\" ref=\"tax_code_base_purchases\"/>\n   70                      </record>\n   ..\n   83  \n   84                      <record id=\"tax_code_sales_S\" model=\"account.tax.code.template\">\n   85:                         <field name=\"name\">Taxable Sales at default rate</field>\n   86                          <field name=\"parent_id\" ref=\"tax_code_base_sales\"/>\n   87                      </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_us\\account_tax_template.xml:\n    4          <record id=\"otaxs\" model=\"account.tax.template\">\n    5              <field name=\"chart_template_id\" ref=\"l10n_us.account_chart_template_basic\"/>\n    6:             <field name=\"name\">default purchase tax</field>\n    7              <field eval=\"0.15\" name=\"amount\"/>\n    8              <field name=\"sequence\">1</field>\n    .\n   32          <record id=\"itaxs\" model=\"account.tax.template\">\n   33              <field name=\"chart_template_id\" ref=\"l10n_us.account_chart_template_basic\"/>\n   34:             <field name=\"name\">default sale tax</field>\n   35              <field eval=\"0.15\" name=\"amount\"/>\n   36              <field name=\"sequence\">1</field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\l10n_ve\\__openerp__.py:\n   34  ===============================\n   35  \n   36: Venezuela doesn't have any chart of account by law, but the default\n   37  proposed in OpenERP should comply with some Accepted best practices in Venezuela, \n   38  this plan comply with this practices.\n   ..\n   57  \n   58  If you install this module, and select Custom chart a basic chart will be proposed, \n   59: but you will need set manually account defaults for taxes.\n   60  \"\"\",\n   61      'depends': ['account',\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\lunch\\lunch.py:\n   91          \"\"\"\n   92          result = {}\n   93:         alert_msg = self._default_alerts_get(cr, uid, context=context)\n   94          for order in self.browse(cr, uid, ids, context=context):\n   95              if order.state == 'new':\n   ..\n  114          if alert.alter_type == 'specific':\n  115              #the alert is only activated on a specific day\n  116:             return alert.specific_day == time.strftime(tools.DEFAULT_SERVER_DATE_FORMAT)\n  117          elif alert.alter_type == 'week':\n  118              #the alert is activated during some days of the week\n  ...\n  120          return True # alter_type == 'days' (every day)\n  121  \n  122:     def _default_alerts_get(self, cr, uid, context=None):\n  123          \"\"\" \n  124          get the alerts to display on the order form\n  ...\n  211                  for pref in preferences:\n  212                      #For each preference\n  213:                     categories.setdefault(pref.product_id.category_id.name, {})\n  214                      #if this product has already been added to the categories dictionnary\n  215                      if pref.product_id.id in categories[pref.product_id.category_id.name]:\n  ...\n  314      }\n  315  \n  316:     _defaults = {\n  317          'user_id': lambda self, cr, uid, context: uid,\n  318          'date': fields.date.context_today,\n  319          'state': 'new',\n  320:         'alerts': _default_alerts_get,\n  321      }\n  322  \n  ...\n  422  \n  423      }\n  424:     _defaults = {\n  425          'state': 'new',\n  426      }\n  ...\n  465          'state': fields.selection([('order','Order'), ('payment','Payment')], 'Is an order or a Payment'),\n  466      }\n  467:     _defaults = {\n  468          'user_id': lambda self, cr, uid, context: uid,\n  469          'date': fields.date.context_today,\n  ...\n  494          'active_to': fields.float('And', required=True),\n  495      }\n  496:     _defaults = {\n  497          'alter_type': 'specific',\n  498          'specific_day': fields.date.context_today,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\lunch\\lunch_view.xml:\n  108                          <group>\n  109                              <field name=\"user_id\"\n  110:                                    context=\"{'default_groups_ref': ['base.group_user', 'lunch.group_lunch_user']}\"/>\n  111                              <field name=\"date\"/>\n  112                              <field name=\"amount\"/>\n  ...\n  133              <field name=\"view_mode\">tree,form</field>\n  134              <field name=\"search_view_id\" ref=\"view_search_my_order\"/>\n  135:             <field name=\"context\">{\"search_default_is_mine\":1}</field>\n  136              <field name=\"help\" type=\"html\">\n  137              <p class=\"oe_view_nocontent_create\">\n  ...\n  166              <field name=\"view_mode\">tree</field>\n  167              <field name=\"search_view_id\" ref=\"view_lunch_employee_payment_filter\"/>\n  168:             <field name=\"context\">{\"search_default_is_mine_group\":1}</field>\n  169              <field name=\"view_id\" ref=\"casmove_tree\"/>\n  170              <field name=\"help\" type=\"html\">\n  ...\n  183              <field name=\"view_mode\">tree</field>\n  184              <field name=\"search_view_id\" ref=\"lunch_order_line_search_view\"/>\n  185:             <field name=\"context\">{\"search_default_group_by_supplier\":1, \"search_default_today\":1}</field>\n  186              <field name=\"help\" type=\"html\">\n  187                <p>\n  ...\n  203              <field name=\"view_mode\">tree</field>\n  204              <field name=\"search_view_id\" ref=\"lunch_order_line_search_view\"/> \n  205:             <field name=\"context\">{\"search_default_group_by_date\":1, \"search_default_group_by_supplier\":1}</field>\n  206              <field name=\"help\" type=\"html\">\n  207                <p>\n  ...\n  223              <field name=\"view_mode\">tree,form</field>\n  224              <field name=\"search_view_id\" ref=\"view_lunch_cashmove_filter\"/>\n  225:             <field name=\"context\">{\"search_default_group_by_user\":1}</field>\n  226              <field name=\"view_id\" ref=\"casmove_tree_view\"/>\n  227              <field name=\"help\" type=\"html\">\n  ...\n  245              <field name=\"view_mode\">tree,form</field>\n  246              <field name=\"search_view_id\" ref=\"view_lunch_employee_payment_filter\"/>\n  247:             <field name=\"context\">{\"search_default_is_payment\":1}</field>\n  248              <field name=\"view_id\" ref=\"casmove_tree_view\"/>\n  249              <field name=\"help\" type=\"html\">\n  ...\n  376                              <group>\n  377                                  <field name='user_id'\n  378:                                 context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'lunch.group_lunch_user']}\"/>\n  379                              </group>\n  380                              <group> \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\mail_alias.py:\n   81                                                  \"based on the sender (From) address, or will use the Administrator account \"\n   82                                                  \"if no system user is found for that address.\"),\n   83:         'alias_defaults': fields.text('Default Values', required=True,\n   84                                        help=\"A Python dictionary that will be evaluated to provide \"\n   85:                                            \"default values when creating new records for this alias.\"),\n   86          'alias_force_thread_id': fields.integer('Record Thread ID',\n   87                                        help=\"Optional ID of a thread (record) to which all incoming \"\n   ..\n  106      }\n  107  \n  108:     _defaults = {\n  109:         'alias_defaults': '{}',\n  110          'alias_user_id': lambda self, cr, uid, context: uid,\n  111          # looks better when creating new aliases - even if the field is informative only\n  ...\n  118      ]\n  119  \n  120:     def _check_alias_defaults(self, cr, uid, ids, context=None):\n  121          try:\n  122              for record in self.browse(cr, uid, ids, context=context):\n  123:                 dict(eval(record.alias_defaults))\n  124          except Exception:\n  125              return False\n  ...\n  127  \n  128      _constraints = [\n  129:         (_check_alias_defaults, '''Invalid expression, it must be a literal python dictionary definition e.g. \"{'field': 'value'}\"''', ['alias_defaults']),\n  130      ]\n  131  \n  ...\n  168  \n  169      def migrate_to_alias(self, cr, child_model_name, child_table_name, child_model_auto_init_fct,\n  170:         alias_model_name, alias_id_column, alias_key, alias_prefix='', alias_force_key='', alias_defaults={},\n  171          alias_generate_name=False, context=None):\n  172          \"\"\" Installation hook to create aliases for all users and avoid constraint errors.\n  ...\n  182              :param alias_force_key': name of the column for force_thread_id;\n  183                  if empty string, not taken into account\n  184:             :param alias_defaults: dict, keys = mail.alias columns, values = child\n  185:                 model column name used for default values (i.e. {'job_id': 'id'})\n  186              :param alias_generate_name: automatically generate alias name using prefix / alias key;\n  187:                 default alias_name value is False because since 8.0 it is not required anymore\n  188          \"\"\"\n  189          if context is None:\n  ...\n  208              if alias_force_key:\n  209                  alias_vals['alias_force_thread_id'] = obj_data[alias_force_key]\n  210:             alias_vals['alias_defaults'] = dict((k, obj_data[v]) for k, v in alias_defaults.iteritems())\n  211              alias_vals['alias_parent_thread_id'] = obj_data['id']\n  212              alias_create_ctx = dict(context, alias_model_name=alias_model_name, alias_parent_model_name=child_model_name)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\mail_alias_view.xml:\n   22                              <field name=\"alias_model_id\"/>\n   23                              <field name=\"alias_force_thread_id\"/>\n   24:                             <field name=\"alias_defaults\"/>\n   25                              <field name=\"alias_contact\"/>\n   26                              <field name=\"alias_user_id\"/>\n   ..\n   42                      <field name=\"alias_model_id\"/>\n   43                      <field name=\"alias_user_id\"/>\n   44:                     <field name=\"alias_defaults\"/>\n   45                      <field name=\"alias_contact\"/>\n   46                  </tree>\n   ..\n   73              <field name=\"res_model\">mail.alias</field>\n   74              <field name=\"context\">{\n   75:                     'search_default_active': True,\n   76                  }\n   77              </field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\mail_followers.py:\n   88      }\n   89  \n   90:     _defaults = {\n   91          'is_read': False,\n   92          'starred': False,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\mail_group.py:\n   83      }\n   84  \n   85:     def _get_default_employee_group(self, cr, uid, context=None):\n   86          ref = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'base', 'group_user')\n   87          return ref and ref[1] or False\n   88  \n   89:     def _get_default_image(self, cr, uid, context=None):\n   90:         image_path = openerp.modules.get_module_resource('mail', 'static/src/img', 'groupdefault.png')\n   91          return tools.image_resize_image_big(open(image_path, 'rb').read().encode('base64'))\n   92  \n   93:     _defaults = {\n   94          'public': 'groups',\n   95:         'group_public_id': _get_default_employee_group,\n   96:         'image': _get_default_image,\n   97      }\n   98  \n   ..\n  145                  ],\n  146                  'context': {\n  147:                     'default_model': 'mail.group',\n  148:                     'default_res_id': mail_group_id,\n  149                  },\n  150                  'res_model': 'mail.message',\n  ...\n  155              }\n  156              cobj = self.pool.get('ir.actions.client')\n  157:             newref = cobj.copy(cr, SUPERUSER_ID, ref[1], default={'params': str(params), 'name': vals['name']}, context=context)\n  158              mobj.write(cr, SUPERUSER_ID, menu_id, {'action': 'ir.actions.client,' + str(newref), 'mail_group_id': mail_group_id}, context=context)\n  159  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\mail_mail.py:\n   67      }\n   68  \n   69:     _defaults = {\n   70          'state': 'outgoing',\n   71      }\n   72  \n   73:     def default_get(self, cr, uid, fields, context=None):\n   74:         # protection for `default_type` values leaking from menu action context (e.g. for invoices)\n   75          # To remove when automatic context propagation is removed in web client\n   76:         if context and context.get('default_type') and context.get('default_type') not in self._all_columns['type'].column.selection:\n   77:             context = dict(context, default_type=None)\n   78:         return super(mail_mail, self).default_get(cr, uid, fields, context=context)\n   79  \n   80      def create(self, cr, uid, values, context=None):\n   ..\n  110                                  this value will be used as an additional\n  111                                  filter to further restrict the outgoing\n  112:                                 messages to send (by default all 'outgoing'\n  113                                  messages are sent).\n  114          \"\"\"\n  ...\n  227              :param bool auto_commit: whether to force a commit of the mail status\n  228                  after sending each mail (meant only for scheduler processing);\n  229:                 should never be True during normal transactions (default: False)\n  230              :param bool raise_exception: whether to raise an exception if the\n  231                  email sending process has failed\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\mail_mail_view.xml:\n   20                              by <field name=\"author_id\" class=\"oe_inline\" string=\"User\"/> on <field name=\"date\" readonly=\"1\" class=\"oe_inline\"/>\n   21                              <button name=\"%(action_email_compose_message_wizard)d\" string=\"Reply\" type=\"action\" icon=\"terp-mail-replied\"\n   22:                                 context=\"{'default_composition_mode':'reply', 'default_parent_id': mail_message_id}\" states='received,sent,exception,cancel'/>\n   23                          </div>\n   24                          <group>\n   ..\n  117              <field name=\"view_type\">form</field>\n  118              <field name=\"view_mode\">tree,form</field>\n  119:             <field name=\"context\">{'search_default_outgoing': 1}</field>\n  120              <field name=\"search_view_id\" ref=\"view_mail_search\"/>\n  121          </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\mail_message.py:\n   71      _message_read_more_limit = 1024\n   72  \n   73:     def default_get(self, cr, uid, fields, context=None):\n   74:         # protection for `default_type` values leaking from menu action context (e.g. for invoices)\n   75:         if context and context.get('default_type') and context.get('default_type') not in [\n   76                  val[0] for val in self._columns['type'].selection]:\n   77:             context = dict(context, default_type=None)\n   78:         return super(mail_message, self).default_get(cr, uid, fields, context=context)\n   79  \n   80      def _get_to_read(self, cr, uid, ids, name, arg, context=None):\n   ..\n  169          return [('to_read', '=', True)]\n  170  \n  171:     def _get_default_from(self, cr, uid, context=None):\n  172          this = self.pool.get('res.users').browse(cr, SUPERUSER_ID, uid, context=context)\n  173          if this.alias_name and this.alias_domain:\n  ...\n  177          raise osv.except_osv(_('Invalid Action!'), _(\"Unable to send email, please configure the sender's email address or alias.\"))\n  178  \n  179:     def _get_default_author(self, cr, uid, context=None):\n  180          return self.pool.get('res.users').browse(cr, SUPERUSER_ID, uid, context=context).partner_id.id\n  181  \n  182:     _defaults = {\n  183          'type': 'email',\n  184          'date': fields.datetime.now,\n  185:         'author_id': lambda self, cr, uid, ctx=None: self._get_default_author(cr, uid, ctx),\n  186          'body': '',\n  187:         'email_from': lambda self, cr, uid, ctx=None: self._get_default_from(cr, uid, ctx),\n  188      }\n  189  \n  ...\n  560                      message_tree[parent.id] = parent\n  561              # newest messages first\n  562:             parent_tree.setdefault(tree_parent_id, [])\n  563              if tree_parent_id != message_id:\n  564                  parent_tree[tree_parent_id].append(self._message_read_dict(cr, uid, message_tree[message_id], parent_id=tree_parent_id, context=context))\n  ...\n  646                  partner_ids.add(id)\n  647              elif rmod and rid:\n  648:                 model_ids.setdefault(rmod, {}).setdefault(rid, set()).add(id)\n  649  \n  650          allowed_ids = self._find_allowed_doc_ids(cr, uid, model_ids, context=context)\n  ...\n  687                  vals = msg_val.get(id, {})\n  688                  if vals.get('model') and vals.get('res_id'):\n  689:                     model_record_ids.setdefault(vals['model'], set()).add(vals['res_id'])\n  690              return model_record_ids\n  691  \n  ...\n  778          model, res_id, email_from = values.get('model'), values.get('res_id'), values.get('email_from')\n  779          ctx = dict(context, thread_model=model)\n  780:         return self.pool['mail.thread'].message_get_reply_to(cr, uid, [res_id], default=email_from, context=ctx)[res_id]\n  781  \n  782      def _get_message_id(self, cr, uid, values, context=None):\n  ...\n  791      def create(self, cr, uid, values, context=None):\n  792          context = dict(context or {})\n  793:         default_starred = context.pop('default_starred', False)\n  794  \n  795          if 'email_from' not in values:  # needed to compute reply_to\n  796:             values['email_from'] = self._get_default_from(cr, uid, context=context)\n  797          if not values.get('message_id'):\n  798              values['message_id'] = self._get_message_id(cr, uid, values, context=context)\n  799          if 'reply_to' not in values:\n  800              values['reply_to'] = self._get_reply_to(cr, uid, values, context=context)\n  801:         if 'record_name' not in values and 'default_record_name' not in context:\n  802              values['record_name'] = self._get_record_name(cr, uid, values, context=context)\n  803  \n  ...\n  807                       force_send=context.get('mail_notify_force_send', True),\n  808                       user_signature=context.get('mail_notify_user_signature', True))\n  809:         # TDE FIXME: handle default_starred. Why not setting an inv on starred ?\n  810          # Because starred will call set_message_starred, that looks for notifications.\n  811          # When creating a new mail_message, it will create a notification to a message\n  ...\n  813          # this means unread notifications will be created, yet we can not assure\n  814          # this is what we want.\n  815:         if default_starred:\n  816              self.set_message_starred(cr, uid, [newid], True, context=context)\n  817          return newid\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\mail_message_subtype.py:\n   51          'res_model': fields.char('Model',\n   52              help=\"Model the subtype applies to. If False, this subtype applies to all models.\"),\n   53:         'default': fields.boolean('Default',\n   54:             help=\"Activated by default when subscribing.\"),\n   55          'sequence': fields.integer('Sequence', help=\"Used to order subtypes.\"),\n   56          'hidden': fields.boolean('Hidden', help=\"Hide the subtype in the follower options\")\n   57      }\n   58  \n   59:     _defaults = {\n   60:         'default': True,\n   61          'sequence': 1,\n   62      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\mail_message_subtype.xml:\n   12                      <field name=\"sequence\"/>\n   13                      <field name=\"res_model\"/>\n   14:                     <field name=\"default\"/>\n   15                  </tree>\n   16              </field>\n   ..\n   29                                  <field name=\"res_model\"/>\n   30                                  <field name=\"description\"/>\n   31:                                 <field name=\"default\"/>\n   32                                  <field name=\"hidden\"/>\n   33                              </group>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\mail_thread.py:\n   70  \n   71          Inheriting classes are not required to implement any method, as the\n   72:         default implementation will work for any model. However it is common\n   73          to override at least the ``message_new`` and ``message_update``\n   74          methods (calling ``super``) to add model-specific behavior at\n   ..\n  203          subtype_dict = OrderedDict(\n  204              (subtype.name, {\n  205:                 'default': subtype.default,\n  206                  'followed': False,\n  207                  'parent_model': subtype.parent_id and subtype.parent_id.res_model or self._name,\n  ...\n  384              self.message_post(cr, uid, thread_id, body=_('%s created') % name, context=context)\n  385  \n  386:         # auto_subscribe: take values and defaults into account\n  387          create_values = dict(values)\n  388          for key, val in context.iteritems():\n  389:             if key.startswith('default_'):\n  390                  create_values[key[8:]] = val\n  391          self.message_auto_subscribe(cr, uid, [thread_id], create_values.keys(), context=context, values=create_values)\n  ...\n  449          return res\n  450  \n  451:     def copy_data(self, cr, uid, id, default=None, context=None):\n  452          # avoid tracking multiple temporary changes during copy\n  453          context = dict(context or {}, mail_notrack=True)\n  454:         return super(mail_thread, self).copy_data(cr, uid, id, default=default, context=context)\n  455  \n  456      #------------------------------------------------------\n  ...\n  572          \"\"\"\n  573          limit_date = datetime.datetime.utcnow() - datetime.timedelta(days=1)\n  574:         limit_date_str = datetime.datetime.strftime(limit_date, tools.DEFAULT_SERVER_DATETIME_FORMAT)\n  575          ir_attachment_obj = self.pool.get('ir.attachment')\n  576          attach_ids = ir_attachment_obj.search(cr, uid, [\n  ...\n  617              - opens the form view of the related document if model, res_id, and\n  618                read access to the document\n  619:             - opens the Inbox with a default search on the conversation if model,\n  620                res_id\n  621              - opens the Inbox with context propagated\n  ...\n  625              context = {}\n  626  \n  627:         # default action is the Inbox action\n  628          self.pool.get('res.users').browse(cr, SUPERUSER_ID, uid, context=context)\n  629          act_model, act_id = self.pool.get('ir.model.data').get_object_reference(cr, uid, *self._get_inbox_action_xml_id(cr, uid, context=context))\n  ...\n  654              action.update({\n  655                  'context': {\n  656:                     'search_default_model': model,\n  657:                     'search_default_res_id': res_id,\n  658                  }\n  659              })\n  ...\n  678      #------------------------------------------------------\n  679  \n  680:     def message_get_default_recipients(self, cr, uid, ids, context=None):\n  681          if context and context.get('thread_model') and context['thread_model'] in self.pool and context['thread_model'] != self._name:\n  682:             if hasattr(self.pool[context['thread_model']], 'message_get_default_recipients'):\n  683                  sub_ctx = dict(context)\n  684                  sub_ctx.pop('thread_model')\n  685:                 return self.pool[context['thread_model']].message_get_default_recipients(cr, uid, ids, context=sub_ctx)\n  686          res = {}\n  687          for record in self.browse(cr, SUPERUSER_ID, ids, context=context):\n  ...\n  696          return res\n  697  \n  698:     def message_get_reply_to(self, cr, uid, ids, default=None, context=None):\n  699          \"\"\" Returns the preferred reply-to email address that is basically\n  700              the alias of the document, if it exists. \"\"\"\n  ...\n  735                  res[res_id] = formataddr((email_name, email_addr))\n  736          left_ids = set(ids).difference(set(aliases.keys()))\n  737:         if left_ids and default:\n  738:             res.update(dict((res_id, default) for res_id in left_ids))\n  739          return res\n  740  \n  ...\n  915                 does not match any of the currently configured mail aliases\n  916                 (may be None if a matching alias is supposed to be present)\n  917:            :type dict custom_values: optional dictionary of default field values\n  918                  to pass to ``message_new`` if a new record needs to be created.\n  919                  Ignored if the thread record already exists, and also if a\n  920:                 matching mail.alias was found (aliases define their own defaults)\n  921             :param int thread_id: optional ID of the record/thread from ``model``\n  922                 to which this mail should be attached. Only used if the message\n  ...\n 1026                          user_id = uid\n 1027                          _logger.info('No matching user_id for the alias %s', alias.alias_name)\n 1028:                     route = (alias.alias_model_id.model, alias.alias_force_thread_id, eval(alias.alias_defaults), user_id, alias)\n 1029                      route = self.message_route_verify(cr, uid, message, message_dict, route,\n 1030                                  update_author=True, assert_model=True, create_fallback=True, context=context)\n ....\n 1124                  to pass to ``message_new`` if a new record needs to be created.\n 1125                  Ignored if the thread record already exists, and also if a\n 1126:                 matching mail.alias was found (aliases define their own defaults)\n 1127             :param bool save_original: whether to keep a copy of the original\n 1128                  email source attached to the message after it is imported.\n ....\n 1171             for a given thread model, if the message did not belong to\n 1172             an existing thread.\n 1173:            The default behavior is to create a new record of the corresponding\n 1174             model (based on some very basic info extracted from the message).\n 1175             Additional behavior may be implemented by overriding this method.\n ....\n 1205      def message_update(self, cr, uid, ids, msg_dict, update_vals=None, context=None):\n 1206          \"\"\"Called by ``message_process`` when a new message is received\n 1207:            for an existing thread. The default behavior is to update the record\n 1208             with update_vals taken from the incoming email.\n 1209             Additional behavior may be implemented by overriding this\n ....\n 1357                                  message.get('Date'), message_id)\n 1358                  stored_date = datetime.datetime.now()\n 1359:             msg_dict['date'] = stored_date.strftime(tools.DEFAULT_SERVER_DATETIME_FORMAT)\n 1360  \n 1361          if message.get('In-Reply-To'):\n ....\n 1418  \n 1419              :param list emails: list of email addresses\n 1420:             :param string model: model to fetch related record; by default self\n 1421                  is used.\n 1422              :param boolean check_followers: check in document followers\n ....\n 1557                  ``(name,content)``, where content is NOT base64 encoded\n 1558  \n 1559:             Extra keyword arguments will be used as default column values for the\n 1560              new mail.message record. Special cases:\n 1561                  - attachment_ids: supposed not attached to any document; attach them\n ....\n 1589          author_id = kwargs.get('author_id')\n 1590          if author_id is None:  # keep False values\n 1591:             author_id = self.pool.get('mail.message')._get_default_author(cr, uid, context=context)\n 1592  \n 1593          # 1: Handle content subtype: if plaintext, converto into HTML\n ....\n 1726          fol_ids = mail_followers_obj.search(cr, SUPERUSER_ID, ['&', '&', ('res_model', '=', self._name), ('res_id', 'in', ids), ('partner_id', 'in', partner_ids)])\n 1727          for fol in mail_followers_obj.browse(cr, SUPERUSER_ID, fol_ids, context=context):\n 1728:             existing_pids_dict.setdefault(fol.res_id, set()).add(fol.partner_id.id)\n 1729  \n 1730          # subtype_ids specified: update already subscribed partners\n 1731          if subtype_ids and fol_ids:\n 1732              mail_followers_obj.write(cr, SUPERUSER_ID, fol_ids, {'subtype_ids': [(6, 0, subtype_ids)]}, context=context)\n 1733:         # subtype_ids not specified: do not update already subscribed partner, fetch default subtypes for new partners\n 1734          if subtype_ids is None:\n 1735              subtype_ids = subtype_obj.search(\n 1736                  cr, uid, [\n 1737:                     ('default', '=', True), '|', ('res_model', '=', self._name), ('res_model', '=', False)], context=context)\n 1738  \n 1739          for id in ids:\n ....\n 1787      def _message_get_auto_subscribe_fields(self, cr, uid, updated_fields, auto_follow_fields=None, context=None):\n 1788          \"\"\" Returns the list of relational fields linking to res.users that should\n 1789:             trigger an auto subscribe. The default list checks for the fields\n 1790              - called 'user_id'\n 1791              - linking to res.users\n ....\n 1888                  for subtype in header_follower.subtype_ids:\n 1889                      if subtype.parent_id and subtype.parent_id.res_model == self._name:\n 1890:                         new_followers.setdefault(header_follower.partner_id.id, set()).add(subtype.parent_id.id)\n 1891                      elif subtype.res_model is False:\n 1892:                         new_followers.setdefault(header_follower.partner_id.id, set()).add(subtype.id)\n 1893  \n 1894          # add followers coming from res.users relational fields that are tracked\n ....\n 1896          user_pids = [user.partner_id.id for user in self.pool.get('res.users').browse(cr, SUPERUSER_ID, user_ids, context=context)]\n 1897          for partner_id in user_pids:\n 1898:             new_followers.setdefault(partner_id, None)\n 1899  \n 1900          for pid, subtypes in new_followers.items():\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\mail_thread_view.xml:\n    7              <field name=\"res_model\">mail.message</field>\n    8              <field name=\"context\">{\n    9:               'default_model': 'res.users',\n   10:               'default_res_id': uid,\n   11                'thread_model': 'res.partner',\n   12                'needaction_menu_ref': ['mail.mail_tomefeeds', 'mail.mail_starfeeds']\n   ..\n   38              <field name=\"res_model\">mail.message</field>\n   39              <field name=\"context\">{\n   40:               'default_model': 'res.users',\n   41:               'default_res_id': uid,\n   42                'thread_model': 'res.partner',\n   43:               'search_default_message_unread': True,\n   44                'needaction_menu_ref': ['mail.mail_starfeeds', 'mail.mail_inboxfeeds']\n   45              }</field>\n   ..\n   66              <field name=\"res_model\">mail.message</field>\n   67              <field name=\"context\">{\n   68:               'default_model': 'res.users',\n   69:               'default_res_id': uid,\n   70                'thread_model': 'res.partner',\n   71:               'search_default_message_unread': True\n   72              }</field>\n   73              <field name=\"params\" eval=\"&quot;{\n   ..\n   94              <field name=\"tag\">mail.wall</field>\n   95              <field name=\"context\">{\n   96:               'default_model': 'res.users',\n   97:               'default_res_id': uid,\n   98                'thread_model': 'res.partner',\n   99                'needaction_menu_ref': ['mail.mail_tomefeeds', 'mail.mail_starfeeds', 'mail.mail_inboxfeeds']\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\res_config.py:\n   34      }\n   35  \n   36:     def get_default_alias_domain(self, cr, uid, ids, context=None):\n   37:         alias_domain = self.pool.get(\"ir.config_parameter\").get_param(cr, uid, \"mail.catchall.domain\", default=None, context=context)\n   38          if alias_domain is None:\n   39              domain = self.pool.get(\"ir.config_parameter\").get_param(cr, uid, \"web.base.url\", context=context)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\res_partner.py:\n   42      }\n   43  \n   44:     _defaults = {\n   45          'notify_email': lambda *args: 'always'\n   46      }\n   ..\n   52          return recipients\n   53  \n   54:     def message_get_default_recipients(self, cr, uid, ids, context=None):\n   55          return dict((id, {'partner_ids': [id], 'email_to': False, 'email_cc': False}) for id in ids)\n   56  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\res_users.py:\n   45      }\n   46  \n   47:     _defaults = {\n   48          'display_groups_suggestions': True,\n   49      }\n   ..\n   51      def __init__(self, pool, cr):\n   52          \"\"\" Override of __init__ to add access rights on notification_email_send\n   53:             and alias fields. Access rights are disabled by default, but allowed\n   54              on some specific fields defined in self.SELF_{READ/WRITE}ABLE_FIELDS.\n   55          \"\"\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\static\\scripts\\openerp_mailgate.py:\n   37  from email import Encoders\n   38  \n   39: class DefaultConfig(object):\n   40      \"\"\"\n   41:     Default configuration\n   42      \"\"\"\n   43:     OPENERP_DEFAULT_USER_ID = 1\n   44:     OPENERP_DEFAULT_PASSWORD = 'admin'\n   45      OPENERP_HOSTNAME = 'localhost'\n   46      OPENERP_PORT = 8069\n   47:     OPENERP_DEFAULT_DATABASE = 'openerp'\n   48      MAIL_ERROR = 'error@example.com'\n   49      MAIL_SERVER = 'smtp.example.com'\n   ..\n   51      MAIL_ADMINS = ('info@example.com',)\n   52  \n   53: config = DefaultConfig()\n   54  \n   55  \n   ..\n   85                   port=config.OPENERP_PORT,\n   86                   path='object',\n   87:                  dbname=config.OPENERP_DEFAULT_DATABASE):\n   88          self.rpc = xmlrpclib.ServerProxy('http://%s:%s/xmlrpc/%s' % (host, port, path), allow_none=True)\n   89          self.user_id = uid\n   ..\n   95  \n   96  class EmailParser(object):\n   97:     def __init__(self, uid, password, dbname, host, port, model=False, email_default=False):\n   98          self.rpc = RPCProxy(uid, password, host=host, port=port, dbname=dbname)\n   99          if model:\n  ...\n  104                  self.model_id = self.rpc('ir.model', 'search', [('model', '=', model)])[0]\n  105                  self.model = str(model)\n  106:             self.email_default = email_default\n  107  \n  108  \n  ...\n  125      parser.add_option(\"-u\", \"--user\", dest=\"userid\",\n  126                        help=\"Odoo user id to connect with\",\n  127:                       default=config.OPENERP_DEFAULT_USER_ID, type='int')\n  128      parser.add_option(\"-p\", \"--password\", dest=\"password\",\n  129                        help=\"Odoo user password\",\n  130:                       default=config.OPENERP_DEFAULT_PASSWORD)\n  131      parser.add_option(\"-o\", \"--model\", dest=\"model\",\n  132                        help=\"Name or ID of destination model\",\n  133:                       default=\"crm.lead\")\n  134:     parser.add_option(\"-m\", \"--default\", dest=\"default\",\n  135                        help=\"Admin email for error notifications.\",\n  136:                       default=None)\n  137      parser.add_option(\"-d\", \"--dbname\", dest=\"dbname\",\n  138:                       help=\"Odoo database name (default: %default)\",\n  139:                       default=config.OPENERP_DEFAULT_DATABASE)\n  140      parser.add_option(\"--host\", dest=\"host\",\n  141                        help=\"Odoo Server hostname\",\n  142:                       default=config.OPENERP_HOSTNAME)\n  143      parser.add_option(\"--port\", dest=\"port\",\n  144                        help=\"Odoo Server XML-RPC port number\",\n  145:                       default=config.OPENERP_PORT)\n  146      parser.add_option(\"--custom-values\", dest=\"custom_values\",\n  147                        help=\"Dictionary of extra values to pass when creating records\",\n  148:                       default=None)\n  149      parser.add_option(\"-s\", dest=\"save_original\",\n  150                        action=\"store_true\",\n  151                        help=\"Keep a full copy of the email source attached to each message\",\n  152:                       default=False)\n  153  \n  154      return parser\n  ...\n  167                                 options.port,\n  168                                 model=options.model,\n  169:                                email_default= options.default)\n  170      msg_txt = sys.stdin.read()\n  171      custom_values = {}\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\static\\src\\xml\\mail.xml:\n   12          mail.compose_message template\n   13          This template holds the composition form to write a note or send\n   14:         an e-mail. It contains by default a textarea, that will be replaced\n   15          by another composition form in the main wall composition form, or\n   16          for main thread composition form in document form view.\n   ..\n  238      </t>\n  239  \n  240:     <!-- default layout -->\n  241      <t t-name=\"mail.thread.message\">\n  242          <div t-attf-class=\"oe_msg #{widget.thread_level and widget.options.display_indented_thread > -1 ? 'oe_msg_indented' : ''} #{widget.subtype ? '' : 'oe_msg_nobody'} oe_msg_#{widget.type}\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\static\\src\\xml\\mail_followers.xml:\n   14                      <span class=\"oe_following\">Following</span>\n   15                  </button>\n   16:                 <button type=\"button\" t-attf-class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">\n   17                      <span class=\"caret\"></span>\n   18                  </button>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\tests\\test_invite.py:\n   31          # Do: create a mail_wizard_invite, validate it\n   32          self._init_mock_build_email()\n   33:         context = {'default_res_model': 'mail.group', 'default_res_id': self.group_pigs_id}\n   34          mail_invite_id = mail_invite.create(cr, self.user_raoul_id, {'partner_ids': [(4, self.partner_bert_id)], 'send_mail': True}, context)\n   35:         mail_invite.add_followers(cr, self.user_raoul_id, [mail_invite_id], {'default_model': 'mail.group', 'default_res_id': 0})\n   36  \n   37          # Test: Pigs followers should contain Admin, Bert\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\tests\\test_mail_features.py:\n  107          cr, uid, user_admin, user_raoul, group_pigs = self.cr, self.uid, self.user_admin, self.user_raoul, self.group_pigs\n  108          # Data: message subtypes\n  109:         self.mail_message_subtype.create(cr, uid, {'name': 'mt_mg_def', 'default': True, 'res_model': 'mail.group'})\n  110:         self.mail_message_subtype.create(cr, uid, {'name': 'mt_other_def', 'default': True, 'res_model': 'crm.lead'})\n  111:         self.mail_message_subtype.create(cr, uid, {'name': 'mt_all_def', 'default': True, 'res_model': False})\n  112:         mt_mg_nodef = self.mail_message_subtype.create(cr, uid, {'name': 'mt_mg_nodef', 'default': False, 'res_model': 'mail.group'})\n  113:         mt_all_nodef = self.mail_message_subtype.create(cr, uid, {'name': 'mt_all_nodef', 'default': False, 'res_model': False})\n  114:         default_group_subtypes = self.mail_message_subtype.search(cr, uid, [('default', '=', True), '|', ('res_model', '=', 'mail.group'), ('res_model', '=', False)])\n  115  \n  116          # ----------------------------------------\n  ...\n  118          # ----------------------------------------\n  119  \n  120:         # Do: subscribe Raoul, should have default subtypes\n  121          group_pigs.message_subscribe_users([user_raoul.id])\n  122          group_pigs.refresh()\n  ...\n  125          self.assertEqual(set(follower_ids), set([user_raoul.partner_id.id, user_admin.partner_id.id]),\n  126                          'message_subscribe: Admin and Raoul should be the only 2 Pigs fans')\n  127:         # Raoul follows default subtypes\n  128          fol_ids = self.mail_followers.search(cr, uid, [\n  129                          ('res_model', '=', 'mail.group'),\n  ...\n  133          fol_obj = self.mail_followers.browse(cr, uid, fol_ids)[0]\n  134          fol_subtype_ids = set([subtype.id for subtype in fol_obj.subtype_ids])\n  135:         self.assertEqual(set(fol_subtype_ids), set(default_group_subtypes),\n  136:                         'message_subscribe: Raoul subscription subtypes are incorrect, should be all default ones')\n  137  \n  138          # Do: subscribe Raoul with specified new subtypes\n  ...\n  168          self.assertEqual(set(follower_ids), set([user_raoul.partner_id.id, user_admin.partner_id.id]),\n  169                          'message_subscribe: Admin and Raoul should be the only 2 Pigs fans')\n  170:         # Test: Raoul follows default subtypes\n  171          fol_ids = self.mail_followers.search(cr, uid, [\n  172                          ('res_model', '=', 'mail.group'),\n  ...\n  607                  'partner_ids': [(4, p_c_id), (4, p_d_id)],\n  608              }, context={\n  609:                 'default_composition_mode': 'comment',\n  610:                 'default_model': 'mail.group',\n  611:                 'default_res_id': self.group_pigs_id,\n  612              })\n  613          compose = mail_compose.browse(cr, uid, compose_id)\n  ...\n  647                  'attachment_ids': [(0, 0, _attachments[0]), (0, 0, _attachments[1])]\n  648              }, context={\n  649:                 'default_composition_mode': 'comment',\n  650:                 'default_res_id': self.group_pigs_id,\n  651:                 'default_parent_id': message.id\n  652              })\n  653          compose = mail_compose.browse(cr, uid, compose_id)\n  ...\n  678                  'partner_ids': [(4, p_c_id), (4, p_d_id)],\n  679              }, context={\n  680:                 'default_composition_mode': 'mass_mail',\n  681:                 'default_model': 'mail.group',\n  682:                 'default_res_id': False,\n  683                  'active_ids': [self.group_pigs_id, group_bird_id],\n  684              })\n  ...\n  687          # Do: Post the comment, get created message for each group\n  688          mail_compose.send_mail(cr, user_raoul.id, [compose_id], context={\n  689:                         'default_res_id': -1,\n  690                          'active_ids': [self.group_pigs_id, group_bird_id]\n  691                      })\n  ...\n  738                  'partner_ids': [(4, p_c_id), (4, p_d_id)],\n  739              }, context={\n  740:                 'default_composition_mode': 'mass_mail',\n  741:                 'default_model': 'mail.group',\n  742:                 'default_res_id': False,\n  743                  'active_ids': [self.group_pigs_id],\n  744                  'active_domain': [('name', 'in', ['Pigs', 'Bird'])],\n  ...\n  749          mail_compose.send_mail(\n  750              cr, user_raoul.id, [compose_id], context={\n  751:                 'default_res_id': -1,\n  752                  'active_ids': [self.group_pigs_id, group_bird_id]\n  753              })\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\tests\\test_mail_message.py:\n   90          self.registry('ir.config_parameter').unlink(cr, uid, param_ids)\n   91  \n   92:         # Do: free message; specified values > default values\n   93          msg_id = self.mail_message.create(cr, user_raoul_id, {'no_auto_thread': True, 'reply_to': reply_to1, 'email_from': email_from1})\n   94          msg = self.mail_message.browse(cr, user_raoul_id, msg_id)\n   ..\n  187          msg_ids = self.mail_message.search(cr, self.user_bert_id, [('subject', 'like', '_Test')])\n  188          self.assertEqual(set([msg_id2, msg_id4]), set(msg_ids), 'mail_message search failed')\n  189:         # Test: Raoul: 3 messages on Pigs Raoul can read (employee can read group with default values), 0 on Birds (private group)\n  190          msg_ids = self.mail_message.search(cr, self.user_raoul_id, [('subject', 'like', '_Test'), ('body', 'like', 'A')])\n  191          self.assertEqual(set([msg_id3, msg_id4, msg_id5]), set(msg_ids), 'mail_message search failed')\n  192:         # Test: Raoul: 3 messages on Pigs Raoul can read (employee can read group with default values), 0 on Birds (private group) + 2 messages as author\n  193          msg_ids = self.mail_message.search(cr, self.user_raoul_id, [('subject', 'like', '_Test')])\n  194          self.assertEqual(set([msg_id3, msg_id4, msg_id5, msg_id7, msg_id8]), set(msg_ids), 'mail_message search failed')\n  ...\n  439          compose_id = mail_compose.create(cr, user_raoul_id,\n  440              {'subject': 'Subject', 'body': 'Body text', 'partner_ids': []},\n  441:             {'default_composition_mode': 'comment', 'default_model': 'mail.group', 'default_res_id': self.group_jobs_id})\n  442          mail_compose.send_mail(cr, user_raoul_id, [compose_id])\n  443          # Do: Raoul replies to a Jobs message using the composer\n  444          compose_id = mail_compose.create(cr, user_raoul_id,\n  445              {'subject': 'Subject', 'body': 'Body text'},\n  446:             {'default_composition_mode': 'comment', 'default_parent_id': pigs_msg_id})\n  447          mail_compose.send_mail(cr, user_raoul_id, [compose_id])\n  448  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\update.py:\n   28          limit_date = datetime.datetime.now()\n   29          limit_date = limit_date - datetime.timedelta(15)\n   30:         limit_date_str = limit_date.strftime(misc.DEFAULT_SERVER_DATETIME_FORMAT)\n   31          nbr_users = user_count([])\n   32          nbr_active_users = user_count([(\"login_date\", \">=\", limit_date_str)])\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\wizard\\invite.py:\n   31      _description = 'Invite wizard'\n   32  \n   33:     def default_get(self, cr, uid, fields, context=None):\n   34:         result = super(invite_wizard, self).default_get(cr, uid, fields, context=context)\n   35          user_name = self.pool.get('res.users').name_get(cr, uid, [uid], context=context)[0][1]\n   36          model = result.get('res_model')\n   ..\n   62      }\n   63  \n   64:     _defaults = {\n   65          'send_mail': True,\n   66      }\n   ..\n   93                      'res_id': wizard.res_id,\n   94                      'record_name': document.name_get()[0][1],\n   95:                     'email_from': self.pool['mail.message']._get_default_from(cr, uid, context=context),\n   96:                     'reply_to': self.pool['mail.message']._get_default_from(cr, uid, context=context),\n   97                      'subject': _('Invitation to follow %s: %s') % (model_name, document.name_get()[0][1]),\n   98                      'body_html': '%s' % wizard.message,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\wizard\\mail_compose_message.py:\n   50      _batch_size = 500\n   51  \n   52:     def default_get(self, cr, uid, fields, context=None):\n   53          \"\"\" Handle composition mode. Some details about context keys:\n   54:             - comment: default mode, model and ID of a record the user comments\n   55:                 - default_model or active_model\n   56:                 - default_res_id or active_id\n   57              - reply: active_id of a message the user replies to\n   58:                 - default_parent_id or message_id or active_id: ID of the\n   59                      mail.message we reply to\n   60:                 - message.res_model or default_model\n   61:                 - message.res_id or default_res_id\n   62              - mass_mail: model and IDs of records the user mass-mails\n   63                  - active_ids: record IDs\n   64:                 - default_model or active_model\n   65          \"\"\"\n   66          if context is None:\n   67              context = {}\n   68:         result = super(mail_compose_message, self).default_get(cr, uid, fields, context=context)\n   69  \n   70          # v6.1 compatibility mode\n   ..\n   77              result['no_auto_thread'] = True\n   78  \n   79:         # default values according to composition mode - NOTE: reply is deprecated, fall back on comment\n   80          if result['composition_mode'] == 'reply':\n   81              result['composition_mode'] = 'comment'\n   ..\n   91                  result[field] = vals[field]\n   92  \n   93:         # TDE HACK: as mailboxes used default_model='res.users' and default_res_id=uid\n   94          # (because of lack of an accessible pid), creating a message on its own\n   95          # profile may crash (res_users does not allow writing on it)\n   ..\n  129              help='Notify followers of the document (mass post only)'),\n  130      }\n  131:     _defaults = {\n  132          'composition_mode': 'comment',\n  133          'body': lambda self, cr, uid, ctx={}: '',\n  ...\n  165  \n  166      def get_record_data(self, cr, uid, values, context=None):\n  167:         \"\"\" Returns a defaults-like dict with initial values for the composition\n  168          wizard when sending an email related a previous email (parent_id) or\n  169:         a document (model, res_id). This is based on previously computed default\n  170          values. \"\"\"\n  171          if context is None:\n  ...\n  205          context = dict(context or {})\n  206  \n  207:         # clean the context (hint: mass mailing sets some default values that\n  208          # could be wrongly interpreted by mail_mail)\n  209:         context.pop('default_email_to', None)\n  210:         context.pop('default_partner_ids', None)\n  211  \n  212          for wizard in self.browse(cr, uid, ids, context=context):\n  ...\n  249          or mail_mails. \"\"\"\n  250          results = dict.fromkeys(res_ids, False)\n  251:         rendered_values, default_recipients = {}, {}\n  252          mass_mail_mode = wizard.composition_mode == 'mass_mail'\n  253  \n  ...\n  258          reply_to_value = dict.fromkeys(res_ids, None)\n  259          if mass_mail_mode and not wizard.no_auto_thread:\n  260:             reply_to_value = self.pool['mail.thread'].message_get_reply_to(cr, uid, res_ids, default=wizard.email_from, context=dict(context, thread_model=wizard.model))\n  261  \n  262          for res_id in res_ids:\n  ...\n  320          template rendering represent a significant part of the process.\n  321  \n  322:         Default recipients are also computed, based on mail_thread method\n  323:         message_get_default_recipients. This allows to ensure a mass mailing has\n  324          always some recipients specified.\n  325  \n  ...\n  336  \n  337          ctx = dict(context, thread_model=wizard.model)\n  338:         default_recipients = self.pool['mail.thread'].message_get_default_recipients(cr, uid, res_ids, context=ctx)\n  339  \n  340          results = dict.fromkeys(res_ids, False)\n  ...\n  346                  'reply_to': replies_to[res_id],\n  347              }\n  348:             results[res_id].update(default_recipients.get(res_id, dict()))\n  349          return results\n  350  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\wizard\\mail_compose_message_view.xml:\n   73          </record>\n   74  \n   75:         <!--  Replace the default mass-mailing wizard in base with the composition wizard -->\n   76          <act_window name=\"Partner Mass Mailing\"\n   77                  res_model=\"mail.compose.message\"\n   ..\n   83                  id=\"base.action_partner_mass_mail\"\n   84                  context=\"{\n   85:                             'default_composition_mode': 'mass_mail',\n   86:                             'default_partner_to': '${object.id or \\'\\'}',\n   87                          }\"/>\n   88  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\marketing_campaign\\marketing_campaign.py:\n   99      }\n  100  \n  101:     _defaults = {\n  102          'state': lambda *a: 'draft',\n  103          'mode': lambda *a: 'test',\n  ...\n  186  \n  187      # prevent duplication until the server properly duplicates several levels of nested o2m\n  188:     def copy(self, cr, uid, id, default=None, context=None):\n  189          raise osv.except_osv(_(\"Operation not supported\"), _(\"You cannot duplicate a campaign, Not supported yet.\"))\n  190  \n  ...\n  253      }\n  254  \n  255:     _defaults = {\n  256          'state': lambda *a: 'draft',\n  257          'sync_mode': lambda *a: 'create_date',\n  ...\n  418      }\n  419  \n  420:     _defaults = {\n  421          'type': lambda *a: 'email',\n  422          'condition': lambda *a: 'True',\n  ...\n  545      }\n  546  \n  547:     _defaults = {\n  548          'interval_nbr': 1,\n  549          'interval_type': 'days',\n  ...\n  607          matching_workitems = []\n  608          for id, res_id, model in res:\n  609:             workitem_map.setdefault(model,{}).setdefault(res_id,set()).add(id)\n  610          for model, id_map in workitem_map.iteritems():\n  611              model_pool = self.pool[model]\n  ...\n  635          'error_msg' : fields.text('Error Message', readonly=True)\n  636      }\n  637:     _defaults = {\n  638          'state': lambda *a: 'todo',\n  639          'date': False,\n  ...\n  782                  'target': 'new',\n  783                  'nodestroy':True,\n  784:                 'context': \"{'template_id':%d,'default_res_id':%d}\"%\n  785                                  (wi_obj.activity_id.email_template_id.id,\n  786                                   wi_obj.res_id)\n  ...\n  804  class email_template(osv.osv):\n  805      _inherit = \"email.template\"\n  806:     _defaults = {\n  807          'model_id': lambda obj, cr, uid, context: context.get('object_id',False),\n  808      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\marketing_campaign\\marketing_campaign_view.xml:\n   24          <field name=\"name\">Segments</field>\n   25          <field name=\"view_mode\">tree,form</field>\n   26:         <field name=\"context\">{'search_default_campaign_id': [active_id], 'default_campaign_id': active_id}</field>\n   27      </record>\n   28      \n   ..\n   34          <field name=\"name\">Workitems</field>\n   35          <field name=\"view_mode\">tree,form</field>\n   36:         <field name=\"context\">{'search_default_campaign_id': [active_id], 'default_campaign_id': active_id}</field>\n   37      </record>\n   38      \n   ..\n   44          <field name=\"name\">Campaign Follow-up</field>\n   45          <field name=\"view_mode\">tree,form</field>\n   46:         <field name=\"context\">{'search_default_campaign_id': [active_id], 'default_campaign_id': active_id}</field>\n   47      </record>\n   48  \n   ..\n   98                  </group>\n   99                  <separator string=\"Activities\"/>\n  100:                 <field name=\"activity_ids\" context=\"{'default_object_id': object_id, 'default_campaign_id': active_id}\"/>\n  101              </sheet>\n  102              </form>\n  ...\n  307                          <field name=\"type\"/>\n  308                          <field name=\"email_template_id\" attrs=\"{'required':[('type','=','email')], 'invisible':[('type','!=','email')]}\"\n  309:                            context=\"{'default_model_id':object_id}\"/>\n  310                          <field name=\"server_action_id\" attrs=\"{'required':[('type','=','action')],'invisible':[('type','!=','action')]}\" domain=\"[('model_id','=',object_id)]\"/>\n  311                          <field name=\"report_id\" attrs=\"{'required':[('type','=','report')],'invisible':[('type','!=','report')]}\" context=\"{'object_id':object_id}\"/>\n  ...\n  314                  </group>\n  315                  <separator string=\"Previous Activities\"/>\n  316:                 <field name=\"from_ids\" mode=\"tree\" context=\"{'default_activity_to_id': active_id}\">\n  317                      <tree string=\"Incoming Transitions\" editable=\"bottom\">\n  318                          <field name=\"activity_from_id\" domain=\"[('campaign_id', '=', parent.campaign_id)]\" options=\"{'no_create': True}\" />\n  ...\n  331                  </field>\n  332                  <separator string=\"Next Activities\"/>\n  333:                 <field name=\"to_ids\" mode=\"tree\" context=\"{'default_activity_from_id': active_id}\">\n  334                      <tree string=\"Outgoing Transitions\" editable=\"bottom\">\n  335                          <field name=\"activity_to_id\" domain=\"[('campaign_id', '=', parent.campaign_id)]\" options=\"{'no_create': True}\" />\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mass_mailing\\data\\mass_mailing_data.xml:\n   20          </record>\n   21  \n   22:         <!-- Default stages of mass mailing campaigns -->\n   23          <record id=\"campaign_stage_1\" model=\"mail.mass_mailing.stage\">\n   24              <field name=\"name\">Schedule</field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mass_mailing\\data\\mass_mailing_demo.xml:\n   38              <field name=\"subject\">Newsletter</field>\n   39              <field name=\"model_id\" ref=\"mass_mailing.model_mail_mass_mailing_contact\"/>\n   40:             <field name=\"use_default_to\" eval=\"True\"/>\n   41              <field name=\"auto_delete\" eval=\"True\"/>\n   42              <field name=\"body_html\"><![CDATA[<div data-snippet-id=\"big-picture\" style=\"padding:0px; margin:0px\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mass_mailing\\models\\mail_thread.py:\n   75      def message_receive_bounce(self, cr, uid, ids, mail_id=None, context=None):\n   76          \"\"\"Called by ``message_process`` when a bounce email (such as Undelivered\n   77:         Mail Returned to Sender) is received for an existing thread. The default\n   78          behavior is to check is an integer  ``message_bounce`` column exists.\n   79          If it is the case, its content is incremented. \"\"\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mass_mailing\\models\\mass_mailing.py:\n   51          return lid and lid[0] or False\n   52  \n   53:     _defaults = {\n   54          'list_id': _get_latest_list\n   55      }\n   ..\n   73          return self.name_get(cr, uid, [rec_id], context)[0]\n   74  \n   75:     def message_get_default_recipients(self, cr, uid, ids, context=None):\n   76          res = {}\n   77          for record in self.browse(cr, uid, ids, context=context):\n   ..\n  113      }\n  114  \n  115:     _defaults = {\n  116          'sequence': 0,\n  117      }\n  ...\n  223      }\n  224  \n  225:     def _get_default_stage_id(self, cr, uid, context=None):\n  226          stage_ids = self.pool['mail.mass_mailing.stage'].search(cr, uid, [], limit=1, context=context)\n  227          return stage_ids and stage_ids[0] or False\n  228  \n  229:     _defaults = {\n  230          'user_id': lambda self, cr, uid, ctx=None: uid,\n  231:         'stage_id': lambda self, *args: self._get_default_stage_id(*args),\n  232      }\n  233  \n  ...\n  278          group_obj = obj.read_group(cr, uid, domain, read_fields, groupby_field, context=context)\n  279          field = obj._fields.get(groupby_field.split(':')[0])\n  280:         pattern = tools.DEFAULT_SERVER_DATE_FORMAT if field.type == 'date' else tools.DEFAULT_SERVER_DATETIME_FORMAT\n  281          for group in group_obj:\n  282              group_begin_date = datetime.strptime(group['__domain'][0][2], pattern).date()\n  ...\n  294              res[mailing.id] = {}\n  295              date = mailing.sent_date if mailing.sent_date else mailing.create_date\n  296:             date_begin = datetime.strptime(date, tools.DEFAULT_SERVER_DATETIME_FORMAT)\n  297              date_end = date_begin + relativedelta.relativedelta(days=self._period_number - 1)\n  298:             date_begin_str = date_begin.strftime(tools.DEFAULT_SERVER_DATETIME_FORMAT)\n  299:             date_end_str = date_end.strftime(tools.DEFAULT_SERVER_DATETIME_FORMAT)\n  300              domain = [('mass_mailing_id', '=', mailing.id), ('opened', '>=', date_begin_str), ('opened', '<=', date_end_str)]\n  301              res[mailing.id]['opened_daily'] = json.dumps(self.__get_bar_values(cr, uid, obj, domain, ['opened'], 'opened_count', 'opened:day', date_begin, context=context))\n  ...\n  447      }\n  448  \n  449:     def default_get(self, cr, uid, fields, context=None):\n  450:         res = super(MassMailing, self).default_get(cr, uid, fields, context=context)\n  451          if 'reply_to_mode' in fields and not 'reply_to_mode' in res and res.get('mailing_model'):\n  452              if res['mailing_model'] in ['res.partner', 'mail.mass_mailing.contact']:\n  ...\n  456          return res\n  457  \n  458:     _defaults = {\n  459          'state': 'draft',\n  460:         'email_from': lambda self, cr, uid, ctx=None: self.pool['mail.message']._get_default_from(cr, uid, context=ctx),\n  461:         'reply_to': lambda self, cr, uid, ctx=None: self.pool['mail.message']._get_default_from(cr, uid, context=ctx),\n  462          'mailing_model': 'mail.mass_mailing.contact',\n  463          'contact_ab_pc': 100,\n  ...\n  468      #------------------------------------------------------\n  469  \n  470:     def copy_data(self, cr, uid, id, default=None, context=None):\n  471          mailing = self.browse(cr, uid, id, context=context)\n  472:         default = dict(default or {},\n  473                         name=_('%s (copy)') % mailing.name)\n  474:         return super(MassMailing, self).copy_data(cr, uid, id, default, context=context)\n  475  \n  476      def read_group(self, cr, uid, domain, fields, groupby, offset=0, limit=None, context=None, orderby=False, lazy=True):\n  477          \"\"\" Override read_group to always display all states. \"\"\"\n  478          if groupby and groupby[0] == \"state\":\n  479:             # Default result structure\n  480              # states = self._get_state_list(cr, uid, context=context)\n  481              states = [('draft', 'Draft'), ('test', 'Tested'), ('done', 'Sent')]\n  ...\n  488              # Get standard results\n  489              read_group_res = super(MassMailing, self).read_group(cr, uid, domain, fields, groupby, offset=offset, limit=limit, context=context, orderby=orderby)\n  490:             # Update standard results with default results\n  491              result = []\n  492              for state_value, state_name in states:\n  ...\n  537  \n  538      def action_test_mailing(self, cr, uid, ids, context=None):\n  539:         ctx = dict(context, default_mass_mailing_id=ids[0])\n  540          return {\n  541              'name': _('Test Mailing'),\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mass_mailing\\models\\mass_mailing_stats.py:\n   66      }\n   67  \n   68:     _defaults = {\n   69          'scheduled': fields.datetime.now,\n   70      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mass_mailing\\views\\email_template.xml:\n   18                                      domain=\"[('model', 'in', ['res.partner', 'mail.mass_mailing.contact'])]\"/>\n   19                                  <field name=\"model\" invisible=\"True\"/>\n   20:                                 <field name=\"use_default_to\" invisible=\"1\"/>\n   21                              </group>\n   22                              <group>\n   ..\n   84              <field name=\"context\">{\n   85      'form_view_ref': 'mass_mailing.email_template_form_minimal',\n   86:     'default_use_default_to': True,\n   87  }</field>\n   88          </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mass_mailing\\views\\mass_mailing.xml:\n   88              <field name=\"view_type\">form</field>\n   89              <field name=\"view_mode\">tree,form</field>\n   90:             <field name=\"context\">{'search_default_mass_mailing_id': active_id}</field>\n   91          </record>\n   92  \n   ..\n  136              <field name=\"view_type\">form</field>\n  137              <field name=\"view_mode\">tree</field>\n  138:             <field name=\"context\">{'search_default_not_opt_out': 1}</field>\n  139          </record>\n  140  \n  ...\n  144              <field name=\"view_type\">form</field>\n  145              <field name=\"view_mode\">tree</field>\n  146:             <field name=\"context\">{'search_default_list_id': active_id, 'search_default_not_opt_out': 1}</field>\n  147              <field name=\"help\" type=\"html\">\n  148                <p class=\"oe_view_nocontent_create\">\n  ...\n  386              <field name=\"model\">mail.mass_mailing</field>\n  387              <field name=\"arch\" type=\"xml\">\n  388:                 <kanban default_group_by='state'>\n  389                      <field name='color'/>\n  390                      <field name='total'/>\n  ...\n  455              <field name=\"view_mode\">kanban,tree,form</field>\n  456              <field name=\"context\">{\n  457:                 'search_default_mass_mailing_campaign_id': [active_id],\n  458:                 'default_mass_mailing_campaign_id': active_id,\n  459              }\n  460              </field>\n  ...\n  594              <field name=\"model\">mail.mass_mailing.campaign</field>\n  595              <field name=\"arch\" type=\"xml\">\n  596:                 <kanban default_group_by='stage_id'>\n  597                      <field name='total'/>\n  598                      <field name='color'/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mass_mailing\\wizard\\test_mailing.py:\n   15      }\n   16  \n   17:     _defaults = {\n   18:         'email_to': lambda self, cr, uid, ctx=None: self.pool['mail.message']._get_default_from(cr, uid, context=ctx),\n   19      }\n   20  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\membership\\membership.py:\n  361                      }, help=\"Date on which membership has been cancelled\"),\n  362      }\n  363:     _defaults = {\n  364          'free_member': False,\n  365          'membership_cancel': False,\n  ...\n  464  \n  465      _sql_constraints = [('membership_date_greater','check(membership_date_to >= membership_date_from)','Error ! Ending Date cannot be set before Beginning Date.')]\n  466:     _defaults = {\n  467          'membership': False,\n  468      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\membership\\membership_view.xml:\n   54                          <group>\n   55                              <group>\n   56:                                 <field name=\"default_code\"/>\n   57                                  <field name=\"categ_id\"/>\n   58                                  <field name=\"membership\" invisible=\"1\"/>\n   ..\n  106              <field name=\"res_model\">product.template</field>\n  107              <field name=\"domain\">[('membership','=',True), ('type', '=', 'service')]</field>\n  108:             <field name=\"context\">{'membership':True, 'type':'service', 'default_membership': True, 'default_type': 'service'}</field>\n  109              <field name=\"search_view_id\" ref=\"membership_product_search_form_view\"/>\n  110          </record>\n  ...\n  183              <field name=\"res_model\">res.partner</field>\n  184              <field name=\"search_view_id\" ref=\"view_res_partner_member_filter\"/>\n  185:             <field name=\"context\">{\"search_default_all_members\": 1, \"default_free_member\": True}</field>\n  186          </record>\n  187  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\membership\\report\\report_membership_view.xml:\n   52              <field name=\"view_mode\">graph</field>\n   53              <field name=\"search_view_id\" ref=\"view_report_membership_search\"/>\n   54:             <field name=\"context\">{\"search_default_start_date\":1,\"search_default_member\":1, 'search_default_Revenue':1, 'search_default_this_month':1, 'search_default_salesman':1,'group_by_no_leaf':1}</field>\n   55          </record>\n   56  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\.metadata\\.plugins\\org.python.pydev.shared_ui\\dialog_settings.xml:\n    1  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    2  <section name=\"Workbench\">\n    3: 	<section name=\"org.python.pydev.plugin.preferences.CheckDefaultPreferencesDialog\">\n    4  		<item value=\"480\" key=\"width\"/>\n    5  		<item value=\"518\" key=\"x\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\akun.py:\n    6  from dateutil.relativedelta import relativedelta\n    7  import itertools\n    8: from openerp.tools import DEFAULT_SERVER_DATE_FORMAT\n    9  \n   10  \n   ..\n  208      _columns = {\n  209          'idakun': fields.many2one(\"mmr.akun\", \"Nama Akun\"),\n  210:         'tanggal': fields.date(\"Waktu\", compute=\"_ambil_tanggal\", default=\"_default_tanggal\"),\n  211          'sumberpembelianfaktur': fields.many2one(\"mmr.pembelianfaktur\", \"Sumber Pembelian Faktur\", ondelete='cascade'),\n  212          'sumberpenjualanfaktur': fields.many2one(\"mmr.penjualanfaktur\", \"Sumber Penjualan Faktur\", ondelete='cascade'),\n  ...\n  831      \n  832      # Jangan dapat dicopy\n  833:     def copy(self, cr, uid, id, default=None, context=None):\n  834             raise osv.except_osv(_('Tidak Dapat Duplikasi'), _('Dilarang melakukan duplikasi data Kegiatan Akunting.'))\n  835             return True\n  ...\n  932      }    \n  933      \n  934:     _defaults = {\n  935                  'namamodel' : \"mmr.biaya\", \n  936                  'akunotomatis' : True, \n  ...\n  948      \n  949      # Jangan dapat dicopy\n  950:     def copy(self, cr, uid, id, default=None, context=None):\n  951             raise osv.except_osv(_('Tidak Dapat Duplikasi'), _('Dilarang melakukan duplikasi data Biaya.'))\n  952             return True    \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\customer.py:\n   54  		return super(mmr_customer,self).write(cr, uid, ids, vals, context=context)\n   55  	\n   56: 	_defaults = {\n   57  				'batashutang' : 50000000,\n   58  				}\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\pembayaran.py:\n  154  	\n  155  	# Pemabayaran jangan dapat dicopy\n  156: 	def copy(self, cr, uid, id, default=None, context=None):\n  157     		raise osv.except_osv(_('Tidak Dapat Duplikasi'), _('Dilarang melakukan duplikasi data Pembayaran.'))\n  158     		return True\n  159     	\n  160: 	_defaults = {\n  161  				'namamodel' : \"mmr.pembayaranpembelian\",\n  162  				'akunotomatis' : True,\n  ...\n  305  	}	\n  306  	\n  307: 	_defaults = {\n  308  				'namamodel' : \"mmr.pembayaranpenjualan\",\n  309  				'akunotomatis' : True,\n  ...\n  346  		return True\n  347  	\n  348: 	def copy(self, cr, uid, id, default=None, context=None):\n  349     		raise osv.except_osv(_('Tidak Dapat Duplikasi'), _('Dilarang melakukan duplikasi data Pembayaran.'))\n  350     		return True\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\pembelian.py:\n  142          res = {}\n  143          for pembelianpo in self.browse(cr,uid,ids):\n  144:             # Secara default\n  145              res[pembelianpo.id] = \"Baru\"\n  146              \n  ...\n  170          res = {}\n  171          for pembelianpo in self.browse(cr,uid,ids):\n  172:             # Secara default\n  173              res[pembelianpo.id] = \"Belum ada SJ\"\n  174              listpembeliansj = []\n  ...\n  245      }    \n  246      \n  247:     _defaults = {\n  248                  'waktu': lambda *a: datetime.datetime.today(),\n  249                  'status': \"Baru\",\n  ...\n  311      \n  312      # Jangan bisa diduplikat\n  313:     def copy(self, cr, uid, id, default=None, context=None):\n  314             raise osv.except_osv(_('Tidak Dapat Duplikasi'), _('Dilarang melakukan duplikasi data PO Pembelian.'))\n  315             return True\n  ...\n  408      }    \n  409      \n  410:     _defaults = {\n  411                  'supplier' : lambda self, cr, uid, c: c.get('supplier', False),\n  412                  'waktu' : lambda self, cr, uid, c: c.get('waktu', False),\n  ...\n  442      }    \n  443      \n  444:     _defaults = {\n  445                  'idpo' : lambda self, cr, uid, c: c.get('idpo', False),\n  446                  'waktu': lambda *a: datetime.datetime.today(),\n  ...\n  721      }    \n  722      \n  723:     _defaults = {\n  724                  'idpo' : lambda self, cr, uid, c: c.get('idpo', False),\n  725                  'waktu': lambda *a: datetime.datetime.today(),\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\penjualan.py:\n  360      }    \n  361      \n  362:     _defaults = {\n  363                  'tanggal': lambda *a: datetime.datetime.today(),\n  364                  'status': \"Baru\",\n  ...\n  404      \n  405      # Jangan dapat dicopy\n  406:     def copy(self, cr, uid, id, default=None, context=None):\n  407             raise osv.except_osv(_('Tidak Dapat Duplikasi'), _('Dilarang melakukan duplikasi data PO Penjualan.'))\n  408             return True\n  ...\n  457      @api.onchange(\"namaproduk\")\n  458      def _isi_history(self):\n  459:         hasilsearch = self.env['mmr.penjualanpo'].search([(\"customer\",\"=\",self._context.get(\"default_customer\"))])\n  460          listidpenjualanpo = []\n  461          self.stokkeluar = False\n  ...\n  487      }\n  488      \n  489:     _defaults = {\n  490                  'pajak': 10,\n  491                  }    \n  ...\n  594      }    \n  595      \n  596:     _defaults = {\n  597                  'idpenjualanpo' : lambda self, cr, uid, c: c.get('idpenjualanpo', False),\n  598                  }\n  ...\n  734          return {'value': hasil}    \n  735      \n  736:     # Ketika mengisi SJ, tanggal terbit faktur isikan sama ( Hanya secara default, dengan asumsi, SJ dan faktur sangat sering\n  737      # dibuat bersamaan\n  738      def onchange_sj(self,cr,uid,ids,sj,context=None):\n  ...\n  933      }    \n  934      \n  935:     _defaults = {\n  936                  'idpenjualanpo' : lambda self, cr, uid, c: c.get('idpenjualanpo', False),\n  937                  'waktu': lambda *a: datetime.datetime.today(),\n  ...\n 1100          return super(mmr_penjualanretur, self).unlink(cr, uid, id, context=context)\n 1101      \n 1102:     _defaults = {\n 1103                  'lunas' : False\n 1104                  }    \n ....\n 1133      }    \n 1134      \n 1135:     _defaults = {\n 1136                  'pajak':10\n 1137                  }    \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\smart.py:\n  420  	}\n  421  	\n  422: 	_defaults = {\n  423  		'status': \"Silahkan Tekan Tombol Reload Pekerjaan\",		\n  424  		'targetomzet' : _isi_omzet,\n  ...\n  484  	}	\n  485  	\n  486: 	_defaults={\n  487  			'preview':True\n  488  			}\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\view\\akun.xml:\n    7  			<field name=\"model\">mmr.akun</field>\n    8  			<field name=\"arch\" type=\"xml\" >\n    9: 				<tree string=\"Neraca Lajur\" version=\"7.0\" default_order=\"nomorakun\" >\n   10  					<field name=\"idakunparent\" />\n   11  					<field name=\"nomorakun\" />\n   ..\n  132  						<page string=\"Akun\">\n  133  							<field name=\"idssaveakun\">\n  134: 								<tree editable=\"bottom\" default_order=\"nomorakun\">\n  135  									<field name=\"nomorakun\" />\n  136  									<field name=\"idakun\" />\n  ...\n  150  			<field name=\"model\">mmr.jurnalpenyesuaian</field>\n  151  			<field name=\"arch\" type=\"xml\" >\n  152: 				<tree string=\"Jurnal Penyesuaian\" version=\"7.0\" default_order=\"tanggal desc\" colors=\"red:status!='Normal'\">\n  153  					<field name=\"status\" />\n  154  					<field name=\"bulan\" />\n  ...\n  219  			<field name=\"model\">mmr.jurnalpenutup</field>\n  220  			<field name=\"arch\" type=\"xml\" >\n  221: 				<tree string=\"Jurnal Penutup\" version=\"7.0\" default_order=\"tanggal\" colors=\"red:status!='Normal'\">\n  222  					<field name=\"status\" />\n  223  					<field name=\"bulan\" />\n  ...\n  331  							</group>\n  332  							<field name=\"jurnal\">\n  333: 								<tree string=\"Jurnal\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"nomorakun\">\n  334  									<field name=\"idakunparent\" />\n  335  									<field name=\"nomorakun\" />\n  ...\n  355  										<page string=\"History\">\n  356  											<field name=\"akundetil\">\n  357: 												<tree string=\"History\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"tanggal\">\n  358  													<field name=\"tanggal\" />\n  359  													<field name=\"sumber\" />\n  ...\n  393  							</group>\n  394  							<field name=\"jurnalpenyesuaian\">\n  395: 								<tree string=\"Jurnal\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"nomorakun\">\n  396  									<field name=\"idakunparent\" />\n  397  									<field name=\"nomorakun\" />\n  ...\n  417  										<page string=\"History\">\n  418  											<field name=\"akundetil\">\n  419: 												<tree string=\"History\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"tanggal\">\n  420  													<field name=\"tanggal\" />\n  421  													<field name=\"sumber\" />\n  ...\n  455  							</group>\n  456  							<field name=\"jurnaldisesuaikan\">\n  457: 								<tree string=\"Jurnal\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"nomorakun\">\n  458  									<field name=\"idakunparent\" />\n  459  									<field name=\"nomorakun\" />\n  ...\n  479  										<page string=\"History\">\n  480  											<field name=\"akundetil\">\n  481: 												<tree string=\"History\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"tanggal\">\n  482  													<field name=\"tanggal\" />\n  483  													<field name=\"sumber\" />\n  ...\n  517  							</group>\n  518  							<field name=\"jurnalpenutup\">\n  519: 								<tree string=\"Jurnal\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"nomorakun\">\n  520  									<field name=\"idakunparent\" />\n  521  									<field name=\"nomorakun\" />\n  ...\n  541  										<page string=\"History\">\n  542  											<field name=\"akundetil\">\n  543: 												<tree string=\"History\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"tanggal\">\n  544  													<field name=\"tanggal\" />\n  545  													<field name=\"sumber\" />\n  ...\n  645  			<field name=\"model\">mmr.kegiatanakunting</field>\n  646  			<field name=\"arch\" type=\"xml\">\n  647: 				<tree string=\"Kegiatan Akunting\" version=\"7.0\" colors=\"red:status!='Normal'\" default_order=\"tanggal desc\">\n  648  					<field name=\"status\" />\n  649  					<field name=\"tanggal\"/>\n  ...\n  720  			<field name=\"model\">mmr.biaya</field>\n  721  			<field name=\"arch\" type=\"xml\">\n  722: 				<tree string=\"Biaya\" version=\"7.0\" colors=\"red:status!='Normal'\" default_order=\"tanggal desc\">\n  723  					<field name=\"status\" />\n  724  					<field name=\"tanggal\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\view\\customer.xml:\n   53  						<page string=\"Laporan\">\n   54  							<field name=\"laporansales\">\n   55: 								<tree string=\"Laporan Sales\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"tanggal desc\">\n   56  									<field name=\"tanggal\" />\n   57  									<field name=\"sales\" />\n   ..\n   94  						<page string=\"List Penjualan\">\n   95  							<field name=\"listpopenjualan\">\n   96: 								<tree string=\"Penjualan PO\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"tanggal desc\">\n   97  									<field name=\"status\" />\n   98  									<field name=\"nomorpo\" />\n   ..\n  116  						<page string=\"Laporan\">\n  117  							<field name=\"laporansales\">\n  118: 								<tree string=\"Laporan Sales\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"tanggal desc\">\n  119  									<field name=\"tanggal\" />\n  120  									<field name=\"sales\" />\n  ...\n  186  						<page string=\"Laporan\">\n  187  							<field name=\"laporansales\">\n  188: 								<tree string=\"Laporan Sales\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"tanggal desc\">\n  189  									<field name=\"tanggal\" />\n  190  									<field name=\"sales\" />\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\view\\pembayaran.xml:\n    6  			<field name=\"model\">mmr.pembayaranpembelian</field>\n    7  			<field name=\"arch\" type=\"xml\">\n    8: 				<tree string=\"Pembayaran Pembelian\" version=\"7.0\" colors=\"red:disetujui==False\" default_order=\"tanggalbayar desc\">\n    9  					<field name=\"status\" />\n   10  					<field name=\"supplier\" />\n   ..\n  144  			<field name=\"model\">mmr.pembayaranpenjualan</field>\n  145  			<field name=\"arch\" type=\"xml\">\n  146: 				<tree string=\"Pembayaran Penjualan\" version=\"7.0\" colors=\"red:disetujui==False\" default_order=\"tanggalbayar desc\">\n  147  					<field name=\"status\" />\n  148  					<field name=\"customer\" />\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\view\\pembelian.xml:\n    7  			<field name=\"model\">mmr.pembelianpo</field>\n    8  			<field name=\"arch\" type=\"xml\">\n    9: 				<tree string=\"PO Pembelian\" version=\"7.0\" colors=\"red:((status!='Barang Lengkap' and status!='Batal') or (statusfaktur!='Faktur lengkap' and statusfaktur!='Tanpa Faktur'))\" default_order=\"waktu desc\">\n   10  					<field name=\"status\" />\n   11  					<field name=\"statusfaktur\" groups=\"MMR.akunting\"/>\n   ..\n  178  			<field name=\"model\">mmr.pembeliansj</field>\n  179  			<field name=\"arch\" type=\"xml\">\n  180: 				<tree string=\"Pembelian SJ\" version=\"7.0\" default_order=\"tanggalterbit\">\n  181  					<field name=\"nomorsj\" />\n  182  					<field name=\"tanggalterbit\"/>\n  ...\n  210  						<page string=\"List Barang\">\n  211  							<field name=\"pembeliansjdetil\" context=\"{'ijin': True}\" attrs=\"{'readonly':[('disetujui','!=',False)]}\">\n  212: 								<tree create=\"true\" edit=\"true\" delete=\"true\" default_order=\"tanggal\">\n  213  									<field name=\"merk\" />\n  214  									<field name=\"namaproduk\"/>\n  ...\n  269  			<field name=\"model\">mmr.pembeliansj</field>\n  270  			<field name=\"arch\" type=\"xml\">\n  271: 				<tree string=\"Pembelian SJ\" version=\"7.0\" default_order=\"tanggalterbit\" create=\"false\" edit=\"false\">\n  272  					<field name=\"idpo\" string=\"Nomor PO\"/>\n  273  					<field name=\"nomorsj\" />\n  ...\n  299  						<page string=\"List Barang\">\n  300  							<field name=\"pembeliansjdetil\" context=\"{'ijin': True}\" attrs=\"{'readonly':[('disetujui','!=',False)]}\">\n  301: 								<tree create=\"true\" edit=\"true\" delete=\"true\" default_order=\"tanggal\">\n  302  									<field name=\"merk\" />\n  303  									<field name=\"namaproduk\"/>\n  ...\n  359  			<field name=\"model\">mmr.pembelianfaktur</field>\n  360  			<field name=\"arch\" type=\"xml\">\n  361: 				<tree string=\"Pembelian Faktur\" version=\"7.0\" default_order=\"tanggalterbit\">\n  362  					<field name=\"nomorfaktur\" />\n  363  					<field name=\"tanggalterbit\"/>\n  ...\n  532  			<field name=\"model\">mmr.pembelianfaktur</field>\n  533  			<field name=\"arch\" type=\"xml\">\n  534: 				<tree string=\"Pembelian Faktur\" version=\"7.0\" default_order=\"tanggalterbit\" create=\"false\" edit=\"false\">\n  535  					<field name=\"status\"/>\n  536  					<field name=\"idpo\" string=\"Nomor PO\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\view\\penjualan.xml:\n    7  			<field name=\"model\">mmr.penjualanpo</field>\n    8  			<field name=\"arch\" type=\"xml\">\n    9: 				<tree string=\"Penjualan PO\" version=\"7.0\" colors=\"red:((status!='Barang Lengkap Dikirim' and status!='Batal') or (statusfaktur!='Faktur lengkap' and statusfaktur!='Tanpa Faktur'))\" default_order=\"tanggal desc\">\n   10  					<field name=\"status\" />\n   11  					<field name=\"statusfaktur\" groups=\"MMR.akunting\"/>\n   ..\n   76  					<notebook>\n   77  						<page string=\"List Produk\">\n   78: 							<field name=\"penjualanpodetil\"  attrs=\"{'readonly':[('disetujui','!=',False)]}\" context=\"{'default_customer': customer}\"/>\n   79  						</page>	\n   80  						<page string=\"List Surat Jalan\">\n   ..\n  184  						<page string=\"History\">\n  185  							<field name=\"stokkeluar\">\n  186: 								<tree string=\"History\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"tanggal desc\">\n  187  									<field name=\"idpenjualanpo\" string=\"PO Penjualan\"/>\n  188  									<field name=\"tanggal\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\view\\produk.xml:\n  144  						<page string=\"Kartu Stok\">\n  145  							<field name=\"stok\">\n  146: 								<tree default_order=\"tanggal desc\">\n  147  									<field name=\"tanggal\" />\n  148  									<field name=\"gudang\" />\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\view\\sales.xml:\n   34  						<page string=\"List Penjualan\">\n   35  							<field name=\"listpopenjualan\">\n   36: 								<tree string=\"Penjualan PO\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"tanggal desc\">\n   37  									<field name=\"status\" />\n   38  									<field name=\"nomorpo\" />\n   ..\n   56  						<page string=\"Laporan\">\n   57  							<field name=\"laporansales\">\n   58: 								<tree string=\"Laporan Sales\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"tanggal desc\">\n   59  									<field name=\"tanggal\" />\n   60  									<field name=\"customer\" />\n   ..\n  154  						<page string=\"Penjualan Faktur\">\n  155  							<field name=\"penjualanfaktur\">\n  156: 								<tree string=\"Penjualan Faktur\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"tanggalterbit desc\">\n  157  									<field name=\"nomorfaktur\"/>\n  158  									<field name=\"nofakturpajak\"/>\n  ...\n  173  						<page string=\"Penjualan PO\">\n  174  							<field name=\"penjualanpo\">\n  175: 								<tree string=\"Penjualan PO\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"tanggal desc\">\n  176  									<field name=\"nomorpo\"/>\n  177  									<field name=\"status\"/>\n  ...\n  187  						<page string=\"Penjualan Retur\">\n  188  							<field name=\"penjualanretur\">\n  189: 								<tree string=\"Penjualan PO\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"tanggal desc\">\n  190  									<field name=\"status\" />\n  191  									<field name=\"teknisi\" />\n  ...\n  210  							</group>\n  211  							<field name=\"grafikpenjualan\">\n  212: 								<tree string=\"Grafik Penjualan\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"berdasarkan desc\">\n  213  									<field name=\"berdasarkan\" string=\" \"/>\n  214  									<field name=\"1\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\view\\stok.xml:\n   57  			<field name=\"model\">mmr.stok</field>\n   58  			<field name=\"arch\" type=\"xml\">\n   59: 				<tree string=\"Stok\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"tanggal desc\">\n   60  					<field name=\"tanggal\" />\n   61  					<field name=\"gudang\" />\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mrp\\company.py:\n   28              help=\"Security days for each manufacturing operation.\"),\n   29      }\n   30:     _defaults = {\n   31          'manufacturing_lead': lambda *a: 1.0,\n   32      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mrp\\mrp.py:\n   23  import openerp.addons.decimal_precision as dp\n   24  from openerp.osv import fields, osv, orm\n   25: from openerp.tools import DEFAULT_SERVER_DATE_FORMAT\n   26  from openerp.tools import float_compare\n   27  from openerp.tools.translate import _\n   ..\n   53          'description': fields.text('Description'),\n   54      }\n   55:     _defaults = {\n   56          'composition': lambda *a: 'min',\n   57      }\n   ..\n   59  # Work Centers\n   60  #----------------------------------------------------------\n   61: # capacity_hour : capacity per hour. default: 1.0.\n   62  #          Eg: If 5 concurrent operations at one time: capacity = 5 (because 5 employees)\n   63  # unit_per_cycle : how many units are produced for one cycle\n   ..\n   84          'product_id': fields.many2one('product.product','Work Center Product', help=\"Fill this product to easily track your production costs in the analytic accounting.\"),\n   85      }\n   86:     _defaults = {\n   87          'capacity_per_cycle': 1.0,\n   88          'resource_type': 'material',\n   ..\n  118          'company_id': fields.many2one('res.company', 'Company'),\n  119      }\n  120:     _defaults = {\n  121          'active': lambda *a: 1,\n  122:         'company_id': lambda self, cr, uid, context: self.pool.get('res.company')._company_default_get(cr, uid, 'mrp.routing', context=context)\n  123      }\n  124  \n  ...\n  143          'company_id': fields.related('routing_id', 'company_id', type='many2one', relation='res.company', string='Company', store=True, readonly=True),\n  144      }\n  145:     _defaults = {\n  146          'cycle_nbr': lambda *a: 1.0,\n  147          'hour_nbr': lambda *a: 0.0,\n  ...\n  183      def _get_uom_id(self, cr, uid, *args):\n  184          return self.pool[\"product.uom\"].search(cr, uid, [], limit=1, order='id')[0]\n  185:     _defaults = {\n  186          'active': lambda *a: 1,\n  187          'product_qty': lambda *a: 1.0,\n  ...\n  190          'type': lambda *a: 'normal',\n  191          'product_uom': _get_uom_id,\n  192:         'company_id': lambda self, cr, uid, c: self.pool.get('res.company')._company_default_get(cr, uid, 'mrp.bom', context=c),\n  193      }\n  194      _order = \"sequence\"\n  ...\n  218              # neither product nor template, makes no sense to search\n  219              return False\n  220:         domain = domain + [ '|', ('date_start', '=', False), ('date_start', '<=', time.strftime(DEFAULT_SERVER_DATE_FORMAT)),\n  221:                             '|', ('date_stop', '=', False), ('date_stop', '>=', time.strftime(DEFAULT_SERVER_DATE_FORMAT))]\n  222          # order to prioritize bom with product_id over the one without\n  223          ids = self.search(cr, uid, domain, order='product_id', context=context)\n  ...\n  278  \n  279          for bom_line_id in bom.bom_line_ids:\n  280:             if bom_line_id.date_start and bom_line_id.date_start > time.strftime(DEFAULT_SERVER_DATE_FORMAT) or \\\n  281:                 bom_line_id.date_stop and bom_line_id.date_stop < time.strftime(DEFAULT_SERVER_DATE_FORMAT):\n  282                      continue\n  283              # all bom_line_id variant values must be in the product\n  ...\n  317          return result, result2\n  318  \n  319:     def copy_data(self, cr, uid, id, default=None, context=None):\n  320:         if default is None:\n  321:             default = {}\n  322          bom_data = self.read(cr, uid, id, [], context=context)\n  323:         default.update(name=_(\"%s (copy)\") % (bom_data['name']))\n  324:         return super(mrp_bom, self).copy_data(cr, uid, id, default, context=context)\n  325  \n  326      def onchange_uom(self, cr, uid, ids, product_tmpl_id, product_uom, context=None):\n  ...\n  400      def _get_uom_id(self, cr, uid, *args):\n  401          return self.pool[\"product.uom\"].search(cr, uid, [], limit=1, order='id')[0]\n  402:     _defaults = {\n  403          'product_qty': lambda *a: 1.0,\n  404          'product_efficiency': lambda *a: 1.0,\n  ...\n  467          return result\n  468  \n  469:     def _src_id_default(self, cr, uid, ids, context=None):\n  470          try:\n  471              location_model, location_id = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'stock', 'stock_location_stock')\n  ...\n  475          return location_id\n  476  \n  477:     def _dest_id_default(self, cr, uid, ids, context=None):\n  478          try:\n  479              location_model, location_id = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'stock', 'stock_location_stock')\n  ...\n  572      }\n  573  \n  574:     _defaults = {\n  575          'priority': lambda *a: '1',\n  576          'state': lambda *a: 'draft',\n  ...\n  579          'user_id': lambda self, cr, uid, c: uid,\n  580          'name': lambda x, y, z, c: x.pool.get('ir.sequence').get(y, z, 'mrp.production') or '/',\n  581:         'company_id': lambda self, cr, uid, c: self.pool.get('res.company')._company_default_get(cr, uid, 'mrp.production', context=c),\n  582:         'location_src_id': _src_id_default,\n  583:         'location_dest_id': _dest_id_default\n  584      }\n  585  \n  ...\n  788  \n  789      def _get_subproduct_factor(self, cr, uid, production_id, move_id=None, context=None):\n  790:         \"\"\" Compute the factor to compute the qty of procucts to produce for the given production_id. By default,\n  791              it's always equal to the quantity encoded in the production order or the production wizard, but if the\n  792              module mrp_subproduct is installed, then we must use the move_id to identify the product to produce\n  ...\n  939                  if remaining_qty: # In case you need to make more than planned\n  940                      #consumed more in wizard than previously planned\n  941:                     extra_move_id = stock_mov_obj.copy(cr, uid, produce_product.id, default={'state': 'confirmed',\n  942                                                                                               'product_uom_qty': remaining_qty,\n  943                                                                                               'production_id': production_id}, context=context)\n  ...\n 1113              domain += [('warehouse_id', '=', wh)]\n 1114          types = type_obj.search(cr, uid, domain, context=context)\n 1115:         move = stock_move.copy(cr, uid, move_id, default = {\n 1116              'location_id': source_location_id,\n 1117              'location_dest_id': dest_location_id,\n ....\n 1248              track_visibility='onchange', select=True, ondelete='cascade', required=True),\n 1249      }\n 1250:     _defaults = {\n 1251          'sequence': lambda *a: 1,\n 1252          'hour': lambda *a: 0,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mrp\\mrp_view.xml:\n  426                      <group expand=\"0\" string=\"Group By...\">\n  427                          <filter string=\"Product\" icon=\"terp-accessories-archiver\" domain=\"[]\" context=\"{'group_by':'product_tmpl_id'}\"/>\n  428:                         <filter string='Default Unit of Measure' icon=\"terp-mrp\" domain=\"[]\" context=\"{'group_by' : 'product_uom'}\"/>\n  429                          <filter string=\"Routing\" icon=\"terp-stock_align_left_24\" domain=\"[]\" context=\"{'group_by':'routing_id'}\"/>\n  430                          <filter string='Type' icon=\"terp-stock_symbol-selection\" domain=\"[]\" context=\"{'group_by' : 'type'}\"/>\n  ...\n  507                          <filter string=\"Bill Of Material\" icon=\"terp-accessories-archiver\" domain=\"[]\" context=\"{'group_by':'bom_id'}\"/>\n  508                          <filter string=\"Product\" icon=\"terp-accessories-archiver\" domain=\"[]\" context=\"{'group_by':'product_id'}\"/>\n  509:                         <filter string='Default Unit of Measure' icon=\"terp-mrp\" domain=\"[]\" context=\"{'group_by' : 'product_uom'}\"/>\n  510                          <filter string=\"Routing\" icon=\"terp-stock_align_left_24\" domain=\"[]\" context=\"{'group_by':'routing_id'}\"/>\n  511                          <filter string='Type' icon=\"terp-stock_symbol-selection\" domain=\"[]\" context=\"{'group_by' : 'type'}\"/>\n  ...\n  644              <field name=\"model\">mrp.production</field>\n  645              <field name=\"arch\" type=\"xml\">\n  646:                 <gantt date_stop=\"date_finished\" date_start=\"date_start\" progress=\"progress\" string=\"Productions\" default_group_by=\"routing_id\">\n  647                  </gantt>\n  648              </field>\n  ...\n  683                      <group>\n  684                          <group>\n  685:                             <field name=\"product_id\" on_change=\"product_id_change(product_id, product_qty)\" domain=\"[('bom_ids','!=',False),('bom_ids.type','!=','phantom')]\" class=\"oe_inline\" context='{\"default_type\": \"product\"}'/>\n  686                              <label for=\"product_qty\"/>\n  687                              <div>\n  ...\n  707                                                  ('product_tmpl_id.product_variant_ids','=',product_id),\n  708                                                  ('product_id','=',False)]\"\n  709:                                 context=\"{'default_product_id': product_id}\" on_change=\"bom_id_change(bom_id)\" required=\"1\"/>\n  710                              <field name=\"routing_id\" class=\"oe_inline\" groups=\"mrp.group_mrp_routings\"/>\n  711:                             <field name=\"user_id\" context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'mrp.group_mrp_user']}\"/>\n  712                              <field name=\"origin\"/>\n  713                          </group>\n  ...\n 1029  \n 1030          <record model=\"ir.actions.act_window\" id=\"template_open_bom\">\n 1031:             <field name=\"context\">{'default_product_tmpl_id': active_id, 'search_default_product_tmpl_id': active_id}</field>\n 1032              <field name=\"name\">Bill of Materials</field>\n 1033              <field name=\"res_model\">mrp.bom</field>\n ....\n 1035          </record>\n 1036          <record model=\"ir.actions.act_window\" id=\"product_open_bom\">\n 1037:             <field name=\"context\">{'default_product_id': active_id, 'search_default_product_id': active_id}</field>\n 1038              <field name=\"name\">Bill of Materials</field>\n 1039              <field name=\"res_model\">mrp.bom</field>\n ....\n 1043  \n 1044          <record id=\"act_product_mrp_production\" model=\"ir.actions.act_window\">\n 1045:             <field name=\"context\">{'search_default_product_id': [active_id]}</field>\n 1046              <field name=\"name\">Manufacturing Orders</field>\n 1047              <field name=\"res_model\">mrp.production</field>\n ....\n 1092              <field name=\"inherit_id\" ref=\"stock.view_warehouse\"/>\n 1093              <field name=\"arch\" type=\"xml\">\n 1094:                  <xpath expr=\"//field[@name='default_resupply_wh_id']\" position=\"before\">\n 1095                      <field name=\"manufacture_to_resupply\" />\n 1096                  </xpath>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mrp\\mrp_workflow.xml:\n   60              <field name=\"trigger_model\" eval=\"False\"/> <!-- Force empty -->\n   61              <field name=\"trigger_expr_id\" eval=\"False\"/> <!-- Force empty -->\n   62:             <field name=\"condition\">True</field> <!-- Force default -->\n   63          </record>\n   64          <record id=\"prod_trans_ready_in_production\" model=\"workflow.transition\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mrp\\procurement.py:\n   24  from openerp.osv import osv, fields\n   25  from openerp.tools.translate import _\n   26: from openerp.tools import DEFAULT_SERVER_DATETIME_FORMAT\n   27  from openerp import SUPERUSER_ID\n   28  \n   ..\n   72      def _get_date_planned(self, cr, uid, procurement, context=None):\n   73          format_date_planned = datetime.strptime(procurement.date_planned,\n   74:                                                 DEFAULT_SERVER_DATETIME_FORMAT)\n   75          date_planned = format_date_planned - relativedelta(days=procurement.product_id.produce_delay or 0.0)\n   76          date_planned = date_planned - relativedelta(days=procurement.company_id.manufacturing_lead)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mrp\\product.py:\n   49      }\n   50  \n   51:     _defaults = {\n   52          'produce_delay': 1,\n   53      }\n   ..\n   58          result = self._get_act_window_dict(cr, uid, 'mrp.act_product_mrp_production', context=context)\n   59          if len(ids) == 1 and len(products) == 1:\n   60:             result['context'] = \"{'default_product_id': \" + str(products[0]) + \", 'search_default_product_id': \" + str(products[0]) + \"}\"\n   61          else:\n   62              result['domain'] = \"[('product_id','in',[\" + ','.join(map(str, products)) + \"])]\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mrp\\report\\bom_structure.py:\n   38                  res = {}\n   39                  res['pname'] = l.product_id.name\n   40:                 res['pcode'] = l.product_id.default_code\n   41                  res['pqty'] = l.product_qty\n   42                  res['uname'] = l.product_uom.name\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mrp\\report\\workcenter_load.py:\n  124          can = canvas.init(fname=pdf_string, format='pdf')\n  125          can.set_title(\"Work Center Loads\")\n  126:         chart_object.set_defaults(line_plot.T, line_style=None)\n  127          if datas['form']['measure_unit'] == 'cycles':\n  128              y_label = \"Load (Cycles)\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mrp\\stock.py:\n   26  from openerp.tools.translate import _\n   27  from openerp import SUPERUSER_ID\n   28: from openerp.tools import DEFAULT_SERVER_DATETIME_FORMAT, float_compare\n   29  \n   30  class StockMove(osv.osv):\n   ..\n   54              '&', ('product_id', '=', False), ('product_tmpl_id.product_variant_ids', '=', move.product_id.id),\n   55              ('type', '=', 'phantom'),\n   56:             '|', ('date_start', '=', False), ('date_start', '<=', time.strftime(DEFAULT_SERVER_DATETIME_FORMAT)),\n   57:             '|', ('date_stop', '=', False), ('date_stop', '>=', time.strftime(DEFAULT_SERVER_DATETIME_FORMAT)),\n   58              ('company_id', '=', user_company)]\n   59          return self.pool.get('mrp.bom').search(cr, SUPERUSER_ID, domain, context=context)\n   ..\n   92                          'split_from': move.id, #Needed in order to keep sale connection, but will be removed by unlink\n   93                      }\n   94:                     mid = move_obj.copy(cr, uid, move.id, default=valdef, context=context)\n   95                      to_explode_again_ids.append(mid)\n   96                  else:\n   ..\n  111                              }\n  112                          if move.procurement_id:\n  113:                             proc = proc_obj.copy(cr, uid, move.procurement_id.id, default=valdef, context=context)\n  114                          else:\n  115                              proc = proc_obj.create(cr, uid, valdef, context=context)\n  ...\n  244      }\n  245  \n  246:     _defaults = {\n  247          'manufacture_to_resupply': True,\n  248      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mrp\\tests\\test_multicompany.py:\n   44  \n   45      def test_00_multicompany_user(self):\n   46:         \"\"\"check no error on getting default mrp.production values in multicompany setting\"\"\"\n   47          cr, uid, context = self.cr, self.multicompany_user_id, {}\n   48          fields = ['location_src_id', 'location_dest_id']\n   49:         defaults = self.stock_location.default_get(cr, uid, ['location_id', 'location_dest_id', 'type'], context)\n   50          for field in fields:\n   51:             if defaults.get(field):\n   52                  try:\n   53:                     self.stock_location.check_access_rule(cr, uid, [defaults[field]], 'read', context)\n   54                  except Exception, exc:\n   55                      assert False, \"unreadable location %s: %s\" % (field, exc)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mrp\\views\\report_mrpbomstructure.xml:\n   19                              <tr style=\"font-weight: bold;\">\n   20                                  <td>\n   21:                                     <span t-field=\"o.product_id.default_code\"/>\n   22                                      <span t-field=\"o.name\"/>\n   23                                  </td>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mrp\\wizard\\change_production_qty.py:\n   32      }\n   33  \n   34:     def default_get(self, cr, uid, fields, context=None):\n   35:         \"\"\" To get default values for the object.\n   36          @param self: The object pointer.\n   37          @param cr: A database cursor\n   38          @param uid: ID of the user currently logged in\n   39:         @param fields: List of fields for which we want default values\n   40          @param context: A standard dictionary\n   41          @return: A dictionary which of fields with values.\n   ..\n   43          if context is None:\n   44              context = {}\n   45:         res = super(change_production_qty, self).default_get(cr, uid, fields, context=context)\n   46          prod_obj = self.pool.get('mrp.production')\n   47          prod = prod_obj.browse(cr, uid, context.get('active_id'), context=context)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mrp\\wizard\\mrp_price.py:\n   28          'number': fields.integer('Quantity', required=True, help=\"Specify quantity of products to produce or buy. Report of Cost structure will be displayed base on this quantity.\"),\n   29      }\n   30:     _defaults = {\n   31          'number': 1,\n   32      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mrp\\wizard\\mrp_product_produce.py:\n   30      _columns = {\n   31          'product_id': fields.many2one('product.product', 'Product'),\n   32:         'product_qty': fields.float('Quantity (in default UoM)'),\n   33          'lot_id': fields.many2one('stock.production.lot', 'Lot'),\n   34          'produce_id': fields.many2one('mrp.product.produce'),\n   ..\n  109          return prod and prod_obj.browse(cr, uid, prod, context=context).track_production or False\n  110  \n  111:     _defaults = {\n  112           'product_qty': _get_product_qty,\n  113           'mode': lambda *x: 'consume_produce',\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mrp\\wizard\\mrp_product_produce_view.xml:\n   17                          <field name=\"track_production\" invisible=\"1\"/>\n   18                          <field name=\"lot_id\" domain=\"[('product_id', '=', product_id)]\"\n   19:                                     context=\"{'default_product_id':product_id}\"\n   20                                      attrs=\"{'required': [('track_production', '=', True), ('mode', '=', 'consume_produce')]}\"\n   21                                      groups=\"stock.group_production_lot\"/>\n   ..\n   27                                  <field name=\"product_qty\"/>\n   28                                  <field name=\"lot_id\" domain=\"[('product_id', '=', product_id)]\"\n   29:                                     context=\"{'default_product_id':product_id}\"\n   30                                      groups=\"stock.group_production_lot\"/>\n   31                              </tree>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mrp\\wizard\\stock_move.py:\n   36      }\n   37  \n   38:     #TOFIX: product_uom should not have different category of default UOM of product. Qty should be convert into UOM of original move line before going in consume and scrap\n   39:     def default_get(self, cr, uid, fields, context=None):\n   40          if context is None:\n   41              context = {}\n   42:         res = super(stock_move_consume, self).default_get(cr, uid, fields, context=context)\n   43          move = self.pool.get('stock.move').browse(cr, uid, context['active_id'], context=context)\n   44          if 'product_id' in fields:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mrp\\wizard\\stock_move_view.xml:\n   17                          </div>\n   18                          <field name=\"restrict_lot_id\" domain=\"[('product_id','=',product_id)]\" groups=\"stock.group_production_lot\"\n   19:                             context=\"{'default_product_id': product_id}\"/>\n   20                          <field name=\"location_id\" groups=\"stock.group_locations\"/>\n   21                      </group>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mrp_byproduct\\mrp_byproduct.py:\n   38          'bom_id': fields.many2one('mrp.bom', 'BoM', ondelete='cascade'),\n   39      }\n   40:     _defaults={\n   41          'subproduct_type': 'variable',\n   42          'product_qty': lambda *a: 1.0,\n   ..\n  123  \n  124      def _get_subproduct_factor(self, cr, uid, production_id, move_id=None, context=None):\n  125:         \"\"\"Compute the factor to compute the qty of procucts to produce for the given production_id. By default, \n  126              it's always equal to the quantity encoded in the production order or the production wizard, but with \n  127              the module mrp_byproduct installed it can differ for byproducts having type 'variable'.\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mrp_operations\\mrp_operations.py:\n   29  # Work Centers\n   30  #----------------------------------------------------------\n   31: # capacity_hour : capacity per hour. default: 1.0.\n   32  #          Eg: If 5 concurrent operations at one time: capacity = 5 (because 5 employees)\n   33  # unit_per_cycle : how many units are produced for one cycle\n   ..\n   97      }\n   98  \n   99:     _defaults = {\n  100          'state': 'draft',\n  101          'delay': 0.0,\n  ...\n  542          'order_date': fields.function(_get_order_date,string='Order Date',type='date',store={'mrp.production':(_order_date_search_production,['date_planned'], 10)}),\n  543          }\n  544:     _defaults={\n  545          'date_start': lambda *a:datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n  546      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mrp_operations\\mrp_operations_view.xml:\n  157          <field name=\"model\">mrp.production.workcenter.line</field>\n  158          <field name=\"arch\" type=\"xml\">\n  159:             <gantt date_delay=\"hour\" date_start=\"date_planned\" string=\"Operations\" default_group_by=\"production_id\">\n  160              </gantt>\n  161          </field>\n  ...\n  211          <field name=\"model\">mrp.production.workcenter.line</field>\n  212          <field name=\"arch\" type=\"xml\">\n  213:             <gantt date_delay=\"hour\" date_start=\"date_planned\" default_group_by=\"workcenter_id\">\n  214              </gantt>\n  215          </field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mrp_operations\\report\\mrp_workorder_analysis_view.xml:\n   70              <field name=\"view_id\" ref=\"view_report_mrp_workorder_graph\"/>\n   71              <field name=\"search_view_id\" ref=\"view_report_mrp_workorder_filter\"/>\n   72:             <field name=\"context\">{'search_default_Workcenter': 1,'group_by_no_leaf':1,'group_by':[]}</field>\n   73          </record>\n   74  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mrp_repair\\mrp_repair.py:\n   97          return res\n   98  \n   99:     def _get_default_address(self, cr, uid, ids, field_name, arg, context=None):\n  100          res = {}\n  101          partner_obj = self.pool.get('res.partner')\n  ...\n  103              adr_id = False\n  104              if data.partner_id:\n  105:                 adr_id = partner_obj.address_get(cr, uid, [data.partner_id.id], ['default'])['default']\n  106              res[data.id] = adr_id\n  107          return res\n  ...\n  121          'partner_id': fields.many2one('res.partner', 'Partner', select=True, help='Choose partner for whom the order will be invoiced and delivered.', states={'confirmed': [('readonly', True)]}),\n  122          'address_id': fields.many2one('res.partner', 'Delivery Address', domain=\"[('parent_id','=',partner_id)]\", states={'confirmed': [('readonly', True)]}),\n  123:         'default_address_id': fields.function(_get_default_address, type=\"many2one\", relation=\"res.partner\"),\n  124          'state': fields.selection([\n  125              ('draft', 'Quotation'),\n  ...\n  141          'location_dest_id': fields.many2one('stock.location', 'Delivery Location', readonly=True, required=True, states={'draft': [('readonly', False)], 'confirmed': [('readonly', True)]}),\n  142          'lot_id': fields.many2one('stock.production.lot', 'Repaired Lot', domain=\"[('product_id','=', product_id)]\", help=\"Products repaired are all belonging to this lot\"),\n  143:         'guarantee_limit': fields.date('Warranty Expiration', help=\"The warranty expiration limit is computed as: last move date + warranty defined on selected product. If the current date is below the warranty expiration limit, each operation and fee you will add will be set as 'not to invoiced' by default. Note that you can change manually afterwards.\", states={'confirmed': [('readonly', True)]}),\n  144          'operations': fields.one2many('mrp.repair.line', 'repair_id', 'Operation Lines', readonly=True, states={'draft': [('readonly', False)]}, copy=True),\n  145          'pricelist_id': fields.many2one('product.pricelist', 'Pricelist', help='Pricelist of the selected partner.'),\n  ...\n  179      }\n  180  \n  181:     def _default_stock_location(self, cr, uid, context=None):\n  182          try:\n  183              warehouse = self.pool.get('ir.model.data').get_object(cr, uid, 'stock', 'warehouse0')\n  ...\n  186              return False\n  187  \n  188:     _defaults = {\n  189          'state': lambda *a: 'draft',\n  190          'name': lambda obj, cr, uid, context: obj.pool.get('ir.sequence').get(cr, uid, 'mrp.repair'),\n  191          'invoice_method': lambda *a: 'none',\n  192:         'company_id': lambda self, cr, uid, context: self.pool.get('res.company')._company_default_get(cr, uid, 'mrp.repair', context=context),\n  193          'pricelist_id': lambda self, cr, uid, context: self.pool.get('product.pricelist').search(cr, uid, [('type', '=', 'sale')])[0],\n  194          'product_qty': 1.0,\n  195:         'location_id': _default_stock_location,\n  196      }\n  197  \n  ...\n  250                      }\n  251              }\n  252:         addr = part_obj.address_get(cr, uid, [part], ['delivery', 'invoice', 'default'])\n  253          partner = part_obj.browse(cr, uid, part)\n  254          pricelist = partner.property_product_pricelist and partner.property_product_pricelist.id or False\n  255          return {'value': {\n  256:                     'address_id': addr['delivery'] or addr['default'],\n  257                      'partner_invoice_id': addr['invoice'],\n  258                      'pricelist_id': pricelist\n  ...\n  593                          \\n* The \\'Cancelled\\' status is set automatically when user cancel repair order.'),\n  594      }\n  595:     _defaults = {\n  596          'state': lambda *a: 'draft',\n  597          'product_uom_qty': lambda *a: 1,\n  ...\n  671      }\n  672  \n  673:     _defaults = {\n  674          'to_invoice': lambda *a: True,\n  675      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mrp_repair\\mrp_repair_view.xml:\n   50                                  <field name=\"product_uom\" groups=\"product.group_uom\" on_change=\"onchange_product_uom(product_id, product_uom)\" class=\"oe_inline\"/>\n   51                              </div>\n   52:                             <field name=\"lot_id\" domain=\"[('product_id', '=', product_id)]\" context=\"{'default_product_id': product_id}\" groups=\"stock.group_production_lot\"/>\n   53                              <field name=\"partner_id\" on_change=\"onchange_partner_id(partner_id,address_id)\" attrs=\"{'required':[('invoice_method','!=','none')]}\"/>\n   54                              <field name=\"address_id\" groups=\"sale.group_delivery_invoice_address\"/>\n   ..\n   63                  <notebook>\n   64                      <page string=\"Operations\">\n   65:                         <field name=\"operations\" context=\"{'default_product_uom_qty': product_qty}\">\n   66                              <form string=\"Operations\">\n   67                                  <notebook>\n   ..\n   97                                  <field name=\"product_id\" on_change=\"product_id_change(parent.pricelist_id, product_id, product_uom, product_uom_qty, parent.partner_id, False, context)\"/>\n   98                                  <field name='name'/>\n   99:                                 <field name=\"lot_id\" domain=\"[('product_id', '=', product_id)]\" context=\"{'default_product_id': product_id}\" groups=\"stock.group_production_lot\"/>\n  100                                  <field name=\"location_id\" groups=\"stock.group_locations\"/>\n  101                                  <field name=\"location_dest_id\" groups=\"stock.group_locations\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\multi_company\\multi_company_demo.xml:\n  100          </record>\n  101          <record id=\"product_product_odoo1\" model=\"product.product\">\n  102:             <field name=\"default_code\">ODOO</field>\n  103              <field name=\"list_price\">35.0</field>\n  104              <field name=\"standard_price\">10.0</field>\n  ...\n  142              <field name=\"type\">sale</field>\n  143              <field name=\"sequence_id\" ref=\"account.sequence_sale_journal\"/>\n  144:             <field name=\"default_credit_account_id\" ref=\"account.a_sale\"/>\n  145:             <field name=\"default_debit_account_id\" ref=\"account.a_sale\"/>\n  146              <field name=\"analytic_journal_id\" ref=\"account.cose_journal_sale\"/>\n  147              <field name=\"user_id\" ref=\"base.user_root\"/>\n  ...\n  154              <field name=\"type\">sale_refund</field>\n  155              <field name=\"sequence_id\" ref=\"account.sequence_refund_sales_journal\"/>\n  156:             <field name=\"default_credit_account_id\" ref=\"account.a_sale\"/>\n  157:             <field name=\"default_debit_account_id\" ref=\"account.a_sale\"/>\n  158              <field name=\"analytic_journal_id\" ref=\"account.cose_journal_sale\"/>\n  159              <field name=\"user_id\" ref=\"base.user_root\"/>\n  ...\n  166              <field name=\"type\">purchase</field>\n  167              <field name=\"sequence_id\" ref=\"account.sequence_purchase_journal\"/>\n  168:             <field name=\"default_debit_account_id\" ref=\"account.a_expense\"/>\n  169:             <field name=\"default_credit_account_id\" ref=\"account.a_expense\"/>\n  170              <field name=\"analytic_journal_id\" ref=\"account.exp\"/>\n  171              <field name=\"user_id\" ref=\"base.user_root\"/>\n  ...\n  178              <field name=\"type\">purchase_refund</field>\n  179              <field name=\"sequence_id\" ref=\"account.sequence_refund_purchase_journal\"/>\n  180:             <field name=\"default_debit_account_id\" ref=\"account.a_expense\"/>\n  181:             <field name=\"default_credit_account_id\" ref=\"account.a_expense\"/>\n  182              <field name=\"analytic_journal_id\" ref=\"account.exp\"/>\n  183              <field name=\"user_id\" ref=\"base.user_root\"/>\n  ...\n  190              <field name=\"type\">bank</field>\n  191              <field name=\"sequence_id\" ref=\"account.sequence_bank_journal\"/>\n  192:             <field name=\"default_debit_account_id\" ref=\"account.cash\"/>\n  193:             <field name=\"default_credit_account_id\" ref=\"account.cash\"/>\n  194              <field name=\"analytic_journal_id\" ref=\"account.sit\"/>\n  195              <field name=\"user_id\" ref=\"base.user_root\"/>\n  ...\n  202              <field name=\"type\">bank</field>\n  203              <field name=\"sequence_id\" ref=\"account.sequence_check_journal\"/>\n  204:             <field name=\"default_debit_account_id\" ref=\"account.cash\"/>\n  205:             <field name=\"default_credit_account_id\" ref=\"account.cash\"/>\n  206              <field name=\"analytic_journal_id\" ref=\"account.sit\"/>\n  207              <field name=\"user_id\" ref=\"base.user_root\"/>\n  ...\n  214              <field name=\"type\">cash</field>\n  215              <field name=\"sequence_id\" ref=\"account.sequence_cash_journal\"/>\n  216:             <field name=\"default_debit_account_id\" ref=\"account.cash\"/>\n  217:             <field name=\"default_credit_account_id\" ref=\"account.cash\"/>\n  218              <field name=\"analytic_journal_id\" ref=\"account.sit\"/>\n  219              <field name=\"user_id\" ref=\"base.user_root\"/>\n  ...\n  227              <field name=\"type\">sale</field>\n  228              <field name=\"sequence_id\" ref=\"account.sequence_sale_journal\"/>\n  229:             <field name=\"default_credit_account_id\" ref=\"account.a_sale\"/>\n  230:             <field name=\"default_debit_account_id\" ref=\"account.a_sale\"/>\n  231              <field name=\"analytic_journal_id\" ref=\"account.cose_journal_sale\"/>\n  232              <field name=\"user_id\" ref=\"base.user_root\"/>\n  ...\n  239              <field name=\"type\">sale_refund</field>\n  240              <field name=\"sequence_id\" ref=\"account.sequence_refund_sales_journal\"/>\n  241:             <field name=\"default_credit_account_id\" ref=\"account.a_sale\"/>\n  242:             <field name=\"default_debit_account_id\" ref=\"account.a_sale\"/>\n  243              <field name=\"analytic_journal_id\" ref=\"account.cose_journal_sale\"/>\n  244              <field name=\"user_id\" ref=\"base.user_root\"/>\n  ...\n  251              <field name=\"type\">purchase</field>\n  252              <field name=\"sequence_id\" ref=\"account.sequence_purchase_journal\"/>\n  253:             <field name=\"default_debit_account_id\" ref=\"account.a_expense\"/>\n  254:             <field name=\"default_credit_account_id\" ref=\"account.a_expense\"/>\n  255              <field name=\"analytic_journal_id\" ref=\"account.exp\"/>\n  256              <field name=\"user_id\" ref=\"base.user_root\"/>\n  ...\n  263              <field name=\"type\">purchase_refund</field>\n  264              <field name=\"sequence_id\" ref=\"account.sequence_refund_purchase_journal\"/>\n  265:             <field name=\"default_debit_account_id\" ref=\"account.a_expense\"/>\n  266:             <field name=\"default_credit_account_id\" ref=\"account.a_expense\"/>\n  267              <field name=\"analytic_journal_id\" ref=\"account.exp\"/>\n  268              <field name=\"user_id\" ref=\"base.user_root\"/>\n  ...\n  275              <field name=\"type\">bank</field>\n  276              <field name=\"sequence_id\" ref=\"account.sequence_bank_journal\"/>\n  277:             <field name=\"default_debit_account_id\" ref=\"account.cash\"/>\n  278:             <field name=\"default_credit_account_id\" ref=\"account.cash\"/>\n  279              <field name=\"analytic_journal_id\" ref=\"account.sit\"/>\n  280              <field name=\"user_id\" ref=\"base.user_root\"/>\n  ...\n  287              <field name=\"type\">bank</field>\n  288              <field name=\"sequence_id\" ref=\"account.sequence_check_journal\"/>\n  289:             <field name=\"default_debit_account_id\" ref=\"account.cash\"/>\n  290:             <field name=\"default_credit_account_id\" ref=\"account.cash\"/>\n  291              <field name=\"analytic_journal_id\" ref=\"account.sit\"/>\n  292              <field name=\"user_id\" ref=\"base.user_root\"/>\n  ...\n  299              <field name=\"type\">cash</field>\n  300              <field name=\"sequence_id\" ref=\"account.sequence_cash_journal\"/>\n  301:             <field name=\"default_debit_account_id\" ref=\"account.cash\"/>\n  302:             <field name=\"default_credit_account_id\" ref=\"account.cash\"/>\n  303              <field name=\"analytic_journal_id\" ref=\"account.sit\"/>\n  304              <field name=\"user_id\" ref=\"base.user_root\"/>\n  ...\n  313              <field name=\"type\">sale</field>\n  314              <field name=\"sequence_id\" ref=\"account.sequence_sale_journal\"/>\n  315:             <field name=\"default_credit_account_id\" ref=\"account.a_sale\"/>\n  316:             <field name=\"default_debit_account_id\" ref=\"account.a_sale\"/>\n  317              <field name=\"analytic_journal_id\" ref=\"account.cose_journal_sale\"/>\n  318              <field name=\"user_id\" ref=\"base.user_root\"/>\n  ...\n  325              <field name=\"type\">sale_refund</field>\n  326              <field name=\"sequence_id\" ref=\"account.sequence_refund_sales_journal\"/>\n  327:             <field name=\"default_credit_account_id\" ref=\"account.a_sale\"/>\n  328:             <field name=\"default_debit_account_id\" ref=\"account.a_sale\"/>\n  329              <field name=\"analytic_journal_id\" ref=\"account.cose_journal_sale\"/>\n  330              <field name=\"user_id\" ref=\"base.user_root\"/>\n  ...\n  337              <field name=\"type\">purchase</field>\n  338              <field name=\"sequence_id\" ref=\"account.sequence_purchase_journal\"/>\n  339:             <field name=\"default_debit_account_id\" ref=\"account.a_expense\"/>\n  340:             <field name=\"default_credit_account_id\" ref=\"account.a_expense\"/>\n  341              <field name=\"analytic_journal_id\" ref=\"account.exp\"/>\n  342              <field name=\"user_id\" ref=\"base.user_root\"/>\n  ...\n  349              <field name=\"type\">purchase_refund</field>\n  350              <field name=\"sequence_id\" ref=\"account.sequence_refund_purchase_journal\"/>\n  351:             <field name=\"default_debit_account_id\" ref=\"account.a_expense\"/>\n  352:             <field name=\"default_credit_account_id\" ref=\"account.a_expense\"/>\n  353              <field name=\"analytic_journal_id\" ref=\"account.exp\"/>\n  354              <field name=\"user_id\" ref=\"base.user_root\"/>\n  ...\n  361              <field name=\"type\">bank</field>\n  362              <field name=\"sequence_id\" ref=\"account.sequence_bank_journal\"/>\n  363:             <field name=\"default_debit_account_id\" ref=\"account.cash\"/>\n  364:             <field name=\"default_credit_account_id\" ref=\"account.cash\"/>\n  365              <field name=\"analytic_journal_id\" ref=\"account.sit\"/>\n  366              <field name=\"user_id\" ref=\"base.user_root\"/>\n  ...\n  373              <field name=\"type\">bank</field>\n  374              <field name=\"sequence_id\" ref=\"account.sequence_check_journal\"/>\n  375:             <field name=\"default_debit_account_id\" ref=\"account.cash\"/>\n  376:             <field name=\"default_credit_account_id\" ref=\"account.cash\"/>\n  377              <field name=\"analytic_journal_id\" ref=\"account.sit\"/>\n  378              <field name=\"user_id\" ref=\"base.user_root\"/>\n  ...\n  385              <field name=\"type\">cash</field>\n  386              <field name=\"sequence_id\" ref=\"account.sequence_cash_journal\"/>\n  387:             <field name=\"default_debit_account_id\" ref=\"account.cash\"/>\n  388:             <field name=\"default_credit_account_id\" ref=\"account.cash\"/>\n  389              <field name=\"analytic_journal_id\" ref=\"account.sit\"/>\n  390              <field name=\"user_id\" ref=\"base.user_root\"/>\n  ...\n  400  \n  401          <!-- due to the ways the new API works we need to unset the company (automatically setted\n  402:              to the default conpany during module install) before changing the currency to avoid\n  403               missmatch against currently set company currency and new one\n  404           -->\n  ...\n  512      </data>\n  513    <data noupdate=\"1\">\n  514:     <record id=\"multi_company_default_productopenerpus0\" model=\"multi_company.default\">\n  515        <field name=\"name\">Product Odoo US</field>\n  516        <field eval=\"1\" name=\"sequence\"/>\n  ...\n  522    </data>\n  523    <data noupdate=\"1\">\n  524:     <record id=\"multi_company_default_productopenerpbe0\" model=\"multi_company.default\">\n  525        <field name=\"name\">Product Odoo BE</field>\n  526        <field eval=\"1\" name=\"sequence\"/>\n  ...\n  532    </data>\n  533    <data noupdate=\"1\">\n  534:     <record id=\"multi_company_default_productopenerpin0\" model=\"multi_company.default\">\n  535        <field name=\"name\">Product Odoo IN</field>\n  536        <field eval=\"1\" name=\"sequence\"/>\n  ...\n  542    </data>\n  543    <data noupdate=\"1\">\n  544:     <record id=\"multi_company_default_partneropenerpeditor0\" model=\"multi_company.default\">\n  545        <field name=\"name\">Partner Odoo Editor</field>\n  546        <field eval=\"1\" name=\"sequence\"/>\n  ...\n  552    </data>\n  553    <data noupdate=\"1\">\n  554:     <record id=\"multi_company_default_partnerodoo0\" model=\"multi_company.default\">\n  555        <field name=\"name\">Partner Odoo</field>\n  556        <field eval=\"1\" name=\"sequence\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\multi_company\\res_company_view.xml:\n    4  \n    5          <record id=\"view_inventory_tree\" model=\"ir.ui.view\">\n    6:             <field name=\"name\">multi_company.default.tree</field>\n    7:             <field name=\"model\">multi_company.default</field>\n    8              <field name=\"priority\" eval=\"8\"/>\n    9              <field name=\"arch\" type=\"xml\">\n   ..\n   20          </record>\n   21          <record id=\"view_inventory_form\" model=\"ir.ui.view\">\n   22:             <field name=\"name\">multi_company.default.form</field>\n   23:             <field name=\"model\">multi_company.default</field>\n   24              <field name=\"priority\" eval=\"8\"/>\n   25              <field name=\"arch\" type=\"xml\">\n   ..\n   43  \n   44          <record id=\"view_inventory_search\" model=\"ir.ui.view\">\n   45:             <field name=\"name\">multi_company.default.search</field>\n   46:             <field name=\"model\">multi_company.default</field>\n   47              <field name=\"priority\" eval=\"8\"/>\n   48              <field name=\"arch\" type=\"xml\">\n   ..\n   57  \n   58          <record id=\"action_inventory_form\" model=\"ir.actions.act_window\">\n   59:             <field name=\"name\">Company Defaults</field>\n   60              <field name=\"type\">ir.actions.act_window</field>\n   61:             <field name=\"res_model\">multi_company.default</field>\n   62              <field name=\"view_type\">form</field>\n   63              <field name=\"search_view_id\" ref=\"view_inventory_search\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\note\\note.py:\n   32          'sequence': fields.integer('Sequence', help=\"Used to order the note stages\"),\n   33          'user_id': fields.many2one('res.users', 'Owner', help=\"Owner of the note stage.\", required=True, ondelete='cascade'),\n   34:         'fold': fields.boolean('Folded by Default'),\n   35      }\n   36      _order = 'sequence asc'\n   37:     _defaults = {\n   38          'fold': 0,\n   39          'user_id': lambda self, cr, uid, ctx: uid,\n   ..\n   73          return self.write(cr, uid, ids, {'open': True}, context=context)\n   74  \n   75:     #return the default stage for the uid user\n   76:     def _get_default_stage_id(self,cr,uid,context=None):\n   77          ids = self.pool.get('note.stage').search(cr,uid,[('user_id','=',uid)], context=context)\n   78          return ids and ids[0] or False\n   ..\n  110          'tag_ids' : fields.many2many('note.tag','note_tags_rel','note_id','tag_id','Tags'),\n  111      }\n  112:     _defaults = {\n  113          'user_id': lambda self, cr, uid, ctx=None: uid,\n  114          'open' : 1,\n  115:         'stage_id' : _get_default_stage_id,\n  116      }\n  117      _order = 'sequence'\n  ...\n  196                  except ValueError:\n  197                      continue\n  198:                 note_obj.copy(cr, SUPERUSER_ID, stage_id, default={'user_id': user_id}, context=context)\n  199          return user_id\n  200  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\note\\note_view.xml:\n   42        <field name=\"model\">note.note</field>\n   43        <field name=\"arch\" type=\"xml\">\n   44:         <kanban default_group_by=\"stage_id\" class=\"oe_notes oe_kanban_quickcreate_textarea\">\n   45            <field name=\"color\"/>\n   46            <field name=\"sequence\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\pad\\__openerp__.py:\n    9  \n   10  Lets the company customize which Pad installation should be used to link to new\n   11: pads (by default, http://ietherpad.com/).\n   12      \"\"\",\n   13      'author': 'OpenERP SA',\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\pad\\pad.py:\n  101                  vals[field.pad_content_field] = self.pad_get_content(cr, uid, v, context=context)        \n  102  \n  103:     def copy(self, cr, uid, id, default=None, context=None):\n  104:         if not default:\n  105:             default = {}\n  106          for k, field in self._fields.iteritems():\n  107              if hasattr(field,'pad_content_field'):\n  108                  pad = self.pad_generate_url(cr, uid, context)\n  109:                 default[k] = pad.get('url')\n  110:         return super(pad_common, self).copy(cr, uid, id, default, context)\n  111  \n  112  # vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\payment\\models\\payment_acquirer.py:\n   85      }\n   86  \n   87:     _defaults = {\n   88          'company_id': lambda self, cr, uid, obj, ctx=None: self.pool['res.users'].browse(cr, uid, uid).company_id.id,\n   89          'environment': 'test',\n   ..\n  376      ]\n  377  \n  378:     _defaults = {\n  379          'date_create': fields.datetime.now,\n  380          'type': 'form',\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\payment_paypal\\models\\paypal.py:\n   55      }\n   56  \n   57:     _defaults = {\n   58          'paypal_use_ipn': True,\n   59          'fees_active': False,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\payment_transfer\\models\\payment_acquirer.py:\n   43  \n   44      def create(self, cr, uid, values, context=None):\n   45:         \"\"\" Hook in create to create a default post_msg. This is done in create\n   46          to have access to the name and other creation values. If no post_msg\n   47:         or a void post_msg is given at creation, generate a default one. \"\"\"\n   48          if values.get('provider') == 'transfer' and not values.get('post_msg'):\n   49              values['post_msg'] = self._format_transfer_data(cr, uid, context=context)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\point_of_sale\\account_bank_statement.py:\n   31          'self_checkout_payment_method' : fields.boolean('Self Checkout Payment Method'), #FIXME : this field is obsolete\n   32      }\n   33:     _defaults = {\n   34          'self_checkout_payment_method' : False,\n   35      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\point_of_sale\\account_statement_view.xml:\n   98              <field name=\"view_id\" ref=\"account.view_bank_statement_form2\"/>\n   99              <field name=\"search_view_id\" ref=\"account.view_account_bank_statement_filter\"/>\n  100:             <field name=\"context\">{'search_default_state_draft': 1, 'search_default_state_open': 1}</field>\n  101          </record>\n  102          <record model=\"ir.actions.act_window.view\" id=\"act_cash_statement_all_register1\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\point_of_sale\\data\\report_paperformat.xml:\n    4          <record id=\"paperformat_posreceipt\" model=\"report.paperformat\">\n    5              <field name=\"name\">Point Of Sale Receipt</field>\n    6:             <field name=\"default\" eval=\"True\"/>\n    7              <field name=\"format\">custom</field>\n    8              <field name=\"page_height\">150</field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\point_of_sale\\point_of_sale.py:\n   64          'currency_id' : fields.function(_get_currency, type=\"many2one\", string=\"Currency\", relation=\"res.currency\"),\n   65          'iface_self_checkout' : fields.boolean('Self Checkout Mode', # FIXME : this field is obsolete\n   66:              help=\"Check this if this point of sale should open by default in a self checkout mode. If unchecked, Odoo uses the normal cashier mode by default.\"),\n   67          'iface_cashdrawer' : fields.boolean('Cashdrawer', help=\"Automatically open the cashdrawer\"),\n   68          'iface_payment_terminal' : fields.boolean('Payment Terminal', help=\"Enables Payment Terminal integration\"),\n   ..\n  144          return result\n  145  \n  146:     def _default_sale_journal(self, cr, uid, context=None):\n  147          company_id = self.pool.get('res.users').browse(cr, uid, uid, context=context).company_id.id\n  148          res = self.pool.get('account.journal').search(cr, uid, [('type', '=', 'sale'), ('company_id', '=', company_id)], limit=1, context=context)\n  149          return res and res[0] or False\n  150  \n  151:     def _default_pricelist(self, cr, uid, context=None):\n  152          res = self.pool.get('product.pricelist').search(cr, uid, [('type', '=', 'sale')], limit=1, context=context)\n  153          return res and res[0] or False\n  154  \n  155:     def _get_default_location(self, cr, uid, context=None):\n  156          wh_obj = self.pool.get('stock.warehouse')\n  157          user = self.pool.get('res.users').browse(cr, uid, uid, context)\n  ...\n  161          return False\n  162  \n  163:     def _get_default_company(self, cr, uid, context=None):\n  164          company_id = self.pool.get('res.users')._get_company(cr, uid, context=context)\n  165          return company_id\n  166  \n  167:     _defaults = {\n  168          'state' : POS_CONFIG_STATE[0][0],\n  169:         'journal_id': _default_sale_journal,\n  170          'group_by' : True,\n  171:         'pricelist_id': _default_pricelist,\n  172          'iface_invoicing': True,\n  173:         'stock_location_id': _get_default_location,\n  174:         'company_id': _get_default_company,\n  175          'barcode_product': '*', \n  176          'barcode_cashier': '041*', \n  ...\n  184          p_type_obj = self.pool.get(\"stock.picking.type\")\n  185          p_type = p_type_obj.browse(cr, uid, picking_type_id, context=context)\n  186:         if p_type.default_location_src_id and p_type.default_location_src_id.usage == 'internal' and p_type.default_location_dest_id and p_type.default_location_dest_id.usage == 'customer':\n  187:             return {'value': {'stock_location_id': p_type.default_location_src_id.id}}\n  188          return False\n  189  \n  ...\n  337      }\n  338  \n  339:     _defaults = {\n  340          'name' : '/',\n  341          'user_id' : lambda obj, cr, uid, context: uid,\n  ...\n  379      def create(self, cr, uid, values, context=None):\n  380          context = dict(context or {})\n  381:         config_id = values.get('config_id', False) or context.get('default_config_id', False)\n  382          if not config_id:\n  383              raise osv.except_osv( _('Error!'),\n  ...\n  392          context.update({'company_id': pos_config.company_id.id})\n  393          if not pos_config.journal_id:\n  394:             jid = jobj.default_get(cr, uid, ['journal_id'], context=context)['journal_id']\n  395              if jid:\n  396                  jobj.write(cr, openerp.SUPERUSER_ID, [pos_config.id], {'journal_id': jid}, context=context)\n  ...\n  693          'statement_ids': fields.one2many('account.bank.statement.line', 'pos_statement_id', 'Payments', states={'draft': [('readonly', False)]}, readonly=True),\n  694          'pricelist_id': fields.many2one('product.pricelist', 'Pricelist', required=True, states={'draft': [('readonly', False)]}, readonly=True),\n  695:         'partner_id': fields.many2one('res.partner', 'Customer', change_default=True, select=1, states={'draft': [('readonly', False)], 'paid': [('readonly', False)]}),\n  696          'sequence_number': fields.integer('Sequence Number', help='A session-unique sequence number for the order'),\n  697  \n  ...\n  721      }\n  722  \n  723:     def _default_session(self, cr, uid, context=None):\n  724          so = self.pool.get('pos.session')\n  725          session_ids = so.search(cr, uid, [('state','=', 'opened'), ('user_id','=',uid)], context=context)\n  726          return session_ids and session_ids[0] or False\n  727  \n  728:     def _default_pricelist(self, cr, uid, context=None):\n  729:         session_ids = self._default_session(cr, uid, context) \n  730          if session_ids:\n  731              session_record = self.pool.get('pos.session').browse(cr, uid, session_ids, context=context)\n  ...\n  737                      cr, uid, 'point_of_sale.picking_type_posout', context=context)\n  738  \n  739:     _defaults = {\n  740          'user_id': lambda self, cr, uid, context: uid,\n  741          'state': 'draft',\n  ...\n  744          'nb_print': 0,\n  745          'sequence_number': 1,\n  746:         'session_id': _default_session,\n  747          'company_id': lambda self,cr,uid,c: self.pool.get('res.users').browse(cr, uid, uid, c).company_id.id,\n  748:         'pricelist_id': _default_pricelist,\n  749      }\n  750  \n  ...\n  796                  destination_id = order.partner_id.property_stock_customer.id\n  797              elif picking_type:\n  798:                 if not picking_type.default_location_dest_id:\n  799                      raise osv.except_osv(_('Error!'), _('Missing source or destination location for picking type %s. Please configure those fields and try again.' % (picking_type.name,)))\n  800:                 destination_id = picking_type.default_location_dest_id.id\n  801              else:\n  802:                 destination_id = partner_obj.default_get(cr, uid, ['property_stock_customer'], context=context)['property_stock_customer']\n  803  \n  804              move_list = []\n  ...\n 1096                      return\n 1097  \n 1098:                 grouped_data.setdefault(key, [])\n 1099  \n 1100                  # if not have_to_group_by or (not grouped_data[key]):\n ....\n 1135                      group_key = (tax['tax_code_id'], tax['base_code_id'], tax['account_collected_id'], tax['id'])\n 1136  \n 1137:                     group_tax.setdefault(group_key, 0)\n 1138                      group_tax[group_key] += cur_obj.round(cr, uid, cur, tax['amount'])\n 1139  \n ....\n 1251          'user_id': fields.many2one('res.users', 'User', readonly=True),\n 1252      }\n 1253:     _defaults = {\n 1254          'user_id': lambda self,cr,uid,c={}: uid\n 1255      }\n ....\n 1317          'name': fields.char('Line No', required=True, copy=False),\n 1318          'notice': fields.char('Discount Notice'),\n 1319:         'product_id': fields.many2one('product.product', 'Product', domain=[('sale_ok', '=', True)], required=True, change_default=True),\n 1320          'price_unit': fields.float(string='Unit Price', digits_compute=dp.get_precision('Account')),\n 1321          'qty': fields.float('Quantity', digits_compute=dp.get_precision('Product UoS')),\n ....\n 1327      }\n 1328  \n 1329:     _defaults = {\n 1330          'name': lambda obj, cr, uid, context: obj.pool.get('ir.sequence').get(cr, uid, 'pos.order.line'),\n 1331          'qty': lambda *a: 1,\n ....\n 1387          'sequence': fields.integer('Sequence', help=\"Gives the sequence order when displaying a list of product categories.\"),\n 1388          \n 1389:         # NOTE: there is no 'default image', because by default we don't show thumbnails for categories. However if we have a thumbnail\n 1390:         # for at least one category, then we display a default image on the other, so that the buttons have consistent styling.\n 1391:         # In this case, the default image is set by the js code.\n 1392          # NOTE2: image: all image fields are base64 encoded and PIL-supported\n 1393          'image': fields.binary(\"Image\",\n ....\n 1422      }\n 1423  \n 1424:     _defaults = {\n 1425          'to_weight' : False,\n 1426          'available_in_pos': True,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\point_of_sale\\point_of_sale_data.xml:\n   12              <field name=\"name\">PoS Orders</field>\n   13              <field name=\"sequence_id\" ref=\"seq_picking_type_posout\"/>\n   14:             <field name=\"default_location_src_id\" ref=\"stock.stock_location_stock\"/>\n   15:             <field name=\"default_location_dest_id\" ref=\"stock.stock_location_customers\"/>\n   16              <field name=\"warehouse_id\" eval=\"False\"/>\n   17              <field name=\"code\">outgoing</field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\point_of_sale\\point_of_sale_view.xml:\n   27                          <field name=\"date_order\"/>\n   28                          <field name=\"session_id\" required=\"1\"/>\n   29:                         <field name=\"partner_id\" on_change=\"onchange_partner_id(partner_id, context)\" context=\"{'search_default_customer':1}\" attrs=\"{'readonly': [('state','=','invoiced')]}\"/>\n   30                      </group>\n   31                      <notebook colspan=\"4\">\n   ..\n   76                                  <field name=\"company_id\" groups=\"base.group_multi_company\"/>\n   77                                  <field name=\"location_id\" widget=\"selection\" groups=\"stock.group_locations\"/>\n   78:                                 <field name=\"user_id\" context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'point_of_sale.group_pos_user']}\"/>\n   79                                  <field name=\"pricelist_id\" groups=\"product.group_sale_pricelist\" domain=\"[('type','=','sale')]\"/>\n   80                                  <field name=\"picking_id\" readonly=\"1\"/>\n   ..\n  580              <field name=\"view_type\">form</field>\n  581              <field name=\"view_mode\">tree,form</field>\n  582:             <field name=\"context\" eval=\"{'default_journal_user': 1, 'default_type': 'cash'}\"/>\n  583              <field name=\"domain\">[('journal_user','=', 1)]</field>\n  584              <field name=\"help\" type=\"html\">\n  ...\n  674                          </group>\n  675                          <separator string=\"Available Payment Methods\" colspan=\"4\"/>\n  676:                         <field name=\"journal_ids\" colspan=\"4\" nolabel=\"1\" context=\"{'default_journal_user': 1}\">\n  677                              <tree string=\"Journals\">\n  678                                  <field name=\"code\" />\n  ...\n  790              src_model=\"pos.session\"\n  791              res_model=\"pos.order\"\n  792:             context=\"{'search_default_session_id': active_id, 'default_session_id' : active_id }\" />\n  793  \n  794  \n  ...\n  833                              <field name=\"cash_control\" invisible=\"1\" />\n  834                              <group>\n  835:                                 <field name=\"user_id\" context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'point_of_sale.group_pos_manager', 'base.group_sale_manager']}\"/>\n  836                                  <field name=\"currency_id\" invisible=\"1\"/>\n  837                                  <field name=\"config_id\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\point_of_sale\\report\\pos_details.py:\n   51              for pol in pos.lines:\n   52                  result = {\n   53:                     'code': pol.product_id.default_code,\n   54                      'name': pol.product_id.name,\n   55                      'invoice_id': pos.invoice_id.id, \n   ..\n  165                  line_taxes = account_tax_obj.compute_all(self.cr, self.uid, line.product_id.taxes_id, line.price_unit * (1-(line.discount or 0.0)/100.0), line.qty, product=line.product_id, partner=line.order_id.partner_id or False)\n  166                  for tax in line_taxes['taxes']:\n  167:                     taxes.setdefault(tax['id'], {'name': tax['name'], 'amount':0.0})\n  168                      taxes[tax['id']]['amount'] += tax['amount']\n  169          return taxes.values()\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\point_of_sale\\report\\pos_payment_report.py:\n   42          self.cr.execute(sql)\n   43          if self.cr.fetchone():\n   44:             self.cr.execute (\"select pt.name,pp.default_code as code,pol.qty,pu.name as uom,pol.discount,pol.price_unit, \" \\\n   45                                   \"(pol.price_unit * pol.qty * (1 - (pol.discount) / 100.0)) as total  \" \\\n   46                                   \"from pos_order as po,pos_order_line as pol,product_product as pp,product_template as pt, product_uom as pu \" \\\n   ..\n   49              data=self.cr.dictfetchall()\n   50          else:\n   51:             self.cr.execute (\"select pt.name,pp.default_code as code,pol.qty,pu.name as uom,pol.discount,pol.price_unit, \" \\\n   52                                   \"(pol.price_unit * pol.qty * (1 - (pol.discount) / 100.0)) as total  \" \\\n   53                                   \"from pos_order as po,pos_order_line as pol,product_product as pp,product_template as pt, product_uom as pu  \" \\\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\point_of_sale\\report\\pos_users_product.py:\n   47              a_l.append(r['id'])\n   48          if len(a_l):\n   49:             sql2=\"\"\"SELECT sum(qty) as qty,l.price_unit*sum(l.qty) as amt,t.name as name, p.default_code as code, pu.name as uom from product_product p, product_template t,product_uom pu,pos_order_line l where order_id = %d and p.product_tmpl_id=t.id and l.product_id=p.id and pu.id=t.uom_id group by t.name,p.default_code,pu.name,l.price_unit\"\"\"%(o.id)\n   50              self.cr.execute(sql2)\n   51              data = self.cr.dictfetchall()\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\point_of_sale\\res_users.py:\n   11      _columns = {\n   12          'ean13' : fields.char('EAN13', size=13, help=\"BarCode\"),\n   13:         'pos_config' : fields.many2one('pos.config', 'Default Point of Sale', domain=[('state', '=', 'active')]),\n   14      }\n   15  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\point_of_sale\\wizard\\pos_details.py:\n   33          'user_ids': fields.many2many('res.users', 'pos_details_report_user_rel', 'user_id', 'wizard_id', 'Salespeople'),\n   34      }\n   35:     _defaults = {\n   36          'date_start': lambda *a: time.strftime('%Y-%m-%d'),\n   37          'date_end': lambda *a: time.strftime('%Y-%m-%d'),\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\point_of_sale\\wizard\\pos_discount.py:\n   29          'discount': fields.float('Discount (%)', required=True, digits=(16,2)),\n   30      }\n   31:     _defaults = {\n   32          'discount': 5,\n   33      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\point_of_sale\\wizard\\pos_payment.py:\n   93          }\n   94  \n   95:     def _default_journal(self, cr, uid, context=None):\n   96          if not context:\n   97              context = {}\n   ..\n  107          return False\n  108  \n  109:     def _default_amount(self, cr, uid, context=None):\n  110          order_obj = self.pool.get('pos.order')\n  111          active_id = context and context.get('active_id', False)\n  ...\n  121          'payment_date': fields.date('Payment Date', required=True),\n  122      }\n  123:     _defaults = {\n  124:         'journal_id' : _default_journal,\n  125          'payment_date': lambda *a: time.strftime('%Y-%m-%d %H:%M:%S'),\n  126:         'amount': _default_amount,\n  127      }\n  128  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\point_of_sale\\wizard\\pos_session_opening.py:\n   97          return {'value' : result}\n   98  \n   99:     def default_get(self, cr, uid, fieldnames, context=None):\n  100          so = self.pool.get('pos.session')\n  101          session_ids = so.search(cr, uid, [('state','<>','closed'), ('user_id','=',uid)], context=context)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\portal\\mail_thread.py:\n   32              - opens the form view of the related document if model, res_id, and\n   33                read access to the document\n   34:             - opens the Inbox with a default search on the conversation if model,\n   35                res_id\n   36              - opens the Inbox with context propagated\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\portal\\portal_demo.xml:\n   21              <field name=\"signature\"><![CDATA[<span>--<br/>\n   22  Mr Demo Portal</span>]]></field>\n   23:             <!-- Avoid auto-including this user in any default group -->\n   24              <field name=\"groups_id\" eval=\"[(5,)]\"/>\n   25          </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\portal\\portal_view.xml:\n   16              <field name=\"res_model\">mail.message</field>\n   17              <field name=\"context\">{\n   18:               'default_model': 'res.users',\n   19:               'default_res_id': uid,\n   20                'thread_model': 'res.partner',\n   21              }</field>\n   ..\n   47              <field name=\"res_model\">mail.message</field>\n   48              <field name=\"context\">{\n   49:               'default_model': 'res.users',\n   50:               'default_res_id': uid,\n   51                'thread_model': 'res.partner',\n   52:               'search_default_message_unread': True\n   53              }</field>\n   54              <field name=\"params\" eval=\"&quot;{\n   ..\n   78              <field name=\"tag\">mail.wall</field>\n   79              <field name=\"context\">{\n   80:               'default_model': 'res.users',\n   81:               'default_res_id': uid,\n   82                'thread_model': 'res.partner',\n   83              }</field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\portal\\tests\\test_portal.py:\n   86          compose_id = mail_compose.create(cr, self.user_chell_id,\n   87              {'subject': 'Subject', 'body': 'Body text', 'partner_ids': []},\n   88:             {'default_composition_mode': 'comment', 'default_model': 'mail.group', 'default_res_id': self.group_pigs_id})\n   89          mail_compose.send_mail(cr, self.user_chell_id, [compose_id])\n   90          # Do: Chell replies to a Pigs message using the composer\n   91          compose_id = mail_compose.create(cr, self.user_chell_id,\n   92              {'subject': 'Subject', 'body': 'Body text'},\n   93:             {'default_composition_mode': 'comment', 'default_parent_id': pigs_msg_id})\n   94          mail_compose.send_mail(cr, self.user_chell_id, [compose_id])\n   95  \n   ..\n  106          cr, uid = self.cr, self.uid\n  107          mail_invite = self.registry('mail.wizard.invite')\n  108:         base_url = self.registry('ir.config_parameter').get_param(cr, uid, 'web.base.url', default='')\n  109          # Carine Poilvache, with email, should receive emails for comments and emails\n  110          partner_carine_id = self.res_partner.create(cr, uid, {'name': 'Carine Poilvache', 'email': 'c@c'})\n  ...\n  112          # Do: create a mail_wizard_invite, validate it\n  113          self._init_mock_build_email()\n  114:         context = {'default_res_model': 'mail.group', 'default_res_id': self.group_pigs_id}\n  115          mail_invite_id = mail_invite.create(cr, uid, {'partner_ids': [(4, partner_carine_id)], 'send_mail': True}, context)\n  116          mail_invite.add_followers(cr, uid, [mail_invite_id])\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\portal\\wizard\\portal_wizard.py:\n   74      }\n   75  \n   76:     def _default_portal(self, cr, uid, context):\n   77          portal_ids = self.pool.get('res.groups').search(cr, uid, [('is_portal', '=', True)])\n   78          return portal_ids and portal_ids[0] or False\n   79  \n   80:     _defaults = {\n   81:         'portal_id': _default_portal,\n   82      }\n   83  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\portal\\wizard\\share_wizard.py:\n  168              # access right lines.\n  169              for access_line in share_group.model_access:\n  170:                 Rights.copy(cr, UID_ROOT, access_line.id, default={'group_id': target_group.id})\n  171              _logger.debug(\"Copied access rights from temporary sharing group to group %s\", target_group)\n  172  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\portal_claim\\portal_claim.py:\n   27      _inherit = \"crm.claim\"\n   28  \n   29:     def _get_default_partner_id(self, cr, uid, context=None):\n   30:         \"\"\" Gives default partner_id \"\"\"\n   31          if context is None:\n   32              context = {}\n   ..\n   34              user = self.pool.get('res.users').browse(cr, uid, uid, context=context)\n   35              # Special case for portal users, as they are not allowed to call name_get on res.partner\n   36:             # We save this call for the web client by returning it in default get\n   37              return self.pool['res.partner'].name_get(cr, SUPERUSER_ID, [user.partner_id.id], context=context)[0]\n   38          return False\n   39  \n   40:     _defaults = {\n   41:         'partner_id': lambda s, cr, uid, c: s._get_default_partner_id(cr, uid, c),\n   42      }\n   43  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\portal_project_issue\\portal_project_issue_view.xml:\n   61              <field name=\"view_id\" ref=\"portal_project_issue_kanban_view\"/>\n   62              <field name=\"domain\" eval=\"\"/>\n   63:             <field name=\"context\">{\"search_default_user_id\":'', \"search_default_draft\":'', \"search_default_todo\":'', \"portal\":'True'}</field>\n   64              <field name=\"search_view_id\" ref=\"project_issue.view_project_issue_filter\"/>\n   65              <field name=\"target\">current</field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\portal_sale\\__openerp__.py:\n   42  If online payment acquirers are configured, portal users will also be given the opportunity to\n   43  pay online on their Sale Orders and Invoices that are not paid yet. Paypal is included\n   44: by default, you simply need to configure a Paypal account in the Accounting/Invoicing settings.\n   45      \"\"\",\n   46      'author': 'OpenERP SA',\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\portal_sale\\portal_sale.py:\n   52              # assume context is still a dict, as prepared by super\n   53              ctx = action_dict['context']\n   54:             ctx['default_template_id'] = template_id\n   55:             ctx['default_use_template'] = True\n   56          except Exception:\n   57              pass\n   ..\n  112              # assume context is still a dict, as prepared by super\n  113              ctx = action_dict['context']\n  114:             ctx['default_template_id'] = template_id\n  115:             ctx['default_use_template'] = True\n  116          except Exception:\n  117              pass\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\portal_sale\\portal_sale_view.xml:\n   55              <field name=\"res_model\">sale.order</field>\n   56              <field name=\"view_mode\">tree,form</field>\n   57:             <field name=\"context\">{\"search_default_draft\":1}</field>\n   58              <field name=\"search_view_id\" ref=\"sale.view_sales_order_filter\"/>\n   59              <field name=\"help\">We haven't sent you any quotation.</field>\n   ..\n   66              <field name=\"view_mode\">tree,form</field>\n   67              <field name=\"search_view_id\" ref=\"sale.view_sales_order_filter\"/>\n   68:             <field name=\"context\">{\"search_default_sales\":1}</field>\n   69              <field name=\"help\">We haven't sent you any sales order.</field>\n   70          </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\pos_discount\\discount.py:\n   34          'discount_product_id': fields.many2one('product.product','Discount Product', help='The product used to model the discount'),\n   35      }\n   36:     _defaults = {\n   37          'discount_pc': 10,\n   38      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\pos_restaurant\\restaurant.py:\n   38      }\n   39  \n   40:     _defaults = {\n   41          'name' : 'Printer',\n   42      }\n   ..\n   49          'printer_ids':     fields.many2many('restaurant.printer','pos_config_printer_rel', 'config_id','printer_id',string='Order Printers'),\n   50      }\n   51:     _defaults = {\n   52          'iface_splitbill': False,\n   53          'iface_printbill': False,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\procurement\\procurement.py:\n   64          'procurement_ids': fields.one2many('procurement.order', 'group_id', 'Procurements'),\n   65      }\n   66:     _defaults = {\n   67          'name': lambda self, cr, uid, c: self.pool.get('ir.sequence').get(cr, uid, 'procurement.group') or '',\n   68          'move_type': lambda self, cr, uid, c: 'direct'\n   ..\n   92      }\n   93  \n   94:     _defaults = {\n   95          'group_propagation_option': 'propagate',\n   96          'sequence': 20,\n   ..\n  139      }\n  140  \n  141:     _defaults = {\n  142          'state': 'confirmed',\n  143          'priority': '1',\n  144          'date_planned': lambda *a: time.strftime('%Y-%m-%d %H:%M:%S'),\n  145:         'company_id': lambda self, cr, uid, c: self.pool.get('res.company')._company_default_get(cr, uid, 'procurement.order', context=c)\n  146      }\n  147  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\procurement\\procurement_view.xml:\n  140              <field name=\"view_id\" eval=\"False\"/>\n  141              <field name=\"search_view_id\" ref=\"view_procurement_filter\"/>\n  142:             <field name=\"context\">{'search_default_current':1}</field>\n  143              <field name=\"help\" type=\"html\">\n  144                <p class=\"oe_view_nocontent_create\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\product\\partner.py:\n   32              domain=[('type','=','sale')],\n   33              string=\"Sale Pricelist\", \n   34:             help=\"This pricelist will be used, instead of the default one, for sales to the current partner\"),\n   35      }\n   36  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\product\\pricelist.py:\n   64          \"currency_id\" : fields.many2one('res.currency', \"Currency\", required=True, help=\"The currency the field is expressed in.\"),\n   65      }\n   66:     _defaults = {\n   67          \"active\": lambda *args: True,\n   68          \"currency_id\": _get_currency\n   ..\n  164          return comp.currency_id.id\n  165  \n  166:     _defaults = {\n  167          'active': lambda *a: 1,\n  168          \"currency_id\": _get_currency\n  ...\n  187              subres = self._price_rule_get_multi(cr, uid, pricelist, products_by_qty_by_partner, context=context)\n  188              for product_id,price in subres.items():\n  189:                 results.setdefault(product_id, {})\n  190                  results[product_id][pricelist.id] = price\n  191          return results\n  ...\n  264                          cr, uid, context['uom'], qty, product.uom_id.id or product.uos_id.id)\n  265                  except except_orm:\n  266:                     # Ignored - incompatible UoM in context, use default product UoM\n  267                      pass\n  268  \n  ...\n  390              readonly=True, relation='res.company', string='Company', store=True)\n  391      }\n  392:     _defaults = {\n  393          'active': lambda *a: 1,\n  394      }\n  ...\n  434          return result\n  435  \n  436: # Added default function to fetch the Price type Based on Pricelist type.\n  437:     def _get_default_base(self, cr, uid, fields, context=None):\n  438          product_price_type_obj = self.pool.get('product.price.type')\n  439          if fields.get('type') == 'purchase':\n  ...\n  452      _description = \"Pricelist item\"\n  453      _order = \"sequence, min_quantity desc\"\n  454:     _defaults = {\n  455:         'base': _get_default_base,\n  456          'min_quantity': lambda *a: 0,\n  457          'sequence': lambda *a: 5,\n  ...\n  483              help=\"For the rule to apply, bought/sold quantity must be greater \"\n  484                \"than or equal to the minimum quantity specified in this field.\\n\"\n  485:               \"Expressed in the default UoM of the product.\"\n  486              ),\n  487          'sequence': fields.integer('Sequence', required=True, help=\"Gives the order in which the pricelist items will be checked. The evaluation gives highest priority to lowest sequence and stops as soon as a matching item is found.\"),\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\product\\pricelist_view.xml:\n  101                      <separator string=\"Price Computation\"/>\n  102                      <div class=\"oe_grey\" groups=\"product.group_uom\">\n  103:                         <p>The computed price is expressed in the default Unit of Measure of the product.</p>\n  104                      </div>\n  105                      <group col=\"4\">\n  ...\n  192              <field name=\"view_mode\">tree,form</field>\n  193              <field name=\"search_view_id\" ref=\"product_pricelist_view_search\" />\n  194:             <field name=\"context\">{\"default_type\":\"sale\", \"search_default_type\":\"sale\"}</field>\n  195              <field name=\"help\" type=\"html\">\n  196                <p class=\"oe_view_nocontent_create\">\n  ...\n  214              <field name=\"view_mode\">tree,form</field>\n  215              <field name=\"search_view_id\" ref=\"product_pricelist_view_search\" />\n  216:             <field name=\"context\">{\"default_type\":\"purchase\", \"search_default_type\":\"purchase\"}</field>\n  217              <field name=\"help\" type=\"html\">\n  218                <p class=\"oe_view_nocontent_create\">\n  ...\n  220                </p><p>\n  221                  A price list contains rules to be evaluated in order to compute\n  222:                 the purchase price. The default price list has only one rule; use\n  223                  the cost price defined on the product form, so that you do not have to\n  224                  worry about supplier pricelists if you have very simple needs.\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\product\\product.py:\n   29  from openerp.osv import osv, fields, expression\n   30  from openerp.tools.translate import _\n   31: from openerp.tools import DEFAULT_SERVER_DATETIME_FORMAT\n   32  import psycopg2\n   33  \n   ..\n  152      }\n  153  \n  154:     _defaults = {\n  155          'active': 1,\n  156          'rounding': 0.01,\n  ...\n  179          if from_unit.category_id.id != to_unit.category_id.id:\n  180              if context.get('raise-exception', True):\n  181:                 raise osv.except_osv(_('Error!'), _('Conversion from Product UoM %s to Default UoM %s is not possible as they both belong to different Category!.') % (from_unit.name,to_unit.name,))\n  182              else:\n  183                  return qty\n  ...\n  280  \n  281  \n  282:     _defaults = {\n  283          'type' : 'normal',\n  284      }\n  ...\n  310      }\n  311  \n  312:     def _get_default_company(self, cr, uid, context=None):\n  313          if 'force_company' in context:\n  314              return context['force_company']\n  ...\n  318              return company.id if company else False\n  319  \n  320:     _defaults = {\n  321          'datetime': fields.datetime.now,\n  322:         'company_id': _get_default_company,\n  323      }\n  324  \n  ...\n  388          ('value_company_uniq', 'unique (name,attribute_id)', 'This attribute value already exists !')\n  389      ]\n  390:     _defaults = {\n  391          'price_extra': 0.0,\n  392      }\n  ...\n  461                      res[id] = price.get(id, 0.0)\n  462          for id in ids:\n  463:             res.setdefault(id, 0.0)\n  464          return res\n  465  \n  ...\n  468              context = {}\n  469          if date is None:\n  470:             date = time.strftime(DEFAULT_SERVER_DATETIME_FORMAT)\n  471          price_history_obj = self.pool.get('product.price.history')\n  472          history_ids = price_history_obj.search(cr, uid, [('company_id', '=', company_id), ('product_template_id', '=', product_tmpl), ('datetime', '<=', date)], limit=1)\n  ...\n  507          'type': fields.selection([('consu', 'Consumable'),('service','Service')], 'Product Type', required=True, help=\"Consumable are product where you don't manage stock, a service is a non-material product provided by a company or an individual.\"),        \n  508          'rental': fields.boolean('Can be Rent'),\n  509:         'categ_id': fields.many2one('product.category','Internal Category', required=True, change_default=True, domain=\"[('type','=','normal')]\" ,help=\"Select category for the current product\"),\n  510          'price': fields.function(_product_template_price, type='float', string='Price', digits_compute=dp.get_precision('Product Price')),\n  511          'list_price': fields.float('Sale Price', digits_compute=dp.get_precision('Product Price'), help=\"Base price to compute the customer price. Sometimes called the catalog price.\"),\n  ...\n  513          'standard_price': fields.property(type = 'float', digits_compute=dp.get_precision('Product Price'), \n  514                                            help=\"Cost price of the product template used for standard stock valuation in accounting and used as a base price on purchase orders. \"\n  515:                                                \"Expressed in the default unit of measure of the product.\",\n  516                                            groups=\"base.group_user\", string=\"Cost Price\"),\n  517          'volume': fields.float('Volume', help=\"The volume in m3.\"),\n  ...\n  526              ('end','End of Lifecycle'),\n  527              ('obsolete','Obsolete')], 'Status'),\n  528:         'uom_id': fields.many2one('product.uom', 'Unit of Measure', required=True, help=\"Default Unit of Measure used for all stock operation.\"),\n  529:         'uom_po_id': fields.many2one('product.uom', 'Purchase Unit of Measure', required=True, help=\"Default Unit of Measure used for purchase orders. It must be in the same category than the default unit of measure.\"),\n  530          'uos_id' : fields.many2one('product.uom', 'Unit of Sale',\n  531:             help='Specify a unit of measure here if invoicing is made in another unit of measure than inventory. Keep empty to use the default unit of measure.'),\n  532          'uos_coeff': fields.float('Unit of Measure -> UOS Coeff', digits_compute= dp.get_precision('Product UoS'),\n  533:             help='Coefficient to convert default Unit of Measure to Unit of Sale\\n'\n  534              ' uos = uom * coeff'),\n  535          'mes_type': fields.selection((('fixed', 'Fixed'), ('variable', 'Variable')), 'Measure Type'),\n  ...\n  560          'seller_ids': fields.one2many('product.supplierinfo', 'product_tmpl_id', 'Supplier'),\n  561          'seller_delay': fields.related('seller_ids','delay', type='integer', string='Supplier Lead Time',\n  562:             help=\"This is the average delay in days between the purchase order confirmation and the receipts for this product and for the default supplier. It is used by the scheduler to order requests based on reordering delays.\"),\n  563          'seller_qty': fields.related('seller_ids','qty', type='float', string='Supplier Quantity',\n  564              help=\"This is minimum quantity to purchase from Main Supplier.\"),\n  ...\n  576          # related to display product product information if is_product_variant\n  577          'ean13': fields.related('product_variant_ids', 'ean13', type='char', string='EAN13 Barcode'),\n  578:         'default_code': fields.related('product_variant_ids', 'default_code', type='char', string='Internal Reference'),\n  579      }\n  580  \n  ...\n  621          return self.pool[\"product.uom\"].search(cr, uid, [], limit=1, order='id')[0]\n  622  \n  623:     def _default_category(self, cr, uid, context=None):\n  624          if context is None:\n  625              context = {}\n  ...\n  719          if vals.get('ean13'):\n  720              related_vals['ean13'] = vals['ean13']\n  721:         if vals.get('default_code'):\n  722:             related_vals['default_code'] = vals['default_code']\n  723          if related_vals:\n  724              self.write(cr, uid, product_template_id, related_vals, context=context)\n  ...\n  751          return res\n  752  \n  753:     def copy(self, cr, uid, id, default=None, context=None):\n  754:         if default is None:\n  755:             default = {}\n  756          template = self.browse(cr, uid, id, context=context)\n  757:         default['name'] = _(\"%s (copy)\") % (template['name'])\n  758:         return super(product_template, self).copy(cr, uid, id, default=default, context=context)\n  759  \n  760:     _defaults = {\n  761:         'company_id': lambda s,cr,uid,c: s.pool.get('res.company')._company_default_get(cr, uid, 'product.template', context=c),\n  762          'list_price': 1,\n  763          'standard_price': 0.0,\n  ...\n  767          'uos_coeff': 1.0,\n  768          'mes_type': 'fixed',\n  769:         'categ_id' : _default_category,\n  770          'type' : 'consu',\n  771          'active': True,\n  ...\n  787  \n  788      _constraints = [\n  789:         (_check_uom, 'Error: The default Unit of Measure and the purchase Unit of Measure must be in the same category.', ['uom_id']),\n  790      ]\n  791  \n  ...\n  806      _inherits = {'product.template': 'product_tmpl_id'}\n  807      _inherit = ['mail.thread']\n  808:     _order = 'default_code,name_template'\n  809  \n  810      def _product_price(self, cr, uid, ids, name, arg, context=None):\n  ...\n  831                      res[id] = price.get(id, 0.0)\n  832          for id in ids:\n  833:             res.setdefault(id, 0.0)\n  834          return res\n  835  \n  ...\n  872          for supinfo in product.seller_ids:\n  873              if supinfo.name.id == partner_id:\n  874:                 return {'code': supinfo.product_code or product.default_code, 'name': supinfo.product_name or product.name}\n  875:         res = {'code': product.default_code, 'name': product.name}\n  876          return res\n  877  \n  ...\n  936          'code': fields.function(_product_code, type='char', string='Internal Reference'),\n  937          'partner_ref' : fields.function(_product_partner_ref, type='char', string='Customer ref'),\n  938:         'default_code' : fields.char('Internal Reference', select=True),\n  939          'active': fields.boolean('Active', help=\"If unchecked, it will allow you to hide the product without removing it.\"),\n  940          'product_tmpl_id': fields.many2one('product.template', 'Product Template', required=True, ondelete=\"cascade\", select=True, auto_join=True),\n  ...\n  963      }\n  964  \n  965:     _defaults = {\n  966          'active': 1,\n  967          'color': 0,\n  ...\n 1017          def _name_get(d):\n 1018              name = d.get('name','')\n 1019:             code = context.get('display_default_code', True) and d.get('default_code',False) or False\n 1020              if code:\n 1021                  name = '[%s] %s' % (code,name)\n ....\n 1048                                'id': product.id,\n 1049                                'name': seller_variant or name,\n 1050:                               'default_code': s.product_code or product.default_code,\n 1051                                }\n 1052                      result.append(_name_get(mydict))\n ....\n 1055                            'id': product.id,\n 1056                            'name': name,\n 1057:                           'default_code': product.default_code,\n 1058                            }\n 1059                  result.append(_name_get(mydict))\n ....\n 1067              ids = []\n 1068              if operator in positive_operators:\n 1069:                 ids = self.search(cr, user, [('default_code','=',name)]+ args, limit=limit, context=context)\n 1070                  if not ids:\n 1071                      ids = self.search(cr, user, [('ean13','=',name)]+ args, limit=limit, context=context)\n ....\n 1075                  # OR operator (and given the fact that the 'name' lookup results come from the ir.translation table\n 1076                  # Performing a quick memory merge of ids in Python will give much better performance\n 1077:                 ids = set(self.search(cr, user, args + [('default_code', operator, name)], limit=limit, context=context))\n 1078                  if not limit or len(ids) < limit:\n 1079                      # we may underrun the limit because of dupes in the results, that's fine\n ....\n 1082                  ids = list(ids)\n 1083              elif not ids and operator in expression.NEGATIVE_TERM_OPERATORS:\n 1084:                 ids = self.search(cr, user, args + ['&', ('default_code', operator, name), ('name', operator, name)], limit=limit, context=context)\n 1085              if not ids and operator in positive_operators:\n 1086                  ptrn = re.compile('(\\[(.*?)\\])')\n 1087                  res = ptrn.search(name)\n 1088                  if res:\n 1089:                     ids = self.search(cr, user, [('default_code','=', res.group(2))] + args, limit=limit, context=context)\n 1090          else:\n 1091              ids = self.search(cr, user, args, limit=limit, context=context)\n ....\n 1100          return self.pool.get(\"product.template\")._price_get(cr, uid, products, ptype=ptype, context=context)\n 1101  \n 1102:     def copy(self, cr, uid, id, default=None, context=None):\n 1103          if context is None:\n 1104              context={}\n ....\n 1107          if context.get('variant'):\n 1108              # if we copy a variant or create one, we keep the same template\n 1109:             default['product_tmpl_id'] = product.product_tmpl_id.id\n 1110:         elif 'name' not in default:\n 1111:             default['name'] = _(\"%s (copy)\") % (product.name,)\n 1112  \n 1113:         return super(product_product, self).copy(cr, uid, id, default=default, context=context)\n 1114  \n 1115      def search(self, cr, uid, args, offset=0, limit=None, order=None, context=None, count=False):\n 1116          if context is None:\n 1117              context = {}\n 1118:         if context.get('search_default_categ_id'):\n 1119:             args.append((('categ_id', 'child_of', context['search_default_categ_id'])))\n 1120          return super(product_product, self).search(cr, uid, args, offset=offset, limit=limit, order=order, context=context, count=count)\n 1121  \n ....\n 1160              # We cannot convert directly between units even if the units are of the same category\n 1161              # as we need to apply the conversion coefficient which is valid only between quantities\n 1162:             # in product's default UoM/UoS\n 1163:             qty_default_uom = uom_obj._compute_qty_obj(cr, uid, uom, qty, product.uom_id)  # qty in product's default UoM\n 1164:             qty_default_uos = qty_default_uom * product.uos_coeff\n 1165:             return uom_obj._compute_qty_obj(cr, uid, product.uos_id, qty_default_uos, uos)\n 1166          else:\n 1167              return uom_obj._compute_qty_obj(cr, uid, uom, qty, uos)\n ....\n 1214          return (res and res[0]) or False\n 1215  \n 1216:     _defaults = {\n 1217          'rows' : 3,\n 1218          'sequence' : 1,\n ....\n 1248          'sequence' : fields.integer('Sequence', help=\"Assigns the priority to the list of product supplier.\"),\n 1249          'product_uom': fields.related('product_tmpl_id', 'uom_po_id', type='many2one', relation='product.uom', string=\"Supplier Unit of Measure\", readonly=\"1\", help=\"This comes from the product form.\"),\n 1250:         'min_qty': fields.float('Minimal Quantity', required=True, help=\"The minimal quantity to purchase to this supplier, expressed in the supplier Product Unit of Measure if not empty, in the default unit of measure of the product otherwise.\"),\n 1251:         'qty': fields.function(_calc_qty, store=True, type='float', string='Quantity', multi=\"qty\", help=\"This is a quantity which is converted into Default Unit of Measure.\"),\n 1252          'product_tmpl_id' : fields.many2one('product.template', 'Product Template', required=True, ondelete='cascade', select=True, oldname='product_id'),\n 1253          'delay' : fields.integer('Delivery Lead Time', required=True, help=\"Lead time in days between the confirmation of the purchase order and the receipt of the products in your warehouse. Used by the scheduler for automatic computation of the purchase order planning.\"),\n ....\n 1255          'company_id':fields.many2one('res.company','Company',select=1),\n 1256      }\n 1257:     _defaults = {\n 1258          'min_qty': 0.0,\n 1259          'sequence': 1,\n 1260          'delay': 1,\n 1261:         'company_id': lambda self,cr,uid,c: self.pool.get('res.company')._company_default_get(cr, uid, 'product.supplierinfo', context=c),\n 1262      }\n 1263  \n ....\n 1270          'name': fields.char('Description'),\n 1271          'suppinfo_id': fields.many2one('product.supplierinfo', 'Partner Information', required=True, ondelete='cascade'),\n 1272:         'min_quantity': fields.float('Quantity', required=True, help=\"The minimal quantity to trigger this rule, expressed in the supplier Unit of Measure if any or in the default Unit of Measure of the product otherrwise.\"),\n 1273:         'price': fields.float('Unit Price', required=True, digits_compute=dp.get_precision('Product Price'), help=\"This price will be considered as a price for the supplier Unit of Measure if any or the default Unit of Measure of the product otherwise\"),\n 1274      }\n 1275      _order = 'min_quantity asc'\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\product\\product_data.xml:\n  224          <record id=\"ver0\" model=\"product.pricelist.version\">\n  225              <field name=\"pricelist_id\" ref=\"list0\"/>\n  226:             <field name=\"name\">Default Public Pricelist Version</field>\n  227          </record>\n  228          <record id=\"item0\" model=\"product.pricelist.item\">\n  ...\n  230              <field name=\"base\" ref=\"list_price\"/>\n  231              <field name=\"sequence\">1000</field>\n  232:             <field name=\"name\">Default Public Pricelist Line</field>\n  233          </record>\n  234  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\product\\product_demo.xml:\n  127  512MB RAM\n  128  HDD SH-1</field>\n  129:             <field name=\"default_code\">PCSC234</field>\n  130          </record>\n  131  \n  ...\n  175  Dual-core A5 with quad-core graphics\n  176  FaceTime HD Camera, 1.2 MP Photos</field>\n  177:             <field name=\"default_code\">A2323</field>\n  178              <field name=\"attribute_value_ids\" eval=\"[(6,0,[ref('product.product_attribute_value_1'), ref('product.product_attribute_value_3')])]\"/>\n  179          </record>\n  180          <record id=\"product_product_4b\" model=\"product.product\">\n  181:             <field name=\"default_code\">A2324</field>\n  182              <field name=\"product_tmpl_id\" ref=\"product_product_4_product_template\"/>\n  183              <field name=\"attribute_value_ids\" eval=\"[(6,0,[ref('product.product_attribute_value_1'), ref('product.product_attribute_value_4')])]\"/>\n  184          </record>\n  185          <record id=\"product_product_4c\" model=\"product.product\">\n  186:             <field name=\"default_code\">A2325</field>\n  187              <field name=\"product_tmpl_id\" ref=\"product_product_4_product_template\"/>\n  188              <field name=\"attribute_value_ids\" eval=\"[(6,0,[ref('product.product_attribute_value_2'), ref('product.product_attribute_value_3')])]\"/>\n  189          </record>\n  190          <record id=\"product_product_4d\" model=\"product.product\">\n  191:             <field name=\"default_code\">A2326</field>\n  192              <field name=\"product_tmpl_id\" ref=\"product_product_4_product_template\"/>\n  193              <field name=\"attribute_value_ids\" eval=\"[(6,0,[ref('product.product_attribute_value_2'), ref('product.product_attribute_value_4')])]\"/>\n  ...\n  236              <field name=\"description\">Custom computer assembled on order based on customer's requirement.</field>\n  237              <field name=\"description_sale\">Bose's smallest portable Bluetooth speaker</field>\n  238:             <field name=\"default_code\">B3423</field>\n  239          </record>\n  240  \n  ...\n  249              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  250              <field name=\"description\">Custom computer assembled on order based on customer's requirement.</field>\n  251:             <field name=\"default_code\">B3423</field>\n  252          </record>\n  253  \n  ...\n  260              <field name=\"uom_id\" ref=\"product_uom_unit\"/>\n  261              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  262:             <field name=\"default_code\">A1232</field>\n  263          </record>\n  264  \n  ...\n  271              <field name=\"uom_id\" ref=\"product_uom_unit\"/>\n  272              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  273:             <field name=\"default_code\">A8767</field>\n  274          </record>\n  275  \n  ...\n  282              <field name=\"uom_id\" ref=\"product_uom_unit\"/>\n  283              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  284:             <field name=\"default_code\">A1090</field>\n  285          </record>\n  286  \n  ...\n  293              <field name=\"uom_id\" ref=\"product_uom_unit\"/>\n  294              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  295:             <field name=\"default_code\">AK789</field>\n  296          </record>\n  297  \n  ...\n  304              <field name=\"uom_id\" ref=\"product_uom_unit\"/>\n  305              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  306:             <field name=\"default_code\">M-Opt</field>\n  307          </record>\n  308  \n  ...\n  317              <field name=\"uom_id\" ref=\"product_uom_unit\"/>\n  318              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  319:             <field name=\"default_code\">A6678</field>\n  320              <field name=\"attribute_value_ids\" eval=\"[(6,0,[ref('product.product_attribute_value_1')])]\"/>\n  321          </record>\n  322          <record id=\"product_product_11b\" model=\"product.product\">\n  323:             <field name=\"default_code\">A6679</field>\n  324              <field name=\"product_tmpl_id\" ref=\"product_product_11_product_template\"/>\n  325              <field name=\"attribute_value_ids\" eval=\"[(6,0,[ref('product.product_attribute_value_2')])]\"/>\n  ...\n  352              <field name=\"uom_id\" ref=\"product_uom_unit\"/>\n  353              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  354:             <field name=\"default_code\">M-Wir</field>\n  355          </record>\n  356  \n  ...\n  363              <field name=\"uom_id\" ref=\"product_uom_unit\"/>\n  364              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  365:             <field name=\"default_code\">RAM-SR5</field>\n  366          </record>\n  367  \n  ...\n  374              <field name=\"uom_id\" ref=\"product_uom_unit\"/>\n  375              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  376:             <field name=\"default_code\">RAM-SR2</field>\n  377          </record>\n  378  \n  ...\n  385              <field name=\"uom_id\" ref=\"product_uom_unit\"/>\n  386              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  387:             <field name=\"default_code\">RAM-SR3</field>\n  388          </record>\n  389  \n  ...\n  396              <field name=\"uom_id\" ref=\"product_uom_unit\"/>\n  397              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  398:             <field name=\"default_code\">C-Case</field>\n  399          </record>\n  400  \n  ...\n  407              <field name=\"uom_id\" ref=\"product_uom_unit\"/>\n  408              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  409:             <field name=\"default_code\">HDD-SH1</field>\n  410          </record>\n  411  \n  ...\n  418              <field name=\"uom_id\" ref=\"product_uom_unit\"/>\n  419              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  420:             <field name=\"default_code\">HDD-SH2</field>\n  421          </record>\n  422  \n  ...\n  430              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  431              <field name=\"description\">On demand hard-disk having capacity based on requirement.</field>\n  432:             <field name=\"default_code\">HDD-DEM</field>\n  433          </record>\n  434  \n  ...\n  441              <field name=\"uom_id\" ref=\"product_uom_unit\"/>\n  442              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  443:             <field name=\"default_code\">MBi9</field>\n  444          </record>\n  445  \n  ...\n  452              <field name=\"uom_id\" ref=\"product_uom_unit\"/>\n  453              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  454:             <field name=\"default_code\">MBa20</field>\n  455          </record>\n  456  \n  ...\n  463              <field name=\"uom_id\" ref=\"product_uom_unit\"/>\n  464              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  465:             <field name=\"default_code\">CPUi5</field>\n  466          </record>\n  467  \n  ...\n  474              <field name=\"uom_id\" ref=\"product_uom_unit\"/>\n  475              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  476:             <field name=\"default_code\">CPUa8</field>\n  477          </record>\n  478  \n  ...\n  485              <field name=\"uom_id\" ref=\"product_uom_unit\"/>\n  486              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  487:             <field name=\"default_code\">CARD</field>\n  488          </record>\n  489  \n  ...\n  500  Standard-1294P Processor\n  501  QWERTY keyboard</field>\n  502:             <field name=\"default_code\">LAP-E5</field>\n  503          </record>\n  504  \n  ...\n  515  Hi-Speed 234Q Processor\n  516  QWERTY keyboard</field>\n  517:             <field name=\"default_code\">LAP-S3</field>\n  518          </record>\n  519  \n  ...\n  527              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  528              <field name=\"description\">Custom Laptop based on customer's requirement.</field>\n  529:             <field name=\"default_code\">LAP-CUS</field>\n  530          </record>\n  531  \n  ...\n  538              <field name=\"uom_id\" ref=\"product_uom_unit\"/>\n  539              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  540:             <field name=\"default_code\">EXT-HDD</field>\n  541          </record>\n  542  \n  ...\n  550              <field name=\"uom_id\" ref=\"product_uom_unit\"/>\n  551              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  552:             <field name=\"default_code\">PD-SP2</field>\n  553          </record>\n  554  \n  ...\n  562              <field name=\"uom_id\" ref=\"product_uom_unit\"/>\n  563              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  564:             <field name=\"default_code\">PD-SP4</field>\n  565          </record>\n  566  \n  ...\n  574              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  575              <field name=\"description\">.</field>\n  576:             <field name=\"default_code\">MM-SPK</field>\n  577          </record>\n  578  \n  ...\n  586              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  587              <field name=\"description\">Hands free headset for laptop PC with in-line microphone and headphone plug.</field>\n  588:             <field name=\"default_code\">HEAD</field>\n  589          </record>\n  590  \n  ...\n  598              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  599              <field name=\"description\">Headset for laptop PC with USB connector.</field>\n  600:             <field name=\"default_code\">HEAD-USB</field>\n  601          </record>\n  602  \n  ...\n  610              <field name=\"uom_id\" ref=\"product_uom_unit\"/>\n  611              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  612:             <field name=\"default_code\">WCAM</field>\n  613          </record>\n  614  \n  ...\n  622              <field name=\"uom_id\" ref=\"product_uom_dozen\"/>\n  623              <field name=\"uom_po_id\" ref=\"product_uom_dozen\"/>\n  624:             <field name=\"default_code\">CD</field>\n  625          </record>\n  626  \n  ...\n  634              <field name=\"uom_id\" ref=\"product_uom_dozen\"/>\n  635              <field name=\"uom_po_id\" ref=\"product_uom_dozen\"/>\n  636:             <field name=\"default_code\">DVD</field>\n  637          </record>\n  638  \n  ...\n  647              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  648              <field name=\"description\">All in one hi-speed printer with fax and scanner.</field>\n  649:             <field name=\"default_code\">PRINT</field>\n  650          </record>\n  651  \n  ...\n  659              <field name=\"uom_id\" ref=\"product_uom_unit\"/>\n  660              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  661:             <field name=\"default_code\">INK</field>\n  662          </record>\n  663  \n  ...\n  671              <field name=\"uom_id\" ref=\"product_uom_unit\"/>\n  672              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  673:             <field name=\"default_code\">TONER</field>\n  674          </record>\n  675  \n  ...\n  683              <field name=\"uom_id\" ref=\"product_uom_unit\"/>\n  684              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  685:             <field name=\"default_code\">Win7</field>\n  686          </record>\n  687  \n  ...\n  695              <field name=\"uom_id\" ref=\"product_uom_unit\"/>\n  696              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  697:             <field name=\"default_code\">WServer</field>\n  698          </record>\n  699  \n  ...\n  708              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  709              <field name=\"description_sale\">Office Editing Software with word processing, spreadsheets, presentations, graphics, and databases...</field>\n  710:             <field name=\"default_code\">OSuite</field>\n  711          </record>\n  712  \n  ...\n  720              <field name=\"uom_id\" ref=\"product_uom_unit\"/>\n  721              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  722:             <field name=\"default_code\">Zplus</field>\n  723          </record>\n  724  \n  ...\n  733              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  734              <field name=\"description_sale\">Full featured image editing software.</field>\n  735:             <field name=\"default_code\">GRAPs/w</field>\n  736          </record>\n  737  \n  ...\n  745              <field name=\"uom_id\" ref=\"product_uom_unit\"/>\n  746              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  747:             <field name=\"default_code\">ROUT_430</field>\n  748          </record>\n  749  \n  ...\n  757              <field name=\"uom_id\" ref=\"product_uom_unit\"/>\n  758              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  759:             <field name=\"default_code\">DC</field>\n  760          </record>\n  761  \n  ...\n  769              <field name=\"uom_id\" ref=\"product_uom_unit\"/>\n  770              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  771:             <field name=\"default_code\">SW24</field>\n  772          </record>\n  773  \n  ...\n  781              <field name=\"uom_id\" ref=\"product_uom_unit\"/>\n  782              <field name=\"uom_po_id\" ref=\"product_uom_unit\"/>\n  783:             <field name=\"default_code\">ADPT</field>\n  784          </record>\n  785  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\product\\product_view.xml:\n   22                      <group  expand='0' string='Group by...'>\n   23                         <filter string='Category' domain=\"[]\" context=\"{'group_by' : 'categ_id'}\"/>\n   24:                        <filter string='Default Unit of Measure' icon=\"terp-mrp\" domain=\"[]\" context=\"{'group_by' : 'uom_id'}\"/>\n   25                         <filter string='Type' icon=\"terp-stock_symbol-selection\" domain=\"[]\" context=\"{'group_by' : 'type'}\"/>\n   26                      </group>\n   ..\n  152              <field name=\"arch\" type=\"xml\">\n  153                  <field name=\"name\" position=\"replace\">\n  154:                    <field name=\"name\" string=\"Product\" filter_domain=\"['|',('default_code','ilike',self),('name','ilike',self)]\"/>\n  155                  </field>\n  156                  <field name=\"product_variant_ids\" position=\"replace\">\n  ...\n  188              <field name=\"view_id\" ref=\"variants_template_tree_view\"/>\n  189              <field name=\"domain\">[('product_ids.product_tmpl_id', '=', active_id)]</field>\n  190:             <field name=\"context\">{'default_product_tmpl_id': active_id}</field>\n  191          </record>\n  192  \n  ...\n  214              <field name=\"view_mode\">tree,form,kanban</field>\n  215              <field name=\"view_type\">form</field>\n  216:             <field name=\"context\">{'search_default_product_tmpl_id': [active_id], 'default_product_tmpl_id': active_id}</field>\n  217              <field name=\"search_view_id\" ref=\"product_search_form_view\"/>\n  218              <field name=\"view_id\" eval=\"False\"/> <!-- Force empty -->\n  ...\n  241                  <field name=\"active\" position=\"after\">\n  242                      <field name=\"ean13\" attrs=\"{'invisible': [('product_variant_count', '>', 1)]}\"/>\n  243:                     <field name=\"default_code\" attrs=\"{'invisible': [('product_variant_count', '>', 1)]}\"/>\n  244                  </field>\n  245                  <xpath expr=\"//page[@string='Sales']\" position=\"after\">\n  ...\n  259                              <tree string=\"Variants\" editable=\"bottom\">\n  260                                  <field name=\"attribute_id\"/>\n  261:                                 <field name=\"value_ids\" widget=\"many2many_tags\" options=\"{'no_create_edit': True}\" domain=\"[('attribute_id', '=', attribute_id)]\" context=\"{'default_attribute_id': attribute_id}\"/>\n  262                              </tree>\n  263                          </field>\n  ...\n  309              <field name=\"view_type\">form</field>\n  310              <field name=\"view_id\" ref=\"product_template_kanban_view\"/>\n  311:             <field name=\"context\">{\"search_default_filter_to_sell\":1}</field>\n  312          </record>\n  313  \n  ...\n  327  \n  328                  <tree string=\"Product Variants\">\n  329:                     <field name=\"default_code\"/>\n  330                      <field name=\"name\"/>\n  331                      <field name=\"attribute_value_ids\" widget=\"many2many_tags\"/>\n  ...\n  352                  <field name=\"active\" position=\"after\">\n  353                      <field name=\"ean13\"/>\n  354:                     <field name=\"default_code\"/>\n  355                  </field>\n  356                  <field name=\"list_price\" position=\"attributes\">\n  ...\n  453              <field name=\"view_mode\">kanban,tree,form</field>\n  454              <field name=\"view_type\">form</field>\n  455:             <field name=\"context\">{\"search_default_filter_to_sell\":1}</field>\n  456              <field name=\"view_id\" ref=\"product_product_tree_view\"/>\n  457              <field name=\"search_view_id\" ref=\"product_search_form_view\"/>\n  ...\n  565              <field name=\"view_type\">form</field>\n  566              <field name=\"view_mode\">tree,form,kanban</field>\n  567:             <field name=\"context\">{'categ_id':active_id, 'search_default_categ_id':active_id}</field>\n  568          </record>\n  569          <record id=\"ir_product_category_open\" model=\"ir.values\">\n  ...\n  803                  <form string=\"Supplier Information\">\n  804                      <group col=\"4\">\n  805:                         <field name=\"name\" context=\"{'default_customer': 0, 'search_default_supplier': 1, 'default_supplier': 1}\"/>\n  806                          <field name=\"sequence\"/>\n  807                          <field name=\"product_name\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\product\\tests\\test_pricelist.py:\n   69          datacard_unit = self.product_product.browse(cr, uid, self.datacard_id, context=unit_context)\n   70          datacard_dozen = self.product_product.browse(cr, uid, self.datacard_id, context=dozen_context)\n   71:         # price_surcharge applies to product default UoM, here \"Units\", so surcharge will be multiplied\n   72          self.assertAlmostEqual(datacard_unit.price*12, datacard_dozen.price)\n   73  \n   74      def test_20_pricelist_uom(self):\n   75:         # Verify that the pricelist rules are correctly using the product's default UoM\n   76          # as reference, and return a result according to the target UoM (as specific in the context)\n   77          cr, uid = self.cr, self.uid\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\product\\wizard\\product_price.py:\n   35          'qty5': fields.integer('Quantity-5'),\n   36      }\n   37:     _defaults = {\n   38          'qty1': 1,\n   39          'qty2': 5,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\product_email_template\\data\\product_demo.xml:\n  304                          <li>Rapidly encode your financial operations or accounting transactions</li>\n  305                          <li>Carry out payments easily and adequately reconcile these payments with invoices</li>\n  306:                         <li>Quick creation of invoices with pre-set defaults on debtor/creditor and income/expense accounts</li>\n  307                          <li>Multiple manners to reconcile</li>\n  308                          <li>Configuration of accounts to ensure correct display in balance sheet and profit & loss statement</li>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\product_email_template\\views\\product_view.xml:\n   12                          context=\"{\n   13                              'form_view_ref':'product_email_template.email_template_form_simplified',\n   14:                             'default_model': 'product.template',\n   15:                             'default_subject': name,\n   16:                             'default_name': name,\n   17                          }\"\n   18                      />\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\product_expiry\\product_expiry.py:\n   65          context = dict(context or {})\n   66          context['product_id'] = obj.product_id.id\n   67:         self.write(cr, uid, [obj.id], self.default_get(cr, uid, towrite, context=context))\n   68          return newid\n   69  \n   70:     _defaults = {\n   71          'life_date': _get_date('life_time'),\n   72          'use_date': _get_date('use_time'),\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\product_expiry\\product_expiry_demo.xml:\n   15              <field name=\"removal_time\">6</field>\n   16              <field name=\"alert_time\">5</field>\n   17:             <field name=\"default_code\">JKB</field>\n   18              <field name=\"ean13\">3307630302014</field>\n   19              <field name=\"categ_id\" search=\"[]\" model=\"product.category\"/>\n   ..\n   44              <field name=\"removal_time\">20</field>\n   45              <field name=\"alert_time\">19</field>\n   46:             <field name=\"default_code\">FKS</field>\n   47              <field name=\"ean13\">3307631101876</field>\n   48              <field name=\"categ_id\" search=\"[]\" model=\"product.category\"/>\n   ..\n   72              <field name=\"removal_time\">20</field>\n   73              <field name=\"alert_time\">19</field>\n   74:             <field name=\"default_code\">PKB</field>\n   75              <field name=\"ean13\">3307631102323</field>\n   76              <field name=\"categ_id\" search=\"[]\" model=\"product.category\"/>\n   ..\n  100              <field name=\"removal_time\">20</field>\n  101              <field name=\"alert_time\">19</field>\n  102:             <field name=\"default_code\">LEX</field>\n  103              <field name=\"ean13\">3307630302045</field>\n  104              <field name=\"categ_id\" search=\"[]\" model=\"product.category\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\product_extended\\wizard\\wizard_price.py:\n   35          }\n   36  \n   37:     def default_get(self, cr, uid, fields, context=None):\n   38:         res = super(wizard_price, self).default_get(cr, uid, fields, context=context)\n   39          product_pool = self.pool.get('product.template')\n   40          product_obj = product_pool.browse(cr, uid, context.get('active_id', False))\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\product_margin\\product_margin_view.xml:\n   23                      <group col=\"4\">\n   24                          <field name=\"name\"/>\n   25:                         <field name=\"default_code\"/>\n   26                      </group>\n   27                      <notebook>\n   ..\n   68                  <tree string=\"Product Margins\">\n   69                      <field name=\"name\"/>\n   70:                     <field name=\"default_code\"/>\n   71                      <field name=\"sale_avg_price\"/>\n   72                      <field name=\"sale_num_invoiced\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\product_margin\\wizard\\product_margin.py:\n   39      }\n   40  \n   41:     _defaults = {\n   42          'from_date': time.strftime('%Y-01-01'),\n   43          'to_date': time.strftime('%Y-12-31'),\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\product_visible_discount\\product_visible_discount.py:\n   30          'visible_discount': fields.boolean('Visible Discount'),\n   31      }\n   32:     _defaults = {\n   33           'visible_discount': True,\n   34      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\project\\project.py:\n   39          'description': fields.text('Description'),\n   40          'sequence': fields.integer('Sequence'),\n   41:         'case_default': fields.boolean('Default for New Projects',\n   42:                         help=\"If you check this field, this stage will be proposed by default on each new project. It will not assign this stage to existing projects.\"),\n   43          'project_ids': fields.many2many('project.project', 'project_task_type_rel', 'type_id', 'project_id', 'Projects'),\n   44          'fold': fields.boolean('Folded in Kanban View',\n   ..\n   47      }\n   48  \n   49:     def _get_default_project_ids(self, cr, uid, ctx={}):\n   50:         project_id = self.pool['project.task']._get_default_project_id(cr, uid, context=ctx)\n   51          if project_id:\n   52              return [project_id]\n   53          return None\n   54  \n   55:     _defaults = {\n   56          'sequence': 1,\n   57:         'project_ids': _get_default_project_ids,\n   58      }\n   59      _order = 'sequence'\n   ..\n   72          alias_context = dict(context, alias_model_name='project.task')\n   73          return self.pool.get('mail.alias').migrate_to_alias(cr, self._name, self._table, super(project, self)._auto_init,\n   74:             'project.task', self._columns['alias_id'], 'id', alias_prefix='project+', alias_defaults={'project_id':'id'}, context=alias_context)\n   75  \n   76      def search(self, cr, user, args, offset=0, limit=None, order=None, context=None, count=False):\n   ..\n  218              'view_type': 'form',\n  219              'limit': 80,\n  220:             'context': \"{'default_res_model': '%s','default_res_id': %d}\" % (self._name, res_id)\n  221          }\n  222  \n  ...\n  291  \n  292      def _get_type_common(self, cr, uid, context):\n  293:         ids = self.pool.get('project.task.type').search(cr, uid, [('case_default','=',1)], context=context)\n  294          return ids\n  295  \n  296      _order = \"sequence, id\"\n  297:     _defaults = {\n  298          'active': True,\n  299          'type': 'contract',\n  ...\n  344          for task in proj.tasks:\n  345              # preserve task name and stage, normally altered during copy\n  346:             defaults = {'stage_id': task.stage_id.id,\n  347                          'name': task.name}\n  348:             map_task_id[task.id] =  task_obj.copy(cr, uid, task.id, defaults, context=context)\n  349          self.write(cr, uid, [new_project_id], {'tasks':[(6,0, map_task_id.values())]})\n  350          task_obj.duplicate_task(cr, uid, map_task_id, context=context)\n  351          return True\n  352  \n  353:     def copy(self, cr, uid, id, default=None, context=None):\n  354:         if default is None:\n  355:             default = {}\n  356          context = dict(context or {})\n  357          context['active_test'] = False\n  358          proj = self.browse(cr, uid, id, context=context)\n  359:         if not default.get('name'):\n  360:             default.update(name=_(\"%s (copy)\") % (proj.name))\n  361:         res = super(project, self).copy(cr, uid, id, default, context)\n  362          self.map_tasks(cr, uid, id, res, context=context)\n  363          return res\n  ...\n  377                  new_date_end = (datetime(*time.strptime(new_date_start,'%Y-%m-%d')[:3])+(end_date-start_date)).strftime('%Y-%m-%d')\n  378              context.update({'copy':True})\n  379:             new_id = self.copy(cr, uid, proj.id, default = {\n  380                                      'name':_(\"%s (copy)\") % (proj.name),\n  381                                      'state':'open',\n  ...\n  463          calendar_id = project.resource_calendar_id and project.resource_calendar_id.id or False\n  464          working_days = resource_pool.compute_working_calendar(cr, uid, calendar_id, context=context)\n  465:         # TODO: check if we need working_..., default values are ok.\n  466          puids = [x.id for x in project.members]\n  467          if project.user_id:\n  ...\n  536          project_id = super(project, self).create(cr, uid, vals, context=create_context)\n  537          project_rec = self.browse(cr, uid, project_id, context=context)\n  538:         self.pool.get('mail.alias').write(cr, uid, [project_rec.alias_id.id], {'alias_parent_thread_id': project_id, 'alias_defaults': {'project_id': project_id}}, context)\n  539          return project_id\n  540  \n  ...\n  569      }\n  570  \n  571:     def _get_default_partner(self, cr, uid, context=None):\n  572:         project_id = self._get_default_project_id(cr, uid, context)\n  573          if project_id:\n  574              project = self.pool.get('project.project').browse(cr, uid, project_id, context=context)\n  ...\n  577          return False\n  578  \n  579:     def _get_default_project_id(self, cr, uid, context=None):\n  580:         \"\"\" Gives default section by checking if present in the context \"\"\"\n  581          return (self._resolve_project_id_from_context(cr, uid, context=context) or False)\n  582  \n  583:     def _get_default_stage_id(self, cr, uid, context=None):\n  584:         \"\"\" Gives default stage_id \"\"\"\n  585:         project_id = self._get_default_project_id(cr, uid, context=context)\n  586          return self.stage_find(cr, uid, [], project_id, [('fold', '=', False)], context=context)\n  587  \n  588      def _resolve_project_id_from_context(self, cr, uid, context=None):\n  589:         \"\"\" Returns ID of project based on the value of 'default_project_id'\n  590              context key, or None if it cannot be resolved to a single\n  591              project.\n  ...\n  593          if context is None:\n  594              context = {}\n  595:         if type(context.get('default_project_id')) in (int, long):\n  596:             return context['default_project_id']\n  597:         if isinstance(context.get('default_project_id'), basestring):\n  598:             project_name = context['default_project_id']\n  599              project_ids = self.pool.get('project.project').name_search(cr, uid, name=project_name, context=context)\n  600              if len(project_ids) == 1:\n  ...\n  696                              'child_ids':  [(6,0,list(new_child_ids))]})\n  697  \n  698:     def copy_data(self, cr, uid, id, default=None, context=None):\n  699:         if default is None:\n  700:             default = {}\n  701:         if not default.get('name'):\n  702              current = self.browse(cr, uid, id, context=context)\n  703:             default['name'] = _(\"%s (copy)\") % current.name\n  704:         return super(task, self).copy_data(cr, uid, id, default, context)\n  705  \n  706      def _is_template(self, cr, uid, ids, field_name, arg, context=None):\n  ...\n  731                                           track_visibility='onchange',\n  732                                           help=\"A task's kanban state indicates special situations affecting it:\\n\"\n  733:                                               \" * Normal is the default situation\\n\"\n  734                                                \" * Blocked indicates something is preventing the progress of this task\\n\"\n  735                                                \" * Ready for next stage indicates the task is ready to be pulled to the next stage\",\n  ...\n  741          'date_deadline': fields.date('Deadline', select=True, copy=False),\n  742          'date_last_stage_update': fields.datetime('Last Stage Update', select=True, copy=False),\n  743:         'project_id': fields.many2one('project.project', 'Project', ondelete='set null', select=True, track_visibility='onchange', change_default=True),\n  744          'parent_ids': fields.many2many('project.task', 'project_task_parent_rel', 'task_id', 'parent_id', 'Parent Tasks'),\n  745          'child_ids': fields.many2many('project.task', 'project_task_parent_rel', 'parent_id', 'task_id', 'Delegated Tasks'),\n  ...\n  778          'user_email': fields.related('user_id', 'email', type='char', string='User Email', readonly=True),\n  779      }\n  780:     _defaults = {\n  781:         'stage_id': _get_default_stage_id,\n  782:         'project_id': _get_default_project_id,\n  783          'date_last_stage_update': fields.datetime.now,\n  784          'kanban_state': 'normal',\n  ...\n  789          'reviewer_id': lambda obj, cr, uid, ctx=None: uid,\n  790          'user_id': lambda obj, cr, uid, ctx=None: uid,\n  791:         'company_id': lambda self, cr, uid, ctx=None: self.pool.get('res.company')._company_default_get(cr, uid, 'project.task', context=ctx),\n  792:         'partner_id': lambda self, cr, uid, ctx=None: self._get_default_partner(cr, uid, context=ctx),\n  793      }\n  794      _order = \"priority desc, sequence, date_start, name, id\"\n  ...\n  874      def get_empty_list_help(self, cr, uid, help, context=None):\n  875          context = dict(context or {})\n  876:         context['empty_list_help_id'] = context.get('default_project_id')\n  877          context['empty_list_help_model'] = 'project.project'\n  878          context['empty_list_help_document_name'] = _(\"tasks\")\n  ...\n  887              Parameter of the stage search taken from the lead:\n  888              - section_id: if set, stages must belong to this section or\n  889:               be a default stage; if not set, stages must be default\n  890                stages\n  891          \"\"\"\n  ...\n  927          new_attachment_ids = []\n  928          for attachment_id in attachment_ids:\n  929:             new_attachment_ids.append(attachment.copy(cr, uid, attachment_id, default={'res_id': delegated_task_id}, context=context))\n  930          return new_attachment_ids\n  931  \n  ...\n  999          context = dict(context or {})\n 1000  \n 1001:         # for default stage\n 1002:         if vals.get('project_id') and not context.get('default_project_id'):\n 1003:             context['default_project_id'] = vals.get('project_id')\n 1004          # user_id change: update date_start\n 1005          if vals.get('user_id') and not vals.get('date_start'):\n ....\n 1093          if custom_values is None:\n 1094              custom_values = {}\n 1095:         defaults = {\n 1096              'name': msg.get('subject'),\n 1097              'planned_hours': 0.0,\n 1098          }\n 1099:         defaults.update(custom_values)\n 1100:         return super(task, self).message_new(cr, uid, msg, custom_values=defaults, context=context)\n 1101  \n 1102      def message_update(self, cr, uid, ids, msg, update_vals=None, context=None):\n ....\n 1132      }\n 1133  \n 1134:     _defaults = {\n 1135          'user_id': lambda obj, cr, uid, context: uid,\n 1136          'date': lambda *a: time.strftime('%Y-%m-%d %H:%M:%S')\n ....\n 1243  class project_project(osv.osv):\n 1244      _inherit = 'project.project'\n 1245:     _defaults = {\n 1246          'use_tasks': True\n 1247      }\n ....\n 1302          'user_id': fields.many2one('res.users', 'Responsible'),\n 1303      }\n 1304:     _defaults = {\n 1305          'date': fields.date.context_today,\n 1306      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\project\\project_data.xml:\n   24              <field name=\"type\">view</field>\n   25          </record>\n   26:         <function id=\"parent_project_default_set\" model=\"ir.values\" name=\"set\" eval=\"('default',False,'parent_id', [('project.project', False)], all_projects_account, True, False, False, False, True)\"/>\n   27  \n   28          <!-- Task Stages -->\n   ..\n   31              <field name=\"sequence\">1</field>\n   32              <field name=\"name\">Analysis</field>\n   33:             <field name=\"case_default\" eval=\"True\"/>\n   34          </record>\n   35          <record id=\"project_tt_specification\" model=\"project.task.type\">\n   36              <field name=\"sequence\">10</field>\n   37              <field name=\"name\">Specification</field>\n   38:             <field name=\"case_default\" eval=\"True\"/>\n   39          </record>\n   40          <record id=\"project_tt_design\" model=\"project.task.type\">\n   41              <field name=\"sequence\">11</field>\n   42              <field name=\"name\">Design</field>\n   43:             <field name=\"case_default\" eval=\"True\"/>\n   44          </record>\n   45          <record id=\"project_tt_development\" model=\"project.task.type\">\n   46              <field name=\"sequence\">12</field>\n   47              <field name=\"name\">Development</field>\n   48:             <field name=\"case_default\" eval=\"True\"/>\n   49          </record>\n   50          <record id=\"project_tt_testing\" model=\"project.task.type\">\n   51              <field name=\"sequence\">13</field>\n   52              <field name=\"name\">Testing</field>\n   53:             <field name=\"case_default\" eval=\"True\"/>\n   54          </record>\n   55          <record id=\"project_tt_merge\" model=\"project.task.type\">\n   56              <field name=\"sequence\">14</field>\n   57              <field name=\"name\">Merge</field>\n   58:             <field name=\"case_default\" eval=\"False\"/>\n   59              <field name=\"fold\" eval=\"True\"/>\n   60          </record>\n   ..\n   62              <field name=\"sequence\">20</field>\n   63              <field name=\"name\">Done</field>\n   64:             <field name=\"case_default\" eval=\"True\"/>\n   65              <field name=\"fold\" eval=\"True\"/>\n   66          </record>\n   ..\n   68              <field name=\"sequence\">30</field>\n   69              <field name=\"name\">Cancelled</field>\n   70:             <field name=\"case_default\" eval=\"True\"/>\n   71              <field name=\"fold\" eval=\"True\"/>\n   72          </record>\n   ..\n   78              <field name=\"name\">Task Created</field>\n   79              <field name=\"res_model\">project.task</field>\n   80:             <field name=\"default\" eval=\"False\"/>\n   81              <field name=\"hidden\" eval=\"True\"/>\n   82              <field name=\"description\">Task created</field>\n   ..\n   85              <field name=\"name\">Task Assigned</field>\n   86              <field name=\"res_model\">project.task</field>\n   87:             <field name=\"default\" eval=\"False\"/>\n   88              <field name=\"description\">Task Assigned</field>\n   89          </record>\n   ..\n   91              <field name=\"name\">Task Blocked</field>\n   92              <field name=\"res_model\">project.task</field>\n   93:             <field name=\"default\" eval=\"False\"/>\n   94              <field name=\"description\">Task blocked</field>\n   95          </record>\n   ..\n   97              <field name=\"name\">Task Ready for Next Stage</field>\n   98              <field name=\"res_model\">project.task</field>\n   99:             <field name=\"default\" eval=\"False\"/>\n  100              <field name=\"description\">Task Ready for Next Stage</field>\n  101          </record>\n  ...\n  103              <field name=\"name\">Stage Changed</field>\n  104              <field name=\"res_model\">project.task</field>\n  105:             <field name=\"default\" eval=\"False\"/>\n  106              <field name=\"description\">Stage changed</field>\n  107          </record>\n  ...\n  111              <field name=\"sequence\">10</field>\n  112              <field name=\"res_model\">project.project</field>\n  113:             <field name=\"default\" eval=\"False\"/>\n  114              <field name=\"parent_id\" eval=\"ref('mt_task_new')\"/>\n  115              <field name=\"relation_field\">project_id</field>\n  ...\n  119              <field name=\"sequence\">11</field>\n  120              <field name=\"res_model\">project.project</field>\n  121:             <field name=\"default\" eval=\"False\"/>\n  122              <field name=\"parent_id\" eval=\"ref('mt_task_assigned')\"/>\n  123              <field name=\"relation_field\">project_id</field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\project\\project_demo.xml:\n   39          </record>\n   40  \n   41:         <!-- We assign after so that default values applies -->\n   42          <record id=\"project_project_1\" model=\"project.project\">\n   43              <field name=\"type_ids\" eval=\"[(4, ref('project_tt_analysis')) ,(4,ref('project_tt_specification')), (4,ref('project_tt_development')), (4,ref('project_tt_testing')), (4,ref('project_tt_deployment'))]\"/>\n   ..\n   55          </record>\n   56  \n   57:         <!-- We assign after so that default values applies -->\n   58          <record id=\"project_project_2\" model=\"project.project\">\n   59              <field name=\"type_ids\" eval=\"[(4, ref('project_tt_specification')),(4,ref('project_tt_development')),(4,ref('project_tt_testing')),(4,ref('project_tt_merge')),(4,ref('project_tt_deployment'))]\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\project\\project_view.xml:\n   57              <field name=\"view_mode\">kanban,tree,form,calendar,gantt,graph</field>\n   58              <field name=\"context\">{\n   59:                 'search_default_project_id': [active_id],\n   60:                 'default_project_id': active_id,\n   61                  'active_test': False,\n   62              }</field>\n   ..\n  113                              <field name=\"user_id\" string=\"Project Manager\"\n  114                                      attrs=\"{'readonly':[('state','in',['close', 'cancelled'])]}\"\n  115:                                     context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'project.group_project_manager']}\"/>\n  116                              <newline/>\n  117                              <field name=\"partner_id\" on_change=\"onchange_partner_id(partner_id)\" string=\"Customer\"/>\n  ...\n  139                      <notebook>\n  140                          <page string=\"Team\" name=\"team\">\n  141:                             <field colspan=\"4\" name=\"members\" widget=\"many2many_kanban\" context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'project.group_project_user']}\">\n  142                                  <kanban quick_create=\"false\" create=\"true\" delete=\"true\">\n  143                                      <field name=\"name\"/>\n  ...\n  320              <field name=\"view_id\" ref=\"view_project_kanban\"/>\n  321              <field name=\"search_view_id\" ref=\"view_project_project_filter\"/>\n  322:             <field name=\"context\">{'search_default_Current': 1}</field>\n  323              <field name=\"help\" type=\"html\">\n  324                  <p class=\"oe_view_nocontent_create\">\n  ...\n  353                          <field name=\"hours\" widget=\"float_time\"/>\n  354                          <field name=\"date\"/>\n  355:                         <field name=\"user_id\" options='{\"no_open\": True}' context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'base.group_partner_manager', 'project.group_project_user']}\"/>\n  356                          <field name=\"company_id\" groups=\"base.group_multi_company\" widget=\"selection\"/>\n  357                      </group>\n  ...\n  368                      <field name=\"name\"/>\n  369                      <field name=\"hours\" widget=\"float_time\"/>\n  370:                     <field name=\"user_id\" context=\"{'default_groups_ref': ['base.group_user', 'project.group_project_user']}\"/>\n  371                  </tree>\n  372              </field>\n  ...\n  394                      <group>\n  395                          <group>\n  396:                             <field name=\"project_id\" domain=\"[('state','not in', ('close', 'cancelled'))]\" on_change=\"onchange_project(project_id)\" context=\"{'default_use_tasks':1}\"/>\n  397                              <field name=\"user_id\"\n  398                                  options='{\"no_open\": True}'\n  399:                                 context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'project.group_project_user']}\"/>\n  400                              <field name=\"reviewer_id\"\n  401                                  options='{\"no_open\": True}'\n  402:                                 context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'project.group_project_user']}\"/>\n  403                              <field name=\"planned_hours\" widget=\"float_time\"\n  404                                      groups=\"project.group_time_work_estimation_tasks\"\n  ...\n  420                                      <field name=\"hours\" widget=\"float_time\" sum=\"Spent Hours\"/>\n  421                                      <field name=\"date\"/>\n  422:                                     <field name=\"user_id\" context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'project.group_project_user']}\"/>\n  423                                  </tree>\n  424                              </field>\n  ...\n  485              <field name=\"model\">project.task</field>\n  486              <field name=\"arch\" type=\"xml\">\n  487:                 <kanban default_group_by=\"stage_id\" >\n  488                      <field name=\"color\"/>\n  489                      <field name=\"priority\"/>\n  ...\n  594              <field eval=\"2\" name=\"priority\"/>\n  595              <field name=\"arch\" type=\"xml\">\n  596:                 <gantt date_start=\"date_start\" date_stop=\"date_end\" progress=\"progress\" string=\"Tasks\" default_group_by=\"project_id\">\n  597                  </gantt>\n  598              </field>\n  ...\n  682                  <search string=\"Tasks Stages\">\n  683                     <field name=\"name\" string=\"Tasks Stages\"/>\n  684:                    <filter string=\"Common\" name=\"common\" domain=\"[('case_default', '=', 1)]\" help=\"Stages common to all projects\"/>\n  685                  </search>\n  686              </field>\n  ...\n  698                          </group>\n  699                          <group>\n  700:                             <field name=\"case_default\"/>\n  701                              <field name=\"fold\"/>\n  702                          </group>\n  ...\n  758  \n  759          <!-- User Form -->\n  760:         <act_window context=\"{'search_default_user_id': [active_id], 'default_user_id': active_id}\"\n  761                      id=\"act_res_users_2_project_task_opened\" name=\"Assigned Tasks\"\n  762                      res_model=\"project.task\" src_model=\"res.users\" view_mode=\"tree,form,gantt,calendar,graph\" view_type=\"form\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\project\\report\\project_cumulative.xml:\n   55              <field name=\"view_id\" ref=\"view_task_history_graph\"/>\n   56              <field name=\"filter\" eval=\"False\"/>\n   57:             <field name=\"context\">{\"search_default_open\":1, \"search_default_this_month\": 1}</field>\n   58          </record>\n   59          <menuitem action=\"action_view_task_history_cumulative\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\project\\res_config.py:\n   61      }\n   62  \n   63:     def get_default_time_unit(self, cr, uid, fields, context=None):\n   64          user = self.pool.get('res.users').browse(cr, uid, uid, context=context)\n   65          return {'time_unit': user.company_id.project_time_mode_id.id}\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\project\\res_partner.py:\n   37      }\n   38  \n   39:     def copy(self, cr, uid, record_id, default=None, context=None):\n   40:         if default is None:\n   41:             default = {}\n   42  \n   43:         default['task_ids'] = []\n   44          return super(res_partner, self).copy(\n   45:                 cr, uid, record_id, default=default, context=context)\n   46  \n   47  # vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\project\\res_partner_view.xml:\n   13                  <xpath expr=\"//div[@name='buttons']\" position=\"inside\">\n   14                      <button class=\"oe_inline oe_stat_button\" type=\"action\" name=\"%(action_view_task)d\" \n   15:                         context=\"{'search_default_partner_id': active_id, 'default_partner_id': active_id}\"\n   16                          icon=\"fa-tasks\">\n   17                          <field  string=\"Tasks\" name=\"task_count\" widget=\"statinfo\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\project\\wizard\\project_task_delegate.py:\n   49          \n   50  \n   51:     def default_get(self, cr, uid, fields, context=None):\n   52          \"\"\"\n   53:         This function gets default values\n   54          \"\"\"\n   55:         res = super(project_task_delegate, self).default_get(cr, uid, fields, context=context)\n   56          if context is None:\n   57              context = {}\n   ..\n   86  \n   87  \n   88:     _defaults = {\n   89         'planned_hours_me': 1.0,\n   90         'state': 'pending',\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\project\\wizard\\project_task_delegate_view.xml:\n   18                          </group>\n   19                          <group>\n   20:                             <field name=\"user_id\" context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'project.group_project_user']}\"/>\n   21                              <separator string=\"Validation Task\" colspan=\"2\"/>\n   22                              <field name=\"prefix\" string=\"Validation Task Title\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\project_issue\\project_issue.py:\n   26  from openerp import tools\n   27  from openerp.osv import fields, osv, orm\n   28: from openerp.tools import DEFAULT_SERVER_DATETIME_FORMAT\n   29  from openerp.tools import html2plaintext\n   30  from openerp.tools.translate import _\n   ..\n   38          'active': fields.boolean('Active', required=False),\n   39      }\n   40:     _defaults = {\n   41          'active': 1,\n   42      }\n   ..\n   64      }\n   65  \n   66:     def _get_default_partner(self, cr, uid, context=None):\n   67:         project_id = self._get_default_project_id(cr, uid, context)\n   68          if project_id:\n   69              project = self.pool.get('project.project').browse(cr, uid, project_id, context=context)\n   ..\n   72          return False\n   73  \n   74:     def _get_default_project_id(self, cr, uid, context=None):\n   75:         \"\"\" Gives default project by checking if present in the context \"\"\"\n   76          return self._resolve_project_id_from_context(cr, uid, context=context)\n   77  \n   78:     def _get_default_stage_id(self, cr, uid, context=None):\n   79:         \"\"\" Gives default stage_id \"\"\"\n   80:         project_id = self._get_default_project_id(cr, uid, context=context)\n   81          return self.stage_find(cr, uid, [], project_id, [('fold', '=', False)], context=context)\n   82  \n   83      def _resolve_project_id_from_context(self, cr, uid, context=None):\n   84:         \"\"\" Returns ID of project based on the value of 'default_project_id'\n   85              context key, or None if it cannot be resolved to a single\n   86              project.\n   ..\n   88          if context is None:\n   89              context = {}\n   90:         if type(context.get('default_project_id')) in (int, long):\n   91:             return context.get('default_project_id')\n   92:         if isinstance(context.get('default_project_id'), basestring):\n   93:             project_name = context['default_project_id']\n   94              project_ids = self.pool.get('project.project').name_search(cr, uid, name=project_name, context=context)\n   95              if len(project_ids) == 1:\n   ..\n  106          # retrieve section_id from the context and write the domain\n  107          # - ('id', 'in', 'ids'): add columns that should be present\n  108:         # - OR ('case_default', '=', True), ('fold', '=', False): add default columns that are not folded\n  109          # - OR ('project_ids', 'in', project_id), ('fold', '=', False) if project_id: add project columns that are not folded\n  110          search_domain = []\n  ...\n  141                  'days_since_creation': 0.0, 'inactivity_days': 0.0,\n  142              }\n  143:             # if the working hours on the project are not defined, use default ones (8 -> 12 and 13 -> 17 * 5), represented by None\n  144              calendar_id = None\n  145              if issue.project_id and issue.project_id.resource_calendar_id:\n  146                  calendar_id = issue.project_id.resource_calendar_id.id\n  147  \n  148:             dt_create_date = datetime.strptime(issue.create_date, DEFAULT_SERVER_DATETIME_FORMAT)\n  149  \n  150              if issue.date_open:\n  151:                 dt_date_open = datetime.strptime(issue.date_open, DEFAULT_SERVER_DATETIME_FORMAT)\n  152                  values['day_open'] = (dt_date_open - dt_create_date).total_seconds() / (24.0 * 3600)\n  153                  values['working_hours_open'] = Calendar._interval_hours_get(\n  ...\n  157  \n  158              if issue.date_closed:\n  159:                 dt_date_closed = datetime.strptime(issue.date_closed, DEFAULT_SERVER_DATETIME_FORMAT)\n  160                  values['day_close'] = (dt_date_closed - dt_create_date).total_seconds() / (24.0 * 3600)\n  161                  values['working_hours_close'] = Calendar._interval_hours_get(\n  ...\n  167              values['days_since_creation'] = days_since_creation.days\n  168              if issue.date_action_last:\n  169:                 inactive_days = datetime.today() - datetime.strptime(issue.date_action_last, DEFAULT_SERVER_DATETIME_FORMAT)\n  170              elif issue.date_last_stage_update:\n  171:                 inactive_days = datetime.today() - datetime.strptime(issue.date_last_stage_update, DEFAULT_SERVER_DATETIME_FORMAT)\n  172              else:\n  173:                 inactive_days = datetime.today() - datetime.strptime(issue.create_date, DEFAULT_SERVER_DATETIME_FORMAT)\n  174              values['inactivity_days'] = inactive_days.days\n  175  \n  ...\n  230                                           track_visibility='onchange',\n  231                                           help=\"A Issue's kanban state indicates special situations affecting it:\\n\"\n  232:                                               \" * Normal is the default situation\\n\"\n  233                                                \" * Blocked indicates something is preventing the progress of this issue\\n\"\n  234                                                \" * Ready for next stage indicates the issue is ready to be pulled to the next stage\",\n  ...\n  278      }\n  279  \n  280:     _defaults = {\n  281          'active': 1,\n  282:         'stage_id': lambda s, cr, uid, c: s._get_default_stage_id(cr, uid, c),\n  283:         'company_id': lambda s, cr, uid, c: s.pool.get('res.company')._company_default_get(cr, uid, 'crm.helpdesk', context=c),\n  284          'priority': '0',\n  285          'kanban_state': 'normal',\n  ...\n  292      }\n  293  \n  294:     def copy(self, cr, uid, id, default=None, context=None):\n  295          issue = self.read(cr, uid, [id], ['name'], context=context)[0]\n  296:         if not default:\n  297:             default = {}\n  298:         default = default.copy()\n  299:         default.update(name=_('%s (copy)') % (issue['name']))\n  300:         return super(project_issue, self).copy(cr, uid, id, default=default, context=context)\n  301  \n  302      def create(self, cr, uid, vals, context=None):\n  303          context = dict(context or {})\n  304:         if vals.get('project_id') and not context.get('default_project_id'):\n  305:             context['default_project_id'] = vals.get('project_id')\n  306          if vals.get('user_id'):\n  307              vals['date_open'] = fields.datetime.now()\n  ...\n  345          context = dict(context or {})\n  346          context['empty_list_help_model'] = 'project.project'\n  347:         context['empty_list_help_id'] = context.get('default_project_id')\n  348          context['empty_list_help_document_name'] = _(\"issues\")\n  349          return super(project_issue, self).get_empty_list_help(cr, uid, help, context=context)\n  ...\n  366              - type: stage type must be the same or 'both'\n  367              - section_id: if set, stages must belong to this section or\n  368:               be a default case\n  369          \"\"\"\n  370          if isinstance(cases, (int, long)):\n  ...\n  377              if task.project_id:\n  378                  section_ids.append(task.project_id.id)\n  379:         # OR all section_ids and OR with case_default\n  380          search_domain = []\n  381          if section_ids:\n  ...\n  437              custom_values = {}\n  438          context = dict(context or {}, state_to='draft')\n  439:         defaults = {\n  440              'name':  msg.get('subject') or _(\"No Subject\"),\n  441              'email_from': msg.get('from'),\n  ...\n  444              'user_id': False,\n  445          }\n  446:         defaults.update(custom_values)\n  447:         res_id = super(project_issue, self).message_new(cr, uid, msg, custom_values=defaults, context=context)\n  448          return res_id\n  449  \n  ...\n  519      _inherit = 'project.project'\n  520  \n  521:     _defaults = {\n  522          'use_issues': True\n  523      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\project_issue\\project_issue_data.xml:\n   33              <field name=\"name\">Issue Created</field>\n   34              <field name=\"res_model\">project.issue</field>\n   35:             <field name=\"default\" eval=\"False\"/>\n   36              <field name=\"hidden\" eval=\"True\"/>\n   37              <field name=\"description\">Issue created</field>\n   ..\n   40              <field name=\"name\">Issue Assigned</field>\n   41              <field name=\"res_model\">project.issue</field>\n   42:             <field name=\"default\" eval=\"False\"/>\n   43              <field name=\"description\">Issue assigned</field>\n   44          </record>\n   ..\n   46              <field name=\"name\">Issue Blocked</field>\n   47              <field name=\"res_model\">project.issue</field>\n   48:             <field name=\"default\" eval=\"False\"/>\n   49              <field name=\"description\">Issue blocked</field>\n   50          </record>\n   ..\n   52              <field name=\"name\">Issue Ready for Next Stage</field>\n   53              <field name=\"res_model\">project.issue</field>\n   54:             <field name=\"default\" eval=\"False\"/>\n   55              <field name=\"description\">Issue Ready for Next Stage</field>\n   56          </record>\n   ..\n   58              <field name=\"name\">Stage Changed</field>\n   59              <field name=\"res_model\">project.issue</field>\n   60:             <field name=\"default\" eval=\"False\"/>\n   61              <field name=\"description\">Stage changed</field>\n   62          </record>\n   ..\n   66              <field name=\"sequence\">20</field>\n   67              <field name=\"res_model\">project.project</field>\n   68:             <field name=\"default\" eval=\"False\"/>\n   69              <field name=\"parent_id\" eval=\"ref('mt_issue_new')\"/>\n   70              <field name=\"relation_field\">project_id</field>\n   ..\n   74              <field name=\"sequence\">21</field>\n   75              <field name=\"res_model\">project.project</field>\n   76:             <field name=\"default\" eval=\"False\"/>\n   77              <field name=\"parent_id\" eval=\"ref('mt_issue_assigned')\"/>\n   78              <field name=\"relation_field\">project_id</field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\project_issue\\project_issue_view.xml:\n   65                          <group>\n   66                              <field name=\"user_id\"\n   67:                                 context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'project.group_project_user']}\"/>\n   68                              <field name=\"partner_id\" on_change=\"onchange_partner_id(partner_id)\"/>\n   69                              <field name=\"email_from\"/>\n   70                              <label for=\"project_id\"/>\n   71                              <div>\n   72:                                 <field name=\"project_id\" on_change=\"on_change_project(project_id)\" class=\"oe_inline\" context=\"{'default_use_issues':1}\"/>\n   73                                  <button name=\"case_escalate\" string=\"⇒ Escalate\" type=\"object\" class=\"oe_link\"\n   74                                          groups=\"base.group_user\"/>\n   ..\n   81                              <label for=\"task_id\" groups=\"base.group_user\"/>\n   82                              <div groups=\"base.group_user\">\n   83:                                 <field name=\"task_id\" on_change=\"onchange_task_id(task_id)\" class=\"oe_inline\" context=\"{'default_project_id':project_id}\"/>\n   84                                  <field name=\"progress\" widget=\"progressbar\" attrs=\"{'invisible':[('task_id','=',False)]}\" class=\"oe_inline\"/>\n   85                              </div>\n   ..\n  189              <field name=\"model\">project.issue</field>\n  190              <field name=\"arch\" type=\"xml\">\n  191:                 <kanban default_group_by=\"stage_id\">\n  192                      <field name=\"stage_id\"/>\n  193                      <field name=\"color\"/>\n  ...\n  276              <field name=\"view_mode\">kanban,tree,form,calendar,graph</field>\n  277              <field name=\"context\">{\n  278:                     'search_default_project_id': [active_id],\n  279:                     'default_project_id': active_id,\n  280                  }\n  281              </field>\n  ...\n  372                  <xpath expr=\"//div[@name='buttons']\" position=\"inside\">\n  373                      <button class=\"oe_inline oe_stat_button\" type=\"action\" name=\"%(action_view_issues)d\"\n  374:                         context=\"{'search_default_partner_id': active_id, 'default_partner_id': active_id}\"\n  375                          attrs=\"{'invisible': [('customer', '=', False)]}\"\n  376                          icon=\"fa-bug\" groups=\"project.group_project_user\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\project_issue\\report\\project_issue_report_view.xml:\n   61              <field name=\"view_type\">form</field>\n   62                <field name=\"view_mode\">graph</field>\n   63:               <field name=\"context\">{'search_default_year':1,'search_default_This Month':1,'search_default_project':1,'group_by_no_leaf':1,'group_by':[]}</field>\n   64              <field name=\"view_id\" ref=\"view_project_issue_report_graph\"/>\n   65              <field name=\"search_view_id\" ref=\"view_project_issue_report_filter\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\project_issue_sheet\\project_issue_sheet_view.xml:\n   20                  <xpath expr=\"//notebook/page[@string='Extra Info']\" position=\"before\">\n   21                      <page string=\"Worklogs\">\n   22:                         <field name=\"timesheet_ids\" colspan=\"4\" nolabel=\"1\" context=\"{'default_user_id' : uid, 'default_account_id' : analytic_account_id}\"\n   23                                  groups=\"base.group_user\">\n   24                              <tree editable=\"top\" string=\"Timesheets\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\project_timesheet\\project_timesheet.py:\n   40          return res\n   41  \n   42:     _defaults = {\n   43          'use_timesheets': True,\n   44      }\n   ..\n   51          project = self.browse(cr, uid, ids[0], context)\n   52          view_context = {\n   53:             'search_default_account_id': [project.analytic_account_id.id],\n   54:             'default_account_id': project.analytic_account_id.id,\n   55          }\n   56          help = _(\"\"\"<p class=\"oe_view_nocontent_create\">Record your timesheets for the project '%s'.</p>\"\"\") % (project.name,)\n   ..\n  119          vals_line['product_id'] = result['product_id']\n  120          if vals.get('date'):\n  121:             timestamp = datetime.datetime.strptime(vals['date'], tools.DEFAULT_SERVER_DATETIME_FORMAT)\n  122              ts = fields.datetime.context_timestamp(cr, uid, timestamp, context)\n  123:             vals_line['date'] = ts.strftime(tools.DEFAULT_SERVER_DATE_FORMAT)\n  124  \n  125          # Calculate quantity based on employee's product's uom\n  126          vals_line['unit_amount'] = vals['hours']\n  127  \n  128:         default_uom = self.pool['res.users'].browse(cr, uid, uid, context=context).company_id.project_time_mode_id.id\n  129:         if result['product_uom_id'] != default_uom:\n  130:             vals_line['unit_amount'] = self.pool['product.uom']._compute_qty(cr, uid, default_uom, vals['hours'], result['product_uom_id'])\n  131          acc_id = task_obj.project_id and task_obj.project_id.analytic_account_id.id or acc_id\n  132          if acc_id:\n  ...\n  196                          vals_line[field] = details[field]\n  197  \n  198:                 # Check if user's default UOM differs from product's UOM\n  199:                 user_default_uom_id = self.pool.get('res.users').browse(cr, uid, uid).company_id.project_time_mode_id.id\n  200:                 if details.get('product_uom_id', False) and details['product_uom_id'] != user_default_uom_id:\n  201:                     vals_line['unit_amount'] = uom_obj._compute_qty(cr, uid, user_default_uom_id, vals['hours'], details['product_uom_id'])\n  202  \n  203                  # Compute based on pricetype\n  ...\n  308          return False\n  309     \n  310:    _defaults = {'product_id': get_product,}\n  311     \n  312     def on_change_account_id(self, cr, uid, ids, account_id):\n  ...\n  314         if not account_id:\n  315             return res\n  316:        res.setdefault('value',{})\n  317         acc = self.pool.get('account.analytic.account').browse(cr, uid, account_id)\n  318         st = acc.to_invoice.id\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\project_timesheet\\project_timesheet_view.xml:\n   85              <field name=\"view_mode\">tree,form</field>\n   86              <field name=\"domain\">[]</field>\n   87:             <field name=\"context\">{'search_default_to_invoice': 1}</field>\n   88              <field name=\"view_id\" ref=\"view_account_analytic_line_tree_inherit_account_id\"/>\n   89              <field name=\"help\" type=\"html\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\project_timesheet\\report\\task_report_view.xml:\n   43              <field name=\"view_type\">form</field>\n   44              <field name=\"view_mode\">graph</field>\n   45:             <field name=\"context\">{'search_default_year':1,'search_default_month':1, 'search_default_group_user_id':1}</field>\n   46          </record>\n   47          <menuitem id=\"menu_timesheet_task_user\" parent=\"hr.menu_hr_reporting_timesheet\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\purchase\\company.py:\n   32                   \"to cope with unexpected supplier delays.\"),\n   33      }\n   34:     _defaults = {\n   35          'po_lead': lambda *a: 1.0,\n   36      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\purchase\\edi\\purchase_order_action_data.xml:\n   10              <field name=\"view_id\" ref=\"email_template.email_template_tree\" />\n   11              <field name=\"search_view_id\" ref=\"email_template.view_email_template_search\"/>\n   12:             <field name=\"context\" eval=\"{'search_default_model_id': ref('purchase.model_purchase_order')}\"/>\n   13          </record>\n   14      </data>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\purchase\\partner.py:\n   46            domain=[('type','=','purchase')],\n   47            string=\"Purchase Pricelist\", \n   48:           help=\"This pricelist will be used, instead of the default one, for purchases from the current partner\"),\n   49          'purchase_order_count': fields.function(_purchase_invoice_count, string='# of Purchase Order', type='integer', multi=\"count\"),\n   50          'supplier_invoice_count': fields.function(_purchase_invoice_count, string='# Supplier Invoices', type='integer', multi=\"count\"),\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\purchase\\partner_view.xml:\n   19              <field name=\"view_type\">form</field>\n   20              <field name=\"view_mode\">tree,form,graph</field>\n   21:             <field name=\"context\">{'search_default_partner_id': active_id}</field>\n   22              <field name=\"groups_id\" eval=\"[(4, ref('purchase.group_purchase_user'))]\"/>\n   23              <field name=\"help\" type=\"html\">\n   ..\n   57              <field name=\"view_mode\">tree,form,graph</field>\n   58              <field name=\"domain\">[('type','=','in_invoice')]</field>\n   59:             <field name=\"context\">{'search_default_partner_id': active_id, 'default_type': 'in_invoice', 'type': 'in_invoice', 'journal_type': 'purchase'}</field>\n   60              <field name=\"help\" type=\"html\">\n   61                  <p class=\"oe_view_nocontent_create\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\purchase\\purchase.py:\n   30  import openerp.addons.decimal_precision as dp\n   31  from openerp.osv.orm import browse_record_list, browse_record, browse_null\n   32: from openerp.tools import DEFAULT_SERVER_DATE_FORMAT, DEFAULT_SERVER_DATETIME_FORMAT, DATETIME_FORMATS_MAP\n   33  from openerp.tools.float_utils import float_compare\n   34  \n   ..\n  220          'date_order':fields.datetime('Order Date', required=True, states={'confirmed':[('readonly',True)],\n  221                                                                        'approved':[('readonly',True)]},\n  222:                                  select=True, help=\"Depicts the date where the Quotation should be validated and converted into a Purchase Order, by default it's the creation date.\",\n  223                                   copy=False),\n  224          'date_approve':fields.date('Date Approved', readonly=1, select=True, copy=False,\n  225                                     help=\"Date on which purchase order has been approved\"),\n  226          'partner_id':fields.many2one('res.partner', 'Supplier', required=True, states={'confirmed':[('readonly',True)], 'approved':[('readonly',True)],'done':[('readonly',True)]},\n  227:             change_default=True, track_visibility='always'),\n  228          'dest_address_id':fields.many2one('res.partner', 'Customer Address (Direct Delivery)',\n  229              states={'confirmed':[('readonly',True)], 'approved':[('readonly',True)],'done':[('readonly',True)]},\n  ...\n  294          'picking_type_id': fields.many2one('stock.picking.type', 'Deliver To', help=\"This will determine picking type of incoming shipment\", required=True,\n  295                                             states={'confirmed': [('readonly', True)], 'approved': [('readonly', True)], 'done': [('readonly', True)]}),\n  296:         'related_location_id': fields.related('picking_type_id', 'default_location_dest_id', type='many2one', relation='stock.location', string=\"Related location\", store=True),\n  297          'related_usage': fields.related('location_id', 'usage', type='char'),\n  298          'shipment_count': fields.function(_count_all, type='integer', string='Incoming Shipments', multi=True),\n  299          'invoice_count': fields.function(_count_all, type='integer', string='Invoices', multi=True)\n  300      }\n  301:     _defaults = {\n  302          'date_order': fields.datetime.now,\n  303          'state': 'draft',\n  ...\n  307          'invoiced': 0,\n  308          'pricelist_id': lambda self, cr, uid, context: context.get('partner_id', False) and self.pool.get('res.partner').browse(cr, uid, context['partner_id']).property_product_pricelist_purchase.id,\n  309:         'company_id': lambda self, cr, uid, c: self.pool.get('res.company')._company_default_get(cr, uid, 'purchase.order', context=c),\n  310          'journal_id': _get_journal,\n  311          'currency_id': lambda self, cr, uid, context: self.pool.get('res.users').browse(cr, uid, uid, context=context).company_id.currency_id.id,\n  ...\n  380          if picking_type_id:\n  381              picktype = self.pool.get(\"stock.picking.type\").browse(cr, uid, picking_type_id, context=context)\n  382:             if picktype.default_location_dest_id:\n  383:                 value.update({'location_id': picktype.default_location_dest_id.id, 'related_usage': picktype.default_location_dest_id.usage})\n  384:             value.update({'related_location_id': picktype.default_location_dest_id.id})\n  385          return {'value': value}\n  386  \n  ...\n  392                  'payment_term_id': False,\n  393                  }}\n  394:         supplier_address = partner.address_get(cr, uid, [partner_id], ['default'], context=context)\n  395          supplier = partner.browse(cr, uid, partner_id, context=context)\n  396          return {'value': {\n  ...\n  468              pick_ids += [picking.id for picking in po.picking_ids]\n  469  \n  470:         #override the context to get rid of the default filtering on picking type\n  471          action['context'] = {}\n  472          #choose the view_mode accordingly\n  ...\n  488      def wkf_send_rfq(self, cr, uid, ids, context=None):\n  489          '''\n  490:         This function opens a window to compose an email, with the edi purchase template message loaded by default\n  491          '''\n  492          if not context:\n  ...\n  506          ctx = dict(context)\n  507          ctx.update({\n  508:             'default_model': 'purchase.order',\n  509:             'default_res_id': ids[0],\n  510:             'default_use_template': bool(template_id),\n  511:             'default_template_id': template_id,\n  512:             'default_composition_mode': 'comment',\n  513          })\n  514          return {\n  ...\n  769  \n  770          If ``picking_id`` is provided, the stock moves will be added to it, otherwise a standard\n  771:         incoming picking will be created to wrap the stock moves (default behavior of the stock.move)\n  772  \n  773          Modules that wish to customize the procurements or partition the stock moves over\n  ...\n  897          for porder in [order for order in self.browse(cr, uid, ids, context=context) if order.state == 'draft']:\n  898              order_key = make_key(porder, ('partner_id', 'location_id', 'pricelist_id'))\n  899:             new_order = new_orders.setdefault(order_key, ({}, []))\n  900              new_order[1].append(porder.id)\n  901              order_infos = new_order[0]\n  ...\n  980          'taxes_id': fields.many2many('account.tax', 'purchase_order_taxe', 'ord_id', 'tax_id', 'Taxes'),\n  981          'product_uom': fields.many2one('product.uom', 'Product Unit of Measure', required=True),\n  982:         'product_id': fields.many2one('product.product', 'Product', domain=[('purchase_ok','=',True)], change_default=True),\n  983          'move_ids': fields.one2many('stock.move', 'purchase_line_id', 'Reservation', readonly=True, ondelete='set null'),\n  984          'price_unit': fields.float('Unit Price', required=True, digits_compute= dp.get_precision('Product Price')),\n  ...\n 1001          'procurement_ids': fields.one2many('procurement.order', 'purchase_line_id', string='Associated procurements'),\n 1002      }\n 1003:     _defaults = {\n 1004          'product_uom' : _get_uom_id,\n 1005          'product_qty': lambda *a: 1.0,\n ....\n 1042  \n 1043             :param browse_record | False supplier_info: product.supplierinfo, used to\n 1044:                determine delivery delay (if False, default delay = 0)\n 1045             :param str date_order_str: date of order field, as a string in\n 1046:                DEFAULT_SERVER_DATETIME_FORMAT\n 1047             :rtype: datetime\n 1048             :return: desired Schedule Date for the PO line\n 1049          \"\"\"\n 1050          supplier_delay = int(supplier_info.delay) if supplier_info else 0\n 1051:         return datetime.strptime(date_order_str, DEFAULT_SERVER_DATETIME_FORMAT) + relativedelta(days=supplier_delay)\n 1052  \n 1053      def action_cancel(self, cr, uid, ids, context=None):\n ....\n 1134                          res['warning'] = {'title': _('Warning!'), 'message': _('The selected supplier has a minimal quantity set to %s %s, you should not purchase less.') % (supplierinfo.min_qty, supplierinfo.product_uom.name)}\n 1135                      qty = min_qty\n 1136:         dt = self._get_date_planned(cr, uid, supplierinfo, date_order, context=context).strftime(DEFAULT_SERVER_DATETIME_FORMAT)\n 1137          qty = qty or 1.0\n 1138          res['value'].update({'date_planned': date_planned or dt})\n ....\n 1144              # - determine price_unit and taxes_id\n 1145              if pricelist_id:\n 1146:                 date_order_str = datetime.strptime(date_order, DEFAULT_SERVER_DATETIME_FORMAT).strftime(DEFAULT_SERVER_DATE_FORMAT)\n 1147                  price = product_pricelist.price_get(cr, uid, [pricelist_id],\n 1148                          product.id, qty or 1.0, partner_id or False, {'uom': uom_id, 'date': date_order_str})[pricelist_id]\n ....\n 1218                  message = _('No supplier defined for this product !')\n 1219              elif not partner:\n 1220:                 message = _('No default supplier defined for this product')\n 1221              elif not partner_obj.address_get(cr, uid, [partner.id], ['delivery'])['delivery']:\n 1222                  message = _('No address defined for the supplier')\n ....\n 1259             :return: the desired Schedule Date for the PO lines\n 1260          \"\"\"\n 1261:         procurement_date_planned = datetime.strptime(procurement.date_planned, DEFAULT_SERVER_DATETIME_FORMAT)\n 1262          schedule_date = (procurement_date_planned - relativedelta(days=company.po_lead))\n 1263          return schedule_date\n ....\n 1312              'product_uom': uom_id,\n 1313              'price_unit': price or 0.0,\n 1314:             'date_planned': schedule_date.strftime(DEFAULT_SERVER_DATETIME_FORMAT),\n 1315              'taxes_id': [(6, 0, taxes)],\n 1316          }\n ....\n 1347                      po_rec = po_obj.browse(cr, uid, po_id, context=context)\n 1348                      #if the product has to be ordered earlier those in the existing PO, we replace the purchase date on the order to avoid ordering it too late\n 1349:                     if datetime.strptime(po_rec.date_order, DEFAULT_SERVER_DATETIME_FORMAT) > purchase_date:\n 1350:                         po_obj.write(cr, uid, [po_id], {'date_order': purchase_date.strftime(DEFAULT_SERVER_DATETIME_FORMAT)}, context=context)\n 1351                      #look for any other PO line in the selected PO with same product and UoM to sum quantities instead of creating a new po line\n 1352                      available_po_line_ids = po_line_obj.search(cr, uid, [('order_id', '=', po_id), ('product_id', '=', line_vals['product_id']), ('product_uom', '=', line_vals['product_uom'])], context=context)\n ....\n 1370                          'pricelist_id': partner.property_product_pricelist_purchase.id,\n 1371                          'currency_id': partner.property_product_pricelist_purchase and partner.property_product_pricelist_purchase.currency_id.id or procurement.company_id.currency_id.id,\n 1372:                         'date_order': purchase_date.strftime(DEFAULT_SERVER_DATETIME_FORMAT),\n 1373                          'company_id': procurement.company_id.id,\n 1374                          'fiscal_position': partner.property_account_position and partner.property_account_position.id or False,\n ....\n 1424      }\n 1425  \n 1426:     _defaults = {\n 1427          'purchase_ok': 1,\n 1428          'route_ids': _get_buy_route,\n ....\n 1457      def send_mail(self, cr, uid, ids, context=None):\n 1458          context = context or {}\n 1459:         if context.get('default_model') == 'purchase.order' and context.get('default_res_id'):\n 1460              context = dict(context, mail_post_autofollow=True)\n 1461:             self.pool.get('purchase.order').signal_workflow(cr, uid, [context['default_res_id']], 'send_rfq')\n 1462          return super(mail_compose_message, self).send_mail(cr, uid, ids, context=context)\n 1463  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\purchase\\purchase_data.xml:\n   25          \n   26          <record id=\"list0\" model=\"product.pricelist\">\n   27:             <field name=\"name\">Default Purchase Pricelist</field>\n   28              <field name=\"type\">purchase</field>\n   29          </record>\n   30          <record id=\"ver0\" model=\"product.pricelist.version\">\n   31              <field name=\"pricelist_id\" ref=\"list0\"/>\n   32:             <field name=\"name\">Default Purchase Pricelist Version</field>\n   33          </record>\n   34          <record id=\"item0\" model=\"product.pricelist.item\">\n   35              <field name=\"price_version_id\" ref=\"ver0\"/>\n   36              <field name=\"base\" ref=\"product.standard_price\"/>\n   37:             <field name=\"name\">Default Purchase Pricelist Line</field>\n   38          </record>\n   39          \n   ..\n   47          <record id=\"mt_rfq_confirmed\" model=\"mail.message.subtype\">\n   48              <field name=\"name\">RFQ Confirmed</field>\n   49:             <field name=\"default\" eval=\"False\"/>\n   50              <field name=\"res_model\">purchase.order</field>\n   51          </record>\n   52          <record id=\"mt_rfq_approved\" model=\"mail.message.subtype\">\n   53              <field name=\"name\">RFQ Approved</field>\n   54:             <field name=\"default\" eval=\"False\"/>\n   55              <field name=\"res_model\">purchase.order</field>\n   56          </record>\n   57          <record id=\"mt_rfq_done\" model=\"mail.message.subtype\">\n   58              <field name=\"name\">RFQ Done</field>\n   59:             <field name=\"default\" eval=\"False\"/>\n   60              <field name=\"res_model\">purchase.order</field>\n   61          </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\purchase\\purchase_view.xml:\n  102          <field eval=\"False\" name=\"view_id\"/>\n  103          <field name=\"domain\">[('type','=','in_invoice')]</field>\n  104:         <field name=\"context\">{'default_type':'in_invoice', 'type':'in_invoice', 'journal_type': 'purchase', 'search_default_draft': 1}</field>\n  105          <field name=\"search_view_id\" ref=\"account.view_account_invoice_filter\"/>\n  106          <field name=\"help\" type=\"html\">\n  ...\n  125          <field name=\"view_type\">form</field>\n  126          <field name=\"view_mode\">kanban,tree,form</field>\n  127:         <field name=\"context\">{\"search_default_filter_to_purchase\":1}</field>\n  128          <field name=\"search_view_id\" eval=\"False\"/> <!-- Force empty -->\n  129          <field name=\"view_id\" eval=\"False\"/> <!-- Force empty -->\n  ...\n  216                      <group>\n  217                          <group>\n  218:                             <field name=\"partner_id\" on_change=\"onchange_partner_id(partner_id, context)\" context=\"{'search_default_supplier':1, 'default_supplier':1, 'default_customer':0}\" domain=\"[('supplier','=',True)]\"/>\n  219                              <field name=\"partner_ref\"/>\n  220                              <field domain=\"[('type','=','purchase')]\" name=\"pricelist_id\" groups=\"product.group_purchase_pricelist\" on_change=\"onchange_pricelist(pricelist_id, context)\"/>\n  ...\n  607  \n  608          <record model=\"ir.actions.act_window\" id=\"action_purchase_line_product_tree\">\n  609:             <field name=\"context\">{'search_default_product_id': active_id, 'default_product_id': active_id}</field>\n  610              <field name=\"name\">Purchases</field>\n  611              <field name=\"res_model\">purchase.order.line</field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\purchase\\report\\purchase_report_view.xml:\n   78          <field name=\"view_mode\">graph</field>\n   79          <field name=\"view_id\" ref=\"view_purchase_order_graph\"></field>\n   80:         <field name=\"context\">{'search_default_orders': 1, 'group_by_no_leaf':1,'group_by':[]}</field>\n   81          <field name=\"help\">Purchase Analysis allows you to easily check and analyse your company purchase history and performance. From this menu you can track your negotiation performance, the delivery performance of your suppliers, etc.</field>\n   82      </record>\n   ..\n   93          <field name=\"search_view_id\" ref=\"stock.view_stock_search\"/>\n   94          <field name=\"view_id\" ref=\"stock.view_stock_graph\"/>\n   95:         <field name=\"context\">{'full':'1','contact_display': 'partner','search_default_done':1, 'search_default_month':1, 'search_default_group_type':1, 'group_by': [], 'group_by_no_leaf':1,'search_default_year':1,}</field>\n   96          <field name=\"help\">Reception Analysis allows you to easily check and analyse your company order receptions and the performance of your supplier's deliveries.</field>\n   97      </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\purchase\\res_config.py:\n   28  \n   29      _columns = {\n   30:         'default_invoice_method': fields.selection(\n   31              [('manual', 'Based on purchase order lines'),\n   32               ('picking', 'Based on incoming shipments'),\n   33               ('order', 'Pre-generate draft invoices based on purchase orders'),\n   34:             ], 'Default invoicing control method', required=True, default_model='purchase.order'),\n   35          'group_purchase_pricelist':fields.boolean(\"Manage pricelist per supplier\",\n   36              implied_group='product.group_purchase_pricelist',\n   ..\n   69      }\n   70  \n   71:     _defaults = {\n   72:         'default_invoice_method': 'order',\n   73      }\n   74  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\purchase\\res_config_view.xml:\n   29                          <div>\n   30                              <div>\n   31:                                 <label for=\"default_invoice_method\"/>\n   32:                                 <field name=\"default_invoice_method\" class=\"oe_inline\"/>\n   33                              </div>\n   34                          </div>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\purchase\\stock.py:\n   49          return res\n   50  \n   51:     def copy(self, cr, uid, id, default=None, context=None):\n   52:         default = default or {}\n   53          context = context or {}\n   54:         if not default.get('split_from'):\n   55              #we don't want to propagate the link to the purchase order line except in case of move split\n   56:             default['purchase_line_id'] = False\n   57:         return super(stock_move, self).copy(cr, uid, id, default, context)\n   58  \n   59      def _create_invoice_line_from_vals(self, cr, uid, move, invoice_line_vals, context=None):\n   ..\n  180          'buy_pull_id': fields.many2one('procurement.rule', 'BUY rule'),\n  181      }\n  182:     _defaults = {\n  183          'buy_to_resupply': True,\n  184      }\n  ...\n  197          return {\n  198              'name': self._format_routename(cr, uid, warehouse, _(' Buy'), context=context),\n  199:             'location_id': warehouse.in_type_id.default_location_dest_id.id,\n  200              'route_id': buy_route_id,\n  201              'action': 'buy',\n  ...\n  257      def change_route(self, cr, uid, ids, warehouse, new_reception_step=False, new_delivery_step=False, context=None):\n  258          res = super(stock_warehouse, self).change_route(cr, uid, ids, warehouse, new_reception_step=new_reception_step, new_delivery_step=new_delivery_step, context=context)\n  259:         if warehouse.in_type_id.default_location_dest_id != warehouse.buy_pull_id.location_id:\n  260:             self.pool.get('procurement.rule').write(cr, uid, warehouse.buy_pull_id.id, {'location_id': warehouse.in_type_id.default_location_dest_id.id}, context=context)\n  261          return res\n  262  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\purchase\\stock_view.xml:\n   55              <field name=\"inherit_id\" ref=\"stock.view_warehouse\"/>\n   56              <field name=\"arch\" type=\"xml\">\n   57:                  <xpath expr=\"//field[@name='default_resupply_wh_id']\" position=\"before\">\n   58                      <field name=\"buy_to_resupply\" />\n   59                  </xpath>\n   ..\n   67              <field name=\"view_type\">form</field>\n   68              <field name=\"view_mode\">tree,form,calendar</field>\n   69:             <field name=\"context\">{\"default_type\": \"in\", \"contact_display\": \"partner_address\", \"search_default_done\": 1, \"search_default_reception_to_invoice\": 1}</field>\n   70              <field name=\"search_view_id\" ref=\"stock.view_picking_internal_search\"/>\n   71              <field name=\"help\" type=\"html\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\purchase\\wizard\\purchase_order_group_view.xml:\n   30  \n   31          <act_window name=\"Merge Purchase orders\"\n   32:             context=\"{'search_default_draft': 1, 'search_default_approved': False}\"\n   33              res_model=\"purchase.order.group\"\n   34              src_model=\"purchase.order\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\purchase_double_validation\\purchase_double_validation_installer.py:\n   29      }\n   30  \n   31:     _defaults = {\n   32          'limit_amount': 5000,\n   33      }\n   34  \n   35:     def get_default_limit_amount(self, cr, uid, fields, context=None):\n   36          ir_model_data = self.pool.get('ir.model.data')\n   37          transition = ir_model_data.get_object(cr, uid, 'purchase_double_validation', 'trans_confirmed_double_lt')\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\purchase_requisition\\purchase_requisition.py:\n   24  from openerp.osv import fields, osv\n   25  from openerp.tools.translate import _\n   26: from openerp.tools import DEFAULT_SERVER_DATE_FORMAT, DEFAULT_SERVER_DATETIME_FORMAT\n   27  import openerp.addons.decimal_precision as dp\n   28  \n   ..\n   68          return obj_data.get_object_reference(cr, uid, 'stock', 'picking_type_in')[1]\n   69  \n   70:     _defaults = {\n   71          'state': 'draft',\n   72          'exclusive': 'multiple',\n   73:         'company_id': lambda self, cr, uid, c: self.pool.get('res.company')._company_default_get(cr, uid, 'purchase.requisition', context=c),\n   74          'user_id': lambda self, cr, uid, c: self.pool.get('res.users').browse(cr, uid, uid, c).id,\n   75          'name': lambda obj, cr, uid, context: obj.pool.get('ir.sequence').get(cr, uid, 'purchase.order.requisition'),\n   ..\n  104  \n  105      def open_product_line(self, cr, uid, ids, context=None):\n  106:         \"\"\" This opens product line view to view all lines from the different quotations, groupby default by product and partner to show comparaison\n  107              between supplier price\n  108              @return: the product line tree view\n  ...\n  114          po_lines = self.browse(cr, uid, ids, context=context)[0].po_line_ids\n  115          res['context'] = {\n  116:             'search_default_groupby_product': True,\n  117:             'search_default_hide_cancelled': True,\n  118              'tender_id': ids[0],\n  119          }\n  ...\n  141              'pricelist_id': supplier_pricelist.id,\n  142              'currency_id': supplier_pricelist and supplier_pricelist.currency_id.id or requisition.company_id.currency_id.id,\n  143:             'location_id': requisition.procurement_id and requisition.procurement_id.location_id.id or requisition.picking_type_id.default_location_dest_id.id,\n  144              'company_id': requisition.company_id.id,\n  145              'fiscal_position': supplier.property_account_position and supplier.property_account_position.id or False,\n  ...\n  155          product_uom = self.pool.get('product.uom')\n  156          product = requisition_line.product_id\n  157:         default_uom_po_id = product.uom_po_id.id\n  158          ctx = context.copy()\n  159          ctx['tz'] = requisition.user_id.tz\n  160          date_order = requisition.ordering_date and fields.date.date_to_datetime(self, cr, uid, requisition.ordering_date, context=ctx) or fields.datetime.now()\n  161:         qty = product_uom._compute_qty(cr, uid, requisition_line.product_uom_id.id, requisition_line.product_qty, default_uom_po_id)\n  162          supplier_pricelist = supplier.property_product_pricelist_purchase and supplier.property_product_pricelist_purchase.id or False\n  163          vals = po_line_obj.onchange_product_id(\n  164:             cr, uid, [], supplier_pricelist, product.id, qty, default_uom_po_id,\n  165              supplier.id, date_order=date_order,\n  166              fiscal_position_id=supplier.property_account_position,\n  ...\n  270                  quotation_id = po.search(cr, uid, [('requisition_id', '=', tender.id), ('partner_id', '=', supplier)], limit=1)[0]\n  271                  vals = self._prepare_po_from_tender(cr, uid, tender, context=context)\n  272:                 new_po = po.copy(cr, uid, quotation_id, default=vals, context=context)\n  273                  #duplicate po_line and change product_qty if needed and associate them to newly created PO\n  274                  for line in product_line:\n  275                      vals = self._prepare_po_line_from_tender(cr, uid, tender, line, new_po, context=context)\n  276:                     poline.copy(cr, uid, line.id, default=vals, context=context)\n  277                  #use workflow to set new PO state to confirm\n  278                  po.signal_workflow(cr, uid, [new_po], 'purchase_confirm')\n  ...\n  326          return {'value': value}\n  327  \n  328:     _defaults = {\n  329:         'company_id': lambda self, cr, uid, c: self.pool.get('res.company')._company_default_get(cr, uid, 'purchase.requisition.line', context=c),\n  330      }\n  331  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\purchase_requisition\\purchase_requisition_data.xml:\n    3      <data noupdate=\"1\">\n    4          <function\n    5:             eval=\"('default',False,'warehouse_id', [('purchase.requisition', False)], ref('stock.warehouse0'), True, False, False, False, True)\"\n    6:             id=\"purchase_default_set\"\n    7              model=\"ir.values\"\n    8              name=\"set\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\purchase_requisition\\purchase_requisition_view.xml:\n   60                  <group>\n   61                      <group>\n   62:                         <field name=\"user_id\" context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'purchase_requisition.group_purchase_requisition_user', 'purchase.group_purchase_user', 'account.group_account_invoice']}\" attrs=\"{'readonly': [('state','not in',('draft'))]}\"/>\n   63                          <field name=\"exclusive\" attrs=\"{'readonly': [('state','not in',('draft'))]}\"/>\n   64                          <field name=\"account_analytic_id\" colspan=\"2\" groups=\"purchase.group_analytic_accounting\" attrs=\"{'readonly': [('state','not in',('draft'))]}\"/>\n   ..\n  179          <field name=\"view_type\">form</field>\n  180          <field name=\"view_mode\">tree,form</field>\n  181:         <field name=\"context\">{\"search_default_user_id\":uid}</field>\n  182          <field name=\"search_view_id\" ref=\"view_purchase_requisition_filter\"/>\n  183          <field name=\"help\" type=\"html\">\n  ...\n  223      <act_window\n  224              domain=\"[('requisition_id', '=', active_id)]\"\n  225:             context=\"{'default_requisition_id': active_id}\"\n  226              id=\"act_res_partner_2_purchase_order\"\n  227              name=\"Purchase orders\"\n  ...\n  256              <field name=\"name\">Bid Lines</field>\n  257              <field name=\"res_model\">purchase.order.line</field>\n  258:             <field name=\"context\">{\"search_default_groupby_product\" : True,}</field>\n  259              <field name=\"view_type\">form</field>\n  260              <field name=\"view_mode\">tree_purchase_order_line_compare</field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\purchase_requisition\\wizard\\bid_line_qty_view.xml:\n    8                  <form string=\"Quantity\">\n    9                      <group>\n   10:                         <field name=\"qty\" context=\"{'default_qty': 0}\"/>\n   11                      </group>\n   12                      <footer>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\purchase_requisition\\wizard\\purchase_requisition_partner_view.xml:\n    8                  <form string=\"Choose Supplier\">\n    9                      <group>\n   10:                         <field name=\"partner_id\" context=\"{'default_supplier': 1, 'default_customer': 0}\"/>\n   11                      </group>\n   12                      <footer>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\report\\controllers\\main.py:\n   83          'Extended93', 'FIM', 'I2of5', 'MSI', 'POSTNET', 'QR', 'Standard39', 'Standard93',\n   84          'UPCA', 'USPS_4State'\n   85:         :param humanreadable: Accepted values: 0 (default) or 1. 1 will insert the readable value\n   86          at the bottom of the output image\n   87          \"\"\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\report\\data\\report_paperformat.xml:\n    4          <record id=\"paperformat_euro\" model=\"report.paperformat\">\n    5              <field name=\"name\">European A4</field>\n    6:             <field name=\"default\" eval=\"True\" />\n    7              <field name=\"format\">A4</field>\n    8              <field name=\"page_height\">0</field>\n    .\n   20          <record id=\"paperformat_us\" model=\"report.paperformat\">\n   21              <field name=\"name\">US Letter</field>\n   22:             <field name=\"default\" eval=\"True\" />\n   23              <field name=\"format\">Letter</field>\n   24              <field name=\"page_height\">0</field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\report\\models\\report.py:\n  136              if request.website is not None:\n  137                  website = request.website\n  138:                 context = dict(context, translatable=context.get('lang') != request.website.default_lang_code)\n  139          values.update(\n  140              time=time,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\report\\models\\report_paperformat.py:\n   31  \n   32      _columns = {'name': fields.char('Name', required=True),\n   33:                 'default': fields.boolean('Default paper format ?'),\n   34                  'format': fields.selection([('A0', 'A0  5   841 x 1189 mm'),\n   35                                              ('A1', 'A1  6   594 x 841 mm'),\n   ..\n   98      ]\n   99  \n  100:     _defaults = {\n  101          'format': 'A4',\n  102          'margin_top': 40,\n  ...\n  119  \n  120      def init(self, cr):\n  121:         # set a default paperformat based on rml one.\n  122          ref = partial(self.pool['ir.model.data'].xmlid_to_res_id, cr, SUPERUSER_ID)\n  123  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\report_intrastat\\report_intrastat.py:\n   31          'intrastat': fields.boolean('Intrastat member'),\n   32      }\n   33:     _defaults = {\n   34          'intrastat': lambda *a: False,\n   35      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\report_webkit\\__openerp__.py:\n   68  \n   69  If you are experiencing missing header/footer problems on Linux, be sure to\n   70: install a 'static' version of the library. The default ``wkhtmltopdf`` on\n   71  Ubuntu is known to have this issue.\n   72  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\report_webkit\\data.xml:\n    2  <openerp>\n    3      <data noupdate=\"1\">\n    4:         <record id=\"ir_property_webkitheaderdefault0\" model=\"ir.property\">\n    5              <field name=\"fields_id\" ref=\"field_ir_act_report_xml_webkit_header\"/>\n    6:             <field eval=\"&quot;&quot;&quot;webkit_header_default&quot;&quot;&quot;\" name=\"name\"/>\n    7              <field eval=\"&quot;&quot;&quot;ir.header_webkit,1&quot;&quot;&quot;\" name=\"value\"/>\n    8          </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\report_webkit\\webkit_report.py:\n  166  \n  167          command.append('--quiet')\n  168:         # default to UTF-8 encoding.  Use <meta charset=\"latin-1\"> to override.\n  169          command.extend(['--encoding', 'utf-8'])\n  170          if header :\n  ...\n  293          if not report_xml.use_global_header :\n  294              header = ''\n  295:             default_head = get_module_resource('report_webkit', 'default_header.html')\n  296:             with open(default_head,'r') as f:\n  297                  header = f.read()\n  298          css = report_xml.webkit_header.css\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\report_webkit\\wizard\\report_webkit_actions.py:\n   40         'open_action':fields.boolean('Open added action', help=\"Check this to view the newly added internal print action after creating it (technical view) \"),\n   41      }\n   42:     _defaults = {\n   43               'print_button': lambda *a: True,\n   44               'open_action': lambda *a: False,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\resource\\faces\\pcalendar.py:\n   44  TIME_DELTA_PATTERN = re.compile(\"([-+]?\\\\d+(\\\\.\\\\d+)?)([dwmyMH])\")\n   45  \n   46: DEFAULT_MINIMUM_TIME_UNIT = 15\n   47: DEFAULT_WORKING_DAYS_PER_WEEK  = 5\n   48: DEFAULT_WORKING_DAYS_PER_MONTH = 20\n   49: DEFAULT_WORKING_DAYS_PER_YEAR = 200\n   50: DEFAULT_WORKING_HOURS_PER_DAY = 8\n   51  \n   52: DEFAULT_WORKING_TIMES = ( (8 * 60, 12 * 60 ),\n   53                            (13 * 60, 17 * 60 ) )\n   54: DEFAULT_WORKING_DAYS = { 0 : DEFAULT_WORKING_TIMES,\n   55:                          1 : DEFAULT_WORKING_TIMES,\n   56:                          2 : DEFAULT_WORKING_TIMES,\n   57:                          3 : DEFAULT_WORKING_TIMES,\n   58:                          4 : DEFAULT_WORKING_TIMES,\n   59                           5 : (),\n   60                           6 : () }\n   ..\n  225      \"\"\"\n  226  \n  227:     cal = cal or _default_calendar\n  228      if isinstance(src, datetime.timedelta):\n  229          return datetime.timedelta(src.days, seconds=src.seconds, calendar=cal)\n  ...\n  299  #@+node:timedelta_to_str\n  300  def timedelta_to_str(delta, format, cal=None, is_duration=False):\n  301:     cal = cal or _default_calendar\n  302      if is_duration:\n  303          d_p_w = 7\n  ...\n  685      # january the first must be a monday\n  686      EPOCH = datetime.datetime(1979, 1, 1)\n  687:     minimum_time_unit = DEFAULT_MINIMUM_TIME_UNIT\n  688:     working_days_per_week = DEFAULT_WORKING_DAYS_PER_WEEK\n  689:     working_days_per_month = DEFAULT_WORKING_DAYS_PER_MONTH\n  690:     working_days_per_year = DEFAULT_WORKING_DAYS_PER_YEAR\n  691:     working_hours_per_day = DEFAULT_WORKING_HOURS_PER_DAY\n  692      now = EPOCH\n  693  \n  ...\n  780  \n  781  #        calculate the minute time\n  782:         slots = self.working_times.get(days, DEFAULT_WORKING_DAYS[days])\n  783          mtime = 0\n  784          for start, end in slots:\n  ...\n  836          #calculate the remaining minutes\n  837          minutes = 0\n  838:         slots = self.working_times.get(days, DEFAULT_WORKING_DAYS[days])\n  839          index = 0\n  840          for start, end in slots:\n  ...\n  863      #@+node:get_working_times\n  864      def get_working_times(self, day):\n  865:         return self.working_times.get(day, DEFAULT_WORKING_DAYS[day])\n  866      #@-node:get_working_times\n  867      #@+node:_build_mapping\n  ...\n  895      def _recalc_working_time(self):\n  896          def slot_sum_time(day):\n  897:             slots = self.working_times.get(day, DEFAULT_WORKING_DAYS[day])\n  898              return sum(map(lambda slot: slot[1] - slot[0], slots))\n  899  \n  ...\n  929  \n  930  \n  931: _default_calendar = Calendar()\n  932  \n  933: WorkingDate = _default_calendar.WorkingDate\n  934: StartDate = _default_calendar.StartDate\n  935: EndDate = _default_calendar.EndDate\n  936: Minutes = _default_calendar.Minutes\n  937  #@-node:class Calendar\n  938  #@-others\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\resource\\faces\\resource.py:\n  235  class _MetaResource(type):\n  236      doc_template = \"\"\"\n  237:     A resource class. The resources default attributes can\n  238      be changed when the class ist instanciated, i.e.\n  239      %(name)s(max_load=2.0)\n  ...\n  241      @var max_load:\n  242      Specify the maximal allowed load sum of all simultaneously\n  243:     allocated tasks of a resource. A ME{max_load} of 1.0 (default)\n  244      means the resource may be fully allocated. A ME{max_load} of 1.3\n  245      means the resource may be allocated with 30%% overtime.\n  ...\n  340          tp.name = tp.title = _(\"(vacation)\")\n  341          tp._id = \"\"\n  342:         self._tasks.setdefault(\"\", []).append(tp)\n  343      #@-node:add_vacation\n  344      #@+node:calendar\n  ...\n  581  \n  582          identdity = task._idendity_()\n  583:         task_list = cls._tasks.setdefault(task.scenario, {})\n  584:         bookings = task_list.setdefault(identdity, [])\n  585          add_load = cls.calendar(task.scenario).add_load\n  586  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\resource\\faces\\task.py:\n  127  \n  128          value = self.task.__dict__.get(name, _NEVER_USED_)\n  129:         def make_val(default):\n  130:             if value is _NEVER_USED_: return default\n  131              return value\n  132  \n  ...\n  455                           func.func_globals,\n  456                           func.func_name,\n  457:                          func.func_defaults,\n  458                           func.func_closure)\n  459      func.global_names = tuple([all_names[index] for index in global_names])\n  ...\n  758  def Multi(val, **kwargs):\n  759      \"\"\"returns a directory for mutlivalued attributes\"\"\"\n  760:     return dict(_default=val, **kwargs)\n  761  #@nonl\n  762  #@-node:Multi\n  ...\n 1483          cal = me.calendar\n 1484      except NameError:\n 1485:         cal = pcalendar._default_calendar\n 1486  \n 1487      time_diff = cal.Minutes(value)\n ....\n 1505          cal = me.calendar\n 1506      except NameError:\n 1507:         cal = pcalendar._default_calendar\n 1508  \n 1509      time_diff = cal.Minutes(value)\n ....\n 1527          cal = me.calendar\n 1528      except NameError:\n 1529:         cal = pcalendar._default_calendar\n 1530  \n 1531      time_diff = cal.Minutes(value)\n ....\n 1549          cal = me.calendar\n 1550      except NameError:\n 1551:         cal = pcalendar._default_calendar\n 1552  \n 1553      time_diff = cal.Minutes(value)\n ....\n 1696      @var load:\n 1697      Specifies the daily load of a resource for an allocation of the\n 1698:     specified task. A load of 1.0 (default) means the resource is\n 1699      allocated for as many hours as specified by\n 1700      ME{working_hours_per_day}. A load of 0.5 means half that many\n ....\n 1703      @var max_load:\n 1704      Specify the maximal allowed load sum of all simultaneously\n 1705:     allocated tasks of a resource. A ME{max_load} of 1.0 (default)\n 1706      means the resource may be fully allocated. A ME{max_load} of 1.3\n 1707      means the resource may be allocated with 30% overtime.\n ....\n 1726      Specifies a priority between 1 and 1000. A task with higher\n 1727      priority is more likely to get the requested resources.  The\n 1728:     default priority is 500.\n 1729  \n 1730      @var children:\n ....\n 1763      Specifies the days within a working week. This value is used\n 1764      internally to convert time differences from weeks to days. The\n 1765:     default value is 5 days.\n 1766  \n 1767      @var working_days_per_month:\n 1768      Specifies the days within a working month. This value is used\n 1769      internally to convert time differences from months to days. The\n 1770:     default value is 20 days.\n 1771  \n 1772      @var working_days_per_year:\n 1773      Specifies the days within a working year. This value is used\n 1774      internally to convert time differences from years to days The\n 1775:     default value is 200 days.\n 1776  \n 1777      @var working_hours_per_day:\n 1778      Specifies the hours within a working day. This value is used\n 1779      internally to convert time differences from are entered in days to\n 1780:     hours.  The default value is 8 hours.\n 1781  \n 1782      @var minimum_time_unit:\n 1783      Specifies the minimum resolution in minutes for the task\n 1784:     scheduling. The default value is 15 minutes.\n 1785  \n 1786      @var vacation:\n ....\n 2588              if type(value) == types.DictionaryType:\n 2589                  self.root.all_scenarios.update(value.keys())\n 2590:                 value = value.get(self.scenario, value[\"_default\"])\n 2591  \n 2592              self.__set_sources(name, value)\n ....\n 2780              task = self.get_task(path)\n 2781              r_d = task._dependencies\n 2782:             d_l = r_d.setdefault(attrib, {})\n 2783              d_l[attr_path] = True\n 2784      #@-node:__set_sources\n ....\n 2952      #@-node:_wrap_attrib\n 2953      #@+node:_find_frozen\n 2954:     def _find_frozen(self, attrib_name, default=None):\n 2955          value = self.__dict__.get(attrib_name)\n 2956          if value is not None:\n ....\n 2958  \n 2959          up = self.up\n 2960:         return up and up._find_frozen(attrib_name) or default\n 2961      #@-node:_find_frozen\n 2962      #@-node:Freezer Methods\n ....\n 3261          effort = self.__dict__.get(\"effort\")\n 3262          if not (effort or length or duration):\n 3263:             #set a default value\n 3264              self._set_effort(\"1d\")\n 3265              #self._raise(ValueError(\"You must specify either a\"\\\n ....\n 3369      #@	@+others\n 3370      #@+node:__init__\n 3371:     def __init__(self, top_task, scenario=\"_default\", id=\"\"):\n 3372          self.calendar = pcalendar.Calendar()\n 3373          Task.__init__(self, top_task, top_task.func_name)\n 3374          self.id = id or self.name\n 3375          self.scenario = scenario\n 3376:         self.all_scenarios = set((\"_default\",))\n 3377          self.path = \"root\"\n 3378          self._globals = top_task.func_globals.copy()\n ....\n 3448  \n 3449      @param id: Specifiess a unique idenfication name to distinguish the project from\n 3450:     other projects in the resource database. The default value for id\n 3451      is the name of top_task.\n 3452      \"\"\"\n 3453      #@	<< class Project declarations >>\n 3454      #@+node:<< class Project declarations >>\n 3455:     __call_completion__ = 'Project(|top_task, scenario=\"_default\", id=None)'\n 3456  \n 3457      #@-node:<< class Project declarations >>\n ....\n 3459      #@	@+others\n 3460      #@+node:__init__\n 3461:     def __init__(self, top_task, scenario=\"_default\", id=None):\n 3462          _ProjectBase.__init__(self, top_task, scenario, id)\n 3463          no_snapshot = not self.is_snapshot\n ....\n 3493      #@	<< class BalancedProject declarations >>\n 3494      #@+node:<< class BalancedProject declarations >>\n 3495:     __call_completion__ = \"\"\"BalancedProject(|top_task, scenario=\"_default\",\n 3496      id=None, balance=SMART, performed=None)\"\"\"\n 3497  \n ....\n 3500      #@	@+others\n 3501      #@+node:__init__\n 3502:     def __init__(self, top_task, scenario=\"_default\",\n 3503                   id=None, balance=SMART, performed=None):\n 3504          _AllocationPoject.__init__(self, top_task, scenario, id)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\resource\\faces\\timescale.py:\n  111  \n  112  \n  113: _default_scale = TimeScale(pcal._default_calendar)\n  114  \n  115  # vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\resource\\resource.py:\n   54          ),\n   55      }\n   56:     _defaults = {\n   57:         'company_id': lambda self, cr, uid, context: self.pool.get('res.company')._company_default_get(cr, uid, 'resource.calendar', context=context)\n   58      }\n   59  \n   ..\n  175          return [att for att in calendar.attendance_ids if int(att.dayofweek) in weekdays]\n  176  \n  177:     def get_weekdays(self, cr, uid, id, default_weekdays=None, context=None):\n  178          \"\"\" Return the list of weekdays that contain at least one working interval.\n  179:         If no id is given (no calendar), return default weekdays. \"\"\"\n  180          if id is None:\n  181:             return default_weekdays if default_weekdays is not None else [0, 1, 2, 3, 4]\n  182          calendar = self.browse(cr, uid, id, context=None)\n  183          weekdays = set()\n  ...\n  262              if leave.resource_id and not resource_id == leave.resource_id.id:\n  263                  continue\n  264:             date_from = datetime.datetime.strptime(leave.date_from, tools.DEFAULT_SERVER_DATETIME_FORMAT)\n  265              if end_datetime and date_from > end_datetime:\n  266                  continue\n  267:             date_to = datetime.datetime.strptime(leave.date_to, tools.DEFAULT_SERVER_DATETIME_FORMAT)\n  268              if start_datetime and date_to < start_datetime:\n  269                  continue\n  ...\n  273      def get_working_intervals_of_day(self, cr, uid, id, start_dt=None, end_dt=None,\n  274                                       leaves=None, compute_leaves=False, resource_id=None,\n  275:                                      default_interval=None, context=None):\n  276          \"\"\" Get the working intervals of the day based on calendar. This method\n  277          handle leaves that come directly from the leaves parameter or can be computed.\n  ...\n  298                                  leaves are computed. If set, generic and\n  299                                  specific leaves are computed.\n  300:         :param tuple default_interval: if no id, try to return a default working\n  301:                                        day using default_interval[0] as beginning\n  302:                                        hour, and default_interval[1] as ending hour.\n  303:                                        Example: default_interval = (8, 16).\n  304                                         Otherwise, a void list of working intervals\n  305                                         is returned when id is None.\n  ...\n  310              id = id[0]\n  311  \n  312:         # Computes start_dt, end_dt (with default values if not set) + off-interval work limits\n  313          work_limits = []\n  314          if start_dt is None and end_dt is not None:\n  ...\n  327          work_dt = start_dt.replace(hour=0, minute=0, second=0)\n  328  \n  329:         # no calendar: try to use the default_interval, then return directly\n  330          if id is None:\n  331:             if default_interval:\n  332:                 working_interval = (start_dt.replace(hour=default_interval[0], minute=0, second=0), start_dt.replace(hour=default_interval[1], minute=0, second=0))\n  333              intervals = self.interval_remove_leaves(working_interval, work_limits)\n  334              return intervals\n  ...\n  355      def get_working_hours_of_date(self, cr, uid, id, start_dt=None, end_dt=None,\n  356                                    leaves=None, compute_leaves=False, resource_id=None,\n  357:                                   default_interval=None, context=None):\n  358          \"\"\" Get the working hours of the day based on calendar. This method uses\n  359          get_working_intervals_of_day to have the work intervals of the day. It\n  ...\n  364              start_dt, end_dt, leaves,\n  365              compute_leaves, resource_id,\n  366:             default_interval, context)\n  367          for interval in intervals:\n  368              res += interval[1] - interval[0]\n  ...\n  370  \n  371      def get_working_hours(self, cr, uid, id, start_dt, end_dt, compute_leaves=False,\n  372:                           resource_id=None, default_interval=None, context=None):\n  373          hours = 0.0\n  374          for day in rrule.rrule(rrule.DAILY, dtstart=start_dt,\n  ...\n  384                  cr, uid, id, start_dt=day_start_dt, end_dt=day_end_dt,\n  385                  compute_leaves=compute_leaves, resource_id=resource_id,\n  386:                 default_interval=default_interval,\n  387                  context=context)\n  388          return hours\n  ...\n  394      def _schedule_hours(self, cr, uid, id, hours, day_dt=None,\n  395                          compute_leaves=False, resource_id=None,\n  396:                         default_interval=None, context=None):\n  397          \"\"\" Schedule hours of work, using a calendar and an optional resource to\n  398          compute working and leave days. This method can be used backwards, i.e.\n  ...\n  411                                  leaves are computed. If set, generic and\n  412                                  specific leaves are computed.\n  413:         :param tuple default_interval: if no id, try to return a default working\n  414:                                        day using default_interval[0] as beginning\n  415:                                        hour, and default_interval[1] as ending hour.\n  416:                                        Example: default_interval = (8, 16).\n  417                                         Otherwise, a void list of working intervals\n  418                                         is returned when id is None.\n  ...\n  434          current_datetime = day_dt\n  435  \n  436:         call_args = dict(compute_leaves=compute_leaves, resource_id=resource_id, default_interval=default_interval, context=context)\n  437  \n  438          while float_compare(remaining_hours, 0.0, precision_digits=2) in (1, 0) and iterations < 1000:\n  ...\n  473      def schedule_hours_get_date(self, cr, uid, id, hours, day_dt=None,\n  474                                  compute_leaves=False, resource_id=None,\n  475:                                 default_interval=None, context=None):\n  476          \"\"\" Wrapper on _schedule_hours: return the beginning/ending datetime of\n  477          an hours scheduling. \"\"\"\n  478:         res = self._schedule_hours(cr, uid, id, hours, day_dt, compute_leaves, resource_id, default_interval, context)\n  479          return res and res[0][0] or False\n  480  \n  481      def schedule_hours(self, cr, uid, id, hours, day_dt=None,\n  482                         compute_leaves=False, resource_id=None,\n  483:                        default_interval=None, context=None):\n  484          \"\"\" Wrapper on _schedule_hours: return the working intervals of an hours\n  485          scheduling. \"\"\"\n  486:         return self._schedule_hours(cr, uid, id, hours, day_dt, compute_leaves, resource_id, default_interval, context)\n  487  \n  488      # --------------------------------------------------\n  ...\n  491  \n  492      def _schedule_days(self, cr, uid, id, days, day_date=None, compute_leaves=False,\n  493:                        resource_id=None, default_interval=None, context=None):\n  494          \"\"\"Schedule days of work, using a calendar and an optional resource to\n  495          compute working and leave days. This method can be used backwards, i.e.\n  ...\n  508                                  leaves are computed. If set, generic and\n  509                                  specific leaves are computed.\n  510:         :param tuple default_interval: if no id, try to return a default working\n  511:                                        day using default_interval[0] as beginning\n  512:                                        hour, and default_interval[1] as ending hour.\n  513:                                        Example: default_interval = (8, 16).\n  514                                         Otherwise, a void list of working intervals\n  515                                         is returned when id is None.\n  ...\n  538                  cr, uid, id, current_datetime,\n  539                  compute_leaves=compute_leaves, resource_id=resource_id,\n  540:                 default_interval=default_interval,\n  541                  context=context)\n  542              if id is None or working_intervals:  # no calendar -> no working hours, but day is considered as worked\n  ...\n  554  \n  555      def schedule_days_get_date(self, cr, uid, id, days, day_date=None, compute_leaves=False,\n  556:                                resource_id=None, default_interval=None, context=None):\n  557          \"\"\" Wrapper on _schedule_days: return the beginning/ending datetime of\n  558          a days scheduling. \"\"\"\n  559:         res = self._schedule_days(cr, uid, id, days, day_date, compute_leaves, resource_id, default_interval, context)\n  560          return res and res[-1][1] or False\n  561  \n  562      def schedule_days(self, cr, uid, id, days, day_date=None, compute_leaves=False,\n  563:                       resource_id=None, default_interval=None, context=None):\n  564          \"\"\" Wrapper on _schedule_days: return the working intervals of a days\n  565          scheduling. \"\"\"\n  566:         return self._schedule_days(cr, uid, id, days, day_date, compute_leaves, resource_id, default_interval, context)\n  567  \n  568      # --------------------------------------------------\n  ...\n  588              day_dt=dt_from.replace(minute=0, second=0),\n  589              compute_leaves=True, resource_id=resource,\n  590:             default_interval=(8, 16)\n  591          )\n  592  \n  593      def interval_get_multi(self, cr, uid, date_and_hours_by_cal, resource=False, byday=True):\n  594:         \"\"\" Used in mrp_operations/mrp_operations.py (default parameters) and in\n  595          interval_get()\n  596  \n  ...\n  603                  day_dt=datetime.datetime.strptime(dt_str, '%Y-%m-%d %H:%M:%S').replace(minute=0, second=0),\n  604                  compute_leaves=True, resource_id=resource,\n  605:                 default_interval=(8, 16)\n  606              )\n  607              res[(dt_str, hours, calendar_id)] = result\n  ...\n  631              cr, uid, id, dt_from, dt_to,\n  632              compute_leaves=(not exclude_leaves), resource_id=resource_id,\n  633:             default_interval=(8, 16), context=context)\n  634  \n  635  \n  ...\n  649      _order = 'dayofweek, hour_from'\n  650  \n  651:     _defaults = {\n  652          'dayofweek' : '0'\n  653      }\n  ...\n  668          'resource_type': fields.selection([('user','Human'),('material','Material')], 'Resource Type', required=True),\n  669          'user_id' : fields.many2one('res.users', 'User', help='Related user name for the resource to manage its access.'),\n  670:         'time_efficiency' : fields.float('Efficiency Factor', size=8, required=True, help=\"This field depict the efficiency of the resource to complete tasks. e.g  resource put alone on a phase of 5 days with 5 tasks assigned to him, will show a load of 100% for this phase by default, but if we put a efficiency of 200%, then his load will only be 50%.\"),\n  671          'calendar_id' : fields.many2one(\"resource.calendar\", \"Working Time\", help=\"Define the schedule of resource\"),\n  672      }\n  673:     _defaults = {\n  674          'resource_type' : 'user',\n  675          'time_efficiency' : 1,\n  676          'active' : True,\n  677:         'company_id': lambda self, cr, uid, context: self.pool.get('res.company')._company_default_get(cr, uid, 'resource.resource', context=context)\n  678      }\n  679  \n  680  \n  681:     def copy(self, cr, uid, id, default=None, context=None):\n  682:         if default is None:\n  683:             default = {}\n  684:         if not default.get('name', False):\n  685:             default.update(name=_('%s (copy)') % (self.browse(cr, uid, id, context=context).name))\n  686:         return super(resource_resource, self).copy(cr, uid, id, default, context)\n  687  \n  688      def generate_resources(self, cr, uid, user_ids, calendar_id, context=None):\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\resource\\resource_view.xml:\n  147              src_model=\"resource.calendar\"\n  148              view_mode=\"calendar,tree,form\"\n  149:             context=\"{'default_calendar_id': active_id}\"\n  150              domain=\"[('calendar_id','=',active_id), ('resource_id','=',False)]\"/>\n  151  \n  ...\n  156              src_model=\"resource.calendar\"\n  157              view_mode=\"calendar,tree,form\"\n  158:             context=\"{'default_calendar_id': active_id}\"\n  159              domain=\"[('calendar_id','=',active_id), ('resource_id','!=',False)]\"/>\n  160  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\resource\\tests\\test_resource.py:\n  411          # --------------------------------------------------\n  412  \n  413:         # Test without calendar and default_interval\n  414          res = self.resource_calendar.get_working_hours(\n  415              cr, uid, None,\n  ...\n  417              self.date2.replace(hour=23, minute=0),\n  418              compute_leaves=True, resource_id=self.resource1_id,\n  419:             default_interval=(8, 16))\n  420          self.assertEqual(res, 32.0, 'resource_calendar: wrong get_working_hours computation')\n  421  \n  ...\n  441          # --------------------------------------------------\n  442  \n  443:         # Without calendar, should only count days -> 12 -> 16, 5 days with default intervals\n  444:         res = self.resource_calendar.schedule_days_get_date(cr, uid, None, 5, day_date=self.date1, default_interval=(8, 16))\n  445          self.assertEqual(res, datetime.strptime('2013-02-16 16:00:00', _format), 'resource_calendar: wrong days scheduling')\n  446  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\sale\\edi\\sale_order_action_data.xml:\n   10              <field name=\"view_id\" ref=\"email_template.email_template_tree\" />\n   11              <field name=\"search_view_id\" ref=\"email_template.view_email_template_search\"/>\n   12:             <field name=\"context\" eval=\"{'search_default_model_id': ref('sale.model_sale_order')}\"/>\n   13          </record>\n   14      </data>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\sale\\report\\sale_report_view.xml:\n   82          <field name=\"search_view_id\" ref=\"view_order_product_search\"/>\n   83          <field name=\"view_id\" ref=\"view_order_product_graph\"/>\n   84:         <field name=\"context\">{'search_default_Sales':1, 'group_by_no_leaf':1,'group_by':[]}</field>\n   85          <field name=\"help\">This report performs analysis on your quotations and sales orders. Analysis check your sales revenues and sort it by different group criteria (salesman, partner, product, etc.) Use this report to perform analysis on sales not having invoiced yet. If you want to analyse your turnover, you should use the Invoice Analysis report in the Accounting application.</field>\n   86      </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\sale\\res_config.py:\n   45                   'You will be able to follow the progress of the contract and invoice automatically.\\n'\n   46                   '-It installs the account_analytic_analysis module.'),\n   47:         'time_unit': fields.many2one('product.uom', 'The default working time unit for services is'),\n   48          'group_sale_pricelist':fields.boolean(\"Use pricelists to adapt your price per customers\",\n   49              implied_group='product.group_sale_pricelist',\n   ..\n   71                   '-This installs the module sale_journal.'),\n   72          'module_analytic_user_function': fields.boolean(\"One employee can have different roles per contract\",\n   73:             help='Allows you to define what is the default function of a specific user on a given account.\\n'\n   74                   'This is mostly used when a user encodes his timesheet. The values are retrieved and the fields are auto-filled. '\n   75                   'But the possibility to change these values is still available.\\n'\n   ..\n   84      }\n   85  \n   86:     def default_get(self, cr, uid, fields, context=None):\n   87          ir_model_data = self.pool.get('ir.model.data')\n   88:         res = super(sale_configuration, self).default_get(cr, uid, fields, context)\n   89          if res.get('module_project'):\n   90              user = self.pool.get('res.users').browse(cr, uid, uid, context)\n   ..\n   97          return res\n   98  \n   99:     def _get_default_time_unit(self, cr, uid, context=None):\n  100          ids = self.pool.get('product.uom').search(cr, uid, [('name', '=', _('Hour'))], context=context)\n  101          return ids and ids[0] or False\n  102  \n  103:     _defaults = {\n  104:         'time_unit': _get_default_time_unit,\n  105      }\n  106  \n  107:     def set_sale_defaults(self, cr, uid, ids, context=None):\n  108          ir_model_data = self.pool.get('ir.model.data')\n  109          wizard = self.browse(cr, uid, ids)[0]\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\sale\\res_config_view.xml:\n   22                          </div>\n   23                      </group>\n   24:                     <group name='default_options'>\n   25:                         <label for=\"id\" string=\"Default Options\" attrs=\"{'invisible':[('module_account_analytic_analysis','=',False)]}\"/>\n   26                          <div>\n   27                              <div name='time_unit' attrs=\"{'invisible': [('module_account_analytic_analysis','=',False)],'required':[('module_account_analytic_analysis','=',True)]}\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\sale\\res_partner_view.xml:\n    7              <field name=\"view_type\">form</field>\n    8              <field name=\"view_mode\">tree,form,graph</field>\n    9:             <field name=\"context\">{'search_default_partner_id': active_id}</field>\n   10              <field name=\"groups_id\" eval=\"[(4, ref('base.group_sale_salesman'))]\"/>\n   11              <field name=\"help\" type=\"html\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\sale\\sale.py:\n   24  from openerp.osv import fields, osv\n   25  from openerp.tools.translate import _\n   26: from openerp.tools import DEFAULT_SERVER_DATE_FORMAT, DEFAULT_SERVER_DATETIME_FORMAT\n   27  import openerp.addons.decimal_precision as dp\n   28  from openerp import workflow\n   ..\n   31      _inherit = \"res.company\"\n   32      _columns = {\n   33:         'sale_note': fields.text('Default Terms and Conditions', translate=True, help=\"Default terms and conditions for quotations.\"),\n   34      }\n   35  \n   ..\n  149          return result.keys()\n  150  \n  151:     def _get_default_company(self, cr, uid, context=None):\n  152          company_id = self.pool.get('res.users')._get_company(cr, uid, context=context)\n  153          if not company_id:\n  154:             raise osv.except_osv(_('Error!'), _('There is no default company for the current user!'))\n  155          return company_id\n  156  \n  157:     def _get_default_section_id(self, cr, uid, context=None):\n  158:         \"\"\" Gives default section by checking if present in the context \"\"\"\n  159          section_id = self._resolve_section_id_from_context(cr, uid, context=context) or False\n  160          if not section_id:\n  161:             section_id = self.pool.get('res.users').browse(cr, uid, uid, context).default_section_id.id or False\n  162          return section_id\n  163  \n  ...\n  169          if context is None:\n  170              context = {}\n  171:         if type(context.get('default_section_id')) in (int, long):\n  172:             return context.get('default_section_id')\n  173:         if isinstance(context.get('default_section_id'), basestring):\n  174:             section_ids = self.pool.get('crm.case.section').name_search(cr, uid, name=context['default_section_id'], context=context)\n  175              if len(section_ids) == 1:\n  176                  return int(section_ids[0][0])\n  ...\n  200          'date_confirm': fields.date('Confirmation Date', readonly=True, select=True, help=\"Date on which sales order is confirmed.\", copy=False),\n  201          'user_id': fields.many2one('res.users', 'Salesperson', states={'draft': [('readonly', False)], 'sent': [('readonly', False)]}, select=True, track_visibility='onchange'),\n  202:         'partner_id': fields.many2one('res.partner', 'Customer', readonly=True, states={'draft': [('readonly', False)], 'sent': [('readonly', False)]}, required=True, change_default=True, select=True, track_visibility='always'),\n  203          'partner_invoice_id': fields.many2one('res.partner', 'Invoice Address', readonly=True, required=True, states={'draft': [('readonly', False)], 'sent': [('readonly', False)]}, help=\"Invoice address for current sales order.\"),\n  204          'partner_shipping_id': fields.many2one('res.partner', 'Delivery Address', readonly=True, required=True, states={'draft': [('readonly', False)], 'sent': [('readonly', False)]}, help=\"Delivery address for current sales order.\"),\n  ...\n  247      }\n  248  \n  249:     _defaults = {\n  250          'date_order': fields.datetime.now,\n  251          'order_policy': 'manual',\n  252:         'company_id': _get_default_company,\n  253          'state': 'draft',\n  254          'user_id': lambda obj, cr, uid, context: uid,\n  ...\n  257          'partner_shipping_id': lambda self, cr, uid, context: context.get('partner_id', False) and self.pool.get('res.partner').address_get(cr, uid, [context['partner_id']], ['delivery'])['delivery'],\n  258          'note': lambda self, cr, uid, context: self.pool.get('res.users').browse(cr, uid, uid, context=context).company_id.sale_note,\n  259:         'section_id': lambda s, cr, uid, c: s._get_default_section_id(cr, uid, c),\n  260      }\n  261      _sql_constraints = [\n  ...\n  318          if not fiscal_position:\n  319              if not company_id:\n  320:                 company_id = self._get_default_company(cr, uid, context=context)\n  321              fiscal_position = self.pool['account.fiscal.position'].get_fiscal_position(cr, uid, company_id, partner_id, delivery_id, context=context)\n  322              if fiscal_position:\n  ...\n  353              vals['name'] = self.pool.get('ir.sequence').get(cr, uid, 'sale.order') or '/'\n  354          if vals.get('partner_id') and any(f not in vals for f in ['partner_invoice_id', 'partner_shipping_id', 'pricelist_id', 'fiscal_position']):\n  355:             defaults = self.onchange_partner_id(cr, uid, [], vals['partner_id'], context=context)['value']\n  356              if not vals.get('fiscal_position') and vals.get('partner_shipping_id'):\n  357                  delivery_onchange = self.onchange_delivery_id(cr, uid, [], vals.get('company_id'), None, vals['partner_id'], vals.get('partner_shipping_id'), context=context)\n  358:                 defaults.update(delivery_onchange['value'])\n  359:             vals = dict(defaults, **vals)\n  360          ctx = dict(context or {}, mail_create_nolog=True)\n  361          new_id = super(sale_order, self).create(cr, uid, vals, context=ctx)\n  ...\n  431          inv = self._prepare_invoice(cr, uid, order, lines, context=context)\n  432          inv_id = inv_obj.create(cr, uid, inv, context=context)\n  433:         data = inv_obj.onchange_payment_term_date_invoice(cr, uid, [inv_id], inv['payment_term'], time.strftime(DEFAULT_SERVER_DATE_FORMAT))\n  434          if data.get('value', False):\n  435              inv_obj.write(cr, uid, [inv_id], data['value'], context=context)\n  ...\n  532              created_lines = obj_sale_order_line.invoice_line_create(cr, uid, lines)\n  533              if created_lines:\n  534:                 invoices.setdefault(o.partner_invoice_id.id or o.partner_id.id, []).append((o, created_lines))\n  535          if not invoices:\n  536              for o in self.browse(cr, uid, ids, context=context):\n  ...\n  614      def action_quotation_send(self, cr, uid, ids, context=None):\n  615          '''\n  616:         This function opens a window to compose an email, with the edi sale template message loaded by default\n  617          '''\n  618          assert len(ids) == 1, 'This option should only be used for a single id at a time.'\n  ...\n  628          ctx = dict()\n  629          ctx.update({\n  630:             'default_model': 'sale.order',\n  631:             'default_res_id': ids[0],\n  632:             'default_use_template': bool(template_id),\n  633:             'default_template_id': template_id,\n  634:             'default_composition_mode': 'comment',\n  635              'mark_so_as_sent': True\n  636          })\n  ...\n  669  \n  670      def _get_date_planned(self, cr, uid, order, line, start_date, context=None):\n  671:         date_planned = datetime.strptime(start_date, DEFAULT_SERVER_DATETIME_FORMAT) + timedelta(days=line.delay or 0.0)\n  672          return date_planned\n  673  \n  ...\n  857          'name': fields.text('Description', required=True, readonly=True, states={'draft': [('readonly', False)]}),\n  858          'sequence': fields.integer('Sequence', help=\"Gives the sequence order when displaying a list of sales order lines.\"),\n  859:         'product_id': fields.many2one('product.product', 'Product', domain=[('sale_ok', '=', True)], change_default=True, readonly=True, states={'draft': [('readonly', False)]}, ondelete='restrict'),\n  860          'invoice_lines': fields.many2many('account.invoice.line', 'sale_order_line_invoice_rel', 'order_line_id', 'invoice_id', 'Invoice Lines', readonly=True, copy=False),\n  861          'invoiced': fields.function(_fnct_line_invoiced, string='Invoiced', type='boolean',\n  ...\n  890      }\n  891      _order = 'order_id desc, sequence, id'\n  892:     _defaults = {\n  893          'product_uom' : _get_uom_id,\n  894          'discount': 0.0,\n  ...\n  950              if not account_id:\n  951                  raise osv.except_osv(_('Error!'),\n  952:                             _('There is no Fiscal Position defined or Income category account defined for default properties of Product categories.'))\n  953              res = {\n  954                  'name': line.name,\n  ...\n 1023          if values.get('order_id') and values.get('product_id') and  any(f not in values for f in ['name', 'price_unit', 'type', 'product_uom_qty', 'product_uom']):\n 1024              order = self.pool['sale.order'].read(cr, uid, values['order_id'], ['pricelist_id', 'partner_id', 'date_order', 'fiscal_position'], context=context)\n 1025:             defaults = self.product_id_change(cr, uid, [], order['pricelist_id'][0], values['product_id'],\n 1026                  qty=float(values.get('product_uom_qty', False)),\n 1027                  uom=values.get('product_uom', False),\n ....\n 1035                  context=context\n 1036              )['value']\n 1037:             if defaults.get('tax_id'):\n 1038:                 defaults['tax_id'] = [[6, 0, defaults['tax_id']]]\n 1039:             values = dict(defaults, **values)\n 1040          return super(sale_order_line, self).create(cr, uid, values, context=context)\n 1041  \n ....\n 1061                     'product_uos': []}}\n 1062          if not date_order:\n 1063:             date_order = time.strftime(DEFAULT_SERVER_DATE_FORMAT)\n 1064  \n 1065          result = {}\n ....\n 1113              result['th_weight'] = result['product_uom_qty'] * product_obj.weight\n 1114          elif uom: # whether uos is set or not\n 1115:             default_uom = product_obj.uom_id and product_obj.uom_id.id\n 1116:             q = product_uom_obj._compute_qty(cr, uid, uom, qty, default_uom)\n 1117              if product_obj.uos_id:\n 1118                  result['product_uos'] = product_obj.uos_id.id\n ....\n 1178      def send_mail(self, cr, uid, ids, context=None):\n 1179          context = context or {}\n 1180:         if context.get('default_model') == 'sale.order' and context.get('default_res_id') and context.get('mark_so_as_sent'):\n 1181              context = dict(context, mail_post_autofollow=True)\n 1182:             self.pool.get('sale.order').signal_workflow(cr, uid, [context['default_res_id']], 'quotation_sent')\n 1183          return super(mail_compose_message, self).send_mail(cr, uid, ids, context=context)\n 1184  \n ....\n 1187      _inherit = 'account.invoice'\n 1188  \n 1189:     def _get_default_section_id(self, cr, uid, context=None):\n 1190:         \"\"\" Gives default section by checking if present in the context \"\"\"\n 1191          section_id = self._resolve_section_id_from_context(cr, uid, context=context) or False\n 1192          if not section_id:\n 1193:             section_id = self.pool.get('res.users').browse(cr, uid, uid, context).default_section_id.id or False\n 1194          return section_id\n 1195  \n ....\n 1201          if context is None:\n 1202              context = {}\n 1203:         if type(context.get('default_section_id')) in (int, long):\n 1204:             return context.get('default_section_id')\n 1205:         if isinstance(context.get('default_section_id'), basestring):\n 1206:             section_ids = self.pool.get('crm.case.section').name_search(cr, uid, name=context['default_section_id'], context=context)\n 1207              if len(section_ids) == 1:\n 1208                  return int(section_ids[0][0])\n ....\n 1213      }\n 1214  \n 1215:     _defaults = {\n 1216:         'section_id': lambda self, cr, uid, c=None: self._get_default_section_id(cr, uid, context=c)\n 1217      }\n 1218  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\sale\\sale_data.xml:\n   35              <field name=\"name\">Quotation sent</field>\n   36              <field name=\"res_model\">sale.order</field>\n   37:             <field name=\"default\" eval=\"False\"/>\n   38              <field name=\"description\">Quotation sent</field>\n   39          </record>\n   ..\n   41              <field name=\"name\">Sales Order Confirmed</field>\n   42              <field name=\"res_model\">sale.order</field>\n   43:             <field name=\"default\" eval=\"True\"/>\n   44              <field name=\"description\">Quotation confirmed</field>\n   45          </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\sale\\sale_view.xml:\n  101                      <group>\n  102                          <group>\n  103:                             <field name=\"partner_id\" on_change=\"onchange_partner_id(partner_id, context)\" domain=\"[('customer','=',True)]\" context=\"{'search_default_customer':1, 'show_address': 1}\" options='{\"always_reload\": True}'/>\n  104:                             <field name=\"partner_invoice_id\" groups=\"sale.group_delivery_invoice_address\" context=\"{'default_type':'invoice'}\"/>\n  105:                             <field name=\"partner_shipping_id\" on_change=\"onchange_delivery_id(company_id, partner_id, partner_shipping_id, fiscal_position)\" groups=\"sale.group_delivery_invoice_address\" context=\"{'default_type':'delivery'}\"/>\n  106:                             <field name=\"project_id\" context=\"{'partner_id':partner_invoice_id, 'manager_id': user_id, 'default_pricelist_id':pricelist_id, 'default_name':name, 'default_type': 'contract'}\" groups=\"sale.group_analytic_accounting\" domain=\"[('type','in',['view','normal','contract'])]\"/>\n  107                          </group>\n  108                          <group>\n  ...\n  201                              <group>\n  202                                  <group name=\"sales_person\" groups=\"base.group_user\">\n  203:                                     <field name=\"user_id\" context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'account.group_account_invoice', 'base.group_sale_salesman_all_leads']}\"/>\n  204                                      <field name=\"section_id\" options=\"{'no_create': True}\" groups=\"base.group_multi_salesteams\"/>\n  205                                      <field groups=\"base.group_no_one\" name=\"origin\"/>\n  ...\n  277              <field name=\"search_view_id\" ref=\"view_sales_order_filter\"/>\n  278              <field name=\"context\">{\n  279:                     'search_default_my_sale_orders_filter': 1\n  280                  }\n  281              </field>\n  ...\n  323              <field name=\"view_id\" ref=\"view_quotation_tree\"/>\n  324              <field name=\"view_mode\">tree,form,calendar,graph</field>\n  325:             <field name=\"context\">{'search_default_my_sale_orders_filter': 1}</field>\n  326              <field name=\"domain\">[('state','in',('draft','sent','cancel'))]</field>\n  327              <field name=\"search_view_id\" ref=\"view_sales_order_filter\"/>\n  ...\n  469              <field name=\"view_mode\">tree,form</field>\n  470              <field name=\"search_view_id\" ref=\"view_sales_order_uninvoiced_line_filter\"/>\n  471:             <field name=\"context\">{\"search_default_uninvoiced\":1}</field>\n  472              <field name=\"filter\" eval=\"True\"/>\n  473              <field name=\"help\" type=\"html\">\n  ...\n  491          </record>\n  492          <record id=\"action_order_line_product_tree\" model=\"ir.actions.act_window\">\n  493:             <field name=\"context\">{'search_default_product_id': active_id, 'default_product_id': active_id}</field>\n  494              <field name=\"name\">Sales Order Lines</field>\n  495              <field name=\"res_model\">sale.order.line</field>\n  ...\n  534                  <xpath expr=\"//group[@name='account_grp']\" position=\"after\">\n  535                      <group name=\"sale_grp\" string=\"Sales\">\n  536:                         <field name=\"sale_note\" nolabel=\"1\" placeholder=\"Default terms &amp; conditions...\"/>\n  537                      </group>\n  538                  </xpath>\n  ...\n  593              <field name=\"domain\">[('state','not in',('draft','sent','cancel'))]</field>\n  594              <field name=\"context\">{\n  595:                     'search_default_section_id': [active_id],\n  596:                     'default_section_id': active_id,\n  597                  }\n  598              </field>\n  ...\n  616              <field name=\"view_mode\">tree,form,calendar,graph</field>\n  617              <field name=\"context\">{\n  618:                     'search_default_section_id': [active_id],\n  619:                     'default_section_id': active_id,\n  620                      'show_address': 1,\n  621                  }\n  ...\n  648                  ('type', '=', 'out_invoice')]</field>\n  649              <field name=\"context\">{\n  650:                     'search_default_section_id': [active_id],\n  651:                     'default_section_id': active_id,\n  652:                     'default_type':'out_invoice',\n  653                      'type':'out_invoice',\n  654                      'journal_type': 'sale',\n  ...\n  676              <field name=\"view_mode\">graph</field>\n  677              <field name=\"domain\">[('state','=','draft'),('section_id', '=', active_id)]</field>\n  678:             <field name=\"context\">{'search_default_order_month':1}</field>\n  679              <field name=\"help\">This report performs analysis on your quotations. Analysis check your sales revenues and sort it by different group criteria (salesman, partner, product, etc.) Use this report to perform analysis on sales not having invoiced yet. If you want to analyse your turnover, you should use the Invoice Analysis report in the Accounting application.</field>\n  680          </record>\n  ...\n  685              <field name=\"view_mode\">graph</field>\n  686              <field name=\"domain\">[('state','not in',('draft','sent','cancel')),('section_id', '=', active_id)]</field>\n  687:             <field name=\"context\">{'search_default_order_month':1}</field>\n  688              <field name=\"help\">This report performs analysis on your sales orders. Analysis check your sales revenues and sort it by different group criteria (salesman, partner, product, etc.) Use this report to perform analysis on sales not having invoiced yet. If you want to analyse your turnover, you should use the Invoice Analysis report in the Accounting application.</field>\n  689          </record>\n  ...\n  694              <field name=\"view_mode\">graph</field>\n  695              <field name=\"domain\">[('section_id', '=', active_id),('state', 'not in', ['draft', 'cancel'])]</field>\n  696:             <field name=\"context\">{'search_default_month':1}</field>\n  697              <field name=\"help\">From this report, you can have an overview of the amount invoiced to your customer. The tool search can also be used to personalise your Invoices reports and so, match this analysis to your needs.</field>\n  698          </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\sale\\sales_team.py:\n   16          obj = self.pool['sale.order']\n   17          month_begin = date.today().replace(day=1)\n   18:         date_begin = (month_begin - relativedelta.relativedelta(months=self._period_number - 1)).strftime(tools.DEFAULT_SERVER_DATE_FORMAT)\n   19:         date_end = month_begin.replace(day=calendar.monthrange(month_begin.year, month_begin.month)[1]).strftime(tools.DEFAULT_SERVER_DATE_FORMAT)\n   20  \n   21          res = {}\n   ..\n   32          obj = self.pool['account.invoice.report']\n   33          month_begin = date.today().replace(day=1)\n   34:         date_begin = (month_begin - relativedelta.relativedelta(months=self._period_number - 1)).strftime(tools.DEFAULT_SERVER_DATE_FORMAT)\n   35:         date_end = month_begin.replace(day=calendar.monthrange(month_begin.year, month_begin.month)[1]).strftime(tools.DEFAULT_SERVER_DATE_FORMAT)\n   36  \n   37          res = {}\n   ..\n   64      }\n   65  \n   66:     _defaults = {\n   67          'use_quotations': True,\n   68      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\sale\\wizard\\sale_make_invoice.py:\n   29          'invoice_date': fields.date('Invoice Date'),\n   30      }\n   31:     _defaults = {\n   32          'grouped': False,\n   33          'invoice_date': fields.date.context_today,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\sale\\wizard\\sale_make_invoice_advance.py:\n   40              domain=[('type', '=', 'service')],\n   41              help=\"\"\"Select a product of type service which is called 'Advance Product'.\n   42:                 You may have to create it and set it as a default value on this field.\"\"\"),\n   43          'amount': fields.float('Advance Amount', digits_compute= dp.get_precision('Account'),\n   44              help=\"The amount to be invoiced in advance.\"),\n   ..\n   53          return product.id\n   54  \n   55:     _defaults = {\n   56          'advance_payment_method': 'all',\n   57          'qtty': 1.0,\n   ..\n  182              res = act_window.for_xml_id(cr, uid, 'sale', 'action_order_line_tree2', context)\n  183              res['context'] = {\n  184:                 'search_default_uninvoiced': 1,\n  185:                 'search_default_order_id': sale_ids and sale_ids[0] or False,\n  186              }\n  187              return res\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\sale\\wizard\\sale_make_invoice_advance.xml:\n   18                          <field name=\"product_id\"\n   19                              on_change=\"onchange_method(advance_payment_method, product_id)\"\n   20:                             context=\"{'search_default_services': 1}\"\n   21                              attrs=\"{'invisible': [('advance_payment_method','!=','fixed')]}\"/>\n   22                          <label for=\"amount\" attrs=\"{'invisible': [('advance_payment_method', 'not in', ('fixed','percentage'))]}\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\sale_crm\\sale_crm_view.xml:\n   19          <!-- add needaction_menu_ref to reload quotation needaction when opportunity needaction is reloaded -->\n   20          <record model=\"ir.actions.act_window\" id=\"crm.crm_case_category_act_oppor11\">\n   21:             <field name=\"context\">{'stage_type': 'opportunity', 'default_type': 'opportunity', 'default_user_id': uid, 'needaction_menu_ref': 'sale.menu_sale_quotations'}</field>\n   22          </record>\n   23  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\sale_crm\\wizard\\crm_make_sale.py:\n   32      def _selectPartner(self, cr, uid, context=None):\n   33          \"\"\"\n   34:         This function gets default value for partner_id field.\n   35          @param self: The object pointer\n   36          @param cr: the current row, from the database cursor,\n   37          @param uid: the current user’s ID for security checks,\n   38          @param context: A standard dictionary for contextual values\n   39:         @return: default value of partner_id field.\n   40          \"\"\"\n   41          if context is None:\n   ..\n   63          @return: Dictionary value of created sales order.\n   64          \"\"\"\n   65:         # update context: if come from phonecall, default state values can make the quote crash lp:1017353\n   66          context = dict(context or {})\n   67:         context.pop('default_state', False)        \n   68          \n   69          case_obj = self.pool.get('crm.lead')\n   ..\n   75              partner = make.partner_id\n   76              partner_addr = partner_obj.address_get(cr, uid, [partner.id],\n   77:                     ['default', 'invoice', 'delivery', 'contact'])\n   78              pricelist = partner.property_product_pricelist.id\n   79              fpos = partner.property_account_position and partner.property_account_position.id or False\n   ..\n   86                      payment_term = partner.property_payment_term and partner.property_payment_term.id or False\n   87                      partner_addr = partner_obj.address_get(cr, uid, [partner.id],\n   88:                             ['default', 'invoice', 'delivery', 'contact'])\n   89                      pricelist = partner.property_product_pricelist.id\n   90                  if False in partner_addr.values():\n   ..\n  144          'close': fields.boolean('Mark Won', help='Check this to close the opportunity after having created the sales order.'),\n  145      }\n  146:     _defaults = {\n  147          'close': False,\n  148          'partner_id': _selectPartner,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\sale_journal\\sale_journal.py:\n   31          'invoicing_method': fields.selection([('simple', 'Non grouped'), ('grouped', 'Grouped')], 'Invoicing method', required=True),\n   32      }\n   33:     _defaults = {\n   34          'active': True,\n   35          'invoicing_method': 'simple'\n   ..\n   48              string = \"Invoicing Type\",\n   49              group_name = \"Accounting Properties\",\n   50:             help = \"This invoicing type will be used, by default, to invoice the current partner.\"),\n   51      }\n   52  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\sale_layout\\models\\sale_layout.py:\n   50      }\n   51  \n   52:     _defaults = {\n   53          'subtotal': True,\n   54          'separator': True,\n   ..\n   85      categ_sequence = openerp.fields.Integer(related='sale_layout_cat_id.sequence',\n   86                                              string='Layout Sequence', store=True)\n   87:     _defaults = {\n   88          'categ_sequence': 0\n   89      }\n   ..\n  118      }\n  119  \n  120:     _defaults = {\n  121          'categ_sequence': 0\n  122      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\sale_order_dates\\sale_order_dates.py:\n   24  from openerp.osv import fields, osv\n   25  from openerp.tools.translate import _\n   26: from openerp.tools import DEFAULT_SERVER_DATETIME_FORMAT\n   27  \n   28  class sale_order_dates(osv.osv):\n   ..\n   33          \"\"\"Compute the expected date from the requested date, not the order date\"\"\"\n   34          if order and order.requested_date:\n   35:             date_planned = datetime.strptime(order.requested_date, DEFAULT_SERVER_DATETIME_FORMAT)\n   36              date_planned -= timedelta(days=order.company_id.security_lead)\n   37:             return date_planned.strftime(DEFAULT_SERVER_DATETIME_FORMAT)\n   38          return super(sale_order_dates, self)._get_date_planned(\n   39                  cr, uid, order, line, start_date, context=context)\n   ..\n   60          for order in self.browse(cr, uid, ids, context=context):\n   61              dates_list = []\n   62:             order_datetime = datetime.strptime(order.date_order, DEFAULT_SERVER_DATETIME_FORMAT)\n   63              for line in order.order_line:\n   64                  dt = order_datetime + timedelta(days=line.delay or 0.0)\n   65:                 dt_s = dt.strftime(DEFAULT_SERVER_DATETIME_FORMAT)\n   66                  dates_list.append(dt_s)\n   67              if dates_list:\n   ..\n   98                   \"Leave this field empty if you want the Delivery Order to be \"\n   99                   \"processed as soon as possible. In that case the expected \"\n  100:                  \"date will be computed using the default method: based on \"\n  101                   \"the Product Lead Times and the Company's Security Delay.\"),\n  102          'effective_date': fields.function(_get_effective_date, type='date',\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\sale_service\\models\\sale_service.py:\n  111      }\n  112  \n  113:     _defaults = {\n  114          'closed': False,\n  115      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\sale_service\\views\\sale_service_view.xml:\n   30              <field name=\"inherit_id\" ref=\"project.task_type_edit\"/>\n   31              <field name=\"arch\" type=\"xml\">\n   32:                 <field name=\"case_default\" position=\"after\">\n   33                      <field name=\"closed\"/>\n   34                  </field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\sale_stock\\company.py:\n   32                   \"cope with unexpected delays in the supply chain.\"),\n   33      }\n   34:     _defaults = {\n   35          'security_lead': 0.0,\n   36      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\sale_stock\\res_config.py:\n   37                   'and to automatically creates project tasks from procurement lines.\\n'\n   38                   '-This installs the modules project_timesheet and sale_service.'),\n   39:         'default_order_policy': fields.selection(\n   40              [('manual', 'Invoice based on sales orders'), ('picking', 'Invoice based on deliveries')],\n   41:             'The default invoicing method is', default_model='sale.order',\n   42              help=\"You can generate invoices based on sales orders or based on shippings.\"),\n   43          'module_delivery': fields.boolean('Allow adding shipping costs',\n   ..\n   45                   'You can define your own carrier and delivery grids for prices.\\n'\n   46                   '-This installs the module delivery.'),\n   47:         'default_picking_policy' : fields.boolean(\"Deliver all at once when all products are available.\",\n   48:             help = \"Sales order by default will be configured to deliver all products at once instead of delivering each product when it is available. This may have an impact on the shipping price.\"),\n   49          'group_mrp_properties': fields.boolean('Product properties on order lines',\n   50              implied_group='sale.group_mrp_properties',\n   ..\n   57      }\n   58  \n   59:     _defaults = {\n   60:         'default_order_policy': 'manual',\n   61      }\n   62  \n   63:     def default_get(self, cr, uid, fields, context=None):\n   64:         res = super(sale_configuration, self).default_get(cr, uid, fields, context)\n   65          # task_work, time_unit depend on other fields\n   66          res['task_work'] = res.get('module_sale_service') and res.get('module_project_timesheet')\n   67          return res\n   68  \n   69:     def get_default_sale_config(self, cr, uid, ids, context=None):\n   70          ir_values = self.pool.get('ir.values')\n   71:         default_picking_policy = ir_values.get_default(cr, uid, 'sale.order', 'picking_policy')\n   72          return {\n   73:             'default_picking_policy': default_picking_policy == 'one',\n   74          }\n   75  \n   76:     def set_sale_defaults(self, cr, uid, ids, context=None):\n   77          if uid != SUPERUSER_ID and not self.pool['res.users'].has_group(cr, uid, 'base.group_erp_manager'):\n   78              raise openerp.exceptions.AccessError(_(\"Only administrators can change the settings\"))\n   ..\n   80          wizard = self.browse(cr, uid, ids)[0]\n   81  \n   82:         default_picking_policy = 'one' if wizard.default_picking_policy else 'direct'\n   83:         ir_values.set_default(cr, SUPERUSER_ID, 'sale.order', 'picking_policy', default_picking_policy)\n   84:         res = super(sale_configuration, self).set_sale_defaults(cr, uid, ids, context)\n   85          return res\n   86  \n   87      def onchange_invoice_methods(self, cr, uid, ids, group_invoice_so_lines, group_invoice_deli_orders, context=None):\n   88          if not group_invoice_deli_orders:\n   89:             return {'value': {'default_order_policy': 'manual'}}\n   90          if not group_invoice_so_lines:\n   91:             return {'value': {'default_order_policy': 'picking'}}\n   92          return {}\n   93  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\sale_stock\\res_config_view.xml:\n   24                           </div>\n   25                       </xpath>\n   26:                      <xpath expr=\"//label[@string='Default Options']\" position=\"replace\">\n   27:                          <label for=\"id\" string=\"Default Options\"/>\n   28                       </xpath>\n   29                       <xpath expr=\"//div[@name='time_unit']\" position=\"before\">\n   30                           <div attrs=\"{'invisible':['|',('group_invoice_so_lines','=',False),('group_invoice_deli_orders','=',False)],'required': ['|',('group_invoice_so_lines','=',True),('group_invoice_deli_orders','=',True)]}\">\n   31:                              <label for=\"default_order_policy\"/>\n   32:                              <field name=\"default_order_policy\" class=\"oe_inline\"/>\n   33                           </div>\n   34                           <div>\n   ..\n   37                           </div>\n   38                       </xpath> \n   39:                      <group name='default_options' position=\"after\">\n   40                           <field name=\"module_project_timesheet\" invisible=\"1\"/>\n   41                           <field name=\"module_sale_service\" invisible=\"1\"/>\n   42                       </group>\n   43                       <div name='warehouse_features' position='inside'>\n   44:                          <div name='default_picking_policy' attrs=\"{'invisible':[('group_invoice_deli_orders','=',False)]}\">\n   45:                              <field name=\"default_picking_policy\" class=\"oe_inline\"/>\n   46:                              <label for=\"default_picking_policy\"/>\n   47                           </div>\n   48                       </div>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\sale_stock\\sale_stock.py:\n   21  ##############################################################################\n   22  from datetime import datetime, timedelta\n   23: from openerp.tools import DEFAULT_SERVER_DATE_FORMAT, DEFAULT_SERVER_DATETIME_FORMAT, DATETIME_FORMATS_MAP, float_compare\n   24  from openerp.osv import fields, osv\n   25  from openerp.tools.safe_eval import safe_eval as eval\n   ..\n   31      _inherit = \"sale.order\"\n   32  \n   33:     def _get_default_warehouse(self, cr, uid, context=None):\n   34          company_id = self.pool.get('res.users')._get_company(cr, uid, context=context)\n   35          warehouse_ids = self.pool.get('stock.warehouse').search(cr, uid, [('company_id', '=', company_id)], context=context)\n   ..\n   98          'picking_ids': fields.function(_get_picking_ids, method=True, type='one2many', relation='stock.picking', string='Picking associated to this sale'),\n   99      }\n  100:     _defaults = {\n  101:         'warehouse_id': _get_default_warehouse,\n  102          'picking_policy': 'direct',\n  103          'order_policy': 'manual',\n  ...\n  173      def _get_date_planned(self, cr, uid, order, line, start_date, context=None):\n  174          date_planned = super(sale_order, self)._get_date_planned(cr, uid, order, line, start_date, context=context)\n  175:         date_planned = (date_planned - timedelta(days=order.company_id.security_lead)).strftime(DEFAULT_SERVER_DATETIME_FORMAT)\n  176          return date_planned\n  177  \n  ...\n  234      }\n  235  \n  236:     _defaults = {\n  237          'product_packaging': False,\n  238      }\n  ...\n  259  \n  260          if packaging:\n  261:             default_uom = products.uom_id and products.uom_id.id\n  262              pack = pack_obj.browse(cr, uid, packaging, context=context)\n  263:             q = product_uom_obj._compute_qty(cr, uid, uom, pack.qty, default_uom)\n  264  #            qty = qty - qty % q + q\n  265              if qty and (q and not (qty % q) == 0):\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\sale_stock\\sale_stock_view.xml:\n   65                     <xpath expr=\"//page[@string='Order Lines']/field[@name='order_line']/form[@string='Sales Order Lines']/group/group/field[@name='tax_id']\" position=\"before\">\n   66                         <field name=\"product_tmpl_id\" invisible=\"1\"/>\n   67:                        <field name=\"product_packaging\" context=\"{'default_product_tmpl_id': product_tmpl_id, 'partner_id':parent.partner_id, 'quantity':product_uom_qty, 'pricelist':parent.pricelist_id, 'uom':product_uom}\" on_change=\"product_packaging_change(parent.pricelist_id, product_id, product_uom_qty, product_uom, parent.partner_id, product_packaging, True, context)\" domain=\"[('product_tmpl_id','=',product_tmpl_id)]\" groups=\"product.group_stock_packaging\" />\n   68                     </xpath>\n   69                     <xpath expr=\"//page[@string='Order Lines']/field[@name='order_line']/tree[@string='Sales Order Lines']/field[@name='sequence']\" position=\"after\">\n   ..\n  107              id=\"res_partner_rule_children\"\n  108              name=\"Contact Details\"\n  109:             context=\"{'default_parent_id': active_id, 'hide_type': 0}\"\n  110              domain=\"[('parent_id','=',active_id)]\"\n  111              res_model=\"res.partner\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\sale_stock\\stock_view.xml:\n   11              <field name=\"view_mode\">tree,form,calendar</field>\n   12              <field name=\"domain\">[('picking_type_id.code','=','outgoing')]</field>\n   13:             <field name=\"context\">{'default_type': 'out', 'contact_display': 'partner_address', 'search_default_to_invoice': 1, 'search_default_done': 1}</field>\n   14              <field name=\"search_view_id\" ref=\"stock.view_picking_internal_search\"/>\n   15          </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\sales_team\\sales_team.py:\n   57                            } for i in range(self._period_number - 1, -1, -1)]\n   58          group_obj = obj.read_group(cr, uid, domain, read_fields, groupby_field, context=context)\n   59:         pattern = tools.DEFAULT_SERVER_DATE_FORMAT if obj.fields_get(cr, uid, groupby_field)[groupby_field]['type'] == 'date' else tools.DEFAULT_SERVER_DATETIME_FORMAT\n   60          for group in group_obj:\n   61              group_begin_date = datetime.strptime(group['__domain'][0][2], pattern)\n   ..\n   81      }\n   82  \n   83:     _defaults = {\n   84          'active': 1,\n   85      }\n   ..\n  120      _inherit = 'res.users'\n  121      _columns = {\n  122:         'default_section_id': fields.many2one('crm.case.section', 'Default Sales Team'),\n  123      }\n  124  \n  ...\n  127          # duplicate list to avoid modifying the original reference\n  128          self.SELF_WRITEABLE_FIELDS = list(self.SELF_WRITEABLE_FIELDS)\n  129:         self.SELF_WRITEABLE_FIELDS.extend(['default_section_id'])\n  130          return init_res\n  131  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\sales_team\\sales_team.xml:\n   13                  <data>\n   14                      <xpath expr=\"//field[@name='tz']\" position=\"after\">\n   15:                         <field name=\"default_section_id\"/>\n   16                      </xpath>\n   17                  </data>\n   ..\n   27                  <data>\n   28                      <xpath expr=\"//field[@name='company_id']\" position=\"before\">\n   29:                         <field name=\"default_section_id\" readonly=\"0\"/>\n   30                      </xpath>\n   31                  </data>\n   ..\n  128                          <group>\n  129                              <group name=\"left\">\n  130:                                 <field name=\"user_id\" context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'base.group_sale_salesman_all_leads']}\"/>\n  131                                  <field name=\"code\"/>\n  132                                  <field name=\"parent_id\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\share\\res_users_view.xml:\n   17          </record>\n   18  \n   19:         <!-- Hide share users/groups by default -->\n   20          <record model=\"ir.actions.act_window\" id=\"base.action_res_users\">\n   21              <field name=\"name\">Users</field>\n   22:             <field name=\"context\">{'search_default_no_share': 1}</field>\n   23          </record>\n   24  \n   ..\n   36          </record>\n   37  \n   38:         <!-- Hide share users/groups by default -->\n   39          <record model=\"ir.actions.act_window\" id=\"base.action_res_groups\">\n   40              <field name=\"name\">Groups</field>\n   41:             <field name=\"context\">{'search_default_no_share': 1}</field>\n   42          </record>\n   43          <record id=\"view_groups_form_share\" model=\"ir.ui.view\">\n   ..\n   47              <field name=\"arch\" type=\"xml\">\n   48                  <field name=\"users\" position=\"attributes\">\n   49:                     <attribute name=\"context\">{'search_default_no_share':1}</attribute>\n   50                  </field>\n   51                  <field name=\"name\" position=\"after\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\share\\wizard\\share_wizard.py:\n   87      def share_url_template(self, cr, uid, _ids, context=None):\n   88          # NOTE: take _ids in parameter to allow usage through browse_record objects\n   89:         base_url = self.pool.get('ir.config_parameter').get_param(cr, uid, 'web.base.url', default='', context=context)\n   90          if base_url:\n   91              base_url += '/login?db=%(dbname)s&login=%(login)s&key=%(password)s'\n   ..\n  121          js_options_str = (', ' + simplejson.dumps(js_options)) if js_options else ''\n  122  \n  123:         base_url = self.pool.get('ir.config_parameter').get_param(cr, uid, 'web.base.url', default=None, context=context)\n  124          user = wizard.result_line_ids[0]\n  125  \n  ...\n  185          'embed_url': fields.function(_embed_url, string='Share URL', size=512, type='char', readonly=True),\n  186      }\n  187:     _defaults = {\n  188          'view_type': 'page',\n  189          'user_type' : 'embedded',\n  ...\n  291          new_context = context.copy()\n  292          for key in context:\n  293:             if key.startswith('default_'):\n  294                  del new_context[key]\n  295          action_id = self.pool.get('ir.actions.act_window').create(cr, UID_ROOT, values, new_context)\n  ...\n  311                  result = dict(context)\n  312                  for key in context:\n  313:                     # Remove all context keys that seem to toggle default\n  314                      # filters based on the current user, as it makes no sense\n  315:                     # for shared users, who would not see any data by default.\n  316:                     if key and key.startswith('search_default_') and 'user_id' in key:\n  317                          result.pop(key)\n  318              except Exception:\n  ...\n  365              if make_home:\n  366                  # We do this only for new share users, as existing ones already have their initial home\n  367:                 # action. Resetting to the default menu does not work well as the menu is rather empty\n  368                  # and does not contain the shortcuts in most cases.\n  369                  user_obj.write(cr, UID_ROOT, [user_id], {'action_id': action_id})\n  ...\n  460          if user_right_ids:\n  461              for access_right in model_access_obj.browse(cr, uid, user_right_ids, context=context):\n  462:                 access_line = user_access_matrix.setdefault(access_right.model_id.model, set())\n  463                  for perm in FULL_ACCESS:\n  464                      if getattr(access_right, perm, 0):\n  ...\n  500                     and perm not in existing_group_access_line:\n  501                      values.update({perm:True})\n  502:                     group_access_map.setdefault(model.model, set()).add(perm)\n  503                      need_creation = True\n  504              if need_creation:\n  ...\n  521                              # the evaluated version of the domain.\n  522                              # And it's better to copy one time too much than too few\n  523:                             rule_obj.copy(cr, UID_ROOT, rule.id, default={\n  524                                  'name': '%s %s' %(rule.name, _('(Copy for sharing)')),\n  525                                  'groups': [(6,0,[group_id])],\n  ...\n  546          rule_obj = self.pool.get('ir.rule')\n  547          new_id = rule_obj.copy(cr, UID_ROOT, rule.id,\n  548:                                default={\n  549                                         'name': '%s %s' %(rule.name, _('(Duplicated for modified sharing permissions)')),\n  550                                         'groups': [(6,0,[group_id])],\n  ...\n  561             combined with AND operator with all existing rules in the group, to implement\n  562             an additional restriction (as of 6.1, multiple rules in the same group are\n  563:            OR'ed by default, so a restriction must alter all existing rules)\n  564  \n  565             This is necessary because the personal rules of the user that is sharing\n  566             are first copied to the new share group. Afterwards the filters used for\n  567             sharing are applied as an additional layer of rules, which are likely to\n  568:            apply to the same model. The default rule algorithm would OR them (as of 6.1),\n  569             which would result in a combined set of permission that could be larger\n  570             than those of the user that is sharing! Hence we must forcefully AND the\n  ...\n  742          #     -> send a notification to all users; users allowing to receive\n  743          #        emails in preferences will receive it\n  744:         #        new users by default receive all notifications by email\n  745          \n  746          # A.\n  ...\n  906          'newly_created': fields.boolean('Newly created', readonly=True),\n  907      }\n  908:     _defaults = {\n  909          'newly_created': True,\n  910      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock\\partner.py:\n   29            relation='stock.location',\n   30            string=\"Customer Location\",\n   31:           help=\"This stock location will be used, instead of the default one, as the destination location for goods you send to this partner\"),\n   32          'property_stock_supplier': fields.property(\n   33            type='many2one',\n   34            relation='stock.location',\n   35            string=\"Supplier Location\",\n   36:           help=\"This stock location will be used, instead of the default one, as the source location for goods you receive from the current partner\"),\n   37      }\n   38  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock\\procurement.py:\n   23  from openerp.tools.translate import _\n   24  \n   25: from openerp.tools import DEFAULT_SERVER_DATE_FORMAT, DEFAULT_SERVER_DATETIME_FORMAT, float_compare, float_round\n   26  from openerp import SUPERUSER_ID\n   27  from dateutil.relativedelta import relativedelta\n   ..\n   71      }\n   72  \n   73:     _defaults = {\n   74          'procure_method': 'make_to_stock',\n   75          'propagate': True,\n   ..\n  119  \n  120      def _search_suitable_rule(self, cr, uid, procurement, domain, context=None):\n  121:         '''we try to first find a rule among the ones defined on the procurement order group and if none is found, we try on the routes defined for the product, and finally we fallback on the default behavior'''\n  122          pull_obj = self.pool.get('procurement.rule')\n  123          warehouse_route_ids = []\n  ...\n  305      def _get_orderpoint_date_planned(self, cr, uid, orderpoint, start_date, context=None):\n  306          date_planned = start_date + relativedelta(days=orderpoint.product_id.seller_delay or 0.0)\n  307:         return date_planned.strftime(DEFAULT_SERVER_DATE_FORMAT)\n  308  \n  309      def _prepare_orderpoint_procurement(self, cr, uid, orderpoint, product_qty, context=None):\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock\\product.py:\n  346              string=\"Procurement Location\",\n  347              domain=[('usage','like','procurement')],\n  348:             help=\"This stock location will be used, instead of the default one, as the source location for stock moves generated by procurements.\"),\n  349          'property_stock_production': fields.property(\n  350              type='many2one',\n  ...\n  352              string=\"Production Location\",\n  353              domain=[('usage','like','production')],\n  354:             help=\"This stock location will be used, instead of the default one, as the source location for stock moves generated by manufacturing orders.\"),\n  355          'property_stock_inventory': fields.property(\n  356              type='many2one',\n  ...\n  358              string=\"Inventory Location\",\n  359              domain=[('usage','like','inventory')],\n  360:             help=\"This stock location will be used, instead of the default one, as the source location for stock moves generated when you do an inventory.\"),\n  361          'sale_delay': fields.float('Customer Lead Time', help=\"The average delay in days between the confirmation of the customer order and the delivery of the finished products. It's the time you promise to your customers.\"),\n  362          'loc_rack': fields.char('Rack', size=16),\n  ...\n  385      }\n  386  \n  387:     _defaults = {\n  388          'sale_delay': 7,\n  389      }\n  ...\n  421          result = self._get_act_window_dict(cr, uid, 'stock.product_open_quants', context=context)\n  422          result['domain'] = \"[('product_id','in',[\" + ','.join(map(str, products)) + \"])]\"\n  423:         result['context'] = \"{'search_default_locationgroup': 1, 'search_default_internal_loc': 1}\"\n  424          return result\n  425      \n  ...\n  428          result = self._get_act_window_dict(cr, uid, 'stock.product_open_orderpoint', context=context)\n  429          if len(ids) == 1 and len(products) == 1:\n  430:             result['context'] = \"{'default_product_id': \" + str(products[0]) + \", 'search_default_product_id': \" + str(products[0]) + \"}\"\n  431          else:\n  432              result['domain'] = \"[('product_id','in',[\" + ','.join(map(str, products)) + \"])]\"\n  ...\n  440          if len(ids) == 1 and len(products) == 1:\n  441              ctx = \"{'tree_view_ref':'stock.view_move_tree', \\\n  442:                   'default_product_id': %s, 'search_default_product_id': %s}\" \\\n  443                    % (products[0], products[0])\n  444              result['context'] = ctx\n  ...\n  472      }\n  473  \n  474:     _defaults = {\n  475          'method': 'fixed',\n  476      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock\\product_view.xml:\n   42              <field name=\"domain\" eval=\"[('picking_id.picking_type_id.code','=','incoming'), ('location_id.usage','!=','internal'), ('location_dest_id.usage', '=', 'internal')]\"/>\n   43              <field name=\"view_id\" ref=\"view_move_tree_receipt_picking\"/>\n   44:             <field name=\"context\" eval=\"'{\\'search_default_product_id\\': [active_id]}'\"/>\n   45              <field name=\"help\" type=\"html\">\n   46                <p class=\"oe_view_nocontent_create\">\n   ..\n   62              <field name=\"view_id\" ref=\"view_move_tree_receipt_picking\"/>\n   63              <field name=\"domain\" eval=\"[('picking_type_id.code','=','outgoing'), ('location_id.usage','=','internal'), ('location_dest_id.usage', '!=', 'internal')]\"/>\n   64:             <field name=\"context\" eval=\"'{\\'search_default_product_id\\': [active_id]}'\"/>\n   65              <field name=\"help\" type=\"html\">\n   66                <p class=\"oe_view_nocontent_create\">\n   ..\n  146                  </group>\n  147                  <field name=\"product_manager\" position=\"attributes\">\n  148:                     <attribute name=\"context\">{'default_groups_ref': ['base.group_user', 'base.group_sale_manager', 'stock.group_stock_manager']}</attribute>\n  149                  </field>\n  150                  <group name=\"procurement_uom\" position=\"after\" >\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock\\report\\product_stock.py:\n   87              else:\n   88                  dt = dt[:10]\n   89:             products.setdefault(prod_id, [])\n   90              products[prod_id].append((dt,-qty))\n   91  \n   ..\n  102              else:\n  103                  dt = dt[:10]\n  104:             products.setdefault(prod_id, [])\n  105              products[prod_id].append((dt,qty))\n  106  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock\\report\\report_stock_view.xml:\n   50              <field name=\"res_model\">report.stock.lines.date</field>\n   51              <field name=\"view_type\">form</field>\n   52:              <field name=\"context\">{'search_default_stockable':1}</field>\n   53              <field name=\"view_mode\">tree,form</field>\n   54              <field name=\"help\">Display the latest Inventories and Moves done on your products and easily sort them with specific filtering criteria. If you do frequent and partial inventories, you need this report in order to ensure that the stock of each product is controlled at least once a year. This also lets you find out which products have seen little move lately and may deserve special measures (discounted sale, quality control...)</field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock\\res_config.py:\n   54          return company_id\n   55  \n   56:     _defaults = {\n   57          'propagation_minimum_delta': 1,\n   58      }\n   ..\n  118          return {}\n  119  \n  120:     def _default_company(self, cr, uid, context=None):\n  121          user = self.pool.get('res.users').browse(cr, uid, uid, context=context)\n  122          return user.company_id.id\n  123  \n  124:     def get_default_dp(self, cr, uid, fields, context=None):\n  125          dp = self.pool.get('ir.model.data').get_object(cr, uid, 'product', 'decimal_stock_weight')\n  126          return {'decimal_precision': dp.digits}\n  127  \n  128:     def set_default_dp(self, cr, uid, ids, context=None):\n  129          config = self.browse(cr, uid, ids[0], context)\n  130          dp = self.pool.get('ir.model.data').get_object(cr, uid, 'product', 'decimal_stock_weight')\n  131          dp.write({'digits': config.decimal_precision})\n  132  \n  133:     _defaults = {\n  134:         'company_id': _default_company,\n  135      }\n  136  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock\\static\\src\\xml\\picking.xml:\n   21                      </div>\n   22                      <div class=\"modal-footer\">\n   23:                         <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Close</button>\n   24                          <button type=\"button\" class=\"btn btn-primary js_validate_location\">Change Location</button>\n   25                      </div>\n   ..\n   40                      </div>\n   41                      <div class=\"modal-footer\">\n   42:                         <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Close</button>\n   43                          <button type=\"button\" class=\"btn btn-primary js_validate_lot\">Create Lot</button>\n   44                      </div>\n   ..\n   64                      </div>\n   65                      <div class=\"modal-footer\">\n   66:                         <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Close</button>\n   67                          <button type=\"button\" class=\"btn btn-primary js_validate_pack\">Validate package</button>\n   68                      </div>\n   ..\n   78                      <div class=\"col-sm-8 col-xs⁻6 text-right\">\n   79  \n   80:                     <button type=\"button\" class='btn btn-default js_pick_done'> Create backorder </button>\n   81:                     <button type=\"button\" class='btn btn-default js_pick_print'> Print </button>\n   82  \n   83                      </div>\n   ..\n  108                  <div class=\"col-md-6 col-sm-4 col-xs-12 text-right\">\n  109                      <h3>\n  110:                         <button type=\"button\" class='btn btn-default js_pick_pack js_putinpack'> Put in Pack </button>\n  111                          <button type=\"button\" class='btn btn-danger js_drop_down fa fa-download'> Put in Cart </button>\n  112                      </h3>\n  ...\n  159                              <td class=\"brctbl-col5 js_loc\"> <t t-esc=\"row.cols.dest\" />\n  160                                  <div class=\"pull-right btn-group\">\n  161:                                     <button type=\"button\" class=\"btn btn-default dropdown-toggle fa fa-cog\" data-toggle=\"dropdown\">\n  162                                       <span class=\"caret\"></span>\n  163                                      </button>\n  ...\n  198                  <t t-foreach=\"results\" t-as=\"picking\">\n  199                      <div class=\"col-lg-3 col-md-4\">\n  200:                         <div class=\"panel panel-default oe_picking\" t-att-data-id=\"picking.id\">\n  201                              <div class=\"panel-body\">\n  202                                  <strong class='oe_picking_name'><t t-esc=\"picking.name\" /></strong>\n  ...\n  258                  </div>\n  259                  <div class=\"navbar-right\">\n  260:                     <button type=\"button\" class=\"btn btn-default navbar-btn js_pick_prev\">&lt; Previous</button>\n  261:                     <button type=\"button\" class=\"btn btn-default navbar-btn js_pick_next\">Next &gt;</button>\n  262                  </div>\n  263              </div>\n  ...\n  267              <div class='oe_placeholder_picking_editor'/>\n  268              <div class=\"text-right small oe_reload_op\">\n  269:                 The reserved stock changed. You might want to <button class=\"btn btn-default js_reload_op\"> Recompute </button> the operations.\n  270              </div>\n  271          </div>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock\\stock.py:\n   28  from openerp.tools.float_utils import float_compare, float_round\n   29  from openerp.tools.translate import _\n   30: from openerp.tools import DEFAULT_SERVER_DATETIME_FORMAT, DEFAULT_SERVER_DATE_FORMAT\n   31  from openerp import SUPERUSER_ID, api\n   32  import openerp.addons.decimal_precision as dp\n   ..\n   47          'active': fields.boolean('Active', help=\"By unchecking the active field, you may hide an INCOTERM you will not use.\"),\n   48      }\n   49:     _defaults = {\n   50          'active': True,\n   51      }\n   ..\n  141          'company_id': fields.many2one('res.company', 'Company', select=1, help='Let this field empty if this location is shared between companies'),\n  142          'scrap_location': fields.boolean('Is a Scrap Location?', help='Check this box to allow using this location to put scrapped/damaged goods.'),\n  143:         'removal_strategy_id': fields.many2one('product.removal', 'Removal Strategy', help=\"Defines the default method used for suggesting the exact location (shelf) where to take the products from, which lot etc. for this location. This method can be enforced at the product category level, and a fallback is made on the parent locations if none is set here.\"),\n  144:         'putaway_strategy_id': fields.many2one('product.putaway', 'Put Away Strategy', help=\"Defines the default method used for suggesting the exact location (shelf) where to store the products. This method can be enforced at the product category level, and a fallback is made on the parent locations if none is set here.\"),\n  145          'loc_barcode': fields.char('Location Barcode'),\n  146      }\n  147:     _defaults = {\n  148          'active': True,\n  149          'usage': 'internal',\n  150:         'company_id': lambda self, cr, uid, c: self.pool.get('res.company')._company_default_get(cr, uid, 'stock.location', context=c),\n  151          'posx': 0,\n  152          'posy': 0,\n  ...\n  156      _sql_constraints = [('loc_barcode_company_uniq', 'unique (loc_barcode,company_id)', 'The barcode for a location must be unique per company !')]\n  157  \n  158:     def create(self, cr, uid, default, context=None):\n  159:         if not default.get('loc_barcode', False):\n  160:             default.update({'loc_barcode': default.get('complete_name', False)})\n  161:         return super(stock_location, self).create(cr, uid, default, context=context)\n  162  \n  163      def get_putaway_strategy(self, cr, uid, location, product, context=None):\n  ...\n  172              loc = loc.location_id\n  173  \n  174:     def _default_removal_strategy(self, cr, uid, context=None):\n  175          return 'fifo'\n  176  \n  ...\n  188                  return loc.removal_strategy_id.method\n  189              loc = loc.location_id\n  190:         return self._default_removal_strategy(cr, uid, context=context)\n  191  \n  192  \n  ...\n  224      }\n  225  \n  226:     _defaults = {\n  227          'sequence': lambda self, cr, uid, ctx: 0,\n  228          'active': True,\n  229          'product_selectable': True,\n  230:         'company_id': lambda self, cr, uid, c: self.pool.get('res.company')._company_default_get(cr, uid, 'stock.location.route', context=c),\n  231      }\n  232  \n  ...\n  295          'product_id': fields.many2one('product.product', 'Product', required=True, ondelete=\"restrict\", readonly=True, select=True),\n  296          'location_id': fields.many2one('stock.location', 'Location', required=True, ondelete=\"restrict\", readonly=True, select=True),\n  297:         'qty': fields.float('Quantity', required=True, help=\"Quantity of products in this quant, in the default unit of measure of the product\", readonly=True, select=True),\n  298          'package_id': fields.many2one('stock.quant.package', string='Package', help=\"The package containing this quant\", readonly=True, select=True),\n  299          'packaging_type_id': fields.related('package_id', 'packaging_id', type='many2one', relation='product.packaging', string='Type of packaging', readonly=True, store=True),\n  ...\n  317      }\n  318  \n  319:     _defaults = {\n  320:         'company_id': lambda self, cr, uid, c: self.pool.get('res.company')._company_default_get(cr, uid, 'stock.quant', context=c),\n  321      }\n  322  \n  ...\n  494              'cost': price_unit,\n  495              'history_ids': [(4, move.id)],\n  496:             'in_date': datetime.now().strftime(DEFAULT_SERVER_DATETIME_FORMAT),\n  497              'company_id': move.company_id.id,\n  498              'lot_id': lot_id,\n  ...\n  524          qty_round = float_round(qty, precision_rounding=rounding)\n  525          new_qty_round = float_round(quant.qty - qty, precision_rounding=rounding)\n  526:         new_quant = self.copy(cr, SUPERUSER_ID, quant.id, default={'qty': new_qty_round, 'history_ids': [(4, x.id) for x in quant.history_ids]}, context=context)\n  527          self.write(cr, SUPERUSER_ID, quant.id, {'qty': qty_round}, context=context)\n  528          return self.browse(cr, uid, new_quant, context=context)\n  ...\n  690          context = context or {}\n  691          if ('name' not in vals) or (vals.get('name') in ('/', False)):\n  692:             ptype_id = vals.get('picking_type_id', context.get('default_picking_type_id', False))\n  693              sequence_id = self.pool.get('stock.picking.type').browse(cr, user, ptype_id, context=context).sequence_id.id\n  694              vals['name'] = self.pool.get('ir.sequence').get_id(cr, user, sequence_id, 'id', context=context)\n  ...\n  818          'picking_type_code': fields.related('picking_type_id', 'code', type='char', string='Picking Type Code', help=\"Technical field used to display the correct label on print button in the picking view\"),\n  819  \n  820:         'owner_id': fields.many2one('res.partner', 'Owner', states={'done': [('readonly', True)], 'cancel': [('readonly', True)]}, help=\"Default Owner\"),\n  821          # Used to search on pickings\n  822          'product_id': fields.related('move_lines', 'product_id', type='many2one', relation='product.product', string='Product'),\n  ...\n  831      }\n  832  \n  833:     _defaults = {\n  834          'name': '/',\n  835          'state': 'draft',\n  ...\n  837          'priority': '1',  # normal\n  838          'date': fields.datetime.now,\n  839:         'company_id': lambda self, cr, uid, c: self.pool.get('res.company')._company_default_get(cr, uid, 'stock.picking', context=c),\n  840          'recompute_pack_op': True,\n  841      }\n  ...\n  954              move_obj.write(cr, uid, backorder_move_ids, {'picking_id': backorder_id}, context=context)\n  955  \n  956:             self.write(cr, uid, [picking.id], {'date_done': time.strftime(DEFAULT_SERVER_DATETIME_FORMAT)}, context=context)\n  957              self.action_confirm(cr, uid, [backorder_id], context=context)\n  958              return backorder_id\n  ...\n 1025              return location or picking.location_dest_id.id\n 1026  \n 1027:         # If we encounter an UoM that is smaller than the default UoM or the one already chosen, use the new one instead.\n 1028          product_uom = {} # Determines UoM used in pack operations\n 1029          for move in picking.move_lines:\n ....\n 1310              if op.product_uom_id.factor > product.uom_id.factor: #If the pack operation's is a smaller unit\n 1311                  uom_id = op.product_uom_id.id\n 1312:                 #HALF-UP rounding as only rounding errors will be because of propagation of error from default UoM\n 1313                  qty = uom_obj._compute_qty_obj(cr, uid, product.uom_id, remaining_qty, op.product_uom_id, rounding_method='HALF-UP')\n 1314          picking = op.picking_id\n ....\n 1439              context = {}\n 1440          domain = [('state', 'in', ('assigned', 'partially_available'))]\n 1441:         if context.get('default_picking_type_id'):\n 1442:             domain.append(('picking_type_id', '=', context['default_picking_type_id']))\n 1443          return self.search(cr, uid, domain, context=context)\n 1444  \n ....\n 1505              return answer\n 1506          #check if the barcode correspond to a product\n 1507:         matching_product_ids = product_obj.search(cr, uid, ['|', ('ean13', '=', barcode_str), ('default_code', '=', barcode_str)], context=context)\n 1508          if matching_product_ids:\n 1509              op_id = stock_operation_obj._search_and_increment(cr, uid, picking_id, [('product_id', '=', matching_product_ids[0])], filter_visible=True, visible_op_ids=visible_op_ids, increment=True, context=context)\n ....\n 1537          'create_date': fields.datetime('Creation Date'),\n 1538      }\n 1539:     _defaults = {\n 1540          'name': lambda x, y, z, c: x.pool.get('ir.sequence').get(y, z, 'stock.lot.serial'),\n 1541          'product_id': lambda x, y, z, c: c.get('product_id', False),\n ....\n 1611              for record in move.linked_move_operation_ids:\n 1612                  qty -= record.qty\n 1613:             # Keeping in product default UoM\n 1614              res[move.id] = float_round(qty, precision_rounding=move.product_id.uom_id.rounding)\n 1615          return res\n ....\n 1693      def _set_product_qty(self, cr, uid, id, field, value, arg, context=None):\n 1694          \"\"\" The meaning of product_qty field changed lately and is now a functional field computing the quantity\n 1695:             in the default product UoM. This code has been added to raise an error if a write is made given a value\n 1696              for `product_qty`, where the same write should set the `product_uom_qty` field instead, in order to\n 1697              detect errors.\n ....\n 1710                  'product.product': (_get_moves_from_prod, ['uom_id'], 20),\n 1711              }, string='Quantity',\n 1712:             help='Quantity in the default UoM of the product'),\n 1713          'product_uom_qty': fields.float('Quantity', digits_compute=dp.get_precision('Product Unit of Measure'),\n 1714              required=True, states={'done': [('readonly', True)]},\n ....\n 1758          'backorder_id': fields.related('picking_id', 'backorder_id', type='many2one', relation=\"stock.picking\", string=\"Back Order of\", select=True),\n 1759          'origin': fields.char(\"Source\"),\n 1760:         'procure_method': fields.selection([('make_to_stock', 'Default: Take From Stock'), ('make_to_order', 'Advanced: Apply Procurement Rules')], 'Supply Method', required=True, \n 1761:                                            help=\"\"\"By default, the system will take from the stock in the source location and passively wait for availability. The other possibility allows you to directly create a procurement on the source location (and thus ignore its current stock) to gather products. If we want to chain moves and have this one to wait for the previous, this second option should be chosen.\"\"\"),\n 1762  \n 1763          # used for colors in tree views:\n ....\n 1768          'linked_move_operation_ids': fields.one2many('stock.move.operation.link', 'move_id', string='Linked Operations', readonly=True, help='Operations that impact this move for the computation of the remaining quantities'),\n 1769          'remaining_qty': fields.function(_get_remaining_qty, type='float', string='Remaining Quantity', digits=0,\n 1770:                                          states={'done': [('readonly', True)]}, help=\"Remaining Quantity in default UoM according to operations matched with this move\"),\n 1771          'procurement_id': fields.many2one('procurement.order', 'Procurement'),\n 1772          'group_id': fields.many2one('procurement.group', 'Procurement Group'),\n ....\n 1788      }\n 1789  \n 1790:     def _default_location_destination(self, cr, uid, context=None):\n 1791          context = context or {}\n 1792:         if context.get('default_picking_type_id', False):\n 1793:             pick_type = self.pool.get('stock.picking.type').browse(cr, uid, context['default_picking_type_id'], context=context)\n 1794:             return pick_type.default_location_dest_id and pick_type.default_location_dest_id.id or False\n 1795          return False\n 1796  \n 1797:     def _default_location_source(self, cr, uid, context=None):\n 1798          context = context or {}\n 1799:         if context.get('default_picking_type_id', False):\n 1800:             pick_type = self.pool.get('stock.picking.type').browse(cr, uid, context['default_picking_type_id'], context=context)\n 1801:             return pick_type.default_location_src_id and pick_type.default_location_src_id.id or False\n 1802          return False\n 1803  \n 1804:     def _default_destination_address(self, cr, uid, context=None):\n 1805          return False\n 1806  \n 1807:     _defaults = {\n 1808:         'location_id': _default_location_source,\n 1809:         'location_dest_id': _default_location_destination,\n 1810:         'partner_id': _default_destination_address,\n 1811          'state': 'draft',\n 1812          'priority': '1',\n ....\n 1814          'scrapped': False,\n 1815          'date': fields.datetime.now,\n 1816:         'company_id': lambda self, cr, uid, c: self.pool.get('res.company')._company_default_get(cr, uid, 'stock.move', context=c),\n 1817          'date_expected': fields.datetime.now,\n 1818          'procure_method': 'make_to_stock',\n ....\n 1937                          propagated_changes_dict.pop('date_expected')\n 1938                      if propagated_date_field:\n 1939:                         current_date = datetime.strptime(move.date_expected, DEFAULT_SERVER_DATETIME_FORMAT)\n 1940:                         new_date = datetime.strptime(vals.get(propagated_date_field), DEFAULT_SERVER_DATETIME_FORMAT)\n 1941                          delta = new_date - current_date\n 1942                          if abs(delta.days) >= move.company_id.propagation_minimum_delta:\n 1943:                             old_move_date = datetime.strptime(move.move_dest_id.date_expected, DEFAULT_SERVER_DATETIME_FORMAT)\n 1944:                             new_move_date = (old_move_date + relativedelta.relativedelta(days=delta.days or 0)).strftime(DEFAULT_SERVER_DATETIME_FORMAT)\n 1945                              propagated_changes_dict['date_expected'] = new_move_date\n 1946                      #For pushed moves as well as for pulled moves, propagate by recursive call of write().\n ....\n 2082          \"\"\"\n 2083          if not date_expected:\n 2084:             date_expected = time.strftime(DEFAULT_SERVER_DATETIME_FORMAT)\n 2085          return {'value': {'date': date_expected}}\n 2086  \n ....\n 2380          self._check_package_from_moves(cr, uid, ids, context=context)\n 2381          #set the move as done\n 2382:         self.write(cr, uid, ids, {'state': 'done', 'date': time.strftime(DEFAULT_SERVER_DATETIME_FORMAT)}, context=context)\n 2383          self.pool.get('procurement.order').check(cr, uid, procurement_ids, context=context)\n 2384          #assign destination moves\n ....\n 2391                  done_picking.append(picking.id)\n 2392          if done_picking:\n 2393:             picking_obj.write(cr, uid, done_picking, {'date_done': time.strftime(DEFAULT_SERVER_DATETIME_FORMAT)}, context=context)\n 2394          return True\n 2395  \n ....\n 2425              move_qty = move.product_qty\n 2426              uos_qty = quantity / move_qty * move.product_uos_qty\n 2427:             default_val = {\n 2428                  'location_id': source_location.id,\n 2429                  'product_uom_qty': quantity,\n ....\n 2435                  'restrict_partner_id': restrict_partner_id,\n 2436              }\n 2437:             new_move = self.copy(cr, uid, move.id, default_val)\n 2438  \n 2439              res += [new_move]\n ....\n 2471          context = context or {}\n 2472  \n 2473:         #HALF-UP rounding as only rounding errors will be because of propagation of error from default UoM\n 2474          uom_qty = uom_obj._compute_qty_obj(cr, uid, move.product_id.uom_id, qty, move.product_uom, rounding_method='HALF-UP', context=context)\n 2475          uos_qty = uom_qty * move.product_uos_qty / move.product_uom_qty\n 2476  \n 2477:         defaults = {\n 2478              'product_uom_qty': uom_qty,\n 2479              'product_uos_qty': uos_qty,\n ....\n 2486          }\n 2487          if context.get('source_location_id'):\n 2488:             defaults['location_id'] = context['source_location_id']\n 2489:         new_move = self.copy(cr, uid, move.id, defaults)\n 2490  \n 2491          ctx = context.copy()\n ....\n 2539             :rtype: list of tuple\n 2540          \"\"\"\n 2541:         #default available choices\n 2542          res_filter = [('none', _('All products')), ('product', _('One product only'))]\n 2543          settings_obj = self.pool.get('stock.config.settings')\n 2544          config_ids = settings_obj.search(cr, uid, [], limit=1, order='id DESC', context=context)\n 2545:         #If we don't have updated config until now, all fields are by default false and so should be not dipslayed\n 2546          if not config_ids:\n 2547              return res_filter\n ....\n 2587      }\n 2588  \n 2589:     def _default_stock_location(self, cr, uid, context=None):\n 2590          try:\n 2591              warehouse = self.pool.get('ir.model.data').get_object(cr, uid, 'stock', 'warehouse0')\n ....\n 2594              return False\n 2595  \n 2596:     _defaults = {\n 2597          'date': fields.datetime.now,\n 2598          'state': 'draft',\n 2599:         'company_id': lambda self, cr, uid, c: self.pool.get('res.company')._company_default_get(cr, uid, 'stock.inventory', context=c),\n 2600:         'location_id': _default_stock_location,\n 2601          'filter': 'none',\n 2602      }\n ....\n 2714                      inventory_line_obj.write(cr, uid, [line.id], {'theoretical_qty': tot_qty}, context=context)\n 2715  \n 2716:         return self.write(cr, uid, ids, {'state': 'confirm', 'date': time.strftime(DEFAULT_SERVER_DATETIME_FORMAT)})\n 2717  \n 2718      def _get_inventory_lines(self, cr, uid, inventory, context=None):\n ....\n 2782          'partner_id': fields.many2one('res.partner', 'Owner'),\n 2783          'product_name': fields.related('product_id', 'name', type='char', string='Product Name', store={\n 2784:                                                                                             'product.product': (_get_product_name_change, ['name', 'default_code'], 20),\n 2785                                                                                              'stock.inventory.line': (lambda self, cr, uid, ids, c={}: ids, ['product_id'], 20),}),\n 2786:         'product_code': fields.related('product_id', 'default_code', type='char', string='Product Code', store={\n 2787:                                                                                             'product.product': (_get_product_name_change, ['name', 'default_code'], 20),\n 2788                                                                                              'stock.inventory.line': (lambda self, cr, uid, ids, c={}: ids, ['product_id'], 20),}),\n 2789          'location_name': fields.related('location_id', 'complete_name', type='char', string='Location Name', store={\n ....\n 2795      }\n 2796  \n 2797:     _defaults = {\n 2798          'product_qty': 1,\n 2799      }\n ....\n 2878          'lot_stock_id': fields.many2one('stock.location', 'Location Stock', domain=[('usage', '=', 'internal')], required=True),\n 2879          'code': fields.char('Short Name', size=5, required=True, help=\"Short name used to identify your warehouse\"),\n 2880:         'route_ids': fields.many2many('stock.location.route', 'stock_route_warehouse', 'warehouse_id', 'route_id', 'Routes', domain=\"[('warehouse_selectable', '=', True)]\", help='Defaults routes through the warehouse'),\n 2881          'reception_steps': fields.selection([\n 2882              ('one_step', 'Receive goods directly in stock (1 step)'),\n 2883              ('two_steps', 'Unload in input location then go to stock (2 steps)'),\n 2884              ('three_steps', 'Unload in input location, go through a quality control before being admitted in stock (3 steps)')], 'Incoming Shipments', \n 2885:                                             help=\"Default incoming route to follow\", required=True),\n 2886          'delivery_steps': fields.selection([\n 2887              ('ship_only', 'Ship directly from stock (Ship only)'),\n 2888              ('pick_ship', 'Bring goods to output location before shipping (Pick + Ship)'),\n 2889              ('pick_pack_ship', 'Make packages into a dedicated location, then bring them to the output location for shipping (Pick + Pack + Ship)')], 'Outgoing Shippings', \n 2890:                                            help=\"Default outgoing route to follow\", required=True),\n 2891          'wh_input_stock_loc_id': fields.many2one('stock.location', 'Input Location'),\n 2892          'wh_qc_stock_loc_id': fields.many2one('stock.location', 'Quality Control Location'),\n ....\n 2906          'resupply_route_ids': fields.one2many('stock.location.route', 'supplied_wh_id', 'Resupply Routes', \n 2907                                                help=\"Routes will be created for these resupply warehouses and you can select them on products and product categories\"),\n 2908:         'default_resupply_wh_id': fields.many2one('stock.warehouse', 'Default Resupply Warehouse', help=\"Goods will always be resupplied from this warehouse\"),\n 2909      }\n 2910  \n 2911:     def onchange_filter_default_resupply_wh_id(self, cr, uid, ids, default_resupply_wh_id, resupply_wh_ids, context=None):\n 2912          resupply_wh_ids = set([x['id'] for x in (self.resolve_2many_commands(cr, uid, 'resupply_wh_ids', resupply_wh_ids, ['id']))])\n 2913:         if default_resupply_wh_id: #If we are removing the default resupply, we don't have default_resupply_wh_id \n 2914:             resupply_wh_ids.add(default_resupply_wh_id)\n 2915          resupply_wh_ids = list(resupply_wh_ids)        \n 2916          return {'value': {'resupply_wh_ids': resupply_wh_ids}}\n ....\n 2936          }\n 2937  \n 2938:     def _create_resupply_routes(self, cr, uid, warehouse, supplier_warehouses, default_resupply_wh, context=None):\n 2939          route_obj = self.pool.get('stock.location.route')\n 2940          pull_obj = self.pool.get('procurement.rule')\n ....\n 2960                  for pull_rule in pull_rules_list:\n 2961                      pull_obj.create(cr, uid, vals=pull_rule, context=context)\n 2962:                 #if the warehouse is also set as default resupply method, assign this route automatically to the warehouse\n 2963:                 if default_resupply_wh and default_resupply_wh.id == wh.id:\n 2964                      self.write(cr, uid, [warehouse.id], {'route_ids': [(4, inter_wh_route_id)]}, context=context)\n 2965  \n 2966:     _defaults = {\n 2967:         'company_id': lambda self, cr, uid, c: self.pool.get('res.company')._company_default_get(cr, uid, 'stock.inventory', context=c),\n 2968          'reception_steps': 'one_step',\n 2969          'delivery_steps': 'ship_only',\n ....\n 3155  \n 3156          #create route selectable on the product to resupply the warehouse from another one\n 3157:         self._create_resupply_routes(cr, uid, warehouse, warehouse.resupply_wh_ids, warehouse.default_resupply_wh_id, context=context)\n 3158  \n 3159          #return routes and mto pull rule to store on the warehouse\n ....\n 3174          new_delivery_step = new_delivery_step or warehouse.delivery_steps\n 3175  \n 3176:         #change the default source and destination location and (de)activate picking types\n 3177          input_loc = warehouse.wh_input_stock_loc_id\n 3178          if new_reception_step == 'one_step':\n ....\n 3181          if new_delivery_step == 'ship_only':\n 3182              output_loc = warehouse.lot_stock_id\n 3183:         picking_type_obj.write(cr, uid, warehouse.in_type_id.id, {'default_location_dest_id': input_loc.id}, context=context)\n 3184:         picking_type_obj.write(cr, uid, warehouse.out_type_id.id, {'default_location_src_id': output_loc.id}, context=context)\n 3185          picking_type_obj.write(cr, uid, warehouse.pick_type_id.id, {'active': new_delivery_step != 'ship_only'}, context=context)\n 3186          picking_type_obj.write(cr, uid, warehouse.pack_type_id.id, {'active': new_delivery_step == 'pick_pack_ship'}, context=context)\n ....\n 3264              'code': 'incoming',\n 3265              'sequence_id': in_seq_id,\n 3266:             'default_location_src_id': supplier_loc.id,\n 3267:             'default_location_dest_id': input_loc.id,\n 3268              'sequence': max_sequence + 1,\n 3269              'color': color}, context=context)\n ....\n 3274              'sequence_id': out_seq_id,\n 3275              'return_picking_type_id': in_type_id,\n 3276:             'default_location_src_id': output_loc.id,\n 3277:             'default_location_dest_id': customer_loc.id,\n 3278              'sequence': max_sequence + 4,\n 3279              'color': color}, context=context)\n ....\n 3284              'code': 'internal',\n 3285              'sequence_id': int_seq_id,\n 3286:             'default_location_src_id': wh_stock_loc.id,\n 3287:             'default_location_dest_id': wh_stock_loc.id,\n 3288              'active': True,\n 3289              'sequence': max_sequence + 2,\n ....\n 3294              'code': 'internal',\n 3295              'sequence_id': pack_seq_id,\n 3296:             'default_location_src_id': wh_pack_stock_loc.id,\n 3297:             'default_location_dest_id': output_loc.id,\n 3298              'active': warehouse.delivery_steps == 'pick_pack_ship',\n 3299              'sequence': max_sequence + 3,\n ....\n 3304              'code': 'internal',\n 3305              'sequence_id': pick_seq_id,\n 3306:             'default_location_src_id': wh_stock_loc.id,\n 3307:             'default_location_dest_id': wh_pack_stock_loc.id,\n 3308              'active': warehouse.delivery_steps != 'ship_only',\n 3309              'sequence': max_sequence + 2,\n ....\n 3342          vals['view_location_id'] = wh_loc_id\n 3343          #create all location\n 3344:         def_values = self.default_get(cr, uid, {'reception_steps', 'delivery_steps'})\n 3345          reception_steps = vals.get('reception_steps',  def_values['reception_steps'])\n 3346          delivery_steps = vals.get('delivery_steps', def_values['delivery_steps'])\n ....\n 3509                      if to_add_wh_ids:\n 3510                          supplier_warehouses = self.browse(cr, uid, list(to_add_wh_ids), context=context)\n 3511:                         self._create_resupply_routes(cr, uid, warehouse, supplier_warehouses, warehouse.default_resupply_wh_id, context=context)\n 3512                      to_remove_wh_ids = old_ids - new_ids\n 3513                      if to_remove_wh_ids:\n ....\n 3518                      #not implemented\n 3519                      pass\n 3520:         if 'default_resupply_wh_id' in vals:\n 3521:             if vals.get('default_resupply_wh_id') == warehouse.id:\n 3522:                 raise osv.except_osv(_('Warning'),_('The default resupply warehouse should be different than the warehouse itself!'))\n 3523:             if warehouse.default_resupply_wh_id:\n 3524                  #remove the existing resupplying route on the warehouse\n 3525:                 to_remove_route_ids = route_obj.search(cr, uid, [('supplied_wh_id', '=', warehouse.id), ('supplier_wh_id', '=', warehouse.default_resupply_wh_id.id)], context=context)\n 3526                  for inter_wh_route_id in to_remove_route_ids:\n 3527                      self.write(cr, uid, [warehouse.id], {'route_ids': [(3, inter_wh_route_id)]})\n 3528:             if vals.get('default_resupply_wh_id'):\n 3529                  #assign the new resupplying route on all products\n 3530:                 to_assign_route_ids = route_obj.search(cr, uid, [('supplied_wh_id', '=', warehouse.id), ('supplier_wh_id', '=', vals.get('default_resupply_wh_id'))], context=context)\n 3531                  for inter_wh_route_id in to_assign_route_ids:\n 3532                      self.write(cr, uid, [warehouse.id], {'route_ids': [(4, inter_wh_route_id)]})\n ....\n 3597          'sequence': fields.integer('Sequence'),\n 3598      }\n 3599:     _defaults = {\n 3600          'auto': 'auto',\n 3601          'delay': 0,\n 3602:         'company_id': lambda self, cr, uid, c: self.pool.get('res.company')._company_default_get(cr, uid, 'procurement.order', context=c),\n 3603          'propagate': True,\n 3604          'active': True,\n ....\n 3606  \n 3607      def _prepare_push_apply(self, cr, uid, rule, move, context=None):\n 3608:         newdate = (datetime.strptime(move.date_expected, DEFAULT_SERVER_DATETIME_FORMAT) + relativedelta.relativedelta(days=rule.delay or 0)).strftime(DEFAULT_SERVER_DATETIME_FORMAT)\n 3609          return {\n 3610                  'location_id': move.location_dest_id.id,\n ....\n 3622      def _apply(self, cr, uid, rule, move, context=None):\n 3623          move_obj = self.pool.get('stock.move')\n 3624:         newdate = (datetime.strptime(move.date_expected, DEFAULT_SERVER_DATETIME_FORMAT) + relativedelta.relativedelta(days=rule.delay or 0)).strftime(DEFAULT_SERVER_DATETIME_FORMAT)\n 3625          if rule.auto == 'transparent':\n 3626              old_dest_location = move.location_dest_id.id\n ....\n 3694  \n 3695      def _get_package_info(self, cr, uid, ids, name, args, context=None):\n 3696:         default_company_id = self.pool.get('res.users').browse(cr, uid, uid, context=context).company_id.id\n 3697:         res = dict((res_id, {'location_id': False, 'company_id': default_company_id, 'owner_id': False}) for res_id in ids)\n 3698          for pack in self.browse(cr, uid, ids, context=context):\n 3699              if pack.quant_ids:\n ....\n 3733                                      }, readonly=True, select=True),\n 3734      }\n 3735:     _defaults = {\n 3736          'name': lambda self, cr, uid, context: self.pool.get('ir.sequence').get(cr, uid, 'stock.quant.package') or _('Unknown Pack')\n 3737      }\n ....\n 3801          return res\n 3802  \n 3803:     def copy_pack(self, cr, uid, id, default_pack_values=None, default=None, context=None):\n 3804          stock_pack_operation_obj = self.pool.get('stock.pack.operation')\n 3805:         if default is None:\n 3806:             default = {}\n 3807:         new_package_id = self.copy(cr, uid, id, default_pack_values, context=context)\n 3808:         default['result_package_id'] = new_package_id\n 3809          op_ids = stock_pack_operation_obj.search(cr, uid, [('result_package_id', '=', id)], context=context)\n 3810          for op_id in op_ids:\n 3811:             stock_pack_operation_obj.copy(cr, uid, op_id, default, context=context)\n 3812  \n 3813  \n ....\n 3891          'currency': fields.many2one('res.currency', string=\"Currency\", help=\"Currency in which Unit cost is expressed\", ondelete='CASCADE'),\n 3892          'linked_move_operation_ids': fields.one2many('stock.move.operation.link', 'operation_id', string='Linked Moves', readonly=True, help='Moves impacted by this operation for the computation of the remaining quantities'),\n 3893:         'remaining_qty': fields.function(_get_remaining_qty, type='float', digits = 0, string=\"Remaining Qty\", help=\"Remaining quantity in default UoM according to moves matched with this operation. \"),\n 3894          'location_id': fields.many2one('stock.location', 'Source Location', required=True),\n 3895          'location_dest_id': fields.many2one('stock.location', 'Destination Location', required=True),\n ....\n 3897      }\n 3898  \n 3899:     _defaults = {\n 3900          'date': fields.date.context_today,\n 3901          'qty_done': 0,\n ....\n 4122          'company_id': fields.many2one('res.company', 'Company', required=True),\n 4123      }\n 4124:     _defaults = {\n 4125          'active': lambda *a: 1,\n 4126          'logic': lambda *a: 'max',\n ....\n 4128          'name': lambda self, cr, uid, context: self.pool.get('ir.sequence').get(cr, uid, 'stock.orderpoint') or '',\n 4129          'product_uom': lambda self, cr, uid, context: context.get('product_uom', False),\n 4130:         'company_id': lambda self, cr, uid, context: self.pool.get('res.company')._company_default_get(cr, uid, 'stock.warehouse.orderpoint', context=context)\n 4131      }\n 4132      _sql_constraints = [\n ....\n 4134      ]\n 4135      _constraints = [\n 4136:         (_check_product_uom, 'You have to select a product unit of measure in the same category than the default unit of measure of the product', ['product_id', 'product_uom']),\n 4137      ]\n 4138  \n 4139:     def default_get(self, cr, uid, fields, context=None):\n 4140          warehouse_obj = self.pool.get('stock.warehouse')\n 4141:         res = super(stock_warehouse_orderpoint, self).default_get(cr, uid, fields, context)\n 4142:         # default 'warehouse_id' and 'location_id'\n 4143          if 'warehouse_id' not in res:\n 4144              warehouse_ids = res.get('company_id') and warehouse_obj.search(cr, uid, [('company_id', '=', res['company_id'])], limit=1, context=context) or []\n ....\n 4204              'count_picking_ready': [('state', 'in', ('assigned', 'partially_available'))],\n 4205              'count_picking': [('state', 'in', ('assigned', 'waiting', 'confirmed', 'partially_available'))],\n 4206:             'count_picking_late': [('min_date', '<', time.strftime(DEFAULT_SERVER_DATETIME_FORMAT)), ('state', 'in', ('assigned', 'waiting', 'confirmed', 'partially_available'))],\n 4207              'count_picking_backorders': [('backorder_id', '!=', False), ('state', 'in', ('confirmed', 'assigned', 'waiting', 'partially_available'))],\n 4208          }\n ....\n 4214              count = dict(map(lambda x: (x['picking_type_id'] and x['picking_type_id'][0], x['picking_type_id_count']), data))\n 4215              for tid in ids:\n 4216:                 result.setdefault(tid, {})[field] = count.get(tid, 0)\n 4217          for tid in ids:\n 4218              if result[tid]['count_picking']:\n ....\n 4232          \n 4233          result = {\n 4234:             'default_location_src_id': stock_loc,\n 4235:             'default_location_dest_id': stock_loc,\n 4236          }\n 4237          if picking_code == 'incoming':\n 4238:             result['default_location_src_id'] = obj_data.xmlid_to_res_id(cr, uid, 'stock.stock_location_suppliers')\n 4239          elif picking_code == 'outgoing':\n 4240:             result['default_location_dest_id'] = obj_data.xmlid_to_res_id(cr, uid, 'stock.stock_location_customers')\n 4241          return {'value': result}\n 4242  \n ....\n 4265          return res\n 4266  \n 4267:     def _default_warehouse(self, cr, uid, context=None):\n 4268          user = self.pool.get('res.users').browse(cr, uid, uid, context)\n 4269          res = self.pool.get('stock.warehouse').search(cr, uid, [('company_id', '=', user.company_id.id)], limit=1, context=context)\n ....\n 4276          'sequence': fields.integer('Sequence', help=\"Used to order the 'All Operations' kanban view\"),\n 4277          'sequence_id': fields.many2one('ir.sequence', 'Reference Sequence', required=True),\n 4278:         'default_location_src_id': fields.many2one('stock.location', 'Default Source Location'),\n 4279:         'default_location_dest_id': fields.many2one('stock.location', 'Default Destination Location'),\n 4280          'code': fields.selection([('incoming', 'Suppliers'), ('outgoing', 'Customers'), ('internal', 'Internal')], 'Type of Operation', required=True),\n 4281          'return_picking_type_id': fields.many2one('stock.picking.type', 'Picking Type for Returns'),\n ....\n 4307  \n 4308      }\n 4309:     _defaults = {\n 4310:         'warehouse_id': _default_warehouse,\n 4311          'active': True,\n 4312      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock\\stock_view.xml:\n  117                          <page string=\"Inventory Details\" >\n  118                              <button name=\"reset_real_qty\" states=\"confirm\" string=\"⇒ Set quantities to 0\" type=\"object\" class=\"oe_link oe_right\" groups=\"stock.group_stock_user\"/>\n  119:                             <field name=\"line_ids\" string=\"Inventory Details\" context=\"{'default_location_id': location_id,  'default_product_id': product_id, 'default_prod_lot_id': lot_id, 'default_package_id': package_id, 'default_partner_id': partner_id}\">\n  120                                  <tree string=\"Inventory Details\" editable=\"bottom\" colors=\"blue: product_qty != theoretical_qty; red: theoretical_qty &lt; 0\">\n  121                                      <field context=\"{'location':location_id, 'uom':product_uom_id, 'to_date':parent.date}\" name=\"product_id\" on_change=\"on_change_product_id(product_id,product_uom_id,theoretical_qty,context)\" domain=\"[('type','=','product')]\"/>\n  122                                      <field name=\"product_uom_id\" groups=\"product.group_uom\" on_change=\"restrict_change(theoretical_qty)\"/>\n  123                                      <field domain=\"[('usage','=','internal')]\" name=\"location_id\" groups=\"stock.group_locations\" on_change=\"restrict_change(theoretical_qty)\"/>\n  124:                                     <field name=\"prod_lot_id\" on_change=\"restrict_change(theoretical_qty)\" domain=\"[('product_id', '=', product_id)]\" context=\"{'default_product_id': product_id}\"  groups=\"stock.group_production_lot\"/>\n  125                                      <field name=\"package_id\" on_change=\"restrict_change(theoretical_qty)\" groups=\"stock.group_tracking_lot\"/>\n  126                                      <field name=\"partner_id\" on_change=\"restrict_change(theoretical_qty)\" groups=\"stock.group_tracking_owner\"/>\n  ...\n  265                  This is the list of all the production lots you recorded. When\n  266                  you select a lot, you can get the \n  267:                 traceability of the products contained in lot. By default, the\n  268                  list is filtered on the serial numbers that are available in\n  269                  your warehouse but you can uncheck the 'Available' button to\n  ...\n  301  \n  302          <record model=\"ir.actions.act_window\" id=\"location_open_quants\">\n  303:             <field name=\"context\">{'search_default_productgroup': 1}</field>\n  304              <field name=\"domain\">[('location_id', 'child_of', active_ids)]</field>\n  305              <field name=\"name\">Current Stock</field>\n  ...\n  308  \n  309          <act_window\n  310:             context=\"{'location': active_id, 'search_default_real_stock_available': 1, 'search_default_virtual_stock_available': 1,\n  311:                         'search_default_virtual_stock_negative': 1, 'search_default_real_stock_negative': 1}\"\n  312              id=\"act_product_location_open\"\n  313              name=\"Products\"\n  ...\n  324                                  class=\"oe_stat_button\" \n  325                                  icon=\"fa-building-o\" name=\"%(location_open_quants)d\" type=\"action\"\n  326:                                 context=\"{'search_default_internal_loc': 1}\"/>\n  327                          <button string=\"Products\"\n  328                                  class=\"oe_stat_button\"\n  ...\n  490              <field name=\"view_id\" ref=\"view_location_tree2\"/>\n  491              <field name=\"search_view_id\" ref=\"view_location_search\"/>\n  492:             <field name=\"context\">{'search_default_in_location':1}</field>\n  493              <field name=\"help\" type=\"html\">\n  494                <p class=\"oe_view_nocontent_create\">\n  ...\n  515  \n  516          <record id=\"act_product_stock_move_open\" model=\"ir.actions.act_window\">\n  517:             <field name=\"context\">{'search_default_done': 1,'search_default_product_id': active_id, 'default_product_id': active_id}</field>\n  518              <field name=\"name\">Moves</field>\n  519              <field name=\"res_model\">stock.move</field>\n  ...\n  548                                          <field name=\"reception_steps\" widget='radio'/>\n  549                                          <field name=\"delivery_steps\" widget='radio'/>\n  550:                                         <field name=\"default_resupply_wh_id\" widget='selection' on_change=\"onchange_filter_default_resupply_wh_id(default_resupply_wh_id, resupply_wh_ids)\"/>\n  551:                                         <field name=\"resupply_wh_ids\" domain=\"[('id', '!=', id)]\" widget='many2many_checkboxes' on_change=\"onchange_filter_default_resupply_wh_id(default_resupply_wh_id, resupply_wh_ids)\"/> \n  552                                      </group>\n  553                                  </page>\n  ...\n  603          <!--\n  604              Stock picking\n  605:             Defaults and Internal Pickings\n  606          -->\n  607  \n  ...\n  685                          <page string=\"Products\">\n  686                              <separator string=\"Stock Moves\" attrs=\"{'invisible': [('pack_operation_exist', '=', False)]}\"/>\n  687:                             <field name=\"move_lines\" context=\"{'address_in_id': partner_id, 'form_view_ref':'stock.view_move_picking_form', 'tree_view_ref':'stock.view_move_picking_tree', 'default_picking_type_id': picking_type_id,'default_picking_id': active_id}\"/>\n  688                              <field name=\"pack_operation_exist\" invisible=\"1\"/>\n  689                              <field name=\"note\" placeholder=\"Add an internal note...\" class=\"oe_inline\"/>\n  690                          </page>\n  691                          <page string=\"Operations\" attrs=\"{'invisible': ['|', ('state','!=','done'), ('pack_operation_ids','=',[])]}\">\n  692:                             <field name=\"pack_operation_ids\" context=\"{'default_picking_id': active_id, 'default_location_id': location_id, 'default_location_dest_id': location_dest_id}\">\n  693                                  <tree editable=\"top\">\n  694                                      <field name=\"package_id\" groups=\"stock.group_tracking_lot\"/>\n  ...\n  789              <field name=\"domain\"></field>\n  790              <field name=\"context\">{\n  791:                     'search_default_picking_type_id': [active_id],\n  792:                     'default_picking_type_id': active_id,\n  793                      'contact_display': 'partner_address',\n  794:                     'search_default_done': 1,\n  795              }\n  796              </field>\n  ...\n  806              <field name=\"domain\"></field>\n  807              <field name=\"context\">{\n  808:                     'search_default_picking_type_id': [active_id],\n  809:                     'default_picking_type_id': active_id,\n  810                      'contact_display': 'partner_address',\n  811:                     'search_default_available': 1,\n  812              }\n  813              </field>\n  ...\n  823              <field name=\"domain\"></field>\n  824              <field name=\"context\">{\n  825:                     'search_default_picking_type_id': [active_id],\n  826:                     'default_picking_type_id': active_id,\n  827                      'contact_display': 'partner_address',\n  828:                     'search_default_done': 1,\n  829                      'group_by': ['date'],\n  830              }\n  ...\n  841              <field name=\"domain\"></field>\n  842              <field name=\"context\">{\n  843:                     'search_default_picking_type_id': [active_id],\n  844:                     'default_picking_type_id': active_id,\n  845                      'contact_display': 'partner_address',\n  846:                     'search_default_waiting': 1,\n  847              }\n  848              </field>\n  ...\n  858              <field name=\"domain\"></field>\n  859              <field name=\"context\">{\n  860:                     'search_default_picking_type_id': [active_id],\n  861:                     'default_picking_type_id': active_id,\n  862                      'contact_display': 'partner_address',\n  863:                     'search_default_late': 1,\n  864:                     'search_default_confirmed': 1,\n  865              }\n  866              </field>\n  ...\n  876              <field name=\"domain\"></field>\n  877              <field name=\"context\">{\n  878:                     'search_default_picking_type_id': [active_id],\n  879:                     'default_picking_type_id': active_id,\n  880                      'contact_display': 'partner_address',\n  881:                     'search_default_backorder': 1,\n  882:                     'search_default_confirmed': 1,\n  883              }\n  884              </field>\n  ...\n  894              <field name=\"domain\"></field>\n  895              <field name=\"context\">{\n  896:                     'search_default_picking_type_id': [active_id],\n  897:                     'default_picking_type_id': active_id,\n  898                      'contact_display': 'partner_address',\n  899              }\n  ...\n 1236              <field name=\"domain\" eval=\"[('picking_id.picking_type_id.code','=','incoming'), ('location_id.usage','!=','internal'), ('location_dest_id.usage', '=', 'internal')]\"/>\n 1237              <field name=\"view_id\" ref=\"view_move_tree_receipt_picking\"/>\n 1238:             <field name=\"context\">{'product_receive': True, 'search_default_future': True}</field>\n 1239              <field name=\"help\" type=\"html\">\n 1240                <p class=\"oe_view_nocontent_create\">\n ....\n 1328                          <separator string=\"Locations\"/>\n 1329                          <group>\n 1330:                             <field name=\"default_location_src_id\" attrs=\"{'required': [('code', '=', 'internal')]}\"/>\n 1331:                             <field name=\"default_location_dest_id\" attrs=\"{'required': [('code', 'in', ('internal', 'incoming'))]}\"/>\n 1332                          </group>\n 1333                      </sheet>\n ....\n 1424                  The picking type system allows you to assign each stock\n 1425                  operation a specific type which will alter its views accordingly.  \n 1426:                 On the picking type you could e.g. specify if packing is needed by default, \n 1427                  if it should show the customer.  \n 1428                </p>\n ....\n 1537  \n 1538          <act_window\n 1539:             context=\"{'search_default_warehouse_id': active_id, 'default_warehouse_id': active_id}\"\n 1540              id=\"act_stock_warehouse_2_stock_warehouse_orderpoint\"\n 1541              name=\"Reordering Rules\"\n ....\n 1735  \n 1736          <record model=\"ir.actions.act_window\" id=\"product_open_orderpoint\">\n 1737:             <field name=\"context\">{'default_product_id': active_id, 'search_default_product_id': active_id}</field>\n 1738              <field name=\"name\">Reordering Rules</field>\n 1739              <field name=\"res_model\">stock.warehouse.orderpoint</field>\n ....\n 1741          \n 1742          <record model=\"ir.actions.act_window\" id=\"product_open_quants\">\n 1743:             <field name=\"context\">{'search_default_internal_loc': 1, 'search_default_product_id': active_id, 'search_default_locationgroup':1}</field>\n 1744              <field name=\"name\">Current Stock</field>\n 1745              <field name=\"res_model\">stock.quant</field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock\\wizard\\make_procurement_product.py:\n   48      }\n   49  \n   50:     _defaults = {\n   51          'date_planned': fields.date.context_today,\n   52          'qty': lambda *args: 1.0,\n   ..\n   97           }\n   98  \n   99:     def default_get(self, cr, uid, fields, context=None):\n  100:         \"\"\" To get default values for the object.\n  101          @param self: The object pointer.\n  102          @param cr: A database cursor\n  103          @param uid: ID of the user currently logged in\n  104:         @param fields: List of fields for which we want default values\n  105          @param context: A standard dictionary\n  106          @return: A dictionary which of fields with values.\n  ...\n  117                  raise orm.except_orm(_('Warning'), _('Please use the Product Variant vue to request a procurement.'))\n  118  \n  119:         res = super(make_procurement, self).default_get(cr, uid, fields, context=context)\n  120  \n  121          if record_id and 'product_id' in fields:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock\\wizard\\stock_change_product_qty.py:\n   30      _columns = {\n   31          'product_id' : fields.many2one('product.product', 'Product'),\n   32:         'new_quantity': fields.float('New Quantity on Hand', digits_compute=dp.get_precision('Product Unit of Measure'), required=True, help='This quantity is expressed in the Default Unit of Measure of the product.'),\n   33          'lot_id': fields.many2one('stock.production.lot', 'Serial Number', domain=\"[('product_id','=',product_id)]\"),\n   34          'location_id': fields.many2one('stock.location', 'Location', required=True, domain=\"[('usage', '=', 'internal')]\"),\n   35      }\n   36:     _defaults = {\n   37          'new_quantity': 1,\n   38          'product_id': lambda self, cr, uid, ctx: ctx and ctx.get('active_id', False) or False\n   39      }\n   40  \n   41:     def default_get(self, cr, uid, fields, context):\n   42:         \"\"\" To get default values for the object.\n   43           @param self: The object pointer.\n   44           @param cr: A database cursor\n   45           @param uid: ID of the user currently logged in\n   46:          @param fields: List of fields for which we want default values\n   47           @param context: A standard dictionary\n   48           @return: A dictionary which of fields with values.\n   49          \"\"\"\n   50  \n   51:         res = super(stock_change_product_qty, self).default_get(cr, uid, fields, context=context)\n   52  \n   53          if context.get('active_model') == 'product.template':\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock\\wizard\\stock_change_product_qty_view.xml:\n   11                          <field name=\"product_id\" invisible=\"1\"/>\n   12                          <field name=\"location_id\" groups=\"stock.group_locations\"/>\n   13:                         <field name=\"lot_id\"  context=\"{'search_default_product_id':product_id,'default_product_id':product_id}\" groups=\"stock.group_production_lot\"/>\n   14                          <p groups=\"stock.group_production_lot\" class=\"oe_grey\">\n   15                              When you select a serial number (lot), the quantity is corrected with respect to\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock\\wizard\\stock_move.py:\n   38      }\n   39  \n   40:     _defaults = {\n   41          'location_id': lambda *x: False\n   42      }\n   43  \n   44:     def default_get(self, cr, uid, fields, context=None):\n   45:         \"\"\" Get default values\n   46          @param self: The object pointer.\n   47          @param cr: A database cursor\n   48          @param uid: ID of the user currently logged in\n   49:         @param fields: List of fields for default value\n   50          @param context: A standard dictionary\n   51:         @return: default values of fields\n   52          \"\"\"\n   53          if context is None:\n   54              context = {}\n   55:         res = super(stock_move_scrap, self).default_get(cr, uid, fields, context=context)\n   56          move = self.pool.get('stock.move').browse(cr, uid, context['active_id'], context=context)\n   57  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock\\wizard\\stock_move_view.xml:\n   18                          </div>\n   19                          <field name=\"restrict_lot_id\" domain=\"[('product_id','=',product_id)]\" groups=\"stock.group_production_lot\"\n   20:                             context=\"{'default_product_id': product_id}\"/>\n   21                          <field name=\"location_id\" string=\"Scrap Location\" widget=\"selection\"\n   22                              domain=\"[('usage','!=','view'),('scrap_location','=',True)]\" groups=\"stock.group_locations\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock\\wizard\\stock_return_picking.py:\n   45      }\n   46  \n   47:     def default_get(self, cr, uid, fields, context=None):\n   48          \"\"\"\n   49:          To get default values for the object.\n   50           @param self: The object pointer.\n   51           @param cr: A database cursor\n   52           @param uid: ID of the user currently logged in\n   53:          @param fields: List of fields for which we want default values\n   54           @param context: A standard dictionary\n   55:          @return: A dictionary with default values for all field in ``fields``\n   56          \"\"\"\n   57          result1 = []\n   58          if context is None:\n   59              context = {}\n   60:         res = super(stock_return_picking, self).default_get(cr, uid, fields, context=context)\n   61          record_id = context and context.get('active_id', False) or False\n   62          uom_obj = self.pool.get('product.uom')\n   ..\n  167          # Override the context to disable all the potential filters that could have been set previously\n  168          ctx = {\n  169:             'search_default_picking_type_id': pick_type_id,\n  170:             'search_default_draft': False,\n  171:             'search_default_assigned': False,\n  172:             'search_default_confirmed': False,\n  173:             'search_default_ready': False,\n  174:             'search_default_late': False,\n  175:             'search_default_available': False,\n  176          }\n  177          return {\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock\\wizard\\stock_return_picking_view.xml:\n   50                              <tree editable=\"top\">\n   51                                  <field name=\"product_id\"/>\n   52:                                 <field name=\"lot_id\" domain=\"[('product_id', '=', product_id)]\" context=\"{'default_product_id': product_id}\"/>\n   53                                  <field name=\"quantity\"/>\n   54                              </tree>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock\\wizard\\stock_transfer_details.py:\n   35      picking_destination_location_id = fields.Many2one('stock.location', string=\"Head destination location\", related='picking_id.location_dest_id', store=False, readonly=True)\n   36  \n   37:     def default_get(self, cr, uid, fields, context=None):\n   38          if context is None: context = {}\n   39:         res = super(stock_transfer_details, self).default_get(cr, uid, fields, context=context)\n   40          picking_ids = context.get('active_ids', [])\n   41          active_model = context.get('active_model')\n   ..\n  134      product_id = fields.Many2one('product.product', 'Product')\n  135      product_uom_id = fields.Many2one('product.uom', 'Product Unit of Measure')\n  136:     quantity = fields.Float('Quantity', digits=dp.get_precision('Product Unit of Measure'), default = 1.0)\n  137      package_id = fields.Many2one('stock.quant.package', 'Source package', domain=\"['|', ('location_id', 'child_of', sourceloc_id), ('location_id','=',False)]\")\n  138      lot_id = fields.Many2one('stock.production.lot', 'Lot/Serial Number')\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock\\wizard\\stock_transfer_details.xml:\n   17                      <group>\n   18                          <field name=\"item_ids\"\n   19:                             context=\"{'default_sourceloc_id':picking_source_location_id,\n   20:                                       'default_destinationloc_id':picking_destination_location_id}\" nolabel=\"1\">\n   21                              <tree string=\"Inventory Details\" editable=\"bottom\" >\n   22                                  <field name=\"package_id\" groups=\"stock.group_tracking_lot\"/>\n   ..\n   40                      <group groups=\"stock.group_tracking_lot\">\n   41                          <field name=\"packop_ids\" \n   42:                             context=\"{'default_sourceloc_id':picking_source_location_id,\n   43:                                       'default_destinationloc_id':picking_destination_location_id}\" nolabel=\"1\">\n   44                              <tree editable=\"bottom\">\n   45                                  <field name=\"package_id\" required=\"True\" on_change=\"source_package_change(package_id)\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock_account\\product.py:\n   55      }\n   56  \n   57:     _defaults = {\n   58          'valuation': 'manual_periodic',\n   59      }\n   ..\n  168              string='Stock Input Account',\n  169              help=\"When doing real-time inventory valuation, counterpart journal items for all incoming stock moves will be posted in this account, unless \"\n  170:                  \"there is a specific valuation account set on the source location. This is the default value for all products in this category. It \"\n  171                   \"can also directly be set on each product\"),\n  172          'property_stock_account_output_categ': fields.property(\n  ...\n  175              string='Stock Output Account',\n  176              help=\"When doing real-time inventory valuation, counterpart journal items for all outgoing stock moves will be posted in this account, unless \"\n  177:                  \"there is a specific valuation account set on the destination location. This is the default value for all products in this category. It \"\n  178                   \"can also directly be set on each product\"),\n  179          'property_stock_valuation_account_id': fields.property(\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock_account\\stock.py:\n   30              (\"none\", \"Not Applicable\")], \"Invoice Status\",),\n   31      }\n   32:     _defaults = {\n   33          'invoice_state': '',\n   34      }\n   ..\n   50              (\"none\", \"Not Applicable\")], \"Invoice Status\",),\n   51          }\n   52:     _defaults = {\n   53          'invoice_state': '',\n   54      }\n   ..\n   73          return res\n   74  \n   75:     _defaults = {\n   76          'invoice_state': ''\n   77          }\n   ..\n   91              states={'draft': [('readonly', False)]}),\n   92          }\n   93:     _defaults = {\n   94          'invoice_state': lambda *args, **argv: 'none'\n   95      }\n   ..\n  207          ),\n  208      }\n  209:     _defaults = {\n  210          'invoice_state': lambda *args, **argv: 'none'\n  211      }\n  ...\n  244                  if move.invoice_state == '2binvoiced':\n  245                      if (move.state != 'cancel') and not move.scrapped:\n  246:                         todo.setdefault(key, [])\n  247                          todo[key].append(move)\n  248          invoices = []\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock_account\\stock_account.py:\n   30      _inherit = \"stock.inventory\"\n   31      _columns = {\n   32:         'period_id': fields.many2one('account.period', 'Force Valuation Period', help=\"Choose the accounting period where you want to value the stock moves created by the inventory instead of the default one (chosen by the inventory end date)\"),\n   33      }\n   34  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock_account\\stock_account_data.xml:\n   15              <field name=\"user_id\" ref=\"base.user_root\"/>\n   16          </record>\n   17:         <record forcecreate=\"True\" id=\"default_cost_method\" model=\"ir.property\">\n   18              <field name=\"name\">Cost Method Property</field>\n   19              <field name=\"fields_id\" search=\"[('model', '=', 'product.template'), ('name', '=', 'cost_method')]\"/>\n   ..\n   21              <field name=\"type\">selection</field>\n   22          </record>\n   23:         <record forcecreate=\"True\" id=\"default_valuation\" model=\"ir.property\">\n   24              <field name=\"name\">Valuation Property</field>\n   25              <field name=\"fields_id\" search=\"[('model', '=', 'product.template'), ('name', '=', 'valuation')]\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock_account\\stock_account_view.xml:\n   48                  </xpath>\n   49                  <field name=\"move_lines\" position=\"attributes\">\n   50:                     <attribute name=\"context\">{'default_invoice_state': invoice_state, 'address_in_id': partner_id, 'form_view_ref':'stock.view_move_picking_form', 'tree_view_ref':'stock.view_move_picking_tree', 'default_picking_type_id': picking_type_id,'default_picking_id': active_id}</attribute>\n   51                  </field>\n   52                  <xpath expr=\"//field[@name='move_type']\" position=\"after\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock_account\\wizard\\stock_change_standard_price.py:\n   36  \n   37  \n   38:     def default_get(self, cr, uid, fields, context=None):\n   39:         \"\"\" To get default values for the object.\n   40           @param self: The object pointer.\n   41           @param cr: A database cursor\n   42           @param uid: ID of the user currently logged in\n   43:          @param fields: List of fields for which we want default values\n   44           @param context: A standard dictionary\n   45           @return: A dictionary which of fields with values.\n   ..\n   53          product_obj = product_pool.browse(cr, uid, context.get('active_id', False))\n   54  \n   55:         res = super(change_standard_price, self).default_get(cr, uid, fields, context=context)\n   56  \n   57          price = product_obj.standard_price\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock_account\\wizard\\stock_invoice_onshipping.py:\n   64          'invoice_date': fields.date('Invoice Date'),\n   65      }\n   66:     _defaults = {\n   67          'journal_type': _get_journal_type,\n   68          'journal_id' : _get_journal,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock_account\\wizard\\stock_return_picking.py:\n   31      }\n   32  \n   33:     def default_get(self, cr, uid, fields, context=None):\n   34:         res = super(stock_return_picking, self).default_get(cr, uid, fields, context=context)\n   35          record_id = context and context.get('active_id', False) or False\n   36          pick_obj = self.pool.get('stock.picking')\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock_account\\wizard\\stock_valuation_history.py:\n   13      }\n   14  \n   15:     _defaults = {\n   16          'choose_date': False,\n   17          'date': fields.datetime.now,\n   ..\n   24          ctx = context.copy()\n   25          ctx['history_date'] = data['date']\n   26:         ctx['search_default_group_by_product'] = True\n   27:         ctx['search_default_group_by_location'] = True\n   28          return {\n   29              'domain': \"[('date', '<=', '\" + data['date'] + \"')]\",\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock_dropshipping\\stock_dropshipping.xml:\n   17              <field name=\"code\">incoming</field>\n   18              <field name=\"warehouse_id\" eval=\"False\"/>\n   19:             <field name=\"default_location_src_id\" ref=\"stock.stock_location_suppliers\"/>\n   20:             <field name=\"default_location_dest_id\" ref=\"stock.stock_location_customers\"/>\n   21          </record>\n   22          \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock_dropshipping\\wizard\\stock_invoice_onshipping.py:\n   45          \n   46          \n   47:     _defaults = {\n   48          'journal_type': _get_journal_type,\n   49          }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock_landed_costs\\product.py:\n   38      }\n   39  \n   40:     _defaults = {\n   41          'landed_cost_ok': False,\n   42          'split_method': 'equal',\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock_landed_costs\\stock_landed_costs.py:\n   93      }\n   94  \n   95:     _defaults = {\n   96          'name': lambda obj, cr, uid, context: obj.pool.get('ir.sequence').get(cr, uid, 'stock.landed.cost'),\n   97          'state': 'draft',\n   ..\n  337      }\n  338  \n  339:     _defaults = {\n  340          'quantity': 1.0,\n  341          'weight': 1.0,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock_landed_costs\\stock_landed_costs_view.xml:\n   39                                              <group>\n   40                                                  <field name=\"product_id\"\n   41:                                                     on_change=\"onchange_product_id(product_id)\" domain=\"[('landed_cost_ok', '=', True)]\" context=\"{'default_landed_cost_ok': True, 'form_view_ref':'stock_landed_costs.view_stock_landed_cost_type_form'}\"/>\n   42                                                  <field name=\"price_unit\"/>\n   43                                              </group>\n   ..\n   51                                      </form>\n   52                                      <tree string=\"Cost Lines\" editable=\"bottom\">\n   53:                                         <field name=\"product_id\" on_change=\"onchange_product_id(product_id)\" domain=\"[('landed_cost_ok', '=', True)]\" context=\"{'default_landed_cost_ok': True, 'form_view_ref':'stock_landed_costs.view_stock_landed_cost_type_form'}\"/>\n   54                                          <field name=\"name\"/>\n   55                                          <field name=\"account_id\"/>\n   ..\n  229              <field name=\"view_type\">form</field>\n  230              <field name=\"view_mode\">tree,form</field>\n  231:             <field name=\"context\">{'default_landed_cost_ok': True}</field>\n  232              <field name=\"search_view_id\" ref=\"product.product_search_form_view\"/>\n  233              <field name=\"help\" type=\"html\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock_picking_wave\\stock_picking_wave.py:\n   14      }\n   15  \n   16:     _defaults = {\n   17          'name': '/',\n   18          'state': 'draft',\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock_picking_wave\\stock_picking_wave_demo.xml:\n   56  		<record id=\"product_product_ice_cream_choco\" model=\"product.product\">\n   57  	            <field name=\"name\">Ice Cream Chocolate</field>\n   58: 	            <field name=\"default_code\">IC-CHOCO</field>\n   59  	            <field name=\"categ_id\" ref=\"product_category_icecream\"/>\n   60  	            <field name=\"list_price\">450.0</field>\n   ..\n   67  	    <record id=\"product_product_ice_cream_vani\" model=\"product.product\">\n   68  	            <field name=\"name\">Ice Cream Vanilla</field>\n   69: 	            <field name=\"default_code\">IC-VANI</field>\n   70  	            <field name=\"categ_id\" ref=\"product_category_icecream\"/>\n   71  	            <field name=\"list_price\">450.0</field>\n   ..\n   78  		<record id=\"product_product_dry_specu\" model=\"product.product\">\n   79  	            <field name=\"name\">Speculoos</field>\n   80: 	            <field name=\"default_code\">DRY-SPEC</field>\n   81  	            <field name=\"categ_id\" ref=\"product_category_dry\"/>\n   82  	            <field name=\"list_price\">150.0</field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock_picking_wave\\stock_picking_wave_view.xml:\n   78              <field name=\"view_type\">form</field>\n   79              <field name=\"view_mode\">tree,form</field>\n   80:             <field name=\"context\">{\"search_default_in_progress\" : True,}</field>\n   81              <field name=\"search_view_id\" ref=\"view_picking_wave_filter\"/>\n   82              <field name=\"help\" type=\"html\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\subscription\\subscription.py:\n   36          'field_ids': fields.one2many('subscription.document.fields', 'document_id', 'Fields', copy=True)\n   37      }\n   38:     _defaults = {\n   39          'active' : lambda *a: True,\n   40      }\n   ..\n   46      _columns = {\n   47          'field': fields.many2one('ir.model.fields', 'Field', domain=\"[('model_id', '=', parent.model)]\", required=True),\n   48:         'value': fields.selection([('false','False'),('date','Current Date')], 'Default Value', size=40, help=\"Default value is considered for field when new document is generated.\"),\n   49          'document_id': fields.many2one('subscription.document', 'Subscription Document', ondelete='cascade'),\n   50      }\n   51:     _defaults = {}\n   52  \n   53  def _get_document_types(self, cr, uid, context=None):\n   ..\n   74          'note': fields.text('Notes', help=\"Description or Summary of Subscription\"),\n   75      }\n   76:     _defaults = {\n   77          'date_init': lambda *a: time.strftime('%Y-%m-%d %H:%M:%S'),\n   78          'user_id': lambda obj,cr,uid,context: uid,\n   ..\n  118                  raise osv.except_osv(_('Wrong Source Document!'), _('Please provide another source document.\\nThis one does not exist!'))\n  119  \n  120:             default = {'state':'draft'}\n  121              doc_obj = self.pool.get('subscription.document')\n  122              document_ids = doc_obj.search(cr, uid, [('model.model','=',model_name)])\n  ...\n  127                  else:\n  128                      value = False\n  129:                 default[f.field.name] = value\n  130  \n  131              state = 'running'\n  ...\n  135              if remaining == 1:\n  136                  state = 'done'\n  137:             id = self.pool[model_name].copy(cr, uid, id, default, context)\n  138              self.pool.get('subscription.subscription.history').create(cr, uid, {'subscription_id': row['id'], 'date':time.strftime('%Y-%m-%d %H:%M:%S'), 'document_id': model_name+','+str(id)})\n  139              self.write(cr, uid, [row['id']], {'state':state})\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\subscription\\subscription_view.xml:\n   19                          <field name=\"name\"/>\n   20                          <field name=\"partner_id\"/>\n   21:                         <field name=\"user_id\" context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'account.group_account_invoice', 'base.group_tool_user']}\"/>\n   22                          <field name=\"active\"/>\n   23                      </group>\n   ..\n   88              <field name=\"view_type\">form</field>\n   89              <field name=\"view_id\" ref=\"view_subscription_tree\"/>\n   90:             <field name=\"context\">{'search_default_User':1}</field>\n   91              <field name=\"search_view_id\" ref=\"view_subscription_filter\"/>\n   92          </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\survey\\controllers\\main.py:\n   30  from openerp.addons.web import http\n   31  from openerp.addons.web.http import request\n   32: from openerp.tools.misc import DEFAULT_SERVER_DATETIME_FORMAT as DTF, ustr\n   33  \n   34  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\survey\\survey.py:\n   22  from openerp.osv import fields, osv\n   23  from openerp.tools.translate import _\n   24: from openerp.tools import DEFAULT_SERVER_DATETIME_FORMAT as DF\n   25  from openerp.addons.website.models.website import slug\n   26  from urlparse import urljoin\n   ..\n   49          'fold': fields.boolean(string=\"Folded in kanban view\")\n   50      }\n   51:     _defaults = {\n   52          'sequence': 1,\n   53          'closed': False\n   ..\n  204      }\n  205  \n  206:     def _default_stage(self, cr, uid, context=None):\n  207          ids = self.pool['survey.stage'].search(cr, uid, [], limit=1, context=context)\n  208          if ids:\n  ...\n  210          return False\n  211  \n  212:     _defaults = {\n  213          'color': 0,\n  214:         'stage_id': lambda self, *a, **kw: self._default_stage(*a, **kw)\n  215      }\n  216  \n  ...\n  242      # Public methods #\n  243  \n  244:     def copy_data(self, cr, uid, id, default=None, context=None):\n  245          current_rec = self.read(cr, uid, id, fields=['title'], context=context)\n  246          title = _(\"%s (copy)\") % (current_rec.get('title'))\n  247:         default = dict(default or {}, title=title)\n  248:         return super(survey_survey, self).copy_data(cr, uid, id, default,\n  249              context=context)\n  250  \n  ...\n  453          ctx = dict(context)\n  454  \n  455:         ctx.update({'default_model': 'survey.survey',\n  456:                     'default_res_id': ids[0],\n  457:                     'default_survey_id': ids[0],\n  458:                     'default_use_template': bool(template_id),\n  459:                     'default_template_id': template_id,\n  460:                     'default_composition_mode': 'comment'}\n  461                     )\n  462          return {\n  ...\n  533              oldname=\"note\"),\n  534      }\n  535:     _defaults = {\n  536          'sequence': 10\n  537      }\n  ...\n  539      # Public methods #\n  540  \n  541:     def copy_data(self, cr, uid, ids, default=None, context=None):\n  542          current_rec = self.read(cr, uid, ids, fields=['title'], context=context)\n  543          title = _(\"%s (copy)\") % (current_rec.get('title'))\n  544:         default = dict(default or {}, title=title)\n  545:         return super(survey_page, self).copy_data(cr, uid, ids, default,\n  546              context=context)\n  547  \n  ...\n  637      }\n  638  \n  639:     _defaults = {\n  640          'page_id': lambda self, cr, uid, context: context.get('page_id'),\n  641          'sequence': 10,\n  ...\n  658      ]\n  659  \n  660:     def copy_data(self, cr, uid, ids, default=None, context=None):\n  661          current_rec = self.read(cr, uid, ids, context=context)\n  662          question = _(\"%s (copy)\") % (current_rec.get('question'))\n  663:         default = dict(default or {}, question=question)\n  664:         return super(survey_question, self).copy_data(cr, uid, ids, default,\n  665              context=context)\n  666  \n  ...\n  824          'quizz_mark': fields.float('Score for this answer', help=\"A positive score indicates a correct answer; a negative or null score indicates a wrong answer\"),\n  825      }\n  826:     _defaults = {\n  827          'sequence': 10,\n  828      }\n  ...\n  882          'quizz_score': fields.function(_quizz_get_score, type=\"float\", string=\"Score for the quiz\")\n  883      }\n  884:     _defaults = {\n  885          'date_create': fields.datetime.now,\n  886          'type': 'manually',\n  ...\n  895      ]\n  896  \n  897:     def copy_data(self, cr, uid, id, default=None, context=None):\n  898          raise osv.except_osv(_('Warning!'), _('You cannot duplicate this \\\n  899              element!'))\n  ...\n  915          context.update({\n  916              'survey_resent_token': True,\n  917:             'default_partner_ids': record.partner_id and [record.partner_id.id] or [],\n  918:             'default_multi_email': record.email or \"\",\n  919:             'default_public': 'email_private',\n  920          })\n  921          return self.pool.get('survey.survey').action_send_survey(cr, uid,\n  ...\n  995      }\n  996  \n  997:     _defaults = {\n  998          'skipped': False,\n  999          'date_create': fields.datetime.now()\n ....\n 1027          return super(survey_user_input_line, self).write(cr, uid, ids, vals, context=context)\n 1028  \n 1029:     def copy_data(self, cr, uid, id, default=None, context=None):\n 1030          raise osv.except_osv(_('Warning!'), _('You cannot duplicate this \\\n 1031              element!'))\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\survey\\views\\survey_result.xml:\n   19                      <div t-field=\"survey.description\" class=\"oe_no_empty\" />\n   20                  </div>\n   21:                 <div class=\"panel panel-default hidden-print\">\n   22                      <div class=\"panel-heading\"><span class=\"fa fa-filter\"></span>  Filters <span t-if=\"filter_display_data\" class=\"pull-right text-primary clear_survey_filter\"><i class=\"fa fa-times\"></i> Clear All Filters</span></div>\n   23                      <div class=\"panel-body\">\n   24                          <span t-if=\"filter_finish == True\">\n   25:                             <span class=\"label label-default only_left_radius filter-all\">All surveys</span><span class=\"label label-primary only_right_radius filter-finished\">Finished surveys</span>\n   26                          </span>\n   27                          <span t-if=\"filter_finish == False\">\n   28:                             <span class=\"label label-primary only_left_radius filter-all\">All surveys</span><span class=\"label label-default only_right_radius filter-finished\">Finished surveys</span>\n   29                          </span>\n   30                          <span t-foreach=\"filter_display_data\" t-as=\"filter_data\">\n   ..\n   47                              <span t-field='question.question'></span>\n   48                              <t t-if=\"question.type == 'matrix'\">\n   49:                                 <small><span class=\"label label-default\">Matrix: <span t-field='question.matrix_subtype'/></span></small>\n   50                              </t>\n   51                              <t t-if=\"question.type in ['simple_choice', 'multiple_choice']\">\n   52:                                 <small><span t-field='question.type' class=\"label label-default\"></span></small>\n   53                              </t>\n   54                              <span class=\"pull-right\">\n   ..\n  265          <t t-set=\"text_result\" t-value=\"number_result['input_lines']\" />\n  266          <span class=\"pull-right mt8\">\n  267:             <span class=\"label label-default only_left_radius\">Sum </span> <span class=\"label label-info only_right_radius\" t-esc=\"number_result['sum']\"></span>\n  268:             <span class=\"label label-default only_left_radius\">Maximum </span> <span class=\"label label-success only_right_radius\" t-esc=\"number_result['max']\"></span>\n  269:             <span class=\"label label-default only_left_radius\">Minimum </span> <span class=\"label label-danger only_right_radius\" t-esc=\"number_result['min']\"></span>\n  270:             <span class=\"label label-default only_left_radius\">Average </span> <span class=\"label label-warning only_right_radius\" t-esc=\"number_result['average']\"></span>\n  271          </span>\n  272          <ul class=\"nav nav-tabs hidden-print\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\survey\\views\\survey_templates.xml:\n   67                  <div class=\"container\">\n   68                      <div groups=\"base.group_website_publisher\" t-ignore=\"true\" class=\"text-right\">\n   69:                         <a href=\"/web#action=survey.action_survey_form\" class=\"btn btn-default\">Go back to surveys</a>\n   70                      </div>\n   71                      <div class='jumbotron mt32'>\n   ..\n   94                  <div class=\"container\">\n   95                      <div groups=\"base.group_website_publisher\" t-ignore=\"true\" class=\"text-right\">\n   96:                         <a href=\"/web#action=survey.action_survey_form\" class=\"btn btn-default\">Go back to surveys</a>\n   97                      </div>\n   98                      <t t-call=\"survey.page\" />\n   ..\n  133              </t>\n  134              <div class=\"text-center mt16 mb16\">\n  135:                 <button t-if=\"survey.users_can_go_back and page_nr > 0\" type=\"submit\" class=\"btn btn-default\" name=\"button_submit\" value=\"previous\">Previous page</button>\n  136                  <button t-if=\"not last\" type=\"submit\" class=\"btn btn-primary\" name=\"button_submit\" value=\"next\">Next page</button>\n  137                  <button t-if=\"last\" type=\"submit\" class=\"btn btn-primary\" name=\"button_submit\" value=\"finish\">Submit survey</button>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\survey\\views\\survey_views.xml:\n   91              <field name=\"view_id\" ref=\"survey_user_input_tree\"></field>\n   92              <field name=\"search_view_id\" ref=\"survey_user_input_search\"/>\n   93:             <field name=\"context\">{'search_default_group_by_survey': True}</field>\n   94              <field name=\"help\" type=\"html\">\n   95                  <p>Nobody has replied to your surveys yet.</p>\n   ..\n  102              <field name=\"view_id\" ref=\"survey_user_input_tree\"></field>\n  103              <field name=\"search_view_id\" ref=\"survey_user_input_search\"/>\n  104:             <field name=\"context\">{'search_default_survey_id': active_id, 'default_survey_id': active_id}</field>\n  105              <field name=\"help\" type=\"html\">\n  106                  <p>Nobody has replied to your survey yet.</p>\n  ...\n  128                          <notebook>\n  129                              <page string=\"Edit Pages and Questions\">\n  130:                                 <field name=\"page_ids\" mode=\"tree\" context=\"{'default_survey_id': active_id}\" nolabel=\"1\">\n  131                                      <tree>\n  132                                          <field name=\"sequence\" widget=\"handle\"/>\n  ...\n  170              <field name=\"model\">survey.survey</field>\n  171              <field name=\"arch\" type=\"xml\">\n  172:                 <kanban default_group_by=\"stage_id\">\n  173                      <field name=\"stage_id\" />\n  174                      <field name=\"designed\" />\n  ...\n  227              </field>\n  228          </record>\n  229:         <act_window context=\"{'search_default_survey_id': [active_id], 'default_survey_id': active_id}\" id=\"act_survey_pages\" name=\"Pages\" res_model=\"survey.page\" src_model=\"survey.survey\"/>\n  230:         <act_window context=\"{'search_default_survey_id': [active_id], 'default_survey_id': active_id}\" id=\"act_survey_question\" name=\"Questions\" res_model=\"survey.question\" src_model=\"survey.survey\"/>\n  231  \n  232          <!-- PAGES -->\n  ...\n  241                              <h1><field name=\"title\"/></h1>\n  242                          </div>\n  243:                         <field name=\"question_ids\" nolabel=\"1\" mode=\"tree\" context=\"{'default_page_id': active_id}\">\n  244                              <tree>\n  245                                  <field name=\"sequence\" widget=\"handle\"/>\n  ...\n  285              <field name=\"view_mode\">tree,form</field>\n  286              <field name=\"search_view_id\" ref=\"survey_page_search\"/>\n  287:             <field name=\"context\">{'search_default_group_by_survey': True}</field>\n  288          </record>\n  289:         <act_window context=\"{'search_default_page_id': active_id, 'default_page_id': active_id}\" id=\"act_survey_page_question\" name=\"Questions\" res_model=\"survey.question\" src_model=\"survey.page\"/>\n  290  \n  291          <!-- QUESTIONS -->\n  ...\n  310                                  <separator />\n  311                                  <label for=\"labels_ids\" attrs=\"{'invisible': [('type', 'not in', ['simple_choice', 'multiple_choice', 'matrix'])]}\" />\n  312:                                 <field name=\"labels_ids\" string=\"Type of answers\" context=\"{'default_question_id': active_id}\" attrs=\"{'invisible': [('type', 'not in', ['simple_choice', 'multiple_choice', 'matrix'])]}\">\n  313                                      <tree editable=\"bottom\">\n  314                                          <field name=\"sequence\" widget=\"handle\"/>\n  ...\n  319                                  <separator />\n  320                                  <label for=\"labels_ids_2\" attrs=\"{'invisible': [('type', '!=', 'matrix')]}\" />\n  321:                                 <field name=\"labels_ids_2\" context=\"{'default_question_id_2': active_id}\" attrs=\"{'invisible': [('type', '!=', 'matrix')]}\">\n  322                                      <tree editable=\"bottom\">\n  323                                          <field name=\"sequence\" widget=\"handle\"/>\n  ...\n  395              <field name=\"view_mode\">tree,form</field>\n  396              <field name=\"search_view_id\" ref=\"survey_question_search\"/>\n  397:             <field name=\"context\">{'search_default_group_by_page': True}</field>\n  398          </record>\n  399  \n  ...\n  429              <field name=\"view_mode\">tree,form</field>\n  430              <field name=\"search_view_id\" ref=\"survey_label_search\"/>\n  431:             <field name=\"context\">{'search_default_group_by_question': True}</field>\n  432          </record>\n  433  \n  ...\n  495              <field name=\"view_mode\">tree,form</field>\n  496              <field name=\"search_view_id\" ref=\"survey_response_line_search\"/>\n  497:             <field name=\"context\">{'search_default_group_by_survey': True, 'search_default_group_by_user_input': True}</field>\n  498          </record>\n  499  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\survey\\wizard\\survey_email_compose_message.py:\n   70      }\n   71  \n   72:     _defaults = {\n   73          'public': 'public_link',\n   74          'survey_id': lambda self, cr, uid, ctx={}: ctx.get('model') == 'survey.survey' and ctx.get('res_id') or None\n   75      }\n   76  \n   77:     def default_get(self, cr, uid, fields, context=None):\n   78:         res = super(survey_mail_compose_message, self).default_get(cr, uid, fields, context=context)\n   79          if context.get('active_model') == 'res.partner' and context.get('active_ids'):\n   80              res.update({'partner_ids': context.get('active_ids')})\n   ..\n  189                      __URL__ is automaticaly converted into the special url of the survey.\"))\n  190  \n  191:             if not wizard.multi_email and not wizard.partner_ids and (context.get('default_partner_ids') or context.get('default_multi_email')):\n  192:                 wizard.multi_email = context.get('default_multi_email')\n  193:                 wizard.partner_ids = context.get('default_partner_ids')\n  194  \n  195              # quick check of email list\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\survey\\wizard\\survey_email_compose_message.xml:\n   19          </record>\n   20  \n   21:         <!-- Replace the default mass-mailing wizard in base with the composition wizard -->\n   22:         <act_window name=\"Partner Survey Mailing\" res_model=\"survey.mail.compose.message\" src_model=\"res.partner\" view_mode=\"form\" multi=\"True\" target=\"new\" key2=\"client_action_multi\" id=\"survey.action_partner_survey_mail\" context=\"{'default_use_template': True, 'default_template_id': ref('email_template_survey')}\" />\n   23  \n   24          <!-- Composition form (context['survey_resent_token'], if True, hide share option, emails list and partner_ids) -->\n   ..\n   33                      <field name=\"parent_id\" invisible=\"1\"/>\n   34                      <group col=\"2\">\n   35:                         <field name=\"survey_id\" readonly=\"context.get('default_survey_id')\" on_change=\"onchange_survey_id(survey_id)\" />\n   36                          <field name=\"public\" widget=\"radio\" invisible=\"context.get('survey_resent_token')\" />\n   37                      </group>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\survey_crm\\crm_view.xml:\n    2  <openerp>\n    3      <data>\n    4:         <!--  Replace the default mass-mailing wizard in base with the composition wizard -->\n    5          <act_window name=\"Partner Survey Mailing\"\n    6                  res_model=\"survey.mail.compose.message\"\n    .\n   12                  id=\"survey.action_partner_survey_mail_crm\"\n   13                  context=\"{\n   14:                             'default_use_template': True,\n   15:                             'default_template_id': ref('survey.email_template_survey'),\n   16                          }\" />\n   17      </data>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\survey_crm\\survey.py:\n   26      _inherit = 'survey.mail.compose.message'\n   27  \n   28:     def default_get(self, cr, uid, fields, context=None):\n   29:         res = super(survey_mail_compose_message, self).default_get(cr, uid, fields, context=context)\n   30          if context.get('active_model') == 'crm.lead' and context.get('active_ids'):\n   31              partner_ids = []\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\test_converter\\tests\\test_html.py:\n  300          value = converter('2011-05-03')\n  301  \n  302:         # default lang/format is US\n  303          self.assertEqual(value, '05/03/2011')\n  304  \n  ...\n  308          value = converter('2011-05-03 11:12:13')\n  309  \n  310:         # default lang/format is US\n  311          self.assertEqual(value, '05/03/2011 00:12:13')\n  312  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\test_documentation_examples\\extension.py:\n    6      _name = 'extension.0'\n    7  \n    8:     name = fields.Char(default=\"A\")\n    9  \n   10  class Extension1(models.Model):\n   11      _inherit = 'extension.0'\n   12  \n   13:     description = fields.Char(default=\"Extended\")\n   14  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\test_impex\\models.py:\n   43              'value': field,\n   44          }\n   45:         _defaults = {\n   46              'const': 4,\n   47          }\n   ..\n   90          'child2': fields.one2many('export.one2many.child.2', 'parent_id'),\n   91      }\n   92:     _defaults = {\n   93          'const': 36,\n   94      }\n   ..\n  143  \n  144  \n  145: class SelectionWithDefault(orm.Model):\n  146:     _name = 'export.selection.withdefault'\n  147      _columns = {\n  148          'const': fields.integer(),\n  149          'value': fields.selection([(1, \"Foo\"), (2, \"Bar\")]),\n  150      }\n  151:     _defaults = {\n  152          'const': 4,\n  153          'value': 2,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\test_impex\\tests\\test_load.py:\n  475              moreinfo=\"Foo Bar Qux 4\".split())])\n  476  \n  477: class test_selection_with_default(ImporterCase):\n  478:     model_name = 'export.selection.withdefault'\n  479  \n  480      def test_empty(self):\n  ...\n  489              [False])\n  490  \n  491:     def test_default(self):\n  492:         \"\"\" Non-provided cells should set corresponding field to default\n  493          \"\"\"\n  494          result = self.import_(['const'], [['42']])\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\test_inherit\\models.py:\n   11          'state': osv.fields.selection([('a', 'A'), ('b', 'B')], string='State'),\n   12      }\n   13:     _defaults = {\n   14          'name': 'Foo',\n   15      }\n   ..\n   41      field_in_mother = fields.Char()\n   42  \n   43:     # extend the name field: make it required and change its default value\n   44:     name = fields.Char(required=True, default='Bar')\n   45  \n   46      # extend the selection of the state field\n   ..\n   70      template_id = fields.Many2one()\n   71  \n   72:     # change the default value of an inherited field\n   73:     name = fields.Char(default='Baz')\n   74  \n   75  # vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\test_inherit\\tests\\test_inherit.py:\n   21          daughter = self.env['test.inherit.daughter']\n   22  \n   23:         # the field mother.name must have required=True and \"Bar\" as default\n   24          field = mother._fields['name']\n   25          self.assertTrue(field.required)\n   26:         self.assertEqual(field.default(mother), \"Bar\")\n   27:         self.assertEqual(mother._defaults.get('name'), \"Bar\")\n   28:         self.assertEqual(mother.default_get(['name']), {'name': \"Bar\"})\n   29  \n   30:         # the field daughter.name must have required=False and \"Baz\" as default\n   31          field = daughter._fields['name']\n   32          self.assertFalse(field.required)\n   33:         self.assertEqual(field.default(mother), \"Baz\")\n   34:         self.assertEqual(daughter._defaults.get('name'), \"Baz\")\n   35:         self.assertEqual(daughter.default_get(['name']), {'name': \"Baz\"})\n   36  \n   37          # the field daughter.template_id should have\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\test_new_api\\models.py:\n  102      discussion = fields.Many2one('test_new_api.discussion', ondelete='cascade')\n  103      body = fields.Text()\n  104:     author = fields.Many2one('res.users', default=lambda self: self.env.user)\n  105      name = fields.Char(string='Title', compute='_compute_name', store=True)\n  106      display_name = fields.Char(string='Abstract', compute='_compute_display_name')\n  ...\n  163      _name = 'test_new_api.mixed'\n  164  \n  165:     number = fields.Float(digits=(10, 2), default=3.14)\n  166      date = fields.Date()\n  167      now = fields.Datetime(compute='_compute_now')\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\test_new_api\\tests\\test_new_fields.py:\n    3  #\n    4  from datetime import date, datetime\n    5: from collections import defaultdict\n    6  \n    7  from openerp.tests import common\n    .\n   53      def test_10_computed(self):\n   54          \"\"\" check definition of computed fields \"\"\"\n   55:         # by default function fields are not stored and readonly\n   56          field = self.env['test_new_api.message']._fields['size']\n   57          self.assertFalse(field.store)\n   ..\n  221          self.assertEqual(record.date, '2012-05-01')\n  222  \n  223:         # one may assign dates in the default format, and it must be checked\n  224          record.date = '2012-05-01'\n  225          self.assertEqual(record.date, '2012-05-01')\n  ...\n  292          discussion = message.discussion\n  293  \n  294:         # by default related fields are not stored\n  295          field = message._fields['discussion_name']\n  296          self.assertFalse(field.store)\n  ...\n  360          self.assertEqual(message.size, len(BODY))\n  361  \n  362:     def test_41_defaults(self):\n  363:         \"\"\" test default values. \"\"\"\n  364          fields = ['discussion', 'body', 'author', 'size']\n  365:         defaults = self.env['test_new_api.message'].default_get(fields)\n  366:         self.assertEqual(defaults, {'author': self.env.uid})\n  367  \n  368:         defaults = self.env['test_new_api.mixed'].default_get(['number'])\n  369:         self.assertEqual(defaults, {'number': 3.14})\n  370  \n  371  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\test_new_api\\tests\\test_onchange.py:\n   10          self.Message = self.env['test_new_api.message']\n   11  \n   12:     def test_default_get(self):\n   13:         \"\"\" checking values returned by default_get() \"\"\"\n   14          fields = ['name', 'categories', 'participants', 'messages']\n   15:         values = self.Discussion.default_get(fields)\n   16          self.assertEqual(values, {})\n   17  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\test_workflow\\models.py:\n   33      _name = 'test.workflow.trigger'\n   34      _columns = { 'value': openerp.osv.fields.boolean('Value') }\n   35:     _defaults = { 'value': False }\n   36  \n   37  class a(openerp.osv.orm.Model):\n   38      _name = 'test.workflow.model.a'\n   39      _columns = { 'value': openerp.osv.fields.integer('Value') }\n   40:     _defaults = { 'value': 0 }\n   41  \n   42  class b(openerp.osv.orm.Model):\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\warning\\warning.py:\n   43          'invoice_warn_msg' : fields.text('Message for Invoice'),\n   44      }\n   45:     _defaults = {\n   46           'sale_warn' : 'no-message',\n   47           'purchase_warn' : 'no-message',\n   ..\n  191       }\n  192  \n  193:     _defaults = {\n  194           'sale_line_warn' : 'no-message',\n  195           'purchase_line_warn' : 'no-message',\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\web\\controllers\\main.py:\n  326  \n  327  def clean_action(action):\n  328:     action.setdefault('flags', {})\n  329:     action_type = action.setdefault('type', 'ir.actions.act_window_close')\n  330      if action_type == 'ir.actions.act_window':\n  331          return fix_view_modes(action)\n  ...\n  617                                                ['module','src','value','lang'], order='module')\n  618          for mod, msg_group in itertools.groupby(messages, key=operator.itemgetter('module')):\n  619:             translations_per_module.setdefault(mod,{'messages':[]})\n  620              translations_per_module[mod]['messages'].extend({'id': m['src'],\n  621                                                               'string': m['value']} \\\n  ...\n  969          :param ids: identifiers of the records to resequence, in the new sequence order\n  970          :type ids: list(id)\n  971:         :param str field: field used for sequence specification, defaults to\n  972                            \"sequence\"\n  973          :param int offset: sequence number for first record in ``ids``, allows\n  974                             starting the resequencing from an arbitrary number,\n  975:                            defaults to ``0``\n  976          \"\"\"\n  977          m = request.session.model(model)\n  ...\n 1040  \n 1041              if not id:\n 1042:                 res = Model.default_get(cr, uid, [field], context).get(field)\n 1043                  image_base64 = res\n 1044              else:\n ....\n 1079          \"\"\" Download link for files stored as binary fields.\n 1080  \n 1081:         If the ``id`` parameter is omitted, fetches the default value for the\n 1082:         binary field (via ``default_get``), otherwise fetches the field for\n 1083          that precise record.\n 1084  \n ....\n 1097              res = Model.read(cr, uid, [int(id)], fields, context)[0]\n 1098          else:\n 1099:             res = Model.default_get(cr, uid, fields, context)\n 1100          filecontent = base64.b64decode(res.get(field, ''))\n 1101          if not filecontent:\n ....\n 1129              res = Model.read([int(id)], fields, context)[0]\n 1130          else:\n 1131:             res = Model.default_get(fields, context)\n 1132          filecontent = base64.b64decode(res.get(field, ''))\n 1133          if not filecontent:\n ....\n 1360          #\n 1361          # Works the following way:\n 1362:         # * sort the list of fields to export, the default sorting order will\n 1363          #   put the field itself (if present, for xmlid) and all of its\n 1364          #   sub-fields right after it\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\web\\doc\\_themes\\flask_theme_support.py:\n    7  class FlaskyStyle(Style):\n    8      background_color = \"#f8f8f8\"\n    9:     default_style = \"\"\n   10  \n   11      styles = {\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\web\\doc\\conf.py:\n    9  # autogenerated file.\n   10  #\n   11: # All configuration values have a default; values that are commented out\n   12: # serve to show the default.\n   13  \n   14  import sys, os\n   ..\n   73  exclude_patterns = ['_build']\n   74  \n   75: # The reST default role (used for this markup: `text`) to use for all documents.\n   76: #default_role = None\n   77  \n   78  # If true, '()' will be appended to :func: etc. cross-reference text.\n   ..\n   84  \n   85  # If true, sectionauthor and moduleauthor directives will be shown in the\n   86: # output. They are ignored by default.\n   87  #show_authors = False\n   88  \n   ..\n  108  html_theme_path = ['_themes']\n  109  \n  110: # The name for this set of Sphinx documents.  If None, it defaults to\n  111  # \"<project> v<release> documentation\".\n  112  #html_title = None\n  113  \n  114: # A shorter title for the navigation bar.  Default is the same as html_title.\n  115  #html_short_title = None\n  116  \n  ...\n  126  # Add any paths that contain custom static files (such as style sheets) here,\n  127  # relative to this directory. They are copied after the builtin static files,\n  128: # so a file named \"default.css\" will overwrite the builtin \"default.css\".\n  129  html_static_path = ['_static']\n  130  \n  ...\n  160  #html_show_sourcelink = True\n  161  \n  162: # If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n  163  #html_show_sphinx = True\n  164  \n  165: # If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n  166  #html_show_copyright = True\n  167  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\web\\static\\lib\\py.js\\doc\\conf.py:\n    9  # autogenerated file.\n   10  #\n   11: # All configuration values have a default; values that are commented out\n   12: # serve to show the default.\n   13  \n   14  import sys, os\n   ..\n   67  exclude_patterns = ['_build']\n   68  \n   69: # The reST default role (used for this markup: `text`) to use for all documents.\n   70: #default_role = None\n   71  \n   72: # Default sphinx domain\n   73: default_domain = 'js'\n   74  \n   75  # If true, '()' will be appended to :func: etc. cross-reference text.\n   ..\n   81  \n   82  # If true, sectionauthor and moduleauthor directives will be shown in the\n   83: # output. They are ignored by default.\n   84  #show_authors = False\n   85  \n   86  # The name of the Pygments (syntax highlighting) style to use.\n   87  pygments_style = 'sphinx'\n   88: # default code-block highlighting\n   89  highlight_language = 'javascript'\n   90  \n   ..\n   97  # The theme to use for HTML and HTML Help pages.  See the documentation for\n   98  # a list of builtin themes.\n   99: html_theme = 'default'\n  100  \n  101  # Theme options are theme-specific and customize the look and feel of a theme\n  ...\n  107  #html_theme_path = []\n  108  \n  109: # The name for this set of Sphinx documents.  If None, it defaults to\n  110  # \"<project> v<release> documentation\".\n  111  #html_title = None\n  112  \n  113: # A shorter title for the navigation bar.  Default is the same as html_title.\n  114  #html_short_title = None\n  115  \n  ...\n  125  # Add any paths that contain custom static files (such as style sheets) here,\n  126  # relative to this directory. They are copied after the builtin static files,\n  127: # so a file named \"default.css\" will overwrite the builtin \"default.css\".\n  128  html_static_path = ['_static']\n  129  \n  ...\n  155  #html_show_sourcelink = True\n  156  \n  157: # If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n  158  #html_show_sphinx = True\n  159  \n  160: # If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n  161  #html_show_copyright = True\n  162  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\web\\static\\lib\\qweb\\qweb-benchmark.xml:\n    4  <templates id=\"template\">\n    5  <t t-name=\"benchmark\"><div id=\"oe_notification\" class=\"oe_notification\">\n    6:         <div id=\"oe_notification_default\">\n    7              <a class=\"ui-notify-cross ui-notify-close\" href=\"#\">x</a>\n    8              <h1>title</h1>\n    .\n   43      </div>\n   44      <div id=\"oe_notification\" class=\"oe_notification\">\n   45:         <div id=\"oe_notification_default\">\n   46              <a class=\"ui-notify-cross ui-notify-close\" href=\"#\">x</a>\n   47              <h1>title</h1>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\web\\static\\src\\xml\\base.xml:\n   13  <t t-name=\"Notification\">\n   14      <div class=\"oe_notification\" t-translation=\"off\">\n   15:         <div id=\"oe_notification_default\">\n   16              <a class=\"ui-notify-cross ui-notify-close\" href=\"#\">x</a>\n   17              <h1>#{title}</h1>\n   ..\n   92                  </p>\n   93                  <p class=\"oe_grey\" style=\"margin: 10px\">\n   94:                     By default, the master password is 'admin'. This password\n   95                      is required to create, delete, dump or restore databases.\n   96                  </p>\n   ..\n  118                      </tr>\n  119                      <tr>\n  120:                         <td><label for=\"db_lang\">Default language:</label></td>\n  121                          <td class=\"oe_form_field oe_form_field_selection\">\n  122                              <select name=\"db_lang\" t-if=\"widget.lang_list\" class=\"oe_inline\">\n  ...\n  361          <li class=\"dropdown\">\n  362              <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">\n  363:                 <img class=\"oe_topbar_avatar\" t-att-data-default-src=\"_s + '/web/static/src/img/user_menu_avatar.png'\"/>\n  364                  <span class=\"oe_topbar_name\"/> <b class=\"caret\"></b>\n  365              </a>\n  ...\n  539          <option value=\"get_metadata\">View Metadata</option>\n  540          <option value=\"toggle_layout_outline\">Toggle Form Layout Outline</option>\n  541:         <option value=\"set_defaults\">Set Defaults</option>\n  542      </t>\n  543      <option value=\"tests\">JS Tests</option>\n  ...\n  851      </div>\n  852  </t>\n  853: <form t-name=\"FormView.set_default\">\n  854      <t t-set=\"args\" t-value=\"widget.dialog_options.args\"/>\n  855      <table style=\"width: 100%\">\n  856          <tr>\n  857              <td>\n  858:                 <label for=\"formview_default_fields\"\n  859                         class=\"oe_label oe_align_right\">\n  860:                     Default:\n  861                  </label>\n  862              </td>\n  863              <td class=\"oe_form_required\">\n  864:                 <select id=\"formview_default_fields\">\n  865                      <option value=\"\"/>\n  866                      <option t-foreach=\"args.fields\" t-as=\"field\"\n  ...\n  873          <tr t-if=\"args.conditions.length\">\n  874              <td>\n  875:                 <label for=\"formview_default_conditions\"\n  876                         class=\"oe_label oe_align_right\">\n  877                      Condition:\n  ...\n  879              </td>\n  880              <td>\n  881:                 <select id=\"formview_default_conditions\">\n  882                      <option value=\"\"/>\n  883                      <option t-foreach=\"args.conditions\" t-as=\"cond\"\n  ...\n  890          <tr>\n  891              <td colspan=\"2\">\n  892:                 <input type=\"radio\" id=\"formview_default_self\"\n  893                         value=\"self\" name=\"scope\" checked=\"checked\"/>\n  894:                 <label for=\"formview_default_self\" class=\"oe_label\"\n  895                         style=\"display: inline;\">\n  896                      Only you\n  897                  </label>\n  898                  <br/>\n  899:                 <input type=\"radio\" id=\"formview_default_all\"\n  900                         value=\"all\" name=\"scope\"/>\n  901:                 <label for=\"formview_default_all\" class=\"oe_label\"\n  902                         style=\"display: inline;\">\n  903                      All users\n  ...\n  991              <t t-esc=\"widget.node.attrs.modifiers\"/>\n  992          </li>\n  993:         <li t-if=\"widget.field and widget.field.change_default\" data-item=\"change_default\">\n  994:             <span class=\"oe_tooltip_technical_title\">Change default:</span>\n  995              Yes\n  996          </li>\n  ...\n 1440  </t>\n 1441  <t t-name=\"WidgetButton\">\n 1442:     <button type=\"button\" t-att-class=\"widget.is_stat_button ? 'oe_stat_button btn btn-default' : 'oe_button oe_form_button ' + (widget.node.attrs.class ? widget.node.attrs.class : '')\"\n 1443          t-att-style=\"widget.node.attrs.style\"\n 1444          t-att-tabindex=\"widget.node.attrs.tabindex\"\n ....\n 1618          <tr>\n 1619              <td t-foreach=\"line\" t-as=\"widget\" class=\"oe_searchview_field\">\n 1620:                 <t t-raw=\"widget.render(defaults)\"/>\n 1621              </td>\n 1622          </tr>\n ....\n 1628          t-att-class=\"classes.join(' ')\"\n 1629          t-att-style=\"style\"\n 1630:         t-att-autofocus=\"attrs.default_focus === '1' ? 'autofocus' : undefined\">\n 1631      <img t-att-src=\"_s + '/web/static/src/img/icons/' + (attrs.icon || 'gtk-home') + '.png'\" width=\"16\" height=\"16\"/>\n 1632      <br t-if=\"attrs.string\"/>\n ....\n 1667      <div t-att-style=\"style\">\n 1668          <input type=\"text\" size=\"15\" t-att-name=\"attrs.name\"\n 1669:                t-att-autofocus=\"attrs.default_focus === '1' ? 'autofocus' : undefined\"\n 1670                 t-att-id=\"element_id\"\n 1671:                t-att-value=\"defaults[attrs.name] || ''\"/>\n 1672:         <t t-if=\"filters.length\" t-raw=\"filters.render(defaults)\"/>\n 1673      </div>\n 1674  </t>\n ....\n 1683      <div t-att-style=\"style\">\n 1684          <span t-att-id=\"element_id\"/>\n 1685:         <t t-if=\"filters.length\" t-raw=\"filters.render(defaults)\"/>\n 1686      </div>\n 1687  </t>\n ....\n 1696      <div t-att-style=\"style\">\n 1697          <select t-att-name=\"attrs.name\" t-att-id=\"element_id\"\n 1698:                 t-att-autofocus=\"attrs.default_focus === '1' || undefined\">\n 1699              <option t-if=\"prepend_empty\"/>\n 1700              <t t-foreach=\"attrs.selection\" t-as=\"option\">\n 1701:                 <t t-set=\"selected\" t-value=\"defaults[attrs.name] === option[0]\"/>\n 1702                  <option t-if=\"selected\"\n 1703                          t-attf-selected=\"selected\"\n ....\n 1710              </t>\n 1711          </select>\n 1712:         <t t-if=\"filters.length\" t-raw=\"filters.render(defaults)\"/>\n 1713      </div>\n 1714  </t>\n ....\n 1742              <input id=\"oe_searchview_custom_public\" type=\"checkbox\"/>\n 1743              <label for=\"oe_searchview_custom_public\">Share with all users</label>\n 1744:             <input id=\"oe_searchview_custom_default\" type=\"checkbox\"/>\n 1745:             <label for=\"oe_searchview_custom_default\">Use by default</label>\n 1746          </p>\n 1747          <button>Save</button>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\web\\static\\src\\xml\\website.tour.xml:\n    9                  <nav class=\"popover-navigation\">\n   10                      <t t-if=\"next\">\n   11:                         <button class=\"btn btn-sm btn-default\" data-role=\"next\"><t t-esc=\"next\"/></button>\n   12                      </t>\n   13                      <small t-if=\"next &amp;&amp; end\">\n   ..\n   16                      </small>\n   17                      <t t-if=\"end &amp;&amp; ! next\">\n   18:                         <button class=\"btn btn-sm btn-default\" data-role=\"end\"><t t-esc=\"end\"/></button>\n   19                      </t>\n   20                  </nav>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\web_diagram\\controllers\\main.py:\n   48          for tr in transitions:\n   49              list_tr.append(tr)\n   50:             connectors.setdefault(tr, {\n   51                  'id': int(tr),\n   52                  's_id': transitions[tr][0],\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\web_graph\\static\\src\\xml\\web_graph.xml:\n    6  \n    7          <div class=\"btn-group graph_mode_selection\" data-toggle=\"buttons\">\n    8:             <label class=\"btn btn-default\" data-mode=\"pivot\" title=\"Table Mode\">\n    9                  <input type=\"radio\" name=\"modes\"/><span class=\"fa fa-table\"></span>\n   10              </label>\n   11:             <label class=\"btn btn-default\" data-mode=\"bar\" title=\"Bar Chart\">\n   12                  <input type=\"radio\" name=\"modes\"/><span class=\"fa fa-bar-chart-o\"></span>\n   13              </label>\n   14:             <label class=\"btn btn-default\" data-mode=\"line\" title=\"Line Chart\">\n   15                  <input type=\"radio\" name=\"modes\"/><span class=\"fa fa-check-square\"></span>\n   16              </label>\n   17:             <label class=\"btn btn-default\" data-mode=\"pie\" title=\"Pie Chart\">\n   18                  <input type=\"radio\" name=\"modes\"/><span class=\"fa fa-adjust\"></span>\n   19              </label>\n   ..\n   21  \n   22          <div class=\"btn-group graph_heatmap\" data-toggle=\"buttons\" >\n   23:             <label class=\"btn btn-default\" data-mode=\"both\" title=\"Heat Map\">\n   24                  <input type=\"radio\" name=\"heatmap\"/><span class=\"fa fa-th\"></span>\n   25              </label>\n   26:             <label class=\"btn btn-default\" data-mode=\"row\" title=\"Heat Map (rows)\">\n   27                  <input type=\"radio\" name=\"heatmap\"/><span class=\"fa fa-bars\"></span>\n   28              </label>\n   29:             <label class=\"btn btn-default\" data-mode=\"col\" title=\"Heat Map (columns)\">\n   30                  <input type=\"radio\" name=\"heatmap\"/><span class=\"fa fa-bars fa-rotate-90\"></span>\n   31              </label>\n   ..\n   33  \n   34          <div class=\"btn-group graph_options_selection\">\n   35:             <label class=\"btn btn-default\" data-choice=\"swap_axis\" title=\"Swap Axis\">\n   36                  <span class=\"fa fa-expand\"></span>\n   37              </label>\n   38:             <label class=\"btn btn-default\" data-choice=\"expand_all\" title=\"Expand All\">\n   39                  <span class=\"fa fa-arrows-alt\"></span>\n   40              </label>\n   41:             <label class=\"btn btn-default\" data-choice=\"update_values\" title=\"Reload Data\">\n   42                  <span class=\"fa fa-refresh\"></span>\n   43              </label>\n   44:             <label class=\"btn btn-default\" data-choice=\"export_data\" title=\"Export Data\" style=\"display:none\">\n   45                  <span class=\"fa fa-download\"></span>\n   46              </label>\n   47          </div>\n   48          <div class=\"btn-group\">\n   49:             <label class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">\n   50                  Measures <span class=\"caret\"></span>\n   51              </label>\n   ..\n   59  \n   60  	<div t-name=\"field_selection\" class=\"dropdown\">\n   61: 		<span class=\"btn btn-default field-selection dropdown-toggle\" data-toggle=\"dropdown\"></span>\n   62          <ul class=\"dropdown-menu multi-level\" role=\"menu\">\n   63  	    	<t t-foreach=\"fields\" t-as=\"field\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\web_linkedin\\web_linkedin.py:\n   46      }\n   47      \n   48:     def get_default_linkedin(self, cr, uid, fields, context=None):\n   49          key = self.pool.get(\"ir.config_parameter\").get_param(cr, uid, \"web.linkedin.apikey\") or \"\"\n   50          dom = self.pool.get('ir.config_parameter').get_param(cr, uid, 'web.base.url')\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\web_linkedin\\web_linkedin_view.xml:\n    8              <field name=\"arch\" type=\"xml\">\n    9                  <field name=\"name\" position=\"replace\">\n   10:                     <field name=\"name\" default_focus=\"1\" nolabel=\"1\" widget=\"linkedin\" />\n   11                  </field>\n   12                  <field name=\"website\" position=\"after\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\web_tests_demo\\__init__.py:\n    9          'other': fields.char(\"Other\", required=True)\n   10      }\n   11:     _defaults = {\n   12          'other': \"bob\"\n   13      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website\\controllers\\main.py:\n   97          if sitemap:\n   98              # Check if stored version is still valid\n   99:             server_format = openerp.tools.misc.DEFAULT_SERVER_DATETIME_FORMAT\n  100              create_date = datetime.datetime.strptime(sitemap[0]['create_date'], server_format)\n  101              delta = datetime.datetime.now() - create_date\n  ...\n  228      @http.route('/website/customize_template_get', type='json', auth='user', website=True)\n  229      def customize_template_get(self, xml_id, full=False):\n  230:         \"\"\" Lists the templates customizing ``xml_id``. By default, only\n  231          returns optional templates (which can be toggled on and off), if\n  232          ``full=True`` returns all templates customizing ``xml_id``\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website\\data\\data.xml:\n    2  <openerp>\n    3      <data noupdate=\"1\">\n    4:         <record id=\"default_website\" model=\"website\">\n    5              <field name=\"name\">www.openerp.com</field>\n    6              <field name=\"company_id\" ref=\"base.main_company\"/>\n    7              <field name=\"language_ids\" eval=\"[(6, 0, [ ref('base.lang_en')])]\"/>\n    8:             <field name=\"default_lang_id\" ref=\"base.lang_en\"/>\n    9              <field name=\"user_id\" ref=\"base.public_user\"/>\n   10          </record>\n   ..\n   46              <field name=\"view_type\">form</field>\n   47              <field name=\"view_mode\">kanban,form</field>\n   48:             <field name=\"context\" eval=\"'{\\'search_default_category_id\\':'+str(ref('base.module_category_website'))+'}'\"/>\n   49              <field name=\"help\" type=\"html\">\n   50                <p><b>No website module found!</b></p>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website\\data\\demo.xml:\n    3      <data>\n    4  \n    5:         <record id=\"default_website\" model=\"website\">\n    6              <field name=\"social_twitter\">https://twitter.com/odooapps</field>\n    7              <field name=\"social_facebook\">https://www.facebook.com/Odoo</field>\n    .\n  104                      <div class=\"form-group\">\n  105                          <div class=\"col-sm-offset-2 col-sm-10\">\n  106:                             <button type=\"submit\" class=\"btn btn-default btn-primary\">\n  107                                  Send <span class=\"fa fa-long-arrow-right\"/>\n  108                              </button>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website\\models\\ir_http.py:\n  102                                  request.lang = langs_withshort[0]\n  103                              else:\n  104:                                 request.lang = request.website.default_lang_code\n  105                          # We redirect with the right language in url\n  106:                         if request.lang != request.website.default_lang_code:\n  107                              path.insert(1, request.lang)\n  108                              path = '/'.join(path) or '/'\n  109                              return request.redirect(path + '?' + request.httprequest.query_string)\n  110                      else:\n  111:                         request.lang = request.website.default_lang_code\n  112  \n  113              request.context['lang'] = request.lang\n  ...\n  116                      request.lang = request.context['lang'] = path.pop(1)\n  117                      path = '/'.join(path) or '/'\n  118:                     if request.lang == request.website.default_lang_code:\n  119:                         # If language is in the url and it is the default language, redirect\n  120                          # to url without language so google doesn't see duplicate content\n  121                          return request.redirect(path + '?' + request.httprequest.query_string, code=301)\n  ...\n  158              current_path = werkzeug.url_unquote_plus(request.httprequest.path)\n  159              if generated_path != current_path:\n  160:                 if request.lang != request.website.default_lang_code:\n  161                      path = '/' + request.lang + path\n  162                  if request.httprequest.query_string:\n  ...\n  171              datas = attach[0]['datas']\n  172              response = werkzeug.wrappers.Response()\n  173:             server_format = openerp.tools.misc.DEFAULT_SERVER_DATETIME_FORMAT\n  174              try:\n  175                  response.last_modified = datetime.datetime.strptime(wdate, server_format + '.%f')\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website\\models\\ir_qweb.py:\n   26  import openerp\n   27  from openerp.osv import orm, fields\n   28: from openerp.tools import ustr, DEFAULT_SERVER_DATE_FORMAT, DEFAULT_SERVER_DATETIME_FORMAT\n   29  from openerp.tools import html_escape as escape\n   30  from openerp.addons.web.http import request\n   ..\n  147          if not value: return False\n  148  \n  149:         datetime.datetime.strptime(value, DEFAULT_SERVER_DATE_FORMAT)\n  150          return value\n  151  \n  ...\n  160          if isinstance(value, basestring):\n  161              value = datetime.datetime.strptime(\n  162:                 value, DEFAULT_SERVER_DATETIME_FORMAT)\n  163          if value:\n  164              # convert from UTC (server timezone) to user timezone\n  165              value = fields.datetime.context_timestamp(\n  166                  cr, uid, timestamp=value, context=context)\n  167:             value = value.strftime(DEFAULT_SERVER_DATETIME_FORMAT)\n  168  \n  169          attrs = super(DateTime, self).attributes(\n  ...\n  180  \n  181          # parse from string to datetime\n  182:         dt = datetime.datetime.strptime(value, DEFAULT_SERVER_DATETIME_FORMAT)\n  183  \n  184          # convert back from user's timezone to UTC\n  ...\n  199  \n  200          # format back to string\n  201:         return dt.strftime(DEFAULT_SERVER_DATETIME_FORMAT)\n  202  \n  203  class Text(orm.AbstractModel):\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website\\models\\ir_ui_view.py:\n   18          'customize_show': fields.boolean(\"Show As Optional Inherit\"),\n   19      }\n   20:     _defaults = {\n   21          'page': False,\n   22          'customize_show': False,\n   ..\n  149                  res_company=company,\n  150                  user_id=self.pool.get(\"res.users\").browse(cr, uid, uid),\n  151:                 translatable=context.get('lang') != request.website.default_lang_code,\n  152                  editable=request.website.is_publisher(),\n  153                  menu_data=self.pool['ir.ui.menu'].load_menus_root(cr, uid, context=context) if request.website.is_user() else None,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website\\models\\res_config.py:\n   11  \n   12          'language_ids': fields.related('website_id', 'language_ids', type='many2many', relation='res.lang', string='Languages'),\n   13:         'default_lang_id': fields.related('website_id', 'default_lang_id', type='many2one', relation='res.lang', string='Default language'),\n   14:         'default_lang_code': fields.related('website_id', 'default_lang_code', type=\"char\", string=\"Default language code\"),\n   15          'google_analytics_key': fields.related('website_id', 'google_analytics_key', type=\"char\", string='Google Analytics Key'),\n   16          \n   ..\n   39          return config_id\n   40  \n   41:     _defaults = {\n   42          'website_id': lambda self,cr,uid,c: self.pool.get('website').search(cr, uid, [], context=c)[0],\n   43      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website\\models\\website.py:\n   54                  if force_lang:\n   55                      ps[1] = lang\n   56:                 # Remove the default language unless it's explicitly provided\n   57:                 elif ps[1] == request.website.default_lang_code:\n   58                      ps.pop(1)\n   59              # Insert the context language or the provided language\n   60:             elif lang != request.website.default_lang_code or force_lang:\n   61                  ps.insert(1, lang)\n   62              location = '/'.join(ps)\n   ..\n  154          'company_id': fields.many2one('res.company', string=\"Company\"),\n  155          'language_ids': fields.many2many('res.lang', 'website_lang_rel', 'website_id', 'lang_id', 'Languages'),\n  156:         'default_lang_id': fields.many2one('res.lang', string=\"Default language\"),\n  157:         'default_lang_code': fields.related('default_lang_id', 'code', type=\"char\", string=\"Default language code\", store=True),\n  158          'social_twitter': fields.char('Twitter Account'),\n  159          'social_facebook': fields.char('Facebook Account'),\n  ...\n  171      }\n  172  \n  173:     _defaults = {\n  174          'company_id': lambda self,cr,uid,c: self.pool['ir.model.data'].xmlid_to_res_id(cr, openerp.SUPERUSER_ID, 'base.public_user'),\n  175      }\n  ...\n  183          return super(website, self).write(cr, uid, ids, vals, context)\n  184  \n  185:     def new_page(self, cr, uid, name, template='website.default_page', ispage=True, context=None):\n  186          context = context or {}\n  187          imd = self.pool.get('ir.model.data')\n  ...\n  240          if req is None:\n  241              req = request.httprequest\n  242:         default = self.get_current_website(cr, uid, context=context).default_lang_code\n  243          uri = req.path\n  244          if req.query_string:\n  ...\n  246          shorts = []\n  247          for code, name in self.get_languages(cr, uid, ids, context=context):\n  248:             lg_path = ('/' + code) if code != default else ''\n  249              lg = code.split('_')\n  250              shorts.append(lg[0])\n  ...\n  357              return False\n  358  \n  359:         # dont't list routes without argument having no default value or converter\n  360          spec = inspect.getargspec(endpoint.method.original_func)\n  361  \n  362:         # remove self and arguments having a default value\n  363:         defaults_count = len(spec.defaults or [])\n  364:         args = spec.args[1:(-defaults_count or None)]\n  365  \n  366          # check that all args have a converter\n  ...\n  372          controllers for dynamic pages (e.g. blog).\n  373  \n  374:         By default, returns template views marked as pages.\n  375  \n  376          :param str query_string: a (user-provided) string, fetches pages\n  ...\n  441          relation_obj = self.pool[relation]\n  442  \n  443:         get_args.setdefault('kanban', \"\")\n  444          kanban = get_args.pop('kanban')\n  445          kanban_url = \"?%s&kanban=\" % werkzeug.url_encode(get_args)\n  ...\n  549  \n  550          if concurrency in record:\n  551:             server_format = openerp.tools.misc.DEFAULT_SERVER_DATETIME_FORMAT\n  552              try:\n  553                  response.last_modified = datetime.datetime.strptime(\n  ...\n  626      }\n  627  \n  628:     def __defaults_sequence(self, cr, uid, context):\n  629          menu = self.search_read(cr, uid, [(1,\"=\",1)], [\"sequence\"], limit=1, order=\"sequence DESC\", context=context)\n  630          return menu and menu[0][\"sequence\"] or 0\n  631  \n  632:     _defaults = {\n  633          'url': '',\n  634:         'sequence': __defaults_sequence,\n  635          'new_window': False,\n  636      }\n  ...\n  806      }\n  807  \n  808:     def default_get(self, cr, uid, fields, context=None):\n  809          if context is None:\n  810              context = {}\n  811:         defaults = super(base_language_install, self).default_get(cr, uid, fields, context)\n  812          website_id = context.get('params', {}).get('website_id')\n  813          if website_id:\n  814:             if 'website_ids' not in defaults:\n  815:                 defaults['website_ids'] = []\n  816:             defaults['website_ids'].append(website_id)\n  817:         return defaults\n  818  \n  819      def lang_install(self, cr, uid, ids, context=None):\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website\\static\\src\\xml\\website.backend.xml:\n   11                  <span class=\"oe_publish\">Published</span>\n   12              </button>\n   13:             <button id=\"dopprod-0\" data-toggle=\"dropdown\" type=\"button\" class=\"btn btn-sm btn-default dropdown-toggle\">\n   14                  <span class=\"caret\"></span>\n   15              </button>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website\\static\\src\\xml\\website.editor.xml:\n   84                          <div class=\"col-sm-4\">\n   85                              <div class=\"dropdown\" style=\"line-height: 2em;\">\n   86:                                 <a data-toggle=\"dropdown\" class=\"btn btn-default\" href=\"#\">Color Style <span class=\"caret\"></span></a>\n   87                                  <ul class=\"dropdown-menu\" role=\"menu\" aria-labelledby=\"dLabel\">\n   88                                      <li>\n   ..\n   90                                      </li>\n   91                                      <li>\n   92:                                         <label class=\"btn btn-default\">Basic<input value=\"btn-default\" class=\"link-style\" type=\"radio\" name=\"link-style-type\"/></label>\n   93                                      </li>\n   94                                      <li>\n   ..\n  112                          <div class=\"col-sm-4\">\n  113                              <div class=\"dropdown\" style=\"line-height: 2em;\">\n  114:                                 <a data-toggle=\"dropdown\" class=\"btn btn-default\" href=\"#\">Size <span class=\"caret\"></span></a>\n  115                                  <ul class=\"dropdown-menu\" role=\"menu\" aria-labelledby=\"dLabel\">\n  116                                      <li>\n  117:                                         <label class=\"btn btn-default btn-xs\">Extra Small<input value=\"btn-xs\" class=\"link-style\" type=\"radio\" name=\"link-style-size\"/></label>\n  118                                      </li>\n  119                                      <li>\n  120:                                         <label class=\"btn btn-default btn-sm\">Small<input value=\"btn-sm\" class=\"link-style\" type=\"radio\" name=\"link-style-size\"/></label>\n  121                                      </li>\n  122                                      <li>\n  123:                                         <label class=\"btn btn-default\">Default<input value=\"\" class=\"link-style\" type=\"radio\" name=\"link-style-size\" checked=\"checked\"/></label>\n  124                                      </li>\n  125                                      <li>\n  126:                                         <label class=\"btn btn-default btn-lg\">Large<input value=\"btn-lg\" class=\"link-style\" type=\"radio\" name=\"link-style-size\"/></label>\n  127                                      </li>\n  128                                  </ul>\n  ...\n  223                          <div class=\"form-group btn-group\">\n  224                              <input type=\"text\" name=\"url\" class=\"form-control url pull-left\" style=\"width: 320px;\" id=\"iamgeurl\" placeholder=\"http://openerp.com/logo.png\"/>\n  225:                             <button class=\"btn btn-default\" type=\"submit\">Add</button>\n  226                          </div>\n  227                      </div>\n  ...\n  373                          placeholder=\"//www.youtube.com/embed/yws1tbgNV7k\"\n  374                          t-translation=\"off\"/>\n  375:                     <button class=\"btn btn-default\">Preview</button>\n  376                  </div>\n  377                  <div class=\"form-group btn-group\">\n  ...\n  384                          placeholder='&lt;iframe src=\"//www.youtube.com/embed/yws1tbgNV7k\"&gt;&lt;/iframe&gt;'\n  385                          t-translation=\"off\"/>\n  386:                     <button class=\"btn btn-default\">Preview</button>\n  387                  </div>\n  388              </div>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website\\static\\src\\xml\\website.seo.xml:\n   28                                            <input type=\"text\" name=\"seo_page_keywords\" class=\"form-control\" maxlength=\"30\"/>\n   29                                            <span class=\"input-group-btn\">\n   30:                                               <button data-action=\"add\" class=\"btn btn-default\" type=\"button\">Add</button>\n   31                                            </span>\n   32                                          </div>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website\\static\\src\\xml\\website.snippets.xml:\n   11          <li class=\"navbar-form\">\n   12              <div class=\"btn-group\">\n   13:                 <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">\n   14                      Block style <span class=\"caret\"></span>\n   15                  </button>\n   ..\n   27              <div class=\"oe_overlay_options\" contentEditable=\"false\">\n   28                  <div class=\"btn-group\">\n   29:                     <a href=\"#\" class=\"btn btn-default btn-sm oe_snippet_parent\" title=\"Select Container Block\"><i class=\"fa fa-upload\"></i></a>\n   30                      <div class=\"dropdown oe_options hidden btn-group\">\n   31                          <a href=\"#\" data-toggle=\"dropdown\" class=\"btn btn-primary btn-sm\" title=\"Customize\">Customize <span class=\"caret\"/></a>\n   32                          <ul class=\"dropdown-menu\" role=\"menu\"></ul>\n   33                      </div>\n   34:                     <a href=\"#\" class=\"btn btn-default btn-sm oe_snippet_move\" title=\"Drag to Move\">&amp;nbsp;<i class=\"fa fa-arrows\"></i>&amp;nbsp;</a>\n   35:                     <a href=\"#\" class=\"btn btn-default btn-sm oe_snippet_clone\" title=\"Duplicate Container\">&amp;nbsp;<i class=\"fa fa-files-o\"></i>&amp;nbsp; </a>\n   36:                     <a href=\"#\" class=\"btn btn-default btn-sm oe_snippet_remove\" title=\"Remove Block\">&amp;nbsp;<i class=\"fa fa-trash-o\"></i>&amp;nbsp; </a>\n   37                  </div>\n   38              </div>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website\\views\\res_config.xml:\n   73                                  </div>\n   74                              </div>\n   75:                             <label for=\"default_lang_id\"/>\n   76:                             <div name=\"default_lang_id\">\n   77                                  <div>\n   78:                                     <div name=\"default_lang_id\" class=\"oe_inline\">\n   79:                                         <field name=\"default_lang_id\" widget=\"selection\"/>\n   80                                      </div>\n   81                                  </div>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website\\views\\snippets.xml:\n  365              <span class=\"oe_snippet_thumbnail_title\">Panel</span>\n  366          </div>\n  367:         <div class=\"oe_snippet_body panel panel-default\">\n  368              <div class=\"panel-heading\">\n  369                  <h3 class=\"panel-title\">Feature Title</h3>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website\\views\\themes.xml:\n   27                  <div class=\"well text-center\">\n   28                    <div class=\"image\">\n   29:                     <img src=\"/website/static/src/img/bootswatch_default_thumbnail.png\" class=\"img-responsive\" alt=\"Default Theme\"/>\n   30                    </div>\n   31                    <div class=\"options\">\n   32:                     <h3>Default</h3>\n   33                      <p>Pure Bootstrap</p>\n   34                      <a class=\"btn btn-info\" href=\"/website/theme_change\">Apply</a>\n   ..\n  201  \n  202  <!--\n  203:      All Default Themes\n  204  -->\n  205  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website\\views\\website_templates.xml:\n   98              <div id=\"wrapwrap\">\n   99                  <header>\n  100:                     <div class=\"navbar navbar-default navbar-static-top\">\n  101                          <div class=\"container\">\n  102                              <div class=\"navbar-header\">\n  ...\n  277  </template>\n  278  \n  279: <template id=\"footer_default\" inherit_id=\"website.footer_custom\" customize_show=\"True\" name=\"Automatic Footer\">\n  280      <xpath expr=\"//div[@id='footer']\" position=\"replace\">\n  281          <div class=\"container hidden-print\">\n  ...\n  324                          <li t-foreach=\"languages\" t-as=\"lg\">\n  325                              <a t-att-href=\"url_for(request.httprequest.path + '?' + keep_query(), lang=lg[0])\"\n  326:                              t-att-data-default-lang=\"editable and 'true' if lg[0] == website.default_lang_code else None\">\n  327                               <t t-esc=\"lg[1].split('/').pop()\"/></a>\n  328                          </li>\n  ...\n  346              <button class=\"btn btn-danger js_publish_btn\">Not Published</button>\n  347              <button class=\"btn btn-success js_publish_btn\">Published</button>\n  348:             <button type=\"button\" t-attf-class=\"btn btn-default dropdown-toggle\" t-att-id=\"'dopprod-%s' % object.id\" data-toggle=\"dropdown\">\n  349                  <span class=\"caret\"></span>\n  350              </button>\n  ...\n  504  </template>\n  505  \n  506: <template id=\"default_page\">\n  507      <t t-call=\"website.layout\">\n  508        <div id=\"wrap\" class=\"oe_structure oe_empty\"></div>\n  ...\n  517                  <a class=\"btn btn-primary\" t-attf-href=\"/website/add/#{ path }\">Create Page</a>\n  518              </div>\n  519:             <div class=\"text-center text-muted\">Edit the content below this line to adapt the default \"page not found\" page.</div>\n  520          </div>\n  521          <hr/>\n  ...\n  539  <template id=\"http_error_debug\">\n  540      <div class=\"container panel-group mb32 mt32\" id=\"debug_infos\">\n  541:         <div class=\"panel panel-default\" t-if=\"exception\">\n  542              <div class=\"panel-heading\">\n  543                  <h4 class=\"panel-title\">\n  ...\n  557              </div>\n  558          </div>\n  559:         <div class=\"panel panel-default\" t-if=\"qweb_exception\">\n  560              <div class=\"panel-heading\">\n  561                  <h4 class=\"panel-title\">\n  ...\n  581              </div>\n  582          </div>\n  583:         <div class=\"panel panel-default\" t-if=\"traceback\">\n  584              <div class=\"panel-heading\">\n  585                  <h4 class=\"panel-title\">\n  ...\n  706  \n  707              <div id=\"wrapwrap\">\n  708:                 <div class=\"navbar navbar-default navbar-static-top\">\n  709                      <div class=\"container\">\n  710                          <div class=\"collapse navbar-collapse navbar-top-collapse\">\n  ...\n  818                  <div class=\"col-md-4 mb32\">\n  819                      <div groups=\"base.group_website_publisher\" t-ignore=\"true\" class=\"pull-right css_editable_mode_hidden\" t-att-style=\"style or ''\">\n  820:                         <a class=\"btn btm-sm btn-default\" t-att-href=\"'/web#return_label=Website&amp;model=%s&amp;id=%s' % (res_company._name, res_company.id)\">Change address</a>\n  821                      </div>\n  822                      <t t-call=\"website.company_description\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website\\views\\website_views.xml:\n    2  <openerp>\n    3      <data noupdate=\"1\">\n    4:         <record id=\"default_website\" model=\"website\">\n    5              <field name=\"name\">localhost</field>\n    6              <field name=\"company_id\" ref=\"base.main_company\"/>\n    7              <field name=\"language_ids\" eval=\"[(6, 0, [ ref('base.lang_en')])]\"/>\n    8:             <field name=\"default_lang_id\" ref=\"base.lang_en\"/>\n    9          </record>\n   10      </data>\n   ..\n   45                              <field name=\"company_id\" groups=\"base.group_multi_company\"/>\n   46                              <field name=\"language_ids\" widget=\"many2many_checkboxes\"/>\n   47:                             <field name=\"default_lang_id\" widget=\"selection\"/>\n   48                          </group>\n   49                      </div>\n   ..\n   59                      <field name=\"name\"/>\n   60                      <field name=\"company_id\" groups=\"base.group_multi_company\"/>\n   61:                     <field name=\"default_lang_id\"/>\n   62                  </tree>\n   63              </field>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_blog\\controllers\\main.py:\n   23          path = path or self.path\n   24          for k, v in self.args.items():\n   25:             kw.setdefault(k, v)\n   26          path_args = set(path_args or []).union(self.path_args)\n   27          paths, fragments = [], []\n   ..\n   54              groupby=\"create_date\", orderby=\"create_date desc\", context=request.context)\n   55          for group in groups:\n   56:             begin_date = datetime.datetime.strptime(group['__domain'][0][2], tools.DEFAULT_SERVER_DATETIME_FORMAT).date()\n   57:             end_date = datetime.datetime.strptime(group['__domain'][1][2], tools.DEFAULT_SERVER_DATETIME_FORMAT).date()\n   58:             group['date_begin'] = '%s' % datetime.date.strftime(begin_date, tools.DEFAULT_SERVER_DATE_FORMAT)\n   59:             group['date_end'] = '%s' % datetime.date.strftime(end_date, tools.DEFAULT_SERVER_DATE_FORMAT)\n   60          return groups\n   61  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_blog\\data\\website_blog_data.xml:\n   33              <field name=\"name\">Published Post</field>\n   34              <field name=\"res_model\">blog.blog</field>\n   35:             <field name=\"default\" eval=\"True\"/>\n   36              <field name=\"description\">Published Post</field>\n   37          </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_blog\\data\\website_blog_demo.xml:\n  193                  website and product database.\n  194              </p><p>\n  195:                 As it comes, there is a default website based on Bootstrap\n  196                  3, the latest industry standard for rapid development of\n  197                  multi-device websites backed by Twitter, so can be directly\n  198                  integrated with many web tools and works across all devices\n  199:                 by default.\n  200              </p>\n  201          </section>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_blog\\models\\website_blog.py:\n   73          res = {}\n   74          for blog_post in self.browse(cr, uid, ids, context=context):\n   75:             age = datetime.now() - datetime.strptime(blog_post.create_date, tools.DEFAULT_SERVER_DATETIME_FORMAT)\n   76              res[blog_post.id] = blog_post.visits * (0.5+random.random()) / max(3, age.days)\n   77          return res\n   ..\n  130      }\n  131  \n  132:     _defaults = {\n  133          'name': _('Blog Post Title'),\n  134          'subtitle': _('Subtitle'),\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_blog\\views\\website_blog_templates.xml:\n   11  \n   12  <!-- Layout add nav and footer -->\n   13: <template id=\"header_footer_custom\" inherit_id=\"website.footer_default\" name=\"Footer News Blog Link\">\n   14      <xpath expr=\"//div[@id='info']/ul\" position=\"inside\">\n   15          <li><a t-attf-href=\"/blog/%(website_blog.blog_blog_1)d\">News</a></li>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_blog\\views\\website_blog_views.xml:\n   69                          </group>\n   70                          <group string=\"Technical\" groups=\"base.group_no_one\">\n   71:                             <field name=\"write_uid\" context=\"{'default_groups_ref': ['base.group_user', 'base.group_partner_manager', 'base.group_document_user']}\"/>\n   72                              <field name=\"write_date\"/>\n   73                          </group>\n   ..\n  156          <act_window\n  157              id=\"action_related_page_history\"\n  158:             context=\"{'search_default_post_id': [active_id], 'default_post_id': active_id}\"\n  159              domain=\"[('post_id','=',active_id)]\"\n  160              name=\"Page History\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_blog\\wizard\\document_page_show_diff.py:\n   55      }\n   56  \n   57:     _defaults = {\n   58          'diff': get_diff\n   59      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_certification\\views\\website_certification_templates.xml:\n   35                          </div>\n   36                      </div><div class=\"col-md-3 col-md-offset-1\">\n   37:                         <div class=\"panel panel-default\">\n   38                              <div class=\"panel-heading\">\n   39                                  <h3 class=\"panel-title\">Odoo Certifications</h3>\n   ..\n   49                              </div>\n   50                          </div>\n   51:                         <div class=\"panel panel-default mt16\">\n   52                              <div class=\"panel-heading\">\n   53                                  <h3 class=\"panel-title\">Sample Examination</h3>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_crm_partner_assign\\views\\website_crm_partner_assign.xml:\n    4  \n    5  <!-- Layout add nav and footer -->\n    6: <template id=\"footer_custom\" inherit_id=\"website.footer_default\" name=\"Footer Partners Link\">\n    7      <xpath expr=\"//div[@id='info']/ul\" position=\"inside\">\n    8          <li><a href=\"/partners\">Resellers</a></li>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_customer\\views\\website_customer.xml:\n    4  \n    5  <!-- Layout add nav and footer -->\n    6: <template id=\"footer_custom\" inherit_id=\"website.footer_default\" name=\"Footer Customer References Link\">\n    7      <xpath expr=\"//div[@id='info']/ul\" position=\"inside\">\n    8          <li><a href=\"/customers\">Our References</a></li>\n    .\n  146  <template id=\"implemented_by_block\" name=\"Partner Implemented By Block\">\n  147          <t t-if=\"partner.assigned_partner_id and partner.assigned_partner_id.website_published\">\n  148:             <div class=\"panel panel-default\">\n  149                  <div class=\"panel-heading\">\n  150                      <h4>Implemented By</h4>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_event\\controllers\\main.py:\n   41          country_obj = request.registry['res.country']\n   42  \n   43:         searches.setdefault('date', 'all')\n   44:         searches.setdefault('type', 'all')\n   45:         searches.setdefault('country', 'all')\n   46  \n   47          domain_search = {}\n   ..\n   50              return date.strftime('%Y-%m-%d 23:59:59')\n   51          def sd(date):\n   52:             return date.strftime(tools.DEFAULT_SERVER_DATETIME_FORMAT)\n   53          today = datetime.today()\n   54          dates = [\n   ..\n  226  \n  227      def get_formated_date(self, event):\n  228:         start_date = datetime.strptime(event.date_begin, tools.DEFAULT_SERVER_DATETIME_FORMAT).date()\n  229:         end_date = datetime.strptime(event.date_end, tools.DEFAULT_SERVER_DATETIME_FORMAT).date()\n  230          return ('%s %s%s') % (start_date.strftime(\"%b\"), start_date.strftime(\"%e\"), (end_date != start_date and (\"-\"+end_date.strftime(\"%e\")) or \"\"))\n  231      \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_event\\data\\event_data.xml:\n   22              <field name=\"name\">Event published</field>\n   23              <field name=\"res_model\">event.event</field>\n   24:             <field name=\"default\" eval=\"False\"/>\n   25              <field name=\"description\">Event published</field>\n   26          </record>\n   ..\n   28              <field name=\"name\">Event unpublished</field>\n   29              <field name=\"res_model\">event.event</field>\n   30:             <field name=\"default\" eval=\"False\"/>\n   31              <field name=\"description\">Event unpublished</field>\n   32          </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_event\\models\\event.py:\n   90          return res\n   91  \n   92:     def _default_hashtag(self, cr, uid, context={}):\n   93          name = self.pool.get('res.users').browse(cr, uid, uid, context=context).company_id.name\n   94          return re.sub(\"[- \\\\.\\\\(\\\\)\\\\@\\\\#\\\\&]+\", \"\", name).lower()\n   ..\n  110          'menu_id': fields.many2one('website.menu', 'Event Menu'),\n  111      }\n  112:     _defaults = {\n  113          'show_menu': False,\n  114:         'twitter_hashtag': _default_hashtag\n  115      }\n  116  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_event\\views\\website_event.xml:\n   17  \n   18  <!-- Layout add nav and footer -->\n   19: <template id=\"header_footer_custom\" inherit_id=\"website.footer_default\" name=\"Footer Events Link\">\n   20      <xpath expr=\"//ul[@id='products']\" position=\"inside\">\n   21          <li><a href=\"/event\">Events</a></li>\n   ..\n  311              <div class=\"clearfix\"/>\n  312  \n  313:             <div class=\"panel panel-default\" t-if=\"event.address_id\">\n  314                  <div class=\"panel-heading\">\n  315                      <h4>Where</h4>\n  ...\n  326              </div>\n  327  \n  328:             <div class=\"panel panel-default\">\n  329                  <div class=\"panel-heading\">\n  330                      <h4>When</h4>\n  ...\n  336              </div>\n  337  \n  338:             <div class=\"panel panel-default\" t-if=\"event.organizer_id\">\n  339                  <div class=\"panel-heading\">\n  340                      <h4>Organizer</h4>\n  ...\n  346              </div>\n  347  \n  348:             <div class=\"panel panel-default\">\n  349                  <div class=\"panel-heading\">\n  350                      <h4>Social Stream</h4>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_event_sale\\controllers\\main.py:\n   63          try:\n   64              dummy, res_id = request.registry.get('ir.model.data').get_object_reference(request.cr, request.uid, 'event_sale', 'product_product_event')\n   65:             context['default_event_ticket_ids'] = [[0,0,{\n   66                  'name': _('Subscription'),\n   67                  'product_id': res_id,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_event_track\\controllers\\event.py:\n   44          dates = []                      # [ (date, {}) ]\n   45          for track in event_track_ids:\n   46:             locations.setdefault(track.location_id or False, [])\n   47  \n   48          forcetr = True\n   ..\n   51              end_date = start_date + datetime.timedelta(hours = (track.duration or 0.5))\n   52              location = track.location_id or False\n   53:             locations.setdefault(location, [])\n   54  \n   55              # New TR, align all events\n   ..\n   78      @http.route(['''/event/<model(\"event.event\", \"[('show_tracks','=',1)]\"):event>/agenda'''], type='http', auth=\"public\", website=True)\n   79      def event_agenda(self, event, tag=None, **post):\n   80:         days_tracks = collections.defaultdict(lambda: [])\n   81          for track in sorted(event.track_ids, key=lambda x: (x.date, bool(x.location_id))):\n   82              if not track.date: continue\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_event_track\\models\\event.py:\n   51          'sequence': fields.integer('Sequence')\n   52      }\n   53:     _defaults = {\n   54          'sequence': 0\n   55      }\n   ..\n   94          return self.write(cr, uid, ids, {'priority' : priority})\n   95  \n   96:     def _default_stage_id(self, cr, uid, context={}):\n   97          stage_obj = self.pool.get('event.track.stage')\n   98          ids = stage_obj.search(cr, uid, [], context=context)\n   99          return ids and ids[0] or False\n  100  \n  101:     _defaults = {\n  102          'user_id': lambda self, cr, uid, ctx: uid,\n  103          'website_published': lambda self, cr, uid, ctx: False,\n  104          'duration': lambda *args: 1.5,\n  105:         'stage_id': _default_stage_id,\n  106          'priority': '2'\n  107      }\n  ...\n  154      }\n  155  \n  156:     _defaults = {\n  157          'show_track_proposal': False,\n  158          'show_tracks': False,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_event_track\\views\\event_backend.xml:\n    8              <field name=\"view_type\">form</field>\n    9              <field name=\"view_mode\">kanban,tree,form,calendar,graph</field>\n   10:             <field name=\"context\">{'search_default_event_id': active_id, 'default_event_id': active_id, 'group_by': 'stage_id'}</field>\n   11              <field name=\"help\" type=\"html\">\n   12                <p class=\"oe_view_nocontent_create\">\n   ..\n  188                              <field name=\"allowed_track_tag_ids\" widget=\"many2many_tags\"/>\n  189                          </group>\n  190:                         <field name=\"track_ids\" context=\"{'default_event_id': active_id}\"/>\n  191                      </page>\n  192                      <page string=\"Sponsorships\">\n  193:                         <field name=\"sponsor_ids\" context=\"{'default_event_id': active_id}\">\n  194                              <tree editable=\"bottom\">\n  195                                  <field name=\"partner_id\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_event_track\\views\\website_event.xml:\n  225                  </div>\n  226                  <div class=\"col-md-4\" id=\"right_column\">\n  227:                     <div class=\"panel panel-default\">\n  228                          <div class=\"panel-heading\">\n  229                              <h4>Practical Info</h4>\n  ...\n  239                      </div>\n  240  \n  241:                     <div class=\"panel panel-default\" t-if=\"False\">\n  242                          <div class=\"panel-heading\">\n  243                              <h4>Documents</h4>\n  ...\n  257  <template id=\"event_track_social\" name=\"Social Widgets\" inherit_id=\"website_event_track.track_view\" active=\"False\" customize_show=\"True\">\n  258      <xpath expr=\"//div[@id='right_column']\" position=\"inside\">\n  259:         <div class=\"panel panel-default\">\n  260              <div class=\"panel-heading\">\n  261                  <h4>Social Stream</h4>\n  ...\n  375                      <div class=\"oe_structure\"/>\n  376                  </div><div class=\"col-md-3 col-md-offset-1\">\n  377:                     <div class=\"panel panel-default\">\n  378                          <div class=\"panel-heading\">\n  379                              <h4>Talks Types</h4>\n  ...\n  393  \n  394  \n  395:                     <div class=\"panel panel-default\">\n  396                          <div class=\"panel-heading\">\n  397                              <h4>Submission Agreement</h4>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_forum\\controllers\\main.py:\n  529              return request.website.render(\"website_forum.private_profile\", values)\n  530  \n  531:         # limit length of visible posts by default for performance reasons, except for the high\n  532          # karma users (not many of them, and they need it to properly moderate the forum)\n  533          post_display_limit = None\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_forum\\data\\forum_data.xml:\n   32              <field name=\"name\">New Answer</field>\n   33              <field name=\"res_model\">forum.post</field>\n   34:             <field name=\"default\" eval=\"True\"/>\n   35              <field name=\"hidden\" eval=\"False\"/>\n   36              <field name=\"description\">New Answer</field>\n   ..\n   39              <field name=\"name\">Answer Edited</field>\n   40              <field name=\"res_model\">forum.post</field>\n   41:             <field name=\"default\" eval=\"False\"/>\n   42              <field name=\"description\">Answer Edited</field>\n   43          </record>\n   ..\n   46              <field name=\"name\">New Question</field>\n   47              <field name=\"res_model\">forum.post</field>\n   48:             <field name=\"default\" eval=\"True\"/>\n   49              <field name=\"description\">New Question</field>\n   50          </record>\n   ..\n   52              <field name=\"name\">Question Edited</field>\n   53              <field name=\"res_model\">forum.post</field>\n   54:             <field name=\"default\" eval=\"False\"/>\n   55              <field name=\"description\">Question Edited</field>\n   56          </record>\n   ..\n   59              <field name=\"name\">New Answer</field>\n   60              <field name=\"res_model\">forum.forum</field>\n   61:             <field name=\"default\" eval=\"True\"/>\n   62              <field name=\"hidden\" eval=\"False\"/>\n   63              <field name=\"parent_id\" eval=\"ref('mt_answer_new')\"/>\n   ..\n   67              <field name=\"name\">New Question</field>\n   68              <field name=\"res_model\">forum.forum</field>\n   69:             <field name=\"default\" eval=\"True\"/>\n   70              <field name=\"hidden\" eval=\"False\"/>\n   71              <field name=\"parent_id\" eval=\"ref('mt_question_new')\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_forum\\models\\forum.py:\n   73      }\n   74  \n   75:     def _get_default_faq(self, cr, uid, context=None):\n   76:         fname = openerp.modules.get_module_resource('website_forum', 'data', 'forum_default_faq.html')\n   77          with open(fname, 'r') as f:\n   78              return f.read()\n   79          return False\n   80  \n   81:     _defaults = {\n   82          'description': 'This community is for professionals and enthusiasts of our products and services.',\n   83:         'faq': _get_default_faq,\n   84          'karma_gen_question_new': 0,  # set to null for anti spam protection\n   85          'karma_gen_question_upvote': 5,\n   ..\n  338      }\n  339  \n  340:     _defaults = {\n  341          'state': 'active',\n  342          'views': 0,\n  ...\n  453              'state': 'close',\n  454              'closed_uid': uid,\n  455:             'closed_date': datetime.today().strftime(tools.DEFAULT_SERVER_DATETIME_FORMAT),\n  456              'closed_reason_id': reason_id,\n  457          }, context=context)\n  ...\n  517          return message_id\n  518  \n  519:     def convert_comment_to_answer(self, cr, uid, message_id, default=None, context=None):\n  520          \"\"\" Tool to convert a comment (mail.message) into an answer (forum.post).\n  521          The original comment is unlinked and a new answer from the comment's author\n  ...\n  613          'recipient_id': fields.related('post_id', 'create_uid', type='many2one', relation='res.users', string='To', help=\"The user receiving the vote\"),\n  614      }\n  615:     _defaults = {\n  616          'user_id': lambda self, cr, uid, ctx: uid,\n  617          'vote': lambda *args: '1',\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_forum\\models\\res_users.py:\n   42      }\n   43  \n   44:     _defaults = {\n   45          'karma': 0,\n   46      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_forum\\views\\website_forum.xml:\n    4  \n    5  <!-- Layout add nav and footer -->\n    6: <template id=\"header_footer_custom\" inherit_id=\"website.footer_default\"\n    7      name=\"Footer Questions Link\">\n    8      <xpath expr=\"//ul[@id='products']\" position=\"inside\">\n    .\n   50          </t>\n   51          <div class=\"container mt16 website_forum\">\n   52:             <div class=\"navbar navbar-default\">\n   53                  <div class=\"navbar-header\">\n   54                      <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\"#oe-help-navbar-collapse\">\n   ..\n   85                                  name=\"search\" placeholder=\"Search a question...\"\n   86                                  t-att-value=\"search or ''\"/>\n   87:                             <button type=\"submit\" class=\"btn btn-default\">Search</button>\n   88                          </div>\n   89                      </form>\n   ..\n  122                         t-attf-href=\"/forum/#{slug(forum)}/ask\"\n  123                         t-attf-data-karma=\"#{forum.karma_ask}\">Ask a Question</a>\n  124:                     <div class=\"panel panel-default\">\n  125                          <div class=\"panel-heading\">\n  126                              <h3 class=\"panel-title\">Keep Informed</h3>\n  ...\n  133                          </div>\n  134                      </div>\n  135:                     <div class=\"panel panel-default\" id=\"about_forum\">\n  136                          <div class=\"panel-heading\">\n  137                              <h3 class=\"panel-title\">About This Forum</h3>\n  ...\n  144                      </div>\n  145                      <div t-if=\"header.get('question_data')\">\n  146:                         <div class=\"panel panel-default\">\n  147                              <div class=\"panel-heading text-center\">\n  148                                  <h3 class=\"panel-title\">Question tools</h3>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_forum_doc\\models\\documentation.py:\n   68      }\n   69  \n   70:     def _get_default_stage_id(self, cr, uid, context=None):\n   71          stage_ids = self.pool[\"forum.documentation.stage\"].search(cr, uid, [], limit=1, context=context)\n   72          return stage_ids and stage_ids[0] or False\n   73  \n   74:     _defaults = {\n   75:         'documentation_stage_id': _get_default_stage_id,\n   76      }\n   77  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_forum_doc\\views\\doc.xml:\n   32              <field name=\"model\">forum.post</field>\n   33              <field name=\"arch\" type=\"xml\">\n   34:                 <kanban default_group_by=\"documentation_stage_id\" >\n   35                      <field name=\"documentation_stage_id\"/>\n   36                      <field name=\"create_uid\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_forum_doc\\views\\website_doc.xml:\n   11  \n   12          <!-- Layout add nav and footer -->\n   13:         <template id=\"header_footer_custom\" inherit_id=\"website.footer_default\"\n   14              name=\"Footer Documentation Link\">\n   15              <xpath expr=\"//ul[@id='products']\" position=\"inside\">\n   ..\n   73                                          name=\"search\" placeholder=\"Search...\"\n   74                                          t-att-value=\"search or ''\"/>\n   75:                                     <button type=\"submit\" class=\"btn btn-default\">Search</button>\n   76                                  </div>\n   77                              </form>\n   ..\n  111                                          name=\"search\" placeholder=\"Search...\"\n  112                                          t-att-value=\"search or ''\"/>\n  113:                                     <button type=\"submit\" class=\"btn btn-default\">Search</button>\n  114                                  </div>\n  115                              </form>\n  ...\n  140                              </div>\n  141                          </div><div class=\"col-sm-3\">\n  142:                             <div class=\"panel panel-default mt48\" id=\"about_doc\">\n  143                                  <div class=\"panel-heading\">\n  144                                      <h3 class=\"panel-title\">Need more info?</h3>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_gengo\\controllers\\main.py:\n    6  import time\n    7  \n    8: GENGO_DEFAULT_LIMIT = 20\n    9  \n   10  class website_gengo(http.Controller):\n   ..\n   36      @http.route('/website/post_gengo_jobs', type='json', auth='user', website=True)\n   37      def post_gengo_jobs(self):\n   38:         request.registry['base.gengo.translations']._sync_request(request.cr, request.uid, limit=GENGO_DEFAULT_LIMIT, context=request.context)\n   39          return True\n   40  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_hr\\models\\hr.py:\n   10          'public_info': fields.text('Public Info'),\n   11      }\n   12:     _defaults = {\n   13          'website_published': False\n   14      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_hr_recruitment\\controllers\\main.py:\n   36          countries = set(o.country_id for o in offices if o.country_id)\n   37  \n   38:         # Default search by user country\n   39          if not (country or department or office_id or kwargs.get('all_countries')):\n   40              country_code = request.session['geoip'].get('country_code')\n   ..\n   81      def jobs_apply(self, job):\n   82          error = {}\n   83:         default = {}\n   84          if 'website_hr_recruitment_error' in request.session:\n   85              error = request.session.pop('website_hr_recruitment_error')\n   86:             default = request.session.pop('website_hr_recruitment_default')\n   87          return request.render(\"website_hr_recruitment.apply\", {\n   88              'job': job,\n   89              'error': error,\n   90:             'default': default,\n   91          })\n   92  \n   ..\n  102              if ufile:\n  103                  error['ufile'] = 'reset'\n  104:             request.session['website_hr_recruitment_default'] = post\n  105              return request.redirect('/jobs/apply/%s' % post.get(\"job_id\"))\n  106  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_hr_recruitment\\data\\hr_job_demo.xml:\n   21              <div class=\"col-md-4 mt16\">\n   22                  <div class=\"panel panel-info\">\n   23:                     <!-- Default panel contents -->\n   24                      <div class=\"panel-heading text-center\">\n   25                          <h2 style=\"margin: 0\">Responsibilities</h2>\n   ..\n   45              <div class=\"col-md-4 mt16\">\n   46                  <div class=\"panel panel-info\">\n   47:                     <!-- Default panel contents -->\n   48                      <div class=\"panel-heading text-center\">\n   49                          <h2 style=\"margin: 0\">Skills</h2>\n   ..\n   68              <div class=\"col-md-4 mt16\">\n   69                  <div class=\"panel panel-info\">\n   70:                     <!-- Default panel contents -->\n   71                      <div class=\"panel-heading text-center\">\n   72                          <h2 style=\"margin: 0\">Nice to have</h2>\n   ..\n  152              <div class=\"col-md-4 mt16\">\n  153                  <div class=\"panel panel-info\">\n  154:                     <!-- Default panel contents -->\n  155                      <div class=\"panel-heading text-center\">\n  156                          <h2 style=\"margin: 0\">Responsibilities</h2>\n  ...\n  175              <div class=\"col-md-4 mt16\">\n  176                  <div class=\"panel panel-info\">\n  177:                     <!-- Default panel contents -->\n  178                      <div class=\"panel-heading text-center\">\n  179                          <h2 style=\"margin: 0\">Skills</h2>\n  ...\n  199              <div class=\"col-md-4 mt16\">\n  200                  <div class=\"panel panel-info\">\n  201:                     <!-- Default panel contents -->\n  202                      <div class=\"panel-heading text-center\">\n  203                          <h2 style=\"margin: 0\">Nice to have</h2>\n  ...\n  285              <div class=\"col-md-4 mt16\">\n  286                  <div class=\"panel panel-info\">\n  287:                     <!-- Default panel contents -->\n  288                      <div class=\"panel-heading text-center\">\n  289                          <h2 style=\"margin: 0\">Responsibilities</h2>\n  ...\n  311              <div class=\"col-md-4 mt16\">\n  312                  <div class=\"panel panel-info\">\n  313:                     <!-- Default panel contents -->\n  314                      <div class=\"panel-heading text-center\">\n  315                          <h2 style=\"margin: 0\">Skills</h2>\n  ...\n  335              <div class=\"col-md-4 mt16\">\n  336                  <div class=\"panel panel-info\">\n  337:                     <!-- Default panel contents -->\n  338                      <div class=\"panel-heading text-center\">\n  339                          <h2 style=\"margin: 0\">Nice to have</h2>\n  ...\n  419              <div class=\"col-md-4 mt16\">\n  420                  <div class=\"panel panel-info\">\n  421:                     <!-- Default panel contents -->\n  422                      <div class=\"panel-heading text-center\">\n  423                          <h2 style=\"margin: 0\">Responsibilities</h2>\n  ...\n  442              <div class=\"col-md-4 mt16\">\n  443                  <div class=\"panel panel-info\">\n  444:                     <!-- Default panel contents -->\n  445                      <div class=\"panel-heading text-center\">\n  446                          <h2 style=\"margin: 0\">Skills</h2>\n  ...\n  465              <div class=\"col-md-4 mt16\">\n  466                  <div class=\"panel panel-info\">\n  467:                     <!-- Default panel contents -->\n  468                      <div class=\"panel-heading text-center\">\n  469                          <h2 style=\"margin: 0\">Nice to have</h2>\n  ...\n  547              <div class=\"col-md-4 mt16\">\n  548                  <div class=\"panel panel-info\">\n  549:                     <!-- Default panel contents -->\n  550                          <div class=\"panel-heading text-center\">\n  551                              <h2 style=\"margin: 0\">Responsibilities</h2>\n  ...\n  570              <div class=\"col-md-4 mt16\">\n  571              <div class=\"panel panel-info\">\n  572:                 <!-- Default panel contents -->\n  573                      <div class=\"panel-heading text-center\">\n  574                          <h2 style=\"margin: 0\">Skills</h2>\n  ...\n  593              <div class=\"col-md-4 mt16\">\n  594                  <div class=\"panel panel-info\">\n  595:                     <!-- Default panel contents -->\n  596                      <div class=\"panel-heading text-center\">\n  597                          <h2 style=\"margin: 0\">Nice to have</h2>\n  ...\n  675              <div class=\"col-md-4 mt16\">\n  676                  <div class=\"panel panel-info\">\n  677:                     <!-- Default panel contents -->\n  678                      <div class=\"panel-heading text-center\">\n  679                          <h2 style=\"margin: 0\">Responsibilities</h2>\n  ...\n  698              <div class=\"col-md-4 mt16\">\n  699                  <div class=\"panel panel-info\">\n  700:                     <!-- Default panel contents -->\n  701                      <div class=\"panel-heading text-center\">\n  702                          <h2 style=\"margin: 0\">Skills</h2>\n  ...\n  721              <div class=\"col-md-4 mt16\">\n  722                  <div class=\"panel panel-info\">\n  723:                     <!-- Default panel contents -->\n  724                      <div class=\"panel-heading text-center\">\n  725                          <h2 style=\"margin: 0\">Nice to have</h2>\n  ...\n  804              <div class=\"col-md-4 mt16\" style=\"width:30%;\">\n  805                  <div class=\"panel panel-info\">\n  806:                     <!-- Default panel contents -->\n  807                      <div class=\"panel-heading text-center\">\n  808                          <h2 style=\"margin: 0\">Responsibilities</h2>\n  ...\n  827              <div class=\"col-md-4 mt16\">\n  828                  <div class=\"panel panel-info\">\n  829:                     <!-- Default panel contents -->\n  830                      <div class=\"panel-heading text-center\">\n  831                          <h2 style=\"margin: 0\">Skills</h2>\n  ...\n  850              <div class=\"col-md-4 mt16\">\n  851                  <div class=\"panel panel-info\">\n  852:                     <!-- Default panel contents -->\n  853                      <div class=\"panel-heading text-center\">\n  854                          <h2 style=\"margin: 0\">Nice to have</h2>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_hr_recruitment\\models\\hr_job.py:\n   22          'website_url': fields.function(_website_url, string=\"Website URL\", type=\"char\"),\n   23      }\n   24:     _defaults = {\n   25          'website_published': False\n   26      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_hr_recruitment\\views\\templates.xml:\n    3  <data>\n    4  \n    5: <template id=\"job_footer_custom\" inherit_id=\"website.footer_default\" name=\"Footer Job Link\">\n    6      <xpath expr=\"//div[@id='info']/ul\" position=\"inside\">\n    7      <li><a href=\"/jobs\">Jobs</a></li>\n    .\n  159                                  <label class=\"col-md-3 col-sm-4 control-label\" for=\"partner_name\">Your Name</label>\n  160                                  <div class=\"col-md-7 col-sm-8\">\n  161:                                     <input type=\"text\" t-att-value=\"default.get('partner_name')\" class=\"form-control\" name=\"partner_name\" required=\"True\"/>\n  162                                  </div>\n  163                              </div>\n  ...\n  165                                  <label class=\"col-md-3 col-sm-4 control-label\" for=\"email_from\">Your Email</label>\n  166                                  <div class=\"col-md-7 col-sm-8\">\n  167:                                     <input type=\"email\" t-att-value=\"default.get('email_from')\" class=\"form-control\" name=\"email_from\" required=\"True\"/>\n  168                                  </div>\n  169                              </div>\n  ...\n  171                                  <label class=\"col-md-3 col-sm-4 control-label\" for=\"phone\">Your Phone</label>\n  172                                  <div class=\"col-md-7 col-sm-8\">\n  173:                                     <input type=\"text\" t-att-value=\"default.get('phone')\" class=\"form-control\" name=\"phone\" required=\"True\"/>\n  174                                  </div>\n  175                              </div>\n  ...\n  177                                  <label class=\"col-md-3 col-sm-4 control-label\" for=\"description\">Short Introduction</label>\n  178                                  <div class=\"col-md-7 col-sm-8\">\n  179:                                     <textarea  class=\"form-control\" t-esc=\"default.get('description')\" name=\"description\" style=\"min-height: 120px\"/>\n  180                                  </div>\n  181                              </div>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_livechat\\website_livechat_data.xml:\n    5           <record id=\"channel_website\" model=\"im_livechat.channel\">\n    6               <field name=\"name\">YourWebsiteWithOdoo.com</field>\n    7:              <field name=\"default_message\">Hello, how may I help you?</field>\n    8           </record>\n    9  \n   10:          <record id=\"website.default_website\" model=\"website\">\n   11               <field name=\"channel_id\" ref=\"website_livechat.channel_website\"></field>\n   12           </record>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_mail\\models\\mail_message.py:\n   48      }\n   49  \n   50:     def default_get(self, cr, uid, fields_list, context=None):\n   51:         defaults = super(MailMessage, self).default_get(cr, uid, fields_list, context=context)\n   52  \n   53:         # Note: explicitly implemented in default_get() instead of _defaults,\n   54          # to avoid setting to True for all existing messages during upgrades.\n   55:         # TODO: this default should probably be dynamic according to the model\n   56          # on which the messages are attached, thus moved to create().\n   57          if 'website_published' in fields_list:\n   58:             defaults.setdefault('website_published', True)\n   59  \n   60:         return defaults\n   61  \n   62      def _search(self, cr, uid, args, offset=0, limit=None, order=None,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_mail\\views\\website_email_designer.xml:\n    8          <div id=\"wrap\" class=\"container\" t-ignore=\"True\">\n    9              <div id=\"email_template\" class=\"mb32\" t-att-style=\"mode != 'email_template' and 'display: none' or ''\">\n   10:                 <a class=\"mt16 btn btn-default pull-right css_editable_mode_hidden\" \n   11                    t-attf-href=\"/web#return_label=Website&amp;model=#{model}&amp;id=#{res_id}&amp;view_type=form\">\n   12                      Back\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_mail\\views\\website_mail.xml:\n   14                groups=\"base.group_public\"/>\n   15          <span class=\"input-group-btn\">\n   16:             <button href=\"#\" t-attf-class=\"btn btn-default js_unfollow_btn\">Unsubscribe</button>\n   17              <button href=\"#\" t-attf-class=\"btn btn-primary js_follow_btn\">Subscribe</button>\n   18          </span>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_mail_group\\controllers\\main.py:\n   20              groupby=\"date\", orderby=\"date desc\", context=request.context)\n   21          for group in groups:\n   22:             begin_date = datetime.datetime.strptime(group['__domain'][0][2], tools.DEFAULT_SERVER_DATETIME_FORMAT).date()\n   23:             end_date = datetime.datetime.strptime(group['__domain'][1][2], tools.DEFAULT_SERVER_DATETIME_FORMAT).date()\n   24:             group['date_begin'] = '%s' % datetime.date.strftime(begin_date, tools.DEFAULT_SERVER_DATE_FORMAT)\n   25:             group['date_end'] = '%s' % datetime.date.strftime(end_date, tools.DEFAULT_SERVER_DATE_FORMAT)\n   26          return groups\n   27  \n   ..\n   40                  'monthly_message_nbr': mail_message_obj.search(\n   41                      cr, SUPERUSER_ID,\n   42:                     [('model', '=', 'mail.group'), ('res_id', '=', group.id), ('date', '>=', month_date.strftime(tools.DEFAULT_SERVER_DATETIME_FORMAT))],\n   43                      count=True, context=context)}\n   44          values = {'groups': groups, 'group_data': group_data}\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_mail_group\\models\\mail_group.py:\n   33  \n   34      def send_get_mail_body(self, cr, uid, mail, partner=None, context=None):\n   35:         \"\"\" Short-circuit parent method for mail groups, replace the default\n   36              footer with one appropriate for mailing-lists.\"\"\"\n   37  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_mail_group\\views\\website_mail_group.xml:\n    3  <data>\n    4  \n    5: <template id=\"footer_mailing_list\" inherit_id=\"website.footer_default\" name=\"Footer Mailing List Link\">\n    6      <xpath expr=\"//div[@id='info']/ul\" position=\"inside\">\n    7          <li><a t-attf-href=\"/groups\">Mailing List</a></li>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_membership\\models\\product.py:\n   28          'website_published': fields.boolean('Available in the website', copy=False),\n   29      }\n   30:     _defaults = {\n   31          'website_published': False,\n   32      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_membership\\views\\website_membership.xml:\n    4  \n    5  <!-- Layout add nav and footer -->\n    6: <template id=\"footer_custom\" inherit_id=\"website.footer_default\" name=\"Footer Associations Link\">\n    7      <xpath expr=\"//div[@id='info']/ul\" position=\"inside\">\n    8          <li><a href=\"/members\">Members</a></li>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_partner\\models\\res_partner.py:\n   24      }\n   25  \n   26:     _defaults = {\n   27          'website_published': True\n   28      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_quote\\data\\website_quotation_demo.xml:\n   15          <record id=\"product_product_quote_1\" model=\"product.product\">\n   16              <field name=\"product_tmpl_id\" ref=\"product_template_quote_1\"/>\n   17:             <field name=\"default_code\">QF11</field>\n   18          </record>\n   19  \n   ..\n   31          <record id=\"product_product_quote_2\" model=\"product.product\">\n   32              <field name=\"product_tmpl_id\" ref=\"product_template_quote_2\"/>\n   33:             <field name=\"default_code\">QF12</field>\n   34          </record>\n   35  \n   ..\n   47          <record id=\"product_product_quote_3\" model=\"product.product\">\n   48              <field name=\"product_tmpl_id\" ref=\"product_template_quote_3\"/>\n   49:             <field name=\"default_code\">QF13</field>\n   50          </record>\n   51  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_quote\\models\\order.py:\n   58          'product_uom_id': fields.many2one('product.uom', 'Unit of Measure ', required=True),\n   59      }\n   60:     _defaults = {\n   61          'product_uom_qty': 1,\n   62          'discount': 0.0,\n   ..\n  146              digits_compute=dp.get_precision('Account'))\n  147      }\n  148:     _defaults = {\n  149          'access_token': lambda self, cr, uid, ctx={}: str(uuid.uuid4())\n  150      }\n  ...\n  236              else:\n  237                  action['context'].update({\n  238:                     'default_template_id': template_id,\n  239:                     'default_use_template': True\n  240                  })\n  241  \n  ...\n  256          'quantity': fields.float('Quantity', required=True, digits_compute= dp.get_precision('Product UoS')),\n  257      }\n  258:     _defaults = {\n  259          'quantity': 1,\n  260      }\n  ...\n  286      }\n  287  \n  288:     _defaults = {\n  289          'quantity': 1,\n  290      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_quote\\views\\website_quotation.xml:\n  407    <template id=\"opt_quotation_signature\" name=\"Ask Signature\" customize_show=\"True\" inherit_id=\"website_quote.so_quotation\">\n  408        <xpath expr=\"//div[@id='sign-dialog']\" position=\"inside\">\n  409:         <div class=\"panel panel-default mt16 mb0\" id=\"drawsign\">\n  410              <div class=\"panel-heading\">\n  411                  <div class=\"pull-right\">\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_report\\views\\layouts.xml:\n   24              <li t-foreach=\"languages\" t-as=\"lg\">\n   25                  <a t-att-href=\"url_for(request.httprequest.path + '?' + keep_query(), lang=lg[0])\"\n   26:                    t-att-data-default-lang=\"editable and 'true' if website and lg[0] == website.default_lang_code else None\">\n   27                      <t t-esc=\"lg[1].split('/').pop()\"/>\n   28                  </a>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_sale\\controllers\\main.py:\n   23                      res = False\n   24                      break\n   25:                 row = self.table.setdefault(posy+y, {})\n   26:                 if row.setdefault(posx+x) is not None:\n   27                      res = False\n   28                      break\n   29              for x in range(PPR):\n   30:                 self.table[posy+y].setdefault(x, None)\n   31          return res\n   32  \n   ..\n   91              path = self.path\n   92          for k,v in self.args.items():\n   93:             kw.setdefault(k,v)\n   94          l = []\n   95          for k,v in kw.items():\n   ..\n  147              for srch in search.split(\" \"):\n  148                  domain += ['|', '|', '|', ('name', 'ilike', srch), ('description', 'ilike', srch),\n  149:                     ('description_sale', 'ilike', srch), ('product_variant_ids.default_code', 'ilike', srch)]\n  150          if category:\n  151              domain += [('public_categ_ids', 'child_of', int(category))]\n  ...\n  417          checkout['shipping_id'] = shipping_id\n  418  \n  419:         # Default search by user country\n  420          if not checkout.get('country_id'):\n  421              country_code = request.session['geoip'].get('country_code')\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_sale\\data\\demo.xml:\n   78                                  </p>\n   79  \n   80:                                 <div class=\"panel panel-default mt48\" data-snippet-id=\"panel\">\n   81                                      <div class=\"panel-heading\">\n   82                                          <h3 class=\"panel-title\">Characteristics</h3>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_sale\\models\\product.py:\n   77          'sequence': fields.integer('Sequence', help=\"Gives the sequence order when displaying a list of product categories.\"),\n   78  \n   79:         # NOTE: there is no 'default image', because by default we don't show thumbnails for categories. However if we have a thumbnail\n   80:         # for at least one category, then we display a default image on the other, so that the buttons have consistent styling.\n   81:         # In this case, the default image is set by the js code.\n   82          # NOTE2: image: all image fields are base64 encoded and PIL-supported\n   83          'image': fields.binary(\"Image\",\n   ..\n  134      }\n  135  \n  136:     def _defaults_website_sequence(self, cr, uid, *l, **kwargs):\n  137          cr.execute('SELECT MAX(website_sequence)+1 FROM product_template')\n  138          next_sequence = cr.fetchone()[0] or 0\n  139          return next_sequence\n  140  \n  141:     _defaults = {\n  142          'website_size_x': 1,\n  143          'website_size_y': 1,\n  144:         'website_sequence': _defaults_website_sequence,\n  145          'website_published': False,\n  146      }\n  ...\n  196          'type': fields.selection([('radio', 'Radio'), ('select', 'Select'), ('color', 'Color'), ('hidden', 'Hidden')], string=\"Type\"),\n  197      }\n  198:     _defaults = {\n  199          'type': lambda *a: 'radio',\n  200      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_sale\\models\\sale_order.py:\n  115      _columns = {\n  116          'pricelist_id': fields.related('user_id','partner_id','property_product_pricelist',\n  117:             type='many2one', relation='product.pricelist', string='Default Pricelist'),\n  118          'currency_id': fields.related('pricelist_id','currency_id',\n  119:             type='many2one', relation='res.currency', string='Default Currency'),\n  120      }\n  121  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_sale\\views\\templates.xml:\n   47        <input type=\"text\" name=\"search\" class=\"search-query form-control\" placeholder=\"Search...\" t-att-value=\"search\"/>\n   48        <span class=\"input-group-btn\">\n   49:         <a class=\"btn btn-default a-submit\"><i class=\"fa fa-search\"/></a>\n   50        </span>\n   51    </div>\n   ..\n  117    <xpath expr=\"//div[@class='product_price']\" position=\"inside\">\n  118      <input name=\"product_id\" t-att-value=\"product.product_variant_ids[0].id\" type=\"hidden\"/>\n  119:     <a class=\"btn btn-default btn-xs fa fa-shopping-cart a-submit\"/>\n  120    </xpath>\n  121  </template>\n  ...\n  155                              <div class=\"css_options\" t-ignore=\"true\" groups=\"base.group_website_publisher\">\n  156                                <div t-attf-class=\"dropdown js_options\" t-att-data-id=\"product.id\">\n  157:                                 <button class=\"btn btn-default\" t-att-id=\"'dopprod-%s' % product.id\" role=\"button\" data-toggle=\"dropdown\">Options <span class=\"caret\"></span></button>\n  158                                  <ul class=\"dropdown-menu\" role=\"menu\" t-att-aria-labelledby=\"'dopprod-%s' % product.id\">\n  159                                    <li class='dropdown-submenu'>\n  ...\n  429    <div itemprop=\"offers\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Offer\" class=\"product_price mt16\">\n  430        <h4 class=\"oe_price_h4 css_editable_mode_hidden\">\n  431:           <span class=\"text-danger oe_default_price\" style=\"text-decoration: line-through; white-space: nowrap;\"\n  432              t-field=\"product.lst_price\"\n  433              t-field-options='{\n  ...\n  460      <input type=\"hidden\" t-if=\"len(product.product_variant_ids) == 1\" name=\"product_id\" t-att-value=\"product.product_variant_ids[0].id\"/>\n  461      <t t-if=\"len(product.product_variant_ids) &gt; 1\">\n  462:       <label label-default=\"label-default\" class=\"radio\" t-foreach=\"product.product_variant_ids\" t-as=\"variant_id\">\n  463          <input type=\"radio\" name=\"product_id\" class=\"js_product_change\" t-att-checked=\"'checked' if variant_id_index == 0 else ''\" t-att-value=\"variant_id.id\" t-att-data-lst_price=\"variant_id.lst_price\" t-att-data-price=\"variant_id.price\"/>\n  464          <span t-esc=\"variant_id.name_get()[0][1]\"/>\n  ...\n  805  <template id=\"continue_shopping\" inherit_id=\"website_sale.cart\" customize_show=\"True\" name=\"Continue Shopping Button\">\n  806    <xpath expr=\"//a[@href='/shop/checkout']\" position=\"before\">\n  807:     <a href=\"/shop\" class=\"btn btn-default mb32\"><span class=\"fa fa-long-arrow-left\"/> Continue Shopping</a>\n  808    </xpath>\n  809  </template>\n  ...\n  819                <input name=\"promo\" class='form-control' type=\"text\" placeholder=\"code...\" t-att-value=\"website_sale_order.pricelist_id.code or ''\"/>\n  820                <div class=\"input-group-btn\">\n  821:                   <a class=\"btn btn-default a-submit\">Apply</a>\n  822                </div>\n  823            </div>\n  ...\n  970                </div>\n  971                <div class=\"clearfix\">\n  972:                 <a href=\"/shop/cart\" class=\"btn btn-default mb32\"><span class=\"fa fa-long-arrow-left\"/> Return to Cart</a>\n  973:                 <a class=\"btn btn-default btn-primary pull-right mb32 a-submit\">Confirm <span class=\"fa fa-long-arrow-right\"/></a>\n  974                </div>\n  975            </div>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_sale_delivery\\models\\sale_order.py:\n   12          'website_description': fields.text('Description for the website'),\n   13      }\n   14:     _defaults = {\n   15          'website_published': True\n   16      }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_sale_options\\data\\demo.xml:\n   27              <field name=\"uom_po_id\" ref=\"product.product_uom_unit\"/>\n   28              <field name=\"description_sale\">Warranty, issued to the purchaser of an article by its manufacturer, promising to repair or replace it if necessary within a specified period of time.</field>\n   29:             <field name=\"default_code\">W0001</field>\n   30              <field name=\"attribute_value_ids\" eval=\"[(6,0,[ref('product_attribute_value_1')])]\"/>\n   31          </record>\n   32          <record id=\"product_product_1b\" model=\"product.product\">\n   33:             <field name=\"default_code\">W0002</field>\n   34              <field name=\"product_tmpl_id\" ref=\"product_product_1_product_template\"/>\n   35              <field name=\"attribute_value_ids\" eval=\"[(6,0,[ref('product_attribute_value_2')])]\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_sale_options\\views\\templates.xml:\n   56                  </td>\n   57                  <td>\n   58:                   <span t-attf-class=\"text-danger oe_default_price\" t-att-style=\"'' if (compute_currency(product.lst_price) - product.price) &gt; 0.1 else 'display: none;'\" style=\"text-decoration: line-through; white-space: nowrap;\"\n   59                      t-field=\"product.lst_price\"\n   60                      t-field-options='{\n   ..\n  139          </div>\n  140          <div class=\"modal-footer\">\n  141:           <a class=\"btn btn-default a-submit js_goto_shop\"><i class=\"fa fa-chevron-left\"></i> Continue shopping</a>\n  142            <a class=\"btn btn-primary pull-right a-submit\"><i class=\"fa fa-shopping-cart fa-fw\"></i> Proceed to checkout</a>\n  143          </div>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\.metadata\\.plugins\\org.python.pydev.shared_ui\\dialog_settings.xml:\n    1  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    2  <section name=\"Workbench\">\n    3: 	<section name=\"org.python.pydev.plugin.preferences.CheckDefaultPreferencesDialog\">\n    4  		<item value=\"480\" key=\"width\"/>\n    5  		<item value=\"518\" key=\"x\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\akun.py:\n    6  from dateutil.relativedelta import relativedelta\n    7  import itertools\n    8: from openerp.tools import DEFAULT_SERVER_DATE_FORMAT\n    9  \n   10  \n   ..\n  208      _columns = {\n  209          'idakun': fields.many2one(\"mmr.akun\", \"Nama Akun\"),\n  210:         'tanggal': fields.date(\"Waktu\", compute=\"_ambil_tanggal\", default=\"_default_tanggal\"),\n  211          'sumberpembelianfaktur': fields.many2one(\"mmr.pembelianfaktur\", \"Sumber Pembelian Faktur\", ondelete='cascade'),\n  212          'sumberpenjualanfaktur': fields.many2one(\"mmr.penjualanfaktur\", \"Sumber Penjualan Faktur\", ondelete='cascade'),\n  ...\n  831      \n  832      # Jangan dapat dicopy\n  833:     def copy(self, cr, uid, id, default=None, context=None):\n  834             raise osv.except_osv(_('Tidak Dapat Duplikasi'), _('Dilarang melakukan duplikasi data Kegiatan Akunting.'))\n  835             return True\n  ...\n  932      }    \n  933      \n  934:     _defaults = {\n  935                  'namamodel' : \"mmr.biaya\", \n  936                  'akunotomatis' : True, \n  ...\n  948      \n  949      # Jangan dapat dicopy\n  950:     def copy(self, cr, uid, id, default=None, context=None):\n  951             raise osv.except_osv(_('Tidak Dapat Duplikasi'), _('Dilarang melakukan duplikasi data Biaya.'))\n  952             return True    \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\customer.py:\n   54  		return super(mmr_customer,self).write(cr, uid, ids, vals, context=context)\n   55  	\n   56: 	_defaults = {\n   57  				'batashutang' : 50000000,\n   58  				}\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\pembayaran.py:\n  154  	\n  155  	# Pemabayaran jangan dapat dicopy\n  156: 	def copy(self, cr, uid, id, default=None, context=None):\n  157     		raise osv.except_osv(_('Tidak Dapat Duplikasi'), _('Dilarang melakukan duplikasi data Pembayaran.'))\n  158     		return True\n  159     	\n  160: 	_defaults = {\n  161  				'namamodel' : \"mmr.pembayaranpembelian\",\n  162  				'akunotomatis' : True,\n  ...\n  305  	}	\n  306  	\n  307: 	_defaults = {\n  308  				'namamodel' : \"mmr.pembayaranpenjualan\",\n  309  				'akunotomatis' : True,\n  ...\n  346  		return True\n  347  	\n  348: 	def copy(self, cr, uid, id, default=None, context=None):\n  349     		raise osv.except_osv(_('Tidak Dapat Duplikasi'), _('Dilarang melakukan duplikasi data Pembayaran.'))\n  350     		return True\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\pembelian.py:\n  142          res = {}\n  143          for pembelianpo in self.browse(cr,uid,ids):\n  144:             # Secara default\n  145              res[pembelianpo.id] = \"Baru\"\n  146              \n  ...\n  170          res = {}\n  171          for pembelianpo in self.browse(cr,uid,ids):\n  172:             # Secara default\n  173              res[pembelianpo.id] = \"Belum ada SJ\"\n  174              listpembeliansj = []\n  ...\n  245      }    \n  246      \n  247:     _defaults = {\n  248                  'waktu': lambda *a: datetime.datetime.today(),\n  249                  'status': \"Baru\",\n  ...\n  311      \n  312      # Jangan bisa diduplikat\n  313:     def copy(self, cr, uid, id, default=None, context=None):\n  314             raise osv.except_osv(_('Tidak Dapat Duplikasi'), _('Dilarang melakukan duplikasi data PO Pembelian.'))\n  315             return True\n  ...\n  408      }    \n  409      \n  410:     _defaults = {\n  411                  'supplier' : lambda self, cr, uid, c: c.get('supplier', False),\n  412                  'waktu' : lambda self, cr, uid, c: c.get('waktu', False),\n  ...\n  442      }    \n  443      \n  444:     _defaults = {\n  445                  'idpo' : lambda self, cr, uid, c: c.get('idpo', False),\n  446                  'waktu': lambda *a: datetime.datetime.today(),\n  ...\n  721      }    \n  722      \n  723:     _defaults = {\n  724                  'idpo' : lambda self, cr, uid, c: c.get('idpo', False),\n  725                  'waktu': lambda *a: datetime.datetime.today(),\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\penjualan.py:\n  360      }    \n  361      \n  362:     _defaults = {\n  363                  'tanggal': lambda *a: datetime.datetime.today(),\n  364                  'status': \"Baru\",\n  ...\n  404      \n  405      # Jangan dapat dicopy\n  406:     def copy(self, cr, uid, id, default=None, context=None):\n  407             raise osv.except_osv(_('Tidak Dapat Duplikasi'), _('Dilarang melakukan duplikasi data PO Penjualan.'))\n  408             return True\n  ...\n  457      @api.onchange(\"namaproduk\")\n  458      def _isi_history(self):\n  459:         hasilsearch = self.env['mmr.penjualanpo'].search([(\"customer\",\"=\",self._context.get(\"default_customer\"))])\n  460          listidpenjualanpo = []\n  461          self.stokkeluar = False\n  ...\n  487      }\n  488      \n  489:     _defaults = {\n  490                  'pajak': 10,\n  491                  }    \n  ...\n  594      }    \n  595      \n  596:     _defaults = {\n  597                  'idpenjualanpo' : lambda self, cr, uid, c: c.get('idpenjualanpo', False),\n  598                  }\n  ...\n  734          return {'value': hasil}    \n  735      \n  736:     # Ketika mengisi SJ, tanggal terbit faktur isikan sama ( Hanya secara default, dengan asumsi, SJ dan faktur sangat sering\n  737      # dibuat bersamaan\n  738      def onchange_sj(self,cr,uid,ids,sj,context=None):\n  ...\n  933      }    \n  934      \n  935:     _defaults = {\n  936                  'idpenjualanpo' : lambda self, cr, uid, c: c.get('idpenjualanpo', False),\n  937                  'waktu': lambda *a: datetime.datetime.today(),\n  ...\n 1100          return super(mmr_penjualanretur, self).unlink(cr, uid, id, context=context)\n 1101      \n 1102:     _defaults = {\n 1103                  'lunas' : False\n 1104                  }    \n ....\n 1133      }    \n 1134      \n 1135:     _defaults = {\n 1136                  'pajak':10\n 1137                  }    \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\smart.py:\n  420  	}\n  421  	\n  422: 	_defaults = {\n  423  		'status': \"Silahkan Tekan Tombol Reload Pekerjaan\",		\n  424  		'targetomzet' : _isi_omzet,\n  ...\n  484  	}	\n  485  	\n  486: 	_defaults={\n  487  			'preview':True\n  488  			}\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\view\\akun.xml:\n    7  			<field name=\"model\">mmr.akun</field>\n    8  			<field name=\"arch\" type=\"xml\" >\n    9: 				<tree string=\"Neraca Lajur\" version=\"7.0\" default_order=\"nomorakun\" >\n   10  					<field name=\"idakunparent\" />\n   11  					<field name=\"nomorakun\" />\n   ..\n  132  						<page string=\"Akun\">\n  133  							<field name=\"idssaveakun\">\n  134: 								<tree editable=\"bottom\" default_order=\"nomorakun\">\n  135  									<field name=\"nomorakun\" />\n  136  									<field name=\"idakun\" />\n  ...\n  150  			<field name=\"model\">mmr.jurnalpenyesuaian</field>\n  151  			<field name=\"arch\" type=\"xml\" >\n  152: 				<tree string=\"Jurnal Penyesuaian\" version=\"7.0\" default_order=\"tanggal desc\" colors=\"red:status!='Normal'\">\n  153  					<field name=\"status\" />\n  154  					<field name=\"bulan\" />\n  ...\n  219  			<field name=\"model\">mmr.jurnalpenutup</field>\n  220  			<field name=\"arch\" type=\"xml\" >\n  221: 				<tree string=\"Jurnal Penutup\" version=\"7.0\" default_order=\"tanggal\" colors=\"red:status!='Normal'\">\n  222  					<field name=\"status\" />\n  223  					<field name=\"bulan\" />\n  ...\n  331  							</group>\n  332  							<field name=\"jurnal\">\n  333: 								<tree string=\"Jurnal\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"nomorakun\">\n  334  									<field name=\"idakunparent\" />\n  335  									<field name=\"nomorakun\" />\n  ...\n  355  										<page string=\"History\">\n  356  											<field name=\"akundetil\">\n  357: 												<tree string=\"History\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"tanggal\">\n  358  													<field name=\"tanggal\" />\n  359  													<field name=\"sumber\" />\n  ...\n  393  							</group>\n  394  							<field name=\"jurnalpenyesuaian\">\n  395: 								<tree string=\"Jurnal\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"nomorakun\">\n  396  									<field name=\"idakunparent\" />\n  397  									<field name=\"nomorakun\" />\n  ...\n  417  										<page string=\"History\">\n  418  											<field name=\"akundetil\">\n  419: 												<tree string=\"History\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"tanggal\">\n  420  													<field name=\"tanggal\" />\n  421  													<field name=\"sumber\" />\n  ...\n  455  							</group>\n  456  							<field name=\"jurnaldisesuaikan\">\n  457: 								<tree string=\"Jurnal\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"nomorakun\">\n  458  									<field name=\"idakunparent\" />\n  459  									<field name=\"nomorakun\" />\n  ...\n  479  										<page string=\"History\">\n  480  											<field name=\"akundetil\">\n  481: 												<tree string=\"History\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"tanggal\">\n  482  													<field name=\"tanggal\" />\n  483  													<field name=\"sumber\" />\n  ...\n  517  							</group>\n  518  							<field name=\"jurnalpenutup\">\n  519: 								<tree string=\"Jurnal\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"nomorakun\">\n  520  									<field name=\"idakunparent\" />\n  521  									<field name=\"nomorakun\" />\n  ...\n  541  										<page string=\"History\">\n  542  											<field name=\"akundetil\">\n  543: 												<tree string=\"History\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"tanggal\">\n  544  													<field name=\"tanggal\" />\n  545  													<field name=\"sumber\" />\n  ...\n  645  			<field name=\"model\">mmr.kegiatanakunting</field>\n  646  			<field name=\"arch\" type=\"xml\">\n  647: 				<tree string=\"Kegiatan Akunting\" version=\"7.0\" colors=\"red:status!='Normal'\" default_order=\"tanggal desc\">\n  648  					<field name=\"status\" />\n  649  					<field name=\"tanggal\"/>\n  ...\n  720  			<field name=\"model\">mmr.biaya</field>\n  721  			<field name=\"arch\" type=\"xml\">\n  722: 				<tree string=\"Biaya\" version=\"7.0\" colors=\"red:status!='Normal'\" default_order=\"tanggal desc\">\n  723  					<field name=\"status\" />\n  724  					<field name=\"tanggal\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\view\\customer.xml:\n   53  						<page string=\"Laporan\">\n   54  							<field name=\"laporansales\">\n   55: 								<tree string=\"Laporan Sales\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"tanggal desc\">\n   56  									<field name=\"tanggal\" />\n   57  									<field name=\"sales\" />\n   ..\n   94  						<page string=\"List Penjualan\">\n   95  							<field name=\"listpopenjualan\">\n   96: 								<tree string=\"Penjualan PO\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"tanggal desc\">\n   97  									<field name=\"status\" />\n   98  									<field name=\"nomorpo\" />\n   ..\n  116  						<page string=\"Laporan\">\n  117  							<field name=\"laporansales\">\n  118: 								<tree string=\"Laporan Sales\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"tanggal desc\">\n  119  									<field name=\"tanggal\" />\n  120  									<field name=\"sales\" />\n  ...\n  186  						<page string=\"Laporan\">\n  187  							<field name=\"laporansales\">\n  188: 								<tree string=\"Laporan Sales\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"tanggal desc\">\n  189  									<field name=\"tanggal\" />\n  190  									<field name=\"sales\" />\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\view\\pembayaran.xml:\n    6  			<field name=\"model\">mmr.pembayaranpembelian</field>\n    7  			<field name=\"arch\" type=\"xml\">\n    8: 				<tree string=\"Pembayaran Pembelian\" version=\"7.0\" colors=\"red:disetujui==False\" default_order=\"tanggalbayar desc\">\n    9  					<field name=\"status\" />\n   10  					<field name=\"supplier\" />\n   ..\n  144  			<field name=\"model\">mmr.pembayaranpenjualan</field>\n  145  			<field name=\"arch\" type=\"xml\">\n  146: 				<tree string=\"Pembayaran Penjualan\" version=\"7.0\" colors=\"red:disetujui==False\" default_order=\"tanggalbayar desc\">\n  147  					<field name=\"status\" />\n  148  					<field name=\"customer\" />\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\view\\pembelian.xml:\n    7  			<field name=\"model\">mmr.pembelianpo</field>\n    8  			<field name=\"arch\" type=\"xml\">\n    9: 				<tree string=\"PO Pembelian\" version=\"7.0\" colors=\"red:((status!='Barang Lengkap' and status!='Batal') or (statusfaktur!='Faktur lengkap' and statusfaktur!='Tanpa Faktur'))\" default_order=\"waktu desc\">\n   10  					<field name=\"status\" />\n   11  					<field name=\"statusfaktur\" groups=\"MMR.akunting\"/>\n   ..\n  178  			<field name=\"model\">mmr.pembeliansj</field>\n  179  			<field name=\"arch\" type=\"xml\">\n  180: 				<tree string=\"Pembelian SJ\" version=\"7.0\" default_order=\"tanggalterbit\">\n  181  					<field name=\"nomorsj\" />\n  182  					<field name=\"tanggalterbit\"/>\n  ...\n  210  						<page string=\"List Barang\">\n  211  							<field name=\"pembeliansjdetil\" context=\"{'ijin': True}\" attrs=\"{'readonly':[('disetujui','!=',False)]}\">\n  212: 								<tree create=\"true\" edit=\"true\" delete=\"true\" default_order=\"tanggal\">\n  213  									<field name=\"merk\" />\n  214  									<field name=\"namaproduk\"/>\n  ...\n  269  			<field name=\"model\">mmr.pembeliansj</field>\n  270  			<field name=\"arch\" type=\"xml\">\n  271: 				<tree string=\"Pembelian SJ\" version=\"7.0\" default_order=\"tanggalterbit\" create=\"false\" edit=\"false\">\n  272  					<field name=\"idpo\" string=\"Nomor PO\"/>\n  273  					<field name=\"nomorsj\" />\n  ...\n  299  						<page string=\"List Barang\">\n  300  							<field name=\"pembeliansjdetil\" context=\"{'ijin': True}\" attrs=\"{'readonly':[('disetujui','!=',False)]}\">\n  301: 								<tree create=\"true\" edit=\"true\" delete=\"true\" default_order=\"tanggal\">\n  302  									<field name=\"merk\" />\n  303  									<field name=\"namaproduk\"/>\n  ...\n  359  			<field name=\"model\">mmr.pembelianfaktur</field>\n  360  			<field name=\"arch\" type=\"xml\">\n  361: 				<tree string=\"Pembelian Faktur\" version=\"7.0\" default_order=\"tanggalterbit\">\n  362  					<field name=\"nomorfaktur\" />\n  363  					<field name=\"tanggalterbit\"/>\n  ...\n  532  			<field name=\"model\">mmr.pembelianfaktur</field>\n  533  			<field name=\"arch\" type=\"xml\">\n  534: 				<tree string=\"Pembelian Faktur\" version=\"7.0\" default_order=\"tanggalterbit\" create=\"false\" edit=\"false\">\n  535  					<field name=\"status\"/>\n  536  					<field name=\"idpo\" string=\"Nomor PO\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\view\\penjualan.xml:\n    7  			<field name=\"model\">mmr.penjualanpo</field>\n    8  			<field name=\"arch\" type=\"xml\">\n    9: 				<tree string=\"Penjualan PO\" version=\"7.0\" colors=\"red:((status!='Barang Lengkap Dikirim' and status!='Batal') or (statusfaktur!='Faktur lengkap' and statusfaktur!='Tanpa Faktur'))\" default_order=\"tanggal desc\">\n   10  					<field name=\"status\" />\n   11  					<field name=\"statusfaktur\" groups=\"MMR.akunting\"/>\n   ..\n   76  					<notebook>\n   77  						<page string=\"List Produk\">\n   78: 							<field name=\"penjualanpodetil\"  attrs=\"{'readonly':[('disetujui','!=',False)]}\" context=\"{'default_customer': customer}\"/>\n   79  						</page>	\n   80  						<page string=\"List Surat Jalan\">\n   ..\n  184  						<page string=\"History\">\n  185  							<field name=\"stokkeluar\">\n  186: 								<tree string=\"History\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"tanggal desc\">\n  187  									<field name=\"idpenjualanpo\" string=\"PO Penjualan\"/>\n  188  									<field name=\"tanggal\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\view\\produk.xml:\n  144  						<page string=\"Kartu Stok\">\n  145  							<field name=\"stok\">\n  146: 								<tree default_order=\"tanggal desc\">\n  147  									<field name=\"tanggal\" />\n  148  									<field name=\"gudang\" />\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\view\\sales.xml:\n   34  						<page string=\"List Penjualan\">\n   35  							<field name=\"listpopenjualan\">\n   36: 								<tree string=\"Penjualan PO\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"tanggal desc\">\n   37  									<field name=\"status\" />\n   38  									<field name=\"nomorpo\" />\n   ..\n   56  						<page string=\"Laporan\">\n   57  							<field name=\"laporansales\">\n   58: 								<tree string=\"Laporan Sales\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"tanggal desc\">\n   59  									<field name=\"tanggal\" />\n   60  									<field name=\"customer\" />\n   ..\n  154  						<page string=\"Penjualan Faktur\">\n  155  							<field name=\"penjualanfaktur\">\n  156: 								<tree string=\"Penjualan Faktur\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"tanggalterbit desc\">\n  157  									<field name=\"nomorfaktur\"/>\n  158  									<field name=\"nofakturpajak\"/>\n  ...\n  173  						<page string=\"Penjualan PO\">\n  174  							<field name=\"penjualanpo\">\n  175: 								<tree string=\"Penjualan PO\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"tanggal desc\">\n  176  									<field name=\"nomorpo\"/>\n  177  									<field name=\"status\"/>\n  ...\n  187  						<page string=\"Penjualan Retur\">\n  188  							<field name=\"penjualanretur\">\n  189: 								<tree string=\"Penjualan PO\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"tanggal desc\">\n  190  									<field name=\"status\" />\n  191  									<field name=\"teknisi\" />\n  ...\n  210  							</group>\n  211  							<field name=\"grafikpenjualan\">\n  212: 								<tree string=\"Grafik Penjualan\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"berdasarkan desc\">\n  213  									<field name=\"berdasarkan\" string=\" \"/>\n  214  									<field name=\"1\"/>\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR\\view\\stok.xml:\n   57  			<field name=\"model\">mmr.stok</field>\n   58  			<field name=\"arch\" type=\"xml\">\n   59: 				<tree string=\"Stok\" version=\"7.0\" create=\"false\" edit=\"false\" delete=\"false\" default_order=\"tanggal desc\">\n   60  					<field name=\"tanggal\" />\n   61  					<field name=\"gudang\" />\n\n5159 matches across 778 files\n\n\nSearching 3130 files for \"SUPERUSER\"\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\account.py:\n   27  \n   28  import openerp\n   29: from openerp import SUPERUSER_ID, api\n   30  from openerp import tools\n   31  from openerp.osv import fields, osv, expression\n   ..\n  822              # if we have the right to create a journal, we should be able to\n  823              # create it's sequence.\n  824:             vals.update({'sequence_id': self.create_sequence(cr, SUPERUSER_ID, vals, context)})\n  825          return super(account_journal, self).create(cr, uid, vals, context)\n  826  \n  ...\n 1839  def get_precision_tax():\n 1840      def change_digit_tax(cr):\n 1841:         res = openerp.registry(cr.dbname)['decimal.precision'].precision_get(cr, SUPERUSER_ID, 'Account')\n 1842          return (16, res+3)\n 1843      return change_digit_tax\n ....\n 3389          accounting properties... accordingly for the chosen company.\n 3390          '''\n 3391:         if uid != SUPERUSER_ID and not self.pool['res.users'].has_group(cr, uid, 'base.group_erp_manager'):\n 3392              raise openerp.exceptions.AccessError(_(\"Only administrators can change the settings\"))\n 3393          obj_data = self.pool.get('ir.model.data')\n ....\n 3418          # write values of default taxes for product as super user\n 3419          if obj_wizard.sale_tax and taxes_ref:\n 3420:             ir_values_obj.set_default(cr, SUPERUSER_ID, 'product.template', \"taxes_id\", [taxes_ref[obj_wizard.sale_tax.id]], for_all_users=True, company_id=company_id)\n 3421          if obj_wizard.purchase_tax and taxes_ref:\n 3422:             ir_values_obj.set_default(cr, SUPERUSER_ID, 'product.template', \"supplier_taxes_id\", [taxes_ref[obj_wizard.purchase_tax.id]], for_all_users=True, company_id=company_id)\n 3423  \n 3424          # Create Bank journals\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\account\\res_config.py:\n   25  \n   26  import openerp\n   27: from openerp import SUPERUSER_ID\n   28  from openerp.tools import DEFAULT_SERVER_DATE_FORMAT as DF\n   29  from openerp.tools.translate import _\n   ..\n  302      def set_default_taxes(self, cr, uid, ids, context=None):\n  303          \"\"\" set default sale and purchase taxes for products \"\"\"\n  304:         if uid != SUPERUSER_ID and not self.pool['res.users'].has_group(cr, uid, 'base.group_erp_manager'):\n  305              raise openerp.exceptions.AccessError(_(\"Only administrators can change the settings\"))\n  306          ir_values = self.pool.get('ir.values')\n  307          config = self.browse(cr, uid, ids[0], context)\n  308:         ir_values.set_default(cr, SUPERUSER_ID, 'product.template', 'taxes_id',\n  309              config.default_sale_tax and [config.default_sale_tax.id] or False, company_id=config.company_id.id)\n  310:         ir_values.set_default(cr, SUPERUSER_ID, 'product.template', 'supplier_taxes_id',\n  311              config.default_purchase_tax and [config.default_purchase_tax.id] or False, company_id=config.company_id.id)\n  312  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\auth_crypt\\auth_crypt.py:\n   28                     \"   AND password != ''\")\n   29          for uid, pwd in cr.fetchall():\n   30:             self._set_password(cr, openerp.SUPERUSER_ID, uid, pwd)\n   31  \n   32      def set_pw(self, cr, uid, id, name, value, args, context):\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\auth_ldap\\users_ldap.py:\n   26  from openerp import tools\n   27  from openerp.osv import fields, osv\n   28: from openerp import SUPERUSER_ID\n   29  from openerp.modules.registry import RegistryManager\n   30  _logger = logging.getLogger(__name__)\n   ..\n  196              if conf['user']:\n  197                  values['active'] = True\n  198:                 user_id = user_obj.copy(cr, SUPERUSER_ID, conf['user'],\n  199                                          default=values)\n  200              else:\n  201:                 user_id = user_obj.create(cr, SUPERUSER_ID, values)\n  202          return user_id\n  203  \n  ...\n  259                  if entry:\n  260                      user_id = ldap_obj.get_or_create_user(\n  261:                         cr, SUPERUSER_ID, conf, login, entry)\n  262                      if user_id:\n  263                          break\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\auth_oauth\\controllers\\main.py:\n    8  \n    9  import openerp\n   10: from openerp import SUPERUSER_ID\n   11  from openerp import http\n   12  from openerp.http import request\n   ..\n   51          try:\n   52              provider_obj = request.registry.get('auth.oauth.provider')\n   53:             providers = provider_obj.search_read(request.cr, SUPERUSER_ID, [('enabled', '=', True), ('auth_endpoint', '!=', False), ('validation_endpoint', '!=', False)])\n   54              # TODO in forwardport: remove conditions on 'auth_endpoint' and 'validation_endpoint' when these fields will be 'required' in model\n   55          except Exception:\n   ..\n  142              try:\n  143                  u = registry.get('res.users')\n  144:                 credentials = u.auth_oauth(cr, SUPERUSER_ID, provider, kw, context=context)\n  145                  cr.commit()\n  146                  action = state.get('a')\n  ...\n  186              IMD = registry['ir.model.data']\n  187              try:\n  188:                 model, provider_id = IMD.get_object_reference(cr, SUPERUSER_ID, 'auth_oauth', 'provider_openerp')\n  189              except ValueError:\n  190                  return set_cookie_and_redirect('/web?db=%s' % dbname)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\auth_oauth\\ir_configparameter.py:\n    1  # -*- coding: utf-8 -*-\n    2: from openerp import SUPERUSER_ID\n    3  from openerp.osv import osv\n    4  \n    .\n   10          if force:\n   11              IMD = self.pool['ir.model.data']\n   12:             oauth_oe = IMD.xmlid_to_object(cr, SUPERUSER_ID, 'auth_oauth.provider_openerp')\n   13:             dbuuid = self.get_param(cr, SUPERUSER_ID, 'database.uuid')\n   14              oauth_oe.write({'client_id': dbuuid})\n   15  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\auth_oauth\\res_users.py:\n    9  from openerp.addons.auth_signup.res_users import SignupError\n   10  from openerp.osv import osv, fields\n   11: from openerp import SUPERUSER_ID\n   12  \n   13  _logger = logging.getLogger(__name__)\n   ..\n  111              return super(res_users, self).check_credentials(cr, uid, password)\n  112          except openerp.exceptions.AccessDenied:\n  113:             res = self.search(cr, SUPERUSER_ID, [('id', '=', uid), ('oauth_access_token', '=', password)])\n  114              if not res:\n  115                  raise\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\auth_openid\\controllers\\main.py:\n   35  \n   36  import openerp\n   37: from openerp import SUPERUSER_ID\n   38  from openerp.modules.registry import RegistryManager\n   39  from openerp.addons.web.controllers.main import login_and_redirect, set_cookie_and_redirect\n   ..\n  196                  Modules = registry.get('ir.module.module')\n  197  \n  198:                 installed = Modules.search_count(cr, SUPERUSER_ID, ['&', ('name', '=', 'auth_openid'), ('state', '=', 'installed')]) == 1\n  199                  if installed:\n  200  \n  ...\n  216                      domain += [('openid_url', '=', openid_url), ('active', '=', True)]\n  217  \n  218:                     ids = Users.search(cr, SUPERUSER_ID, domain)\n  219                      assert len(ids) < 2\n  220                      if ids:\n  221                          user_id = ids[0]\n  222:                         login = Users.browse(cr, SUPERUSER_ID, user_id).login\n  223                          key = randomString(utils.KEY_LENGTH, '0123456789abcdef')\n  224:                         Users.write(cr, SUPERUSER_ID, [user_id], {'openid_key': key})\n  225                          # TODO fill empty fields with the ones from sreg/ax\n  226                          cr.commit()\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\auth_signup\\controllers\\main.py:\n   75                      assert login, \"No login provided.\"\n   76                      res_users = request.registry.get('res.users')\n   77:                     res_users.reset_password(request.cr, openerp.SUPERUSER_ID, login)\n   78                      qcontext['message'] = _(\"An email has been sent with credentials to reset your password\")\n   79              except SignupError:\n   ..\n   91          icp = request.registry.get('ir.config_parameter')\n   92          return {\n   93:             'signup_enabled': icp.get_param(request.cr, openerp.SUPERUSER_ID, 'auth_signup.allow_uninvited') == 'True',\n   94:             'reset_password_enabled': icp.get_param(request.cr, openerp.SUPERUSER_ID, 'auth_signup.reset_password') == 'True',\n   95          }\n   96  \n   ..\n  103                  # retrieve the user info (name, login or email) corresponding to a signup token\n  104                  res_partner = request.registry.get('res.partner')\n  105:                 token_infos = res_partner.signup_retrieve_info(request.cr, openerp.SUPERUSER_ID, qcontext.get('token'))\n  106                  for k, v in token_infos.items():\n  107                      qcontext.setdefault(k, v)\n  ...\n  119  \n  120      def _signup_with_values(self, token, values):\n  121:         db, login, password = request.registry['res.users'].signup(request.cr, openerp.SUPERUSER_ID, values, token)\n  122          request.cr.commit()     # as authenticate will use its own cursor we need to commit the current transaction\n  123          uid = request.session.authenticate(db, login, password)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_actions.py:\n   29  \n   30  import openerp\n   31: from openerp import SUPERUSER_ID\n   32  from openerp import tools\n   33  from openerp import workflow\n   ..\n  356          \"\"\"\n  357          dataobj = self.pool.get('ir.model.data')\n  358:         data_id = dataobj._get_id (cr, SUPERUSER_ID, module, xml_id)\n  359          res_id = dataobj.browse(cr, uid, data_id, context).res_id\n  360          return self.read(cr, uid, [res_id], [], context)[0]\n  ...\n  820          \"\"\" Create a contextual action for each of the server actions. \"\"\"\n  821          for action in self.browse(cr, uid, ids, context=context):\n  822:             ir_values_id = self.pool.get('ir.values').create(cr, SUPERUSER_ID, {\n  823                  'name': _('Run %s') % action.name,\n  824                  'model': action.model_id.model,\n  ...\n  837              if action.menu_ir_values_id:\n  838                  try:\n  839:                     self.pool.get('ir.values').unlink(cr, SUPERUSER_ID, action.menu_ir_values_id.id, context)\n  840                  except Exception:\n  841                      raise osv.except_osv(_('Warning'), _('Deletion of the action record failed.'))\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_attachment.py:\n   30  from openerp.exceptions import AccessError\n   31  from openerp.osv import fields,osv\n   32: from openerp import SUPERUSER_ID\n   33  from openerp.osv.orm import except_orm\n   34  from openerp.tools.translate import _\n   ..\n   70  \n   71      def _storage(self, cr, uid, context=None):\n   72:         return self.pool['ir.config_parameter'].get_param(cr, SUPERUSER_ID, 'ir_attachment.location', 'file')\n   73  \n   74      @tools.ormcache(skiparg=3)\n   ..\n  176          if location != 'db':\n  177              fname = self._file_write(cr, uid, value)\n  178:             # SUPERUSER_ID as probably don't have write access, trigger during create\n  179:             super(ir_attachment, self).write(cr, SUPERUSER_ID, [id], {'store_fname': fname, 'file_size': file_size, 'db_datas': False}, context=context)\n  180          else:\n  181:             super(ir_attachment, self).write(cr, SUPERUSER_ID, [id], {'db_datas': value, 'file_size': file_size, 'store_fname': False}, context=context)\n  182  \n  183          # After de-referencing the file in the database, check whether we need\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_config_parameter.py:\n   26  import datetime\n   27  \n   28: from openerp import SUPERUSER_ID\n   29  from openerp.osv import osv, fields\n   30  from openerp.tools import misc, config\n   ..\n   63          for key, func in _default_parameters.iteritems():\n   64              # force=True skips search and always performs the 'if' body (because ids=False)\n   65:             ids = not force and self.search(cr, SUPERUSER_ID, [('key','=',key)])\n   66              if not ids:\n   67                  value, groups = func()\n   68:                 self.set_param(cr, SUPERUSER_ID, key, value, groups=groups)\n   69  \n   70  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_cron.py:\n   28  \n   29  import openerp\n   30: from openerp import SUPERUSER_ID, netsvc, api\n   31  from openerp.osv import fields, osv\n   32  from openerp.tools import DEFAULT_SERVER_DATETIME_FORMAT\n   ..\n  178                  cron_cr.execute(\"UPDATE ir_cron SET nextcall=%s, numbercall=%s\"+addsql+\" WHERE id=%s\",\n  179                             (nextcall.astimezone(pytz.UTC).strftime(DEFAULT_SERVER_DATETIME_FORMAT), numbercall, job['id']))\n  180:                 self.invalidate_cache(job_cr, SUPERUSER_ID)\n  181  \n  182          finally:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_http.py:\n   71      def _auth_method_public(self):\n   72          if not request.session.uid:\n   73:             dummy, request.uid = self.pool['ir.model.data'].get_object_reference(request.cr, openerp.SUPERUSER_ID, 'base', 'public_user')\n   74          else:\n   75              request.uid = request.session.uid\n   ..\n  147              cr = request.cr\n  148              m = request.registry.get('ir.module.module')\n  149:             ids = m.search(cr, openerp.SUPERUSER_ID, [('state', '=', 'installed'), ('name', '!=', 'web')], context=request.context)\n  150              installed = set(x['name'] for x in m.read(cr, 1, ids, ['name'], context=request.context))\n  151              if openerp.tools.config['test_enable']:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_mail_server.py:\n   32  import threading\n   33  \n   34: from openerp import SUPERUSER_ID\n   35  from openerp.osv import osv, fields\n   36  from openerp.tools.translate import _\n   ..\n  422          mail_server = None\n  423          if mail_server_id:\n  424:             mail_server = self.browse(cr, SUPERUSER_ID, mail_server_id)\n  425          elif not smtp_server:\n  426:             mail_server_ids = self.search(cr, SUPERUSER_ID, [], order='sequence', limit=1)\n  427              if mail_server_ids:\n  428:                 mail_server = self.browse(cr, SUPERUSER_ID, mail_server_ids[0])\n  429  \n  430          if mail_server:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_model.py:\n   27  \n   28  import openerp\n   29: from openerp import SUPERUSER_ID\n   30  from openerp import models, tools, api\n   31  from openerp.modules.registry import RegistryManager\n   ..\n  565          \"\"\" \n  566  \n  567:         if uid != SUPERUSER_ID and not self.pool['ir.model.access'].check_groups(cr, uid, \"base.group_system\"):\n  568              raise except_orm(_('Permission Denied'), (_('Administrator access is required to uninstall a module')))\n  569  \n  ...\n  626          \"\"\" \n  627  \n  628:         if uid != SUPERUSER_ID and not self.pool['ir.model.access'].check_groups(cr, uid, \"base.group_system\"):\n  629              raise except_orm(_('Permission Denied'), (_('Administrator access is required to uninstall a module')))\n  630  \n  ...\n  812  \n  813      def call_cache_clearing_methods(self, cr):\n  814:         self.invalidate_cache(cr, SUPERUSER_ID)\n  815          self.check.clear_cache(self)    # clear the cache of check function\n  816          for model, method in self.__cache_clearing_methods:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_qweb.py:\n 1200          content = None\n 1201          domain = [('url', '=', '/web/%s/%s/%s' % (type, self.xmlid, self.version))]\n 1202:         bundle = self.registry['ir.attachment'].search_read(self.cr, openerp.SUPERUSER_ID, domain, ['datas'], context=self.context)\n 1203          if bundle and bundle[0]['datas']:\n 1204              content = bundle[0]['datas'].decode('base64')\n ....\n 1209          url_prefix = '/web/%s/%s/' % (type, self.xmlid)\n 1210          # Invalidate previous caches\n 1211:         oids = ira.search(self.cr, openerp.SUPERUSER_ID, [('url', '=like', url_prefix + '%')], context=self.context)\n 1212          if oids:\n 1213:             ira.unlink(self.cr, openerp.SUPERUSER_ID, oids, context=self.context)\n 1214          url = url_prefix + self.version\n 1215:         ira.create(self.cr, openerp.SUPERUSER_ID, dict(\n 1216                      datas=content.encode('utf8').encode('base64'),\n 1217                      type='binary',\n ....\n 1317                      domain = [('type', '=', 'binary'), ('url', '=', self.url)]\n 1318                      ira = self.registry['ir.attachment']\n 1319:                     attach = ira.search_read(self.cr, openerp.SUPERUSER_ID, domain, fields, context=self.context)\n 1320                      self._ir_attach = attach[0]\n 1321                  except Exception:\n ....\n 1459              url = self.html_url % self.url\n 1460              domain = [('type', '=', 'binary'), ('url', '=', self.url)]\n 1461:             ira_id = ira.search(self.cr, openerp.SUPERUSER_ID, domain, context=self.context)\n 1462              if ira_id:\n 1463                  # TODO: update only if needed\n 1464:                 ira.write(self.cr, openerp.SUPERUSER_ID, [ira_id], {'datas': self.content}, context=self.context)\n 1465              else:\n 1466:                 ira.create(self.cr, openerp.SUPERUSER_ID, dict(\n 1467                      datas=self.content.encode('utf8').encode('base64'),\n 1468                      mimetype='text/css',\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\ir\\ir_rule.py:\n   21  import time\n   22  \n   23: from openerp import SUPERUSER_ID\n   24  from openerp import tools\n   25  from openerp.osv import fields, osv, expression\n   ..\n   43          \"\"\"Returns a dictionary to use as evaluation context for\n   44             ir.rule domains.\"\"\"\n   45:         return {'user': self.pool.get('res.users').browse(cr, SUPERUSER_ID, uid),\n   46                  'time':time}\n   47  \n   ..\n  109              raise ValueError('Invalid mode: %r' % (mode,))\n  110  \n  111:         if uid == SUPERUSER_ID:\n  112              return None\n  113          cr.execute(\"\"\"SELECT r.id\n  ...\n  123          if rule_ids:\n  124              # browse user as super-admin root to avoid access errors!\n  125:             user = self.pool.get('res.users').browse(cr, SUPERUSER_ID, uid)\n  126              global_domains = []                 # list of domains\n  127              group_domains = {}                  # map: group -> list of domains\n  128:             for rule in self.browse(cr, SUPERUSER_ID, rule_ids):\n  129                  # read 'domain' as UID to have the correct eval context for the rule.\n  130                  rule_domain = self.read(cr, uid, [rule.id], ['domain'])[0]['domain']\n  ...\n  150          dom = self._compute_domain(cr, uid, model_name, mode)\n  151          if dom:\n  152:             # _where_calc is called as superuser. This means that rules can\n  153              # involve objects on which the real uid has no acces rights.\n  154              # This means also there is no implicit restriction (e.g. an object\n  155              # references another object the user can't see).\n  156:             query = self.pool[model_name]._where_calc(cr, SUPERUSER_ID, dom, active_test=False)\n  157              return query.where_clause, query.where_clause_params, query.tables\n  158          return [], [], ['\"' + self.pool[model_name]._table + '\"']\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\res\\res_company.py:\n   23  import re\n   24  import openerp\n   25: from openerp import SUPERUSER_ID, tools\n   26  from openerp.osv import fields, osv\n   27  from openerp.tools.translate import _\n   ..\n   83              result[company.id] = {}.fromkeys(field_names, False)\n   84              if company.partner_id:\n   85:                 address_data = part_obj.address_get(cr, openerp.SUPERUSER_ID, [company.partner_id.id], adr_pref=['default'])\n   86                  if address_data['default']:\n   87:                     address = part_obj.read(cr, openerp.SUPERUSER_ID, [address_data['default']], field_names, context=context)[0]\n   88                      for field in field_names:\n   89                          result[company.id][field] = address[field] or False\n   ..\n  213          context = dict(context or {})\n  214          if context.pop('user_preference', None):\n  215:             # We browse as superuser. Otherwise, the user would be able to\n  216              # select only the currently visible companies (according to rules,\n  217              # which are probably to allow to see the child companies) even if\n  218              # she belongs to some other companies.\n  219:             user = self.pool.get('res.users').browse(cr, SUPERUSER_ID, uid, context=context)\n  220              cmp_ids = list(set([user.company_id.id] + [cmp.id for cmp in user.company_ids]))\n  221:             uid = SUPERUSER_ID\n  222              args = (args or []) + [('id', 'in', cmp_ids)]\n  223          return super(res_company, self).name_search(cr, uid, name=name, args=args, operator=operator, context=context, limit=limit)\n  ...\n  236  \n  237          ids = proxy.search(cr, uid, args, context=context)\n  238:         user = self.pool.get('res.users').browse(cr, SUPERUSER_ID, uid, context=context)\n  239          for rule in proxy.browse(cr, uid, ids, context):\n  240              if eval(rule.expression, {'context': context, 'user': user}):\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\res\\res_config.py:\n   24  \n   25  import openerp\n   26: from openerp import SUPERUSER_ID\n   27  from openerp.osv import osv, fields\n   28  from openerp.tools import ustr\n   ..\n  538  \n  539          context = dict(context, active_test=False)\n  540:         if uid != SUPERUSER_ID and not self.pool['res.users'].has_group(cr, uid, 'base.group_erp_manager'):\n  541              raise openerp.exceptions.AccessError(_(\"Only administrators can change the settings\"))\n  542  \n  ...\n  551          # default values fields\n  552          for name, model, field in classified['default']:\n  553:             ir_values.set_default(cr, SUPERUSER_ID, model, field, config[name])\n  554  \n  555          # group fields: modify group / implied groups\n  ...\n  697              ref_type, ref = item.split(':')\n  698              if ref_type == 'menu':\n  699:                 values[item], action_id = res_config_obj.get_option_path(cr, SUPERUSER_ID, ref, context=context)\n  700              elif ref_type == 'field':\n  701:                 values[item] = res_config_obj.get_option_name(cr, SUPERUSER_ID, ref, context=context)\n  702  \n  703          # 3/ substitute and return the result\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\res\\res_users.py:\n   29  \n   30  import openerp\n   31: from openerp import SUPERUSER_ID, models\n   32  from openerp import tools\n   33  import openerp.exceptions\n   ..\n  252          result = []\n  253          try:\n  254:             dummy,group_id = dataobj.get_object_reference(cr, SUPERUSER_ID, 'base', 'group_user')\n  255              result.append(group_id)\n  256:             dummy,group_id = dataobj.get_object_reference(cr, SUPERUSER_ID, 'base', 'group_partner_manager')\n  257              result.append(group_id)\n  258          except ValueError:\n  ...\n  291              else:\n  292                  # safe fields only, so we read as super-user to bypass access rights\n  293:                 uid = SUPERUSER_ID\n  294  \n  295          result = super(res_users, self).read(cr, uid, ids, fields=fields, context=context, load=load)\n  ...\n  319              else:\n  320                  if 'company_id' in values:\n  321:                     user = self.browse(cr, SUPERUSER_ID, uid, context=context)\n  322                      if not (values['company_id'] in user.company_ids.ids):\n  323                          del values['company_id']\n  ...\n  376      @tools.ormcache(skiparg=2)\n  377      def context_get(self, cr, uid, context=None):\n  378:         user = self.browse(cr, SUPERUSER_ID, uid, context)\n  379          result = {}\n  380          for k in self._fields:\n  ...\n  394      def action_get(self, cr, uid, context=None):\n  395          dataobj = self.pool['ir.model.data']\n  396:         data_id = dataobj._get_id(cr, SUPERUSER_ID, 'base', 'action_res_users_my')\n  397          return dataobj.browse(cr, uid, data_id, context=context).res_id\n  398  \n  ...\n  405      def check_credentials(self, cr, uid, password):\n  406          \"\"\" Override this method to plug additional authentication methods\"\"\"\n  407:         res = self.search(cr, SUPERUSER_ID, [('id','=',uid),('password','=',password)])\n  408          if not res:\n  409              raise openerp.exceptions.AccessDenied()\n  ...\n  421              cr.autocommit(True)\n  422              # check if user exists\n  423:             res = self.search(cr, SUPERUSER_ID, [('login','=',login)])\n  424              if res:\n  425                  user_id = res[0]\n  ...\n  463          \"\"\"\n  464          uid = self._login(db, login, password)\n  465:         if uid == openerp.SUPERUSER_ID:\n  466              # Successfully logged in as admin!\n  467              # Attempt to guess the web base url...\n  ...\n  587  \n  588          res = {}\n  589:         for g in self.browse(cr, SUPERUSER_ID, ids, context):\n  590              res[g.id] = map(int, computed_set(g))\n  591          return res\n  ...\n  734              context = dict(context or {})\n  735              context.update(self.pool['res.users'].context_get(cr, uid))\n  736:         view = self.pool['ir.model.data'].xmlid_to_object(cr, SUPERUSER_ID, 'base.user_groups_view', context=context)\n  737          if view and view.exists() and view._name == 'ir.ui.view':\n  738              xml1, xml2 = [], []\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base\\tests\\test_uninstall.py:\n    4  \n    5  import openerp\n    6: from openerp import SUPERUSER_ID\n    7  import common\n    8  \n    .\n   27      cr = cursor()\n   28      model = registry(model_name)\n   29:     record_ids = model.search(cr, SUPERUSER_ID, domain, {})\n   30      cr.close()\n   31      return record_ids\n   ..\n   34      ir_module_module = registry('ir.module.module')\n   35      cr = cursor()\n   36:     module_ids = ir_module_module.search(cr, SUPERUSER_ID,\n   37          [('name', '=', module_name)], {})\n   38      assert len(module_ids) == 1\n   39:     ir_module_module.button_install(cr, SUPERUSER_ID, module_ids, {})\n   40      cr.commit()\n   41      cr.close()\n   ..\n   45      ir_module_module = registry('ir.module.module')\n   46      cr = cursor()\n   47:     module_ids = ir_module_module.search(cr, SUPERUSER_ID,\n   48          [('name', '=', module_name)], {})\n   49      assert len(module_ids) == 1\n   50:     ir_module_module.button_uninstall(cr, SUPERUSER_ID, module_ids, {})\n   51      cr.commit()\n   52      cr.close()\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_action_rule\\base_action_rule.py:\n   25  \n   26  import openerp\n   27: from openerp import SUPERUSER_ID\n   28  from openerp.osv import fields, osv\n   29  from openerp.tools import DEFAULT_SERVER_DATETIME_FORMAT\n   ..\n  228          updated = False\n  229          if ids is None:\n  230:             ids = self.search(cr, SUPERUSER_ID, [])\n  231:         for action_rule in self.browse(cr, SUPERUSER_ID, ids):\n  232              model = action_rule.model_id.model\n  233              model_obj = self.pool.get(model)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_action_rule\\tests\\base_action_rule_test.py:\n    1: from openerp import SUPERUSER_ID\n    2  from openerp.tests import common\n    3  from .. import test_models\n    .\n   10          cr, uid = self.cr, self.uid\n   11          self.demo = self.registry('ir.model.data').get_object(cr, uid, 'base', 'user_demo').id\n   12:         self.admin = SUPERUSER_ID\n   13          self.model = self.registry('base.action.rule.lead.test')\n   14          self.base_action_rule = self.registry('base.action.rule')\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_gengo\\controller\\gengo_callback.py:\n    2  \n    3  import openerp\n    4: from openerp import SUPERUSER_ID\n    5  from openerp.addons.web import http\n    6  from openerp.addons.web.http import request\n    .\n   15      def get_gengo_key(self, cr):\n   16          icp = request.registry['ir.config_parameter']\n   17:         return icp.get_param(cr, SUPERUSER_ID, request.registry['base.gengo.translations'].GENGO_KEY, default=\"\")\n   18  \n   19      @http.route('/website/gengo_callback', type='http', auth='none')\n   20      def gengo_callback(self, **post):\n   21          print \"IN website/gengo_callback\"\n   22:         cr, uid, context = request.cr, openerp.SUPERUSER_ID, request.context\n   23          translation_pool = request.registry['ir.translation']\n   24          if post and post.get('job') and post.get('pgk'):\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\base_gengo\\wizard\\base_gengo_translations.py:\n   26  \n   27  from openerp.osv import osv, fields\n   28: from openerp import tools, SUPERUSER_ID\n   29  from openerp.tools.translate import _\n   30  \n   ..\n   58      def init(self, cr):\n   59          icp = self.pool['ir.config_parameter']\n   60:         if not icp.get_param(cr, SUPERUSER_ID, self.GENGO_KEY, default=None):\n   61:             icp.set_param(cr, SUPERUSER_ID, self.GENGO_KEY, str(uuid.uuid4()), groups=self.GROUPS)\n   62  \n   63      def get_gengo_key(self, cr):\n   64          icp = self.pool['ir.config_parameter']\n   65:         return icp.get_param(cr, SUPERUSER_ID, self.GENGO_KEY, default=\"Undefined\")\n   66  \n   67      def gengo_authentication(self, cr, uid, context=None):\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\bus\\bus.py:\n   41          timeout_ago = datetime.datetime.utcnow()-datetime.timedelta(seconds=TIMEOUT*2)\n   42          domain = [('create_date', '<', timeout_ago.strftime(DEFAULT_SERVER_DATETIME_FORMAT))]\n   43:         ids  = self.search(cr, openerp.SUPERUSER_ID, domain)\n   44:         self.unlink(cr, openerp.SUPERUSER_ID, ids)\n   45  \n   46      def sendmany(self, cr, uid, notifications):\n   ..\n   52                  \"message\" : json_dump(message)\n   53              }\n   54:             self.pool['bus.bus'].create(cr, openerp.SUPERUSER_ID, values)\n   55              cr.commit()\n   56              if random.random() < 0.01:\n   ..\n   73          channels = [json_dump(c) for c in channels]\n   74          domain.append(('channel','in',channels))\n   75:         notifications = self.search_read(cr, openerp.SUPERUSER_ID, domain)\n   76          return [{\"id\":notif[\"id\"], \"channel\": simplejson.loads(notif[\"channel\"]), \"message\":simplejson.loads(notif[\"message\"])} for notif in notifications]\n   77  \n   ..\n   94          # immediatly returns if past notifications exist\n   95          with registry.cursor() as cr:\n   96:             notifications = registry['bus.bus'].poll(cr, openerp.SUPERUSER_ID, channels, last)\n   97          # or wait for future ones\n   98          if not notifications:\n   ..\n  103                  event.wait(timeout=timeout)\n  104                  with registry.cursor() as cr:\n  105:                     notifications = registry['bus.bus'].poll(cr, openerp.SUPERUSER_ID, channels, last)\n  106              except Exception:\n  107                  # timeout\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\calendar\\calendar.py:\n   14  from dateutil.relativedelta import relativedelta\n   15  from openerp import api\n   16: from openerp import tools, SUPERUSER_ID\n   17  from openerp.osv import fields, osv\n   18  from openerp.tools import DEFAULT_SERVER_DATE_FORMAT, DEFAULT_SERVER_DATETIME_FORMAT\n   ..\n  763          tz = context.get('tz', False)\n  764          if not tz:  # tz can have a value False, so dont do it in the default value of get !\n  765:             context['tz'] = self.pool.get('res.users').read(cr, SUPERUSER_ID, uid, ['tz'])['tz']\n  766              tz = context['tz']\n  767          tz = tools.ustr(tz).encode('utf-8') # make safe for str{p,f}time()\n  ...\n  814              ids = [ids]\n  815  \n  816:         #read these fields as SUPERUSER because if the record is private a normal search could raise an error\n  817:         events = self.read(cr, SUPERUSER_ID, ids,\n  818                             ['id', 'byday', 'recurrency', 'final_date', 'rrule_type', 'month_by',\n  819                              'interval', 'count', 'end_type', 'mo', 'tu', 'we', 'th', 'fr', 'sa',\n  ...\n 1767          error_message = False\n 1768          with registry.cursor() as cr:\n 1769:             attendee_id = attendee_pool.search(cr, openerp.SUPERUSER_ID, [('access_token', '=', token)])\n 1770              if not attendee_id:\n 1771                  error_message = \"\"\"Invalid Invitation Token.\"\"\"\n 1772              elif request.session.uid and request.session.login != 'anonymous':\n 1773                   # if valid session but user is not match\n 1774:                 attendee = attendee_pool.browse(cr, openerp.SUPERUSER_ID, attendee_id[0])\n 1775:                 user = registry.get('res.users').browse(cr, openerp.SUPERUSER_ID, request.session.uid)\n 1776                  if attendee.partner_id.id != user.partner_id.id:\n 1777                      error_message = \"\"\"Invitation cannot be forwarded via email. This event/meeting belongs to %s and you are logged in as %s. Please ask organizer to add you.\"\"\" % (attendee.email, user.email)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\calendar\\controllers\\main.py:\n   14          attendee_pool = registry.get('calendar.attendee')\n   15          with registry.cursor() as cr:\n   16:             attendee_id = attendee_pool.search(cr, openerp.SUPERUSER_ID, [('access_token', '=', token), ('state', '!=', 'accepted')])\n   17              if attendee_id:\n   18:                 attendee_pool.do_accept(cr, openerp.SUPERUSER_ID, attendee_id)\n   19          return self.view(db, token, action, id, view='form')\n   20  \n   ..\n   24          attendee_pool = registry.get('calendar.attendee')\n   25          with registry.cursor() as cr:\n   26:             attendee_id = attendee_pool.search(cr, openerp.SUPERUSER_ID, [('access_token', '=', token), ('state', '!=', 'declined')])\n   27              if attendee_id:\n   28:                 attendee_pool.do_decline(cr, openerp.SUPERUSER_ID, attendee_id)\n   29          return self.view(db, token, action, id, view='form')\n   30  \n   ..\n   36          partner_pool = registry.get('res.partner')\n   37          with registry.cursor() as cr:\n   38:             attendee = attendee_pool.search_read(cr, openerp.SUPERUSER_ID, [('access_token', '=', token)], [])\n   39  \n   40              if attendee and attendee[0] and attendee[0].get('partner_id'):\n   41                  partner_id = int(attendee[0].get('partner_id')[0])\n   42:                 tz = partner_pool.read(cr, openerp.SUPERUSER_ID, partner_id, ['tz'])['tz']\n   43              else:\n   44                  tz = False\n   45  \n   46:             attendee_data = meeting_pool.get_attendee(cr, openerp.SUPERUSER_ID, id, dict(tz=tz))\n   47  \n   48          if attendee:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\base_partner_merge.py:\n  220                  return\n  221              domain = [(field_model, '=', 'res.partner'), (field_id, '=', src.id)]\n  222:             ids = proxy.search(cr, openerp.SUPERUSER_ID, domain, context=context)\n  223              try:\n  224                  with mute_logger('openerp.sql_db'), cr.savepoint():\n  225:                     return proxy.write(cr, openerp.SUPERUSER_ID, ids, {field_id: dst_partner.id}, context=context)\n  226              except psycopg2.Error:\n  227                  # updating fails, most likely due to a violated unique constraint\n  228                  # keeping record with nonexistent partner_id is useless, better delete it\n  229:                 return proxy.unlink(cr, openerp.SUPERUSER_ID, ids, context=context)\n  230  \n  231          update_records = functools.partial(update_records, context=context)\n  ...\n  241          proxy = self.pool['ir.model.fields']\n  242          domain = [('ttype', '=', 'reference')]\n  243:         record_ids = proxy.search(cr, openerp.SUPERUSER_ID, domain, context=context)\n  244  \n  245:         for record in proxy.browse(cr, openerp.SUPERUSER_ID, record_ids, context=context):\n  246              try:\n  247                  proxy_model = self.pool[record.model]\n  ...\n  258                      (record.name, '=', 'res.partner,%d' % partner.id)\n  259                  ]\n  260:                 model_ids = proxy_model.search(cr, openerp.SUPERUSER_ID, domain, context=context)\n  261                  values = {\n  262                      record.name: 'res.partner,%d' % dst_partner.id,\n  263                  }\n  264:                 proxy_model.write(cr, openerp.SUPERUSER_ID, model_ids, values, context=context)\n  265  \n  266      def _update_values(self, cr, uid, src_partners, dst_partner, context=None):\n  ...\n  301              raise osv.except_osv(_('Error'), _(\"For safety reasons, you cannot merge more than 3 contacts together. You can re-open the wizard several times if needed.\"))\n  302  \n  303:         if openerp.SUPERUSER_ID != uid and len(set(partner.email for partner in proxy.browse(cr, uid, partner_ids, context=context))) > 1:\n  304              raise osv.except_osv(_('Error'), _(\"All contacts must have the same email. Only the Administrator can merge contacts with different emails.\"))\n  305  \n  ...\n  312          _logger.info(\"dst_partner: %s\", dst_partner.id)\n  313  \n  314:         if openerp.SUPERUSER_ID != uid and self._model_is_installed(cr, uid, 'account.move.line', context=context) and \\\n  315:                 self.pool.get('account.move.line').search(cr, openerp.SUPERUSER_ID, [('partner_id', 'in', [partner.id for partner in src_partners])], context=context):\n  316              raise osv.except_osv(_('Error'), _(\"Only the destination contact may be linked to existing Journal Items. Please ask the Administrator if you need to merge several contacts linked to existing Journal Items.\"))\n  317  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\crm_lead.py:\n   25  \n   26  import openerp\n   27: from openerp import SUPERUSER_ID\n   28  from openerp import tools\n   29  from openerp.addons.base.res.res_partner import format_address\n   ..\n  684          self.write(cr, uid, [highest.id], merged_data, context=context)\n  685          # Delete tail opportunities \n  686:         # We use the SUPERUSER to avoid access rights issues because as the user had the rights to see the records it should be safe to do so\n  687:         self.unlink(cr, SUPERUSER_ID, [x.id for x in tail_opportunities], context=context)\n  688  \n  689          return highest.id\n  ...\n  978      def message_get_reply_to(self, cr, uid, ids, context=None):\n  979          \"\"\" Override to get the reply_to of the parent project. \"\"\"\n  980:         leads = self.browse(cr, SUPERUSER_ID, ids, context=context)\n  981          section_ids = set([lead.section_id.id for lead in leads if lead.section_id])\n  982          aliases = self.pool['crm.case.section'].message_get_reply_to(cr, uid, list(section_ids), context=context)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm\\res_config.py:\n   20  ##############################################################################\n   21  \n   22: from openerp import SUPERUSER_ID\n   23  from openerp.osv import fields, osv\n   24  \n   ..\n   46  \n   47      _defaults = {\n   48:         'alias_domain': lambda self, cr, uid, context: self.pool['mail.alias']._get_alias_domain(cr, SUPERUSER_ID, [1], None, None)[1],\n   49      }\n   50  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\crm_partner_assign\\wizard\\crm_channel_interested.py:\n   23  from openerp.osv import fields, osv\n   24  from openerp.tools.translate import _\n   25: from openerp import SUPERUSER_ID\n   26  \n   27  \n   ..\n   53              values = {'partner_assigned_id': False}\n   54              user = self.pool.get('res.users').browse(cr, uid, uid, context=context)\n   55:             partner_ids = self.pool.get('res.partner').search(cr, SUPERUSER_ID, [('id', 'child_of', user.partner_id.commercial_partner_id.id)], context=context)\n   56:             lead_obj.message_unsubscribe(cr, SUPERUSER_ID, context.get('active_ids', []), partner_ids, context=None)\n   57              try:\n   58                  stage_id = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'crm_partner_assign', stage)[1]\n   ..\n   66              lead_obj.message_post(cr, uid, active_id, body=message, subtype=\"mail.mt_comment\", context=context)\n   67          if values:\n   68:             lead_obj.write(cr, SUPERUSER_ID, context.get('active_ids', []), values)\n   69          if wizard.interested:\n   70              for lead in lead_obj.browse(cr, uid, context.get('active_ids', []), context=context):\n   71:                 lead_obj.convert_opportunity(cr, SUPERUSER_ID, [lead.id], lead.partner_id and lead.partner_id.id or None, context=None)\n   72          return {\n   73              'type': 'ir.actions.act_window_close',\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\cron_run_manually\\ir_cron.py:\n   19  \n   20  import logging\n   21: from openerp import _, api, exceptions, models, SUPERUSER_ID\n   22  from openerp.tools.safe_eval import safe_eval\n   23  from psycopg2 import OperationalError\n   ..\n   33          \"\"\"Run a job from the cron form view.\"\"\"\n   34  \n   35:         if self.env.uid != SUPERUSER_ID and (not self.active or\n   36                                               not self.numbercall):\n   37              raise exceptions.AccessError(\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\decimal_precision\\decimal_precision.py:\n   21  \n   22  import openerp\n   23: from openerp import SUPERUSER_ID\n   24  from openerp import tools\n   25  from openerp.osv import orm, fields\n   ..\n   49          \"\"\"clear cache and update models. Notify other workers to restart their registry.\"\"\"\n   50          self.precision_get.clear_cache(self)\n   51:         env = openerp.api.Environment(cr, SUPERUSER_ID, {})\n   52          for model in self.pool.values():\n   53              for field in model._fields.values():\n   ..\n   75      def change_digit(cr):\n   76          decimal_precision = openerp.registry(cr.dbname)['decimal.precision']\n   77:         res = decimal_precision.precision_get(cr, SUPERUSER_ID, application)\n   78          return (16, res)\n   79      return change_digit\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\document\\document.py:\n   33  import openerp\n   34  from openerp import tools\n   35: from openerp import SUPERUSER_ID\n   36  from openerp.osv import fields, osv\n   37  from openerp.osv.orm import except_orm\n   ..\n  314          ressource_id=vals.get('ressource_id',0)\n  315          if op=='write':\n  316:             for directory in self.browse(cr, SUPERUSER_ID, ids):\n  317                  if not name:\n  318                      name=directory.name\n  ...\n  328                      return False\n  329          if op=='create':\n  330:             res = self.search(cr, SUPERUSER_ID, [('name','=',name),('parent_id','=',parent_id),('ressource_parent_type_id','=',ressource_parent_type_id),('ressource_id','=',ressource_id)])\n  331              if len(res):\n  332                  return False\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\edi\\models\\edi.py:\n  180  \n  181      # private method, not RPC-exposed as it creates ir.model.data entries as\n  182:     # SUPERUSER based on its parameters\n  183      def _edi_external_id(self, cr, uid, record, existing_id=None, existing_module=None,\n  184                          context=None):\n  ...\n  221              _logger.debug(\"%s: Generating new external ID `%s.%s` for %r.\", self._name,\n  222                            module, ext_id, record)\n  223:             ir_model_data.create(cr, openerp.SUPERUSER_ID,\n  224                                   {'name': ext_id,\n  225                                    'model': record._name,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\edi\\models\\res_currency.py:\n   22  from openerp.osv import osv \n   23  from edi import EDIMixin\n   24: from openerp import SUPERUSER_ID\n   25  \n   26  RES_CURRENCY_EDI_STRUCT = {\n   ..\n   56  \n   57          # nothing found, create a new one\n   58:         currency_id = self.create(cr, SUPERUSER_ID, {'name': edi_document['code'],\n   59                                                       'symbol': edi_document['symbol']}, context=context)\n   60          rate = edi_document.pop('rate')\n   61          if rate:\n   62:             self.pool.get('res.currency.rate').create(cr, SUPERUSER_ID, {'currency_id': currency_id,\n   63                                                                           'rate': rate}, context=context)\n   64          return currency_id\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\edi\\models\\res_partner.py:\n   23  from openerp.osv import osv\n   24  from edi import EDIMixin\n   25: from openerp import SUPERUSER_ID\n   26  _logger = logging.getLogger(__name__)\n   27  \n   ..\n   66              _logger.info('Normal bank account type is missing, creating '\n   67                                                        'a generic bank account type for EDI.')\n   68:             self.res_partner_bank_type.create(cr, SUPERUSER_ID, {'name': label,\n   69                                                                   'code': label})\n   70          return code\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\email_template\\email_template.py:\n   29  \n   30  import openerp\n   31: from openerp import SUPERUSER_ID\n   32  from openerp.osv import osv, fields\n   33  from openerp import tools, api\n   ..\n   41      context = dict(context or {})\n   42      if tz:\n   43:         context['tz'] = tz or pool.get('res.users').read(cr, SUPERUSER_ID, uid, ['tz'])['tz'] or \"UTC\"\n   44      timestamp = datetime.datetime.strptime(dt, tools.DEFAULT_SERVER_DATETIME_FORMAT)\n   45  \n   ..\n  317              res_id = data_obj.browse(cr, uid, model_data_id, context=context).res_id\n  318              button_name = _('Send Mail (%s)') % template.name\n  319:             act_id = action_obj.create(cr, SUPERUSER_ID, {\n  320                   'name': button_name,\n  321                   'type': 'ir.actions.act_window',\n  ...\n  329                   'auto_refresh':1\n  330              }, context)\n  331:             ir_values_id = self.pool.get('ir.values').create(cr, SUPERUSER_ID, {\n  332                   'name': button_name,\n  333                   'model': src_obj,\n  ...\n  348              try:\n  349                  if template.ref_ir_act_window:\n  350:                     self.pool.get('ir.actions.act_window').unlink(cr, SUPERUSER_ID, template.ref_ir_act_window.id, context)\n  351                  if template.ref_ir_value:\n  352                      ir_values_obj = self.pool.get('ir.values')\n  353:                     ir_values_obj.unlink(cr, SUPERUSER_ID, template.ref_ir_value.id, context)\n  354              except Exception:\n  355                  raise osv.except_osv(_(\"Warning\"), _(\"Deletion of the action record failed.\"))\n  ...\n  441                  # placeholders could generate '', 3, 2 due to some empty field values\n  442                  tpl_partner_ids = [int(pid) for pid in partner_to.split(',') if pid]\n  443:                 partner_ids += self.pool['res.partner'].exists(cr, SUPERUSER_ID, tpl_partner_ids, context=context)\n  444              results[res_id]['partner_ids'] = partner_ids\n  445          return results\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\event\\event.py:\n  254          num_of_seats = int(self._context.get('ticket', 1))\n  255          regs = self.registration_ids.filtered(lambda reg: reg.user_id == user)\n  256:         # the subscription is done as SUPERUSER_ID because in case we share the\n  257          # kanban view, we want anyone to be able to subscribe\n  258          if not regs:\n  ...\n  271      def unsubscribe_to_event(self):\n  272          \"\"\" Unsubscribe the current user from a given event \"\"\"\n  273:         # the unsubscription is done as SUPERUSER_ID because in case we share\n  274          # the kanban view, we want anyone to be able to unsubscribe\n  275          user = self.env.user\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\gamification\\models\\badge.py:\n   20  ##############################################################################\n   21  \n   22: from openerp import SUPERUSER_ID\n   23  from openerp.osv import fields, osv\n   24  from openerp.tools import DEFAULT_SERVER_DATE_FORMAT as DF\n   ..\n  230          if not\n  231  \n  232:         Do not check for SUPERUSER_ID\n  233          \"\"\"\n  234          status_code = self._can_grant_badge(cr, uid, badge_id, context=context)\n  ...\n  254          :return: integer representing the permission.\n  255          \"\"\"\n  256:         if uid == SUPERUSER_ID:\n  257              return self.CAN_GRANT\n  258  \n  ...\n  288                  'badge_id': res_id,\n  289              }\n  290:             badge_user_obj.create(cr, SUPERUSER_ID, values, context=context)\n  291          return True\n  292  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\gamification\\models\\challenge.py:\n   20  ##############################################################################\n   21  \n   22: from openerp import SUPERUSER_ID\n   23  from openerp.osv import fields, osv\n   24  from openerp.tools import ustr, DEFAULT_SERVER_DATE_FORMAT as DF\n   ..\n  680          user = self.pool.get('res.users').browse(cr, uid, user_id, context=context)\n  681          message = \"%s has joined the challenge\" % user.name\n  682:         self.message_post(cr, SUPERUSER_ID, challenge_ids, body=message, context=context)\n  683:         self.write(cr, SUPERUSER_ID, challenge_ids, {'invited_user_ids': [(3, user_id)], 'user_ids': [(4, user_id)]}, context=context)\n  684:         return self._generate_goals_from_challenge(cr, SUPERUSER_ID, challenge_ids, context=context)\n  685  \n  686      # TODO in trunk, remove unused parameter user_id\n  ...\n  692          user = self.pool.get('res.users').browse(cr, uid, user_id, context=context)\n  693          message = \"%s has refused the challenge\" % user.name\n  694:         self.message_post(cr, SUPERUSER_ID, challenge_ids, body=message, context=context)\n  695:         return self.write(cr, SUPERUSER_ID, challenge_ids, {'invited_user_ids': (3, user_id)}, context=context)\n  696  \n  697      def reply_challenge_wizard(self, cr, uid, challenge_id, context=None):\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\gamification\\models\\goal.py:\n   20  ##############################################################################\n   21  \n   22: from openerp import SUPERUSER_ID\n   23  from openerp.osv import fields, osv\n   24  from openerp.tools import DEFAULT_SERVER_DATE_FORMAT as DF\n   ..\n  134      def _check_domain_validity(self, cr, uid, ids, context=None):\n  135          # take admin as should always be present\n  136:         superuser = self.pool['res.users'].browse(cr, uid, SUPERUSER_ID, context=context)\n  137          for definition in self.browse(cr, uid, ids, context=context):\n  138              if definition.computation_mode not in ('count', 'sum'):\n  ...\n  141              obj = self.pool[definition.model_id.model]\n  142              try:\n  143:                 domain = safe_eval(definition.domain, {'user': superuser})\n  144                  # demmy search to make sure the domain is valid\n  145                  obj.search(cr, uid, domain, context=context, count=True)\n  ...\n  463  \n  464                  if goal.challenge_id and goal.challenge_id.report_message_frequency == 'onchange':\n  465:                     self.pool.get('gamification.challenge').report_progress(cr, SUPERUSER_ID, goal.challenge_id, users=[goal.user_id], context=context)\n  466          return result\n  467  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\google_account\\google_account.py:\n    4  from openerp.http import request\n    5  from openerp.osv import osv\n    6: from openerp import SUPERUSER_ID\n    7  from openerp.tools.translate import _\n    8  from datetime import datetime\n    .\n   22      def generate_refresh_token(self, cr, uid, service, authorization_code, context=None):\n   23          ir_config = self.pool['ir.config_parameter']\n   24:         client_id = ir_config.get_param(cr, SUPERUSER_ID, 'google_%s_client_id' % service)\n   25:         client_secret = ir_config.get_param(cr, SUPERUSER_ID, 'google_%s_client_secret' % service)\n   26:         redirect_uri = ir_config.get_param(cr, SUPERUSER_ID, 'google_redirect_uri')\n   27  \n   28          #Get the Refresh Token From Google And store it in ir.config_parameter\n   ..\n   44          params = {\n   45              'scope': scope,\n   46:             'redirect_uri': ir_config.get_param(cr, SUPERUSER_ID, 'google_redirect_uri'),\n   47:             'client_id': ir_config.get_param(cr, SUPERUSER_ID, 'google_%s_client_id' % service),\n   48              'response_type': 'code',\n   49:             'client_id': ir_config.get_param(cr, SUPERUSER_ID, 'google_%s_client_id' % service),\n   50          }\n   51          uri = 'https://accounts.google.com/o/oauth2/auth?%s' % werkzeug.url_encode(params)\n   ..\n  173  \n  174      def get_client_id(self, cr, uid, service, context=None):\n  175:         return self.pool.get('ir.config_parameter').get_param(cr, SUPERUSER_ID, 'google_%s_client_id' % (service,), default=False, context=context)\n  176  \n  177      def get_client_secret(self, cr, uid, service, context=None):\n  178:         return self.pool.get('ir.config_parameter').get_param(cr, SUPERUSER_ID, 'google_%s_client_secret' % (service,), default=False, context=context)\n  179  \n  180      def get_uri_oauth(self, a=''):  # a = optional action\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\google_calendar\\google_calendar.py:\n    7  import openerp\n    8  from openerp import tools\n    9: from openerp import SUPERUSER_ID\n   10  from openerp.tools import DEFAULT_SERVER_DATE_FORMAT, DEFAULT_SERVER_DATETIME_FORMAT, exception_to_unicode\n   11  \n   ..\n  484  \n  485      def remove_references(self, cr, uid, context=None):\n  486:         current_user = self.pool['res.users'].browse(cr, SUPERUSER_ID, uid, context=context)\n  487          reset_data = {\n  488              'google_calendar_rtoken': False,\n  ...\n  531  \n  532          user_to_sync = ids and ids[0] or uid\n  533:         current_user = self.pool['res.users'].browse(cr, SUPERUSER_ID, user_to_sync, context=context)\n  534  \n  535          st, current_google, ask_time = self.get_calendar_primary_id(cr, uid, context=context)\n  ...\n  886          vals['google_%s_token' % self.STR_SERVICE] = all_token.get('access_token')\n  887  \n  888:         self.pool['res.users'].write(cr, SUPERUSER_ID, uid, vals, context=context)\n  889  \n  890      def need_authorize(self, cr, uid, context=None):\n  ...\n  911          vals['google_%s_token_validity' % self.STR_SERVICE] = datetime.now() + timedelta(seconds=all_token.get('expires_in'))\n  912          vals['google_%s_token' % self.STR_SERVICE] = all_token.get('access_token')\n  913:         self.pool['res.users'].write(cr, SUPERUSER_ID, uid, vals, context=context)\n  914  \n  915      def get_minTime(self, cr, uid, context=None):\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\google_drive\\google_drive.py:\n   20  import logging\n   21  \n   22: from openerp import SUPERUSER_ID\n   23  from openerp.osv import fields, osv\n   24  from openerp.tools.translate import _\n   ..\n   38  \n   39      def get_google_drive_url(self, cr, uid, config_id, res_id, template_id, context=None):\n   40:         config = self.browse(cr, SUPERUSER_ID, config_id, context=context)\n   41          model = config.model_id\n   42          filter_name = config.filter_id and config.filter_id.name or False\n   ..\n   61      def get_access_token(self, cr, uid, scope=None, context=None):\n   62          ir_config = self.pool['ir.config_parameter']\n   63:         google_drive_refresh_token = ir_config.get_param(cr, SUPERUSER_ID, 'google_drive_refresh_token')\n   64          user_is_admin = self.pool['res.users'].has_group(cr, uid, 'base.group_erp_manager')\n   65          if not google_drive_refresh_token:\n   ..\n   70              else:\n   71                  raise osv.except_osv(_('Error!'), _(\"Google Drive is not yet configured. Please contact your administrator.\"))\n   72:         google_drive_client_id = ir_config.get_param(cr, SUPERUSER_ID, 'google_drive_client_id')\n   73:         google_drive_client_secret = ir_config.get_param(cr, SUPERUSER_ID, 'google_drive_client_secret')\n   74          #For Getting New Access Token With help of old Refresh Token\n   75  \n   ..\n   95      def copy_doc(self, cr, uid, res_id, template_id, name_gdocs, res_model, context=None):\n   96          ir_config = self.pool['ir.config_parameter']\n   97:         google_web_base_url = ir_config.get_param(cr, SUPERUSER_ID, 'web.base.url')\n   98          access_token = self.get_access_token(cr, uid, context=context)\n   99          # Copy template in to drive with help of new access token\n  ...\n  192      def _client_id_get(self, cr, uid, ids, name, arg, context=None):\n  193          result = {}\n  194:         client_id = self.pool['ir.config_parameter'].get_param(cr, SUPERUSER_ID, 'google_drive_client_id')\n  195          for config_id in ids:\n  196              result[config_id] = client_id\n  ...\n  246      _defaults = {\n  247          'google_drive_uri': lambda s, cr, uid, c: s.pool['google.service']._get_google_token_uri(cr, uid, 'drive', scope=s.pool['google.drive.config'].get_google_scope(), context=c),\n  248:         'google_drive_authorization_code': lambda s, cr, uid, c: s.pool['ir.config_parameter'].get_param(cr, SUPERUSER_ID, 'google_drive_authorization_code', context=c),\n  249      }\n  250  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\google_spreadsheet\\google_spreadsheet.py:\n   28  \n   29  from openerp.osv import osv\n   30: from openerp import SUPERUSER_ID\n   31  \n   32  _logger = logging.getLogger(__name__)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr\\hr.py:\n   22  import logging\n   23  \n   24: from openerp import SUPERUSER_ID\n   25  from openerp import tools\n   26  from openerp.modules.module import get_module_resource\n   ..\n  264          res_users = self.pool['res.users']\n  265          user_ids = res_users.search(\n  266:             cr, SUPERUSER_ID, [\n  267                  ('company_id', '=', company_id),\n  268                  ('groups_id', 'in', group_id)\n  269              ], context=context)\n  270:         partner_ids = list(set(u.partner_id.id for u in res_users.browse(cr, SUPERUSER_ID, user_ids, context=context)))\n  271          self.message_post(\n  272              cr, uid, [employee_id],\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_contract\\hr_contract.py:\n   21  import time\n   22  \n   23: from openerp import SUPERUSER_ID\n   24  from openerp.osv import fields, osv\n   25  \n   ..\n   43          Contract = self.pool['hr.contract']\n   44          return {\n   45:             employee_id: Contract.search_count(cr, SUPERUSER_ID, [('employee_id', '=', employee_id)], context=context)\n   46              for employee_id in ids\n   47          }\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_recruitment\\hr_recruitment.py:\n   23  \n   24  from openerp import tools\n   25: from openerp import SUPERUSER_ID\n   26  from openerp.osv import fields, osv\n   27  from openerp.tools.translate import _\n   ..\n  370      def message_get_reply_to(self, cr, uid, ids, context=None):\n  371          \"\"\" Override to get the reply_to of the parent project. \"\"\"\n  372:         applicants = self.browse(cr, SUPERUSER_ID, ids, context=context)\n  373          job_ids = set([applicant.job_id.id for applicant in applicants if applicant.job_id])\n  374          aliases = self.pool['project.project'].message_get_reply_to(cr, uid, list(job_ids), context=context)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\hr_recruitment\\res_config.py:\n   20  ##############################################################################\n   21  \n   22: from openerp import SUPERUSER_ID\n   23  from openerp.osv import fields, osv\n   24  \n   ..\n   37  \n   38      _defaults = {\n   39:         'alias_domain': lambda self, cr, uid, context: self.pool['mail.alias']._get_alias_domain(cr, SUPERUSER_ID, [1], None, None)[1],\n   40      }\n   41  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\im_chat\\im_chat.py:\n  127                      notifications.append([(cr.dbname, 'im_chat.session', channel_user_id.id), info])\n  128                  # Anonymous are not notified when a new user is added : cannot exec session_info as uid = None\n  129:                 info = self.session_info(cr, openerp.SUPERUSER_ID, [session.id], context=context)\n  130                  notifications.append([session.uuid, info])\n  131                  self.pool['bus.bus'].sendmany(cr, uid, notifications)\n  ...\n  403      def post(self, uuid, message_type, message_content):\n  404          registry, cr, uid, context = request.registry, request.cr, request.session.uid, request.context\n  405:         # execute the post method as SUPERUSER_ID\n  406:         message_id = registry[\"im_chat.message\"].post(cr, openerp.SUPERUSER_ID, uid, uuid, message_type, message_content, context=context)\n  407          return message_id\n  408  \n  ...\n  412          # get the image\n  413          Session = registry.get(\"im_chat.session\")\n  414:         image_b64 = Session.get_image(cr, openerp.SUPERUSER_ID, uuid, simplejson.loads(user_id), context)\n  415          # built the response\n  416          image_data = base64.b64decode(image_b64)\n  ...\n  421      @openerp.http.route(['/im_chat/history'], type=\"json\", auth=\"none\")\n  422      def history(self, uuid, last_id=False, limit=20):\n  423:         registry, cr, uid, context = request.registry, request.cr, request.session.uid or openerp.SUPERUSER_ID, request.context\n  424          return registry[\"im_chat.message\"].get_messages(cr, uid, uuid, last_id, limit, context=context)\n  425  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\im_livechat\\im_livechat.py:\n   56      def _script_external(self, cr, uid, ids, name, arg, context=None):\n   57          values = {\n   58:             \"url\": self.pool.get('ir.config_parameter').get_param(cr, openerp.SUPERUSER_ID, 'web.base.url'),\n   59              \"dbname\":cr.dbname\n   60          }\n   ..\n   67      def _script_internal(self, cr, uid, ids, name, arg, context=None):\n   68          values = {\n   69:             \"url\": self.pool.get('ir.config_parameter').get_param(cr, openerp.SUPERUSER_ID, 'web.base.url'),\n   70              \"dbname\":cr.dbname\n   71          }\n   ..\n   79          res = {}\n   80          for record in self.browse(cr, uid, ids, context=context):\n   81:             res[record.id] = self.pool.get('ir.config_parameter').get_param(cr, openerp.SUPERUSER_ID, 'web.base.url') + \\\n   82                  \"/im_livechat/support/%s/%i\" % (cr.dbname, record.id)\n   83          return res\n   ..\n  199          sids = self.search(cr, uid, [('uuid', '=', uuid)], context=context, limit=1)\n  200          for session in self.browse(cr, uid, sids, context=context):\n  201:             if session.anonymous_name and user_id == openerp.SUPERUSER_ID:\n  202                  return True\n  203              else:\n  ...\n  218      @http.route('/im_livechat/support/<string:dbname>/<int:channel_id>', type='http', auth='none')\n  219      def support_page(self, dbname, channel_id, **kwargs):\n  220:         registry, cr, uid, context = openerp.modules.registry.RegistryManager.get(dbname), request.cr, openerp.SUPERUSER_ID, request.context\n  221          info = registry.get('im_livechat.channel').get_info_for_chat_src(cr, uid, channel_id)\n  222          info[\"dbname\"] = dbname\n  ...\n  227      @http.route('/im_livechat/loader/<string:dbname>/<int:channel_id>', type='http', auth='none')\n  228      def loader(self, dbname, channel_id, **kwargs):\n  229:         registry, cr, uid, context = openerp.modules.registry.RegistryManager.get(dbname), request.cr, openerp.SUPERUSER_ID, request.context\n  230          info = registry.get('im_livechat.channel').get_info_for_chat_src(cr, uid, channel_id)\n  231          info[\"dbname\"] = dbname\n  ...\n  236      @http.route('/im_livechat/get_session', type=\"json\", auth=\"none\")\n  237      def get_session(self, channel_id, anonymous_name, **kwargs):\n  238:         cr, uid, context, db = request.cr, request.uid or openerp.SUPERUSER_ID, request.context, request.db\n  239          reg = openerp.modules.registry.RegistryManager.get(db)\n  240          # if geoip, add the country name to the anonymous name\n  ...\n  245      @http.route('/im_livechat/available', type='json', auth=\"none\")\n  246      def available(self, db, channel):\n  247:         cr, uid, context, db = request.cr, request.uid or openerp.SUPERUSER_ID, request.context, request.db\n  248          reg = openerp.modules.registry.RegistryManager.get(db)\n  249          with reg.cursor() as cr:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\controllers\\main.py:\n    3  \n    4  import openerp\n    5: from openerp import SUPERUSER_ID\n    6  from openerp import http\n    7  from openerp.http import request\n    .\n   39                  with registry.cursor() as cr:\n   40                      mail_thread = registry['mail.thread']\n   41:                     mail_thread.message_process(cr, SUPERUSER_ID, None, message)\n   42              except psycopg2.Error:\n   43                  pass\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\mail_alias.py:\n   27  from openerp.tools import ustr\n   28  from openerp.modules.registry import RegistryManager\n   29: from openerp import SUPERUSER_ID\n   30  from openerp.tools.translate import _\n   31  \n   ..\n  110          'alias_user_id': lambda self, cr, uid, context: uid,\n  111          # looks better when creating new aliases - even if the field is informative only\n  112:         'alias_domain': lambda self, cr, uid, context: self._get_alias_domain(cr, SUPERUSER_ID, [1], None, None)[1],\n  113          'alias_contact': 'everyone',\n  114      }\n  ...\n  200          mail_alias = registry.get('mail.alias')\n  201          child_class_model = registry[child_model_name]\n  202:         no_alias_ids = child_class_model.search(cr, SUPERUSER_ID, [('alias_id', '=', False)], context={'active_test': False})\n  203          # Use read() not browse(), to avoid prefetching uninitialized inherited fields\n  204:         for obj_data in child_class_model.read(cr, SUPERUSER_ID, no_alias_ids, [alias_key]):\n  205              alias_vals = {'alias_name': False}\n  206              if alias_generate_name:\n  ...\n  211              alias_vals['alias_parent_thread_id'] = obj_data['id']\n  212              alias_create_ctx = dict(context, alias_model_name=alias_model_name, alias_parent_model_name=child_model_name)\n  213:             alias_id = mail_alias.create(cr, SUPERUSER_ID, alias_vals, context=alias_create_ctx)\n  214:             child_class_model.write(cr, SUPERUSER_ID, obj_data['id'], {'alias_id': alias_id}, context={'mail_notrack': True})\n  215              _logger.info('Mail alias created for %s %s (id %s)', child_model_name, obj_data[alias_key], obj_data['id'])\n  216  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\mail_followers.py:\n   20  ##############################################################################\n   21  from openerp.osv import osv, fields\n   22: from openerp import tools, SUPERUSER_ID\n   23  from openerp.tools.translate import _\n   24  from openerp.tools.mail import plaintext2html\n   ..\n  138  \n  139          # add user signature\n  140:         user = self.pool.get(\"res.users\").browse(cr, SUPERUSER_ID, [user_id], context=context)[0]\n  141          if user_signature:\n  142              if user.signature:\n  ...\n  181  \n  182      def _notify_email(self, cr, uid, ids, message_id, force_send=False, user_signature=True, context=None):\n  183:         message = self.pool['mail.message'].browse(cr, SUPERUSER_ID, message_id, context=context)\n  184  \n  185          # compute partners\n  ...\n  234                  the body of the related mail.message with the author's signature\n  235          \"\"\"\n  236:         notif_ids = self.search(cr, SUPERUSER_ID, [('message_id', '=', message_id), ('partner_id', 'in', partners_to_notify)], context=context)\n  237  \n  238          # update or create notifications\n  239:         new_notif_ids = self.update_message_notification(cr, SUPERUSER_ID, notif_ids, message_id, partners_to_notify, context=context)\n  240  \n  241          # mail_notify_noemail (do not send email) or no partner_ids: do not send, return\n  ...\n  243              return True\n  244  \n  245:         # browse as SUPERUSER_ID because of access to res_partner not necessarily allowed\n  246:         self._notify_email(cr, SUPERUSER_ID, new_notif_ids, message_id, force_send, user_signature, context=context)\n  247  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\mail_group.py:\n   25  from openerp.osv import fields\n   26  from openerp.tools.safe_eval import safe_eval as eval\n   27: from openerp import SUPERUSER_ID\n   28  from openerp.tools.translate import _\n   29  \n   ..\n  124          # Create menu id\n  125          mobj = self.pool.get('ir.ui.menu')\n  126:         menu_id = mobj.create(cr, SUPERUSER_ID, {'name': vals['name'], 'parent_id': menu_parent}, context=context)\n  127          vals['menu_id'] = menu_id\n  128  \n  ...\n  155              }\n  156              cobj = self.pool.get('ir.actions.client')\n  157:             newref = cobj.copy(cr, SUPERUSER_ID, ref[1], default={'params': str(params), 'name': vals['name']}, context=context)\n  158:             mobj.write(cr, SUPERUSER_ID, menu_id, {'action': 'ir.actions.client,' + str(newref), 'mail_group_id': mail_group_id}, context=context)\n  159  \n  160          if vals.get('group_ids'):\n  ...\n  175          res = super(mail_group, self).unlink(cr, uid, ids, context=context)\n  176          # Cascade-delete mail aliases as well, as they should not exist without the mail group.\n  177:         self.pool.get('mail.alias').unlink(cr, SUPERUSER_ID, alias_ids, context=context)\n  178          # Cascade-delete menu entries as well\n  179:         self.pool.get('ir.ui.menu').unlink(cr, SUPERUSER_ID, menu_ids, context=context)\n  180          return res\n  181  \n  ...\n  190                  new_params = action.params\n  191                  new_params['header_description'] = self._generate_header_description(cr, uid, group, context=context)\n  192:                 cobj.write(cr, SUPERUSER_ID, [action.id], {'params': str(new_params)}, context=context)\n  193          # if name is changed: update menu\n  194          if vals.get('name'):\n  195              mobj = self.pool.get('ir.ui.menu')\n  196:             mobj.write(cr, SUPERUSER_ID,\n  197                  [group.menu_id.id for group in self.browse(cr, uid, ids, context=context)],\n  198                  {'name': vals.get('name')}, context=context)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\mail_mail.py:\n   26  \n   27  from openerp import api, tools\n   28: from openerp import SUPERUSER_ID\n   29  from openerp.addons.base.ir.ir_mail_server import MailDeliveryException\n   30  from openerp.osv import fields, osv\n   ..\n  140          \"\"\"\n  141          if mail_sent and mail.auto_delete:\n  142:             # done with SUPERUSER_ID to avoid giving large unlink access rights\n  143:             self.unlink(cr, SUPERUSER_ID, [mail.id], context=context)\n  144          return True\n  145  \n  ...\n  154              context = {}\n  155          if partner and partner.user_ids:\n  156:             base_url = self.pool.get('ir.config_parameter').get_param(cr, SUPERUSER_ID, 'web.base.url')\n  157              mail_model = mail.model or 'mail.thread'\n  158              url = urljoin(base_url, self.pool[mail_model]._get_access_link(cr, uid, mail, partner, context=context))\n  ...\n  235          ir_mail_server = self.pool.get('ir.mail_server')\n  236          ir_attachment = self.pool['ir.attachment']\n  237:         for mail in self.browse(cr, SUPERUSER_ID, ids, context=context):\n  238              try:\n  239                  # TDE note: remove me when model_id field is present on mail.message - done here to avoid doing it multiple times in the sub method\n  240                  if mail.model:\n  241:                     model_id = self.pool['ir.model'].search(cr, SUPERUSER_ID, [('model', '=', mail.model)], context=context)[0]\n  242:                     model = self.pool['ir.model'].browse(cr, SUPERUSER_ID, model_id, context=context)\n  243                  else:\n  244                      model = None\n  ...\n  251                  attachment_ids = [a.id for a in mail.attachment_ids]\n  252                  attachments = [(a['datas_fname'], base64.b64decode(a['datas']))\n  253:                                  for a in ir_attachment.read(cr, SUPERUSER_ID, attachment_ids,\n  254                                                               ['datas_fname', 'datas'])]\n  255  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\mail_message.py:\n   26  from email.header import decode_header\n   27  from email.utils import formataddr\n   28: from openerp import SUPERUSER_ID, api\n   29  from openerp.osv import osv, orm, fields\n   30  from openerp.tools import html_email_clean\n   ..\n   81          \"\"\" Compute if the message is unread by the current user. \"\"\"\n   82          res = dict((id, False) for id in ids)\n   83:         partner_id = self.pool['res.users'].browse(cr, SUPERUSER_ID, uid, context=context).partner_id.id\n   84          notif_obj = self.pool.get('mail.notification')\n   85          notif_ids = notif_obj.search(cr, uid, [\n   ..\n  100          \"\"\" Compute if the message is unread by the current user. \"\"\"\n  101          res = dict((id, False) for id in ids)\n  102:         partner_id = self.pool['res.users'].browse(cr, SUPERUSER_ID, uid, context=context).partner_id.id\n  103          notif_obj = self.pool.get('mail.notification')\n  104          notif_ids = notif_obj.search(cr, uid, [\n  ...\n  170  \n  171      def _get_default_from(self, cr, uid, context=None):\n  172:         this = self.pool.get('res.users').browse(cr, SUPERUSER_ID, uid, context=context)\n  173          if this.alias_name and this.alias_domain:\n  174              return formataddr((this.name, '%s@%s' % (this.alias_name, this.alias_domain)))\n  ...\n  178  \n  179      def _get_default_author(self, cr, uid, context=None):\n  180:         return self.pool.get('res.users').browse(cr, SUPERUSER_ID, uid, context=context).partner_id.id\n  181  \n  182      _defaults = {\n  ...\n  194      def vote_toggle(self, cr, uid, ids, context=None):\n  195          ''' Toggles vote. Performed using read to avoid access rights issues.\n  196:             Done as SUPERUSER_ID because uid may vote for a message he cannot modify. '''\n  197          for message in self.read(cr, uid, ids, ['vote_user_ids'], context=context):\n  198              new_has_voted = not (uid in message.get('vote_user_ids'))\n  199              if new_has_voted:\n  200:                 self.write(cr, SUPERUSER_ID, message.get('id'), {'vote_user_ids': [(4, uid)]}, context=context)\n  201              else:\n  202:                 self.write(cr, SUPERUSER_ID, message.get('id'), {'vote_user_ids': [(3, uid)]}, context=context)\n  203          return new_has_voted or False\n  204  \n  ...\n  212          message_values = self.read(cr, uid, [id_message], ['attachment_ids'], context=context)[0]\n  213          if attachment_id in message_values['attachment_ids']:\n  214:             attachment = self.pool.get('ir.attachment').browse(cr, SUPERUSER_ID, attachment_id, context=context)\n  215              if attachment.datas and attachment.datas_fname:\n  216                  return {\n  ...\n  238          \"\"\"\n  239          notification_obj = self.pool.get('mail.notification')\n  240:         user_pid = self.pool['res.users'].browse(cr, SUPERUSER_ID, uid, context=context).partner_id.id\n  241          domain = [('partner_id', '=', user_pid), ('message_id', 'in', msg_ids)]\n  242          if not create_missing:\n  ...\n  267          \"\"\"\n  268          notification_obj = self.pool.get('mail.notification')\n  269:         user_pid = self.pool['res.users'].browse(cr, SUPERUSER_ID, uid, context=context).partner_id.id\n  270          domain = [('partner_id', '=', user_pid), ('message_id', 'in', msg_ids)]\n  271          if not create_missing:\n  ...\n  305          res_partner_obj = self.pool.get('res.partner')\n  306          ir_attachment_obj = self.pool.get('ir.attachment')\n  307:         pid = self.pool['res.users'].browse(cr, SUPERUSER_ID, uid, context=context).partner_id.id\n  308  \n  309          # 1. Aggregate partners (author_id and partner_ids) and attachments\n  ...\n  319              if message.attachment_ids:\n  320                  attachment_ids |= set([attachment.id for attachment in message.attachment_ids])\n  321:         # Read partners as SUPERUSER -> display the names like classic m2o even if no access\n  322:         partners = res_partner_obj.name_get(cr, SUPERUSER_ID, list(partner_ids), context=context)\n  323          partner_tree = dict((partner[0], partner) for partner in partners)\n  324  \n  325:         # 2. Attachments as SUPERUSER, because could receive msg and attachments for doc uid cannot see\n  326:         attachments = ir_attachment_obj.read(cr, SUPERUSER_ID, list(attachment_ids), ['id', 'datas_fname', 'name', 'file_type_icon'], context=context)\n  327          attachments_tree = dict((attachment['id'], {\n  328              'id': attachment['id'],\n  ...\n  616          \"\"\"\n  617          # Rules do not apply to administrator\n  618:         if uid == SUPERUSER_ID:\n  619              return super(mail_message, self)._search(\n  620                  cr, uid, args, offset=offset, limit=limit, order=order,\n  ...\n  629              return ids\n  630  \n  631:         pid = self.pool['res.users'].browse(cr, SUPERUSER_ID, uid, context=context).partner_id.id\n  632          author_ids, partner_ids, allowed_ids = set([]), set([]), set([])\n  633          model_ids = {}\n  ...\n  690              return model_record_ids\n  691  \n  692:         if uid == SUPERUSER_ID:\n  693              return\n  694          if isinstance(ids, (int, long)):\n  ...\n  696          not_obj = self.pool.get('mail.notification')\n  697          fol_obj = self.pool.get('mail.followers')\n  698:         partner_id = self.pool['res.users'].browse(cr, SUPERUSER_ID, uid, context=None).partner_id.id\n  699  \n  700          # Read mail_message.ids to have their values\n  ...\n  718              parent_ids = [message.get('parent_id') for mid, message in message_values.iteritems()\n  719                            if message.get('parent_id')]\n  720:             not_ids = not_obj.search(cr, SUPERUSER_ID, [('message_id.id', 'in', parent_ids), ('partner_id', '=', partner_id)], context=context)\n  721:             not_parent_ids = [notif.message_id.id for notif in not_obj.browse(cr, SUPERUSER_ID, not_ids, context=context)]\n  722              notified_ids += [mid for mid, message in message_values.iteritems()\n  723                               if message.get('parent_id') in not_parent_ids]\n  ...\n  727          model_record_ids = _generate_model_record_ids(message_values, other_ids)\n  728          if operation == 'read':\n  729:             not_ids = not_obj.search(cr, SUPERUSER_ID, [\n  730                  ('partner_id', '=', partner_id),\n  731                  ('message_id', 'in', ids),\n  732              ], context=context)\n  733:             notified_ids = [notification.message_id.id for notification in not_obj.browse(cr, SUPERUSER_ID, not_ids, context=context)]\n  734          elif operation == 'create':\n  735              for doc_model, doc_ids in model_record_ids.items():\n  736:                 fol_ids = fol_obj.search(cr, SUPERUSER_ID, [\n  737                      ('res_model', '=', doc_model),\n  738                      ('res_id', 'in', list(doc_ids)),\n  739                      ('partner_id', '=', partner_id),\n  740                  ], context=context)\n  741:                 fol_mids = [follower.res_id for follower in fol_obj.browse(cr, SUPERUSER_ID, fol_ids, context=context)]\n  742                  notified_ids += [mid for mid, message in message_values.iteritems()\n  743                                   if message.get('model') == doc_model and message.get('res_id') in fol_mids]\n  ...\n  767      def _get_record_name(self, cr, uid, values, context=None):\n  768          \"\"\" Return the related document name, using name_get. It is done using\n  769:             SUPERUSER_ID, to be sure to have the record name correctly stored. \"\"\"\n  770          if not values.get('model') or not values.get('res_id') or values['model'] not in self.pool:\n  771              return False\n  772:         return self.pool[values['model']].name_get(cr, SUPERUSER_ID, [values['res_id']], context=context)[0][1]\n  773  \n  774      def _get_reply_to(self, cr, uid, values, context=None):\n  ...\n  852          if message.subtype_id and message.model and message.res_id:\n  853              fol_obj = self.pool.get(\"mail.followers\")\n  854:             # browse as SUPERUSER because rules could restrict the search results\n  855              fol_ids = fol_obj.search(\n  856:                 cr, SUPERUSER_ID, [\n  857                      ('res_model', '=', message.model),\n  858                      ('res_id', '=', message.res_id),\n  859                  ], context=context)\n  860              partners_to_notify |= set(\n  861:                 fo.partner_id.id for fo in fol_obj.browse(cr, SUPERUSER_ID, fol_ids, context=context)\n  862                  if message.subtype_id.id in [st.id for st in fo.subtype_ids]\n  863              )\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\mail_thread.py:\n   41  \n   42  from openerp import api, tools\n   43: from openerp import SUPERUSER_ID\n   44  from openerp.addons.mail.mail_message import decode\n   45  from openerp.osv import fields, osv, orm\n   ..\n  112          res_id = context.get('empty_list_help_id')\n  113          ir_config_parameter = self.pool.get(\"ir.config_parameter\")\n  114:         catchall_domain = ir_config_parameter.get_param(cr, SUPERUSER_ID, \"mail.catchall.domain\", context=context)\n  115          document_name = context.get('empty_list_help_document_name', _('document'))\n  116          alias = None\n  ...\n  231      def _get_followers(self, cr, uid, ids, name, arg, context=None):\n  232          fol_obj = self.pool.get('mail.followers')\n  233:         fol_ids = fol_obj.search(cr, SUPERUSER_ID, [('res_model', '=', self._name), ('res_id', 'in', ids)])\n  234          res = dict((id, dict(message_follower_ids=[], message_is_follower=False)) for id in ids)\n  235          user_pid = self.pool.get('res.users').read(cr, uid, [uid], ['partner_id'], context=context)[0]['partner_id'][0]\n  236:         for fol in fol_obj.browse(cr, SUPERUSER_ID, fol_ids):\n  237              res[fol.res_id]['message_follower_ids'].append(fol.partner_id.id)\n  238              if fol.partner_id.id == user_pid:\n  ...\n  247  \n  248          # read the old set of followers, and determine the new set of followers\n  249:         fol_ids = fol_obj.search(cr, SUPERUSER_ID, [('res_model', '=', self._name), ('res_id', '=', id)])\n  250:         old = set(fol.partner_id.id for fol in fol_obj.browse(cr, SUPERUSER_ID, fol_ids))\n  251          new = set(old)\n  252  \n  ...\n  287              # TOFIX make it work with not in\n  288              assert operator != \"not in\", \"Do not search message_follower_ids with 'not in'\"\n  289:             fol_ids = fol_obj.search(cr, SUPERUSER_ID, [('res_model', '=', self._name), ('partner_id', operator, value)])\n  290:             res_ids = [fol.res_id for fol in fol_obj.browse(cr, SUPERUSER_ID, fol_ids)]\n  291              res.append(('id', 'in', res_ids))\n  292          return res\n  ...\n  371          # subscribe uid unless asked not to\n  372          if not context.get('mail_create_nosubscribe'):\n  373:             pid = self.pool['res.users'].browse(cr, SUPERUSER_ID, uid).partner_id.id\n  374              message_follower_ids = values.get('message_follower_ids') or []  # webclient can send None or False\n  375              message_follower_ids.append([4, pid])\n  ...\n  445          res = super(mail_thread, self).unlink(cr, uid, ids, context=context)\n  446          # delete followers\n  447:         fol_ids = fol_obj.search(cr, SUPERUSER_ID, [('res_model', '=', self._name), ('res_id', 'in', ids)], context=context)\n  448:         fol_obj.unlink(cr, SUPERUSER_ID, fol_ids, context=context)\n  449          return res\n  450  \n  ...\n  626  \n  627          # default action is the Inbox action\n  628:         self.pool.get('res.users').browse(cr, SUPERUSER_ID, uid, context=context)\n  629          act_model, act_id = self.pool.get('ir.model.data').get_object_reference(cr, uid, *self._get_inbox_action_xml_id(cr, uid, context=context))\n  630          action = self.pool.get(act_model).read(cr, uid, [act_id], [])[0]\n  ...\n  685                  return self.pool[context['thread_model']].message_get_default_recipients(cr, uid, ids, context=sub_ctx)\n  686          res = {}\n  687:         for record in self.browse(cr, SUPERUSER_ID, ids, context=context):\n  688              recipient_ids, email_to, email_cc = set(), False, False\n  689              if 'partner_id' in self._fields and record.partner_id:\n  ...\n  711              if model_name and model_name != 'mail.thread':\n  712                  alias_ids = self.pool['mail.alias'].search(\n  713:                     cr, SUPERUSER_ID, [\n  714                          ('alias_parent_model_id.model', '=', model_name),\n  715                          ('alias_parent_thread_id', 'in', ids),\n  ...\n  718                  aliases.update(\n  719                      dict((alias.alias_parent_thread_id, '%s@%s' % (alias.alias_name, alias_domain))\n  720:                          for alias in self.pool['mail.alias'].browse(cr, SUPERUSER_ID, alias_ids, context=context)))\n  721                  doc_names.update(\n  722                      dict((ng_res[0], ng_res[1])\n  723:                          for ng_res in self.pool[model_name].name_get(cr, SUPERUSER_ID, aliases.keys(), context=context)))\n  724              # left ids: use catchall\n  725              left_ids = set(ids).difference(set(aliases.keys()))\n  ...\n  729                      aliases.update(dict((res_id, '%s@%s' % (catchall_alias, alias_domain)) for res_id in left_ids))\n  730              # compute name of reply-to\n  731:             company_name = self.pool['res.users'].browse(cr, SUPERUSER_ID, uid, context=context).company_id.name\n  732              for res_id in aliases.keys():\n  733                  email_name = '%s%s' % (company_name, doc_names.get(res_id) and (' ' + doc_names[res_id]) or '')\n  ...\n  944          mail_message_ids = mail_msg_obj.search(cr, uid, [('message_id', 'in', msg_references)], context=context)\n  945          if ref_match and mail_message_ids:\n  946:             original_msg = mail_msg_obj.browse(cr, SUPERUSER_ID, mail_message_ids[0], context=context)\n  947              model, thread_id = original_msg.model, original_msg.res_id\n  948              route = self.message_route_verify(\n  ...\n 1154  \n 1155          if msg.get('message_id'):   # should always be True as message_parse generate one if missing\n 1156:             existing_msg_ids = self.pool.get('mail.message').search(cr, SUPERUSER_ID, [\n 1157                                                                  ('message_id', '=', msg.get('message_id')),\n 1158                                                                  ], context=context)\n ....\n 1385              partner_info = self.message_partner_info_from_emails(cr, uid, obj.id, [email], context=context)[0]\n 1386              if partner_info.get('partner_id'):\n 1387:                 partner = self.pool.get('res.partner').browse(cr, SUPERUSER_ID, [partner_info['partner_id']], context=context)[0]\n 1388          if email and email in [val[1] for val in result[obj.id]]:  # already existing email -> skip\n 1389              return result\n ....\n 1405          result = dict((res_id, []) for res_id in ids)\n 1406          if 'user_id' in self._fields:\n 1407:             for obj in self.browse(cr, SUPERUSER_ID, ids, context=context):  # SUPERUSER because of a read on res.users that would crash otherwise\n 1408                  if not obj.user_id or not obj.user_id.partner_id:\n 1409                      continue\n ....\n 1448              if not partner_id:\n 1449                  # exact, case-insensitive match\n 1450:                 ids = partner_obj.search(cr, SUPERUSER_ID,\n 1451                                           [('email', '=ilike', email_address),\n 1452                                            ('user_ids', '!=', False)],\n ....\n 1454                  if not ids:\n 1455                      # if no match with addr-spec, attempt substring match within name-addr pair\n 1456:                     ids = partner_obj.search(cr, SUPERUSER_ID,\n 1457                                               [('email', 'ilike', email_brackets),\n 1458                                                ('user_ids', '!=', False)],\n ....\n 1463              if not partner_id:\n 1464                  # exact, case-insensitive match\n 1465:                 ids = partner_obj.search(cr, SUPERUSER_ID,\n 1466                                           [('email', '=ilike', email_address)],\n 1467                                           limit=1, context=context)\n 1468                  if not ids:\n 1469                      # if no match with addr-spec, attempt substring match within name-addr pair\n 1470:                     ids = partner_obj.search(cr, SUPERUSER_ID,\n 1471                                               [('email', 'ilike', email_brackets)],\n 1472                                               limit=1, context=context)\n ....\n 1495                  email_address = (email_address.replace('\\\\', '\\\\\\\\').replace('%', '\\\\%').replace('_', '\\\\_'))\n 1496                  email_brackets = \"<%s>\" % email_address\n 1497:                 message_ids = mail_message_obj.search(cr, SUPERUSER_ID, [\n 1498                                      '|',\n 1499                                      ('email_from', '=ilike', email_address),\n ....\n 1502                                  ], context=context)\n 1503                  if message_ids:\n 1504:                     mail_message_obj.write(cr, SUPERUSER_ID, message_ids, {'author_id': partner_info['partner_id']}, context=context)\n 1505          return result\n 1506  \n ....\n 1517          m2m_attachment_ids = []\n 1518          if attachment_ids:\n 1519:             filtered_attachment_ids = Attachment.search(cr, SUPERUSER_ID, [\n 1520                  ('res_model', '=', 'mail.compose.message'),\n 1521                  ('create_uid', '=', uid),\n 1522                  ('id', 'in', attachment_ids)], context=context)\n 1523              if filtered_attachment_ids:\n 1524:                 Attachment.write(cr, SUPERUSER_ID, filtered_attachment_ids, {'res_model': attach_model, 'res_id': attach_res_id}, context=context)\n 1525              m2m_attachment_ids += [(4, id) for id in attachment_ids]\n 1526          # Handle attachments parameter, that is a dictionary of attachments\n ....\n 1642          # we want to set a parent: force to set the parent_id to the oldest ancestor, to avoid having more than 1 level of thread\n 1643          elif parent_id:\n 1644:             message_ids = mail_message.search(cr, SUPERUSER_ID, [('id', '=', parent_id), ('parent_id', '!=', False)], context=context)\n 1645              # avoid loops when finding ancestors\n 1646              processed_list = []\n 1647              if message_ids:\n 1648:                 message = mail_message.browse(cr, SUPERUSER_ID, message_ids[0], context=context)\n 1649                  while (message.parent_id and message.parent_id.id not in processed_list):\n 1650                      processed_list.append(message.parent_id.id)\n ....\n 1675          # Post-process: subscribe author, update message_last_post\n 1676          if model and model != 'mail.thread' and thread_id and subtype_id:\n 1677:             # done with SUPERUSER_ID, because on some models users can post only with read access, not necessarily write access\n 1678:             self.write(cr, SUPERUSER_ID, [thread_id], {'message_last_post': fields.datetime.now()}, context=context)\n 1679          message = mail_message.browse(cr, uid, msg_id, context=context)\n 1680          if message.author_id and model and thread_id and type != 'notification' and not context.get('mail_create_nosubscribe'):\n ....\n 1724  \n 1725          existing_pids_dict = {}\n 1726:         fol_ids = mail_followers_obj.search(cr, SUPERUSER_ID, ['&', '&', ('res_model', '=', self._name), ('res_id', 'in', ids), ('partner_id', 'in', partner_ids)])\n 1727:         for fol in mail_followers_obj.browse(cr, SUPERUSER_ID, fol_ids, context=context):\n 1728              existing_pids_dict.setdefault(fol.res_id, set()).add(fol.partner_id.id)\n 1729  \n 1730          # subtype_ids specified: update already subscribed partners\n 1731          if subtype_ids and fol_ids:\n 1732:             mail_followers_obj.write(cr, SUPERUSER_ID, fol_ids, {'subtype_ids': [(6, 0, subtype_ids)]}, context=context)\n 1733          # subtype_ids not specified: do not update already subscribed partner, fetch default subtypes for new partners\n 1734          if subtype_ids is None:\n ....\n 1744              for new_pid in new_pids:\n 1745                  mail_followers_obj.create(\n 1746:                     cr, SUPERUSER_ID, {\n 1747                          'res_model': self._name,\n 1748                          'res_id': id,\n ....\n 1778          fol_obj = self.pool['mail.followers']\n 1779          fol_ids = fol_obj.search(\n 1780:             cr, SUPERUSER_ID, [\n 1781                  ('res_model', '=', self._name),\n 1782                  ('res_id', 'in', ids),\n 1783                  ('partner_id', 'in', partner_ids)\n 1784              ], context=context)\n 1785:         return fol_obj.unlink(cr, SUPERUSER_ID, fol_ids, context=context)\n 1786  \n 1787      def _message_get_auto_subscribe_fields(self, cr, uid, updated_fields, auto_follow_fields=None, context=None):\n ....\n 1813              for record_id in ids:\n 1814                  message_obj = self.pool.get('mail.message')\n 1815:                 msg_ids = message_obj.search(cr, SUPERUSER_ID, [\n 1816                      ('model', '=', self._name),\n 1817                      ('res_id', '=', record_id),\n 1818                      ('type', '=', 'email')], limit=1, context=context)\n 1819                  if not msg_ids:\n 1820:                     msg_ids = message_obj.search(cr, SUPERUSER_ID, [\n 1821                          ('model', '=', self._name),\n 1822                          ('res_id', '=', record_id)], limit=1, context=context)\n ....\n 1881                  header_domain += ['&', ('res_model', '=', header[0]), ('res_id', '=', header[1])]\n 1882              header_follower_ids = follower_obj.search(\n 1883:                 cr, SUPERUSER_ID,\n 1884                  header_domain,\n 1885                  context=context\n 1886              )\n 1887:             for header_follower in follower_obj.browse(cr, SUPERUSER_ID, header_follower_ids, context=context):\n 1888                  for subtype in header_follower.subtype_ids:\n 1889                      if subtype.parent_id and subtype.parent_id.res_model == self._name:\n ....\n 1894          # add followers coming from res.users relational fields that are tracked\n 1895          user_ids = [values[name] for name in user_field_lst if values.get(name)]\n 1896:         user_pids = [user.partner_id.id for user in self.pool.get('res.users').browse(cr, SUPERUSER_ID, user_ids, context=context)]\n 1897          for partner_id in user_pids:\n 1898              new_followers.setdefault(partner_id, None)\n ....\n 1948          # TDE FIXME: relocate in portal when it won't be necessary to reload the hr.employee model in an additional bridge module\n 1949          if 'is_portal' in self.pool['res.groups']._fields:\n 1950:             user = self.pool.get('res.users').browse(cr, SUPERUSER_ID, uid, context=context)\n 1951              if any(group.is_portal for group in user.groups_id):\n 1952                  return []\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\res_users.py:\n   22  from openerp.osv import fields, osv\n   23  from openerp import api\n   24: from openerp import SUPERUSER_ID\n   25  from openerp.tools.translate import _\n   26  import openerp\n   ..\n   80          user_id = super(res_users, self).create(cr, uid, data, context=create_context)\n   81          user = self.browse(cr, uid, user_id, context=context)\n   82:         self.pool.get('mail.alias').write(cr, SUPERUSER_ID, [user.alias_id.id], {\"alias_force_thread_id\": user_id, \"alias_parent_thread_id\": user_id}, context)\n   83  \n   84          # create a welcome message\n   ..\n   97          company_name = user.company_id.name if user.company_id else ''\n   98          body = _('%s has joined the %s network.') % (user.name, company_name)\n   99:         # TODO change SUPERUSER_ID into user.id but catch errors\n  100:         return self.pool.get('res.partner').message_post(cr, SUPERUSER_ID, [user.partner_id.id],\n  101              body=body, context=context)\n  102  \n  ...\n  115          if isinstance(thread_id, (list, tuple)):\n  116              thread_id = thread_id[0]\n  117:         return self.browse(cr, SUPERUSER_ID, thread_id).partner_id.id\n  118  \n  119      @api.cr_uid_ids_context\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\update.py:\n    7  import urllib2\n    8  \n    9: from openerp import release, SUPERUSER_ID\n   10  from openerp.models import AbstractModel\n   11  from openerp.osv import osv\n   ..\n   22          Users = self.pool['res.users']\n   23          user_count = partial(Users.search_count, cr, uid)\n   24:         get_param = partial(self.pool['ir.config_parameter'].get_param, cr, SUPERUSER_ID)\n   25  \n   26          dbuuid = get_param('database.uuid')\n   ..\n   92              # old behavior based on res.log; now on mail.message, that is not necessarily installed\n   93              IMD = self.pool['ir.model.data']\n   94:             user = self.pool['res.users'].browse(cr, SUPERUSER_ID, SUPERUSER_ID)\n   95:             poster = IMD.xmlid_to_object(cr, SUPERUSER_ID, 'mail.group_all_employees', context=context)\n   96              if not (poster and poster.exists()):\n   97                  if not user.exists():\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mail\\wizard\\mail_compose_message.py:\n   24  \n   25  from openerp import tools\n   26: from openerp import SUPERUSER_ID\n   27  from openerp.osv import osv\n   28  from openerp.osv import fields\n   ..\n  146  \n  147          # Author condition (CREATE (mass_mail))\n  148:         if operation == 'create' and uid != SUPERUSER_ID:\n  149              # read mail_compose_message.ids to have their values\n  150              message_values = {}\n  ...\n  225                  res_ids = [wizard.res_id]\n  226  \n  227:             batch_size = int(self.pool['ir.config_parameter'].get_param(cr, SUPERUSER_ID, 'mail.batch_size')) or self._batch_size\n  228  \n  229              sliced_res_ids = [res_ids[i:i + batch_size] for i in range(0, len(res_ids), batch_size)]\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mass_mailing\\controllers\\main.py:\n    2  import werkzeug\n    3  \n    4: from openerp import http, SUPERUSER_ID\n    5  from openerp.http import request\n    6  \n    .\n   12          \"\"\" Email tracking. \"\"\"\n   13          mail_mail_stats = request.registry.get('mail.mail.statistics')\n   14:         mail_mail_stats.set_opened(request.cr, SUPERUSER_ID, mail_mail_ids=[mail_id])\n   15          response = werkzeug.wrappers.Response()\n   16          response.mimetype = 'image/gif'\n   ..\n   22          cr, uid, context = request.cr, request.uid, request.context\n   23          MassMailing = request.registry['mail.mass_mailing']\n   24:         mailing_ids = MassMailing.exists(cr, SUPERUSER_ID, [mailing_id], context=context)\n   25          if not mailing_ids:\n   26              return 'KO'\n   27:         mailing = MassMailing.browse(cr, SUPERUSER_ID, mailing_ids[0], context=context)\n   28          if mailing.mailing_model == 'mail.mass_mailing.contact':\n   29              list_ids = [l.id for l in mailing.contact_list_ids]\n   30:             record_ids = request.registry[mailing.mailing_model].search(cr, SUPERUSER_ID, [('list_id', 'in', list_ids), ('id', '=', res_id), ('email', 'ilike', email)], context=context)\n   31:             request.registry[mailing.mailing_model].write(cr, SUPERUSER_ID, record_ids, {'opt_out': True}, context=context)\n   32          else:\n   33              email_fname = None\n   ..\n   38                  email_fname = 'email'\n   39              if email_fname:\n   40:                 record_ids = model.search(cr, SUPERUSER_ID, [('id', '=', res_id), (email_fname, 'ilike', email)], context=context)\n   41              if 'opt_out' in model._fields:\n   42:                 model.write(cr, SUPERUSER_ID, record_ids, {'opt_out': True}, context=context)\n   43          return 'OK'\n   44  \n   ..\n   52          email = None\n   53          if uid != request.website.user_id.id:\n   54:             email = Users.browse(cr, SUPERUSER_ID, uid, context).email\n   55          elif request.session.get('mass_mailing_email'):\n   56              email = request.session['mass_mailing_email']\n   57  \n   58          if email:\n   59:             contact_ids = Contacts.search(cr, SUPERUSER_ID, [('list_id', '=', int(list_id)), ('email', '=', email), ('opt_out', '=', False)], context=context)\n   60              is_subscriber = len(contact_ids) > 0\n   61  \n   ..\n   67          Contacts = request.registry['mail.mass_mailing.contact']\n   68  \n   69:         contact_ids = Contacts.search_read(cr, SUPERUSER_ID, [('list_id', '=', int(list_id)), ('email', '=', email)], ['opt_out'], context=context)\n   70          if not contact_ids:\n   71:             Contacts.add_to_list(cr, SUPERUSER_ID, email, int(list_id), context=context)\n   72          else:\n   73              if contact_ids[0]['opt_out']:\n   74:                 Contacts.write(cr, SUPERUSER_ID, [contact_ids[0]['id']], {'opt_out': False}, context=context)\n   75          # add email to session\n   76          request.session['mass_mailing_email'] = email\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mass_mailing\\models\\mail_mail.py:\n   24  \n   25  from openerp import tools\n   26: from openerp import SUPERUSER_ID\n   27  from openerp.osv import osv, fields\n   28  \n   ..\n   46          mail_id = super(MailMail, self).create(cr, uid, values, context=context)\n   47          if values.get('statistics_ids'):\n   48:             mail = self.browse(cr, SUPERUSER_ID, mail_id, context=context)\n   49              for stat in mail.statistics_ids:\n   50                  self.pool['mail.mail.statistics'].write(cr, uid, [stat.id], {'message_id': mail.message_id}, context=context)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mrp\\mrp.py:\n   26  from openerp.tools import float_compare\n   27  from openerp.tools.translate import _\n   28: from openerp import tools, SUPERUSER_ID\n   29  from openerp.addons.product import _common\n   30  \n   ..\n  696          for production in self.browse(cr, uid, ids, context=context):\n  697              #unlink product_lines\n  698:             prod_line_obj.unlink(cr, SUPERUSER_ID, [line.id for line in production.product_lines], context=context)\n  699              #unlink workcenter_lines\n  700:             workcenter_line_obj.unlink(cr, SUPERUSER_ID, [line.id for line in production.workcenter_lines], context=context)\n  701  \n  702              res = self._prepare_lines(cr, uid, production, properties=properties, context=context)\n  ...\n  994                  if value and account:\n  995                      amount += value\n  996:                     # we user SUPERUSER_ID as we do not garantee an mrp user\n  997                      # has access to account analytic lines but still should be\n  998                      # able to produce orders\n  999:                     analytic_line_obj.create(cr, SUPERUSER_ID, {\n 1000                          'name': wc_line.name + ' (H)',\n 1001                          'amount': value,\n ....\n 1013                  if value and account:\n 1014                      amount += value\n 1015:                     analytic_line_obj.create(cr, SUPERUSER_ID, {\n 1016                          'name': wc_line.name + ' (C)',\n 1017                          'amount': value,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mrp\\procurement.py:\n   25  from openerp.tools.translate import _\n   26  from openerp.tools import DEFAULT_SERVER_DATETIME_FORMAT\n   27: from openerp import SUPERUSER_ID\n   28  \n   29  class procurement_rule(osv.osv):\n   ..\n  115          for procurement in procurement_obj.browse(cr, uid, ids, context=context):\n  116              if self.check_bom_exists(cr, uid, [procurement.id], context=context):\n  117:                 #create the MO as SUPERUSER because the current user may not have the rights to do it (mto product launched by a sale for example)\n  118                  vals = self._prepare_mo_vals(cr, uid, procurement, context=context)\n  119:                 produce_id = production_obj.create(cr, SUPERUSER_ID, vals, context=context)\n  120                  res[procurement.id] = produce_id\n  121                  self.write(cr, uid, [procurement.id], {'production_id': produce_id})\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\mrp\\stock.py:\n   25  from openerp.osv import osv\n   26  from openerp.tools.translate import _\n   27: from openerp import SUPERUSER_ID\n   28  from openerp.tools import DEFAULT_SERVER_DATETIME_FORMAT, float_compare\n   29  \n   ..\n   48              return list of ids of mrp.bom for that product \"\"\"\n   49          user_company = self.pool.get('res.users').browse(cr, uid, uid, context=context).company_id.id\n   50:         #doing the search as SUPERUSER because a user with the permission to write on a stock move should be able to explode it\n   51          #without giving him the right to read the boms.\n   52          domain = [\n   ..\n   57              '|', ('date_stop', '=', False), ('date_stop', '>=', time.strftime(DEFAULT_SERVER_DATETIME_FORMAT)),\n   58              ('company_id', '=', user_company)]\n   59:         return self.pool.get('mrp.bom').search(cr, SUPERUSER_ID, domain, context=context)\n   60  \n   61      def _action_explode(self, cr, uid, move, context=None):\n   ..\n   73          bis = self._check_phantom_bom(cr, uid, move, context=context)\n   74          if bis:\n   75:             bom_point = bom_obj.browse(cr, SUPERUSER_ID, bis[0], context=context)\n   76:             factor = uom_obj._compute_qty(cr, SUPERUSER_ID, move.product_uom.id, move.product_uom_qty, bom_point.product_uom.id) / bom_point.product_qty\n   77:             res = bom_obj._bom_explode(cr, SUPERUSER_ID, bom_point, move.product_id, factor, [], context=context)\n   78              \n   79              for line in res[0]:\n   ..\n  133                  \n  134              #delete the move with original product which is not relevant anymore\n  135:             move_obj.unlink(cr, SUPERUSER_ID, [move.id], context=context)\n  136          #return list of newly created move or the move id otherwise, unless there is no move anymore\n  137          return processed_ids or (not bis and [move.id]) or []\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\note\\note.py:\n   20  ##############################################################################\n   21  \n   22: from openerp import SUPERUSER_ID\n   23  from openerp.osv import osv, fields\n   24  from openerp.tools import html2plaintext\n   ..\n  193                  xmlid = 'note_stage_%02d' % (n,)\n  194                  try:\n  195:                     _model, stage_id = data_obj.get_object_reference(cr, SUPERUSER_ID, 'note', xmlid)\n  196                  except ValueError:\n  197                      continue\n  198:                 note_obj.copy(cr, SUPERUSER_ID, stage_id, default={'user_id': user_id}, context=context)\n  199          return user_id\n  200  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\pad\\pad.py:\n    6  import urllib2\n    7  import logging\n    8: from openerp import SUPERUSER_ID\n    9  from openerp.tools.translate import _\n   10  from openerp.tools import html2plaintext\n   ..\n   21  \n   22      def pad_generate_url(self, cr, uid, context=None):\n   23:         company = self.pool.get('res.users').browse(cr, SUPERUSER_ID, uid, context=context).company_id\n   24  \n   25          pad = {\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\payment_adyen\\controllers\\main.py:\n    9  import werkzeug\n   10  \n   11: from openerp import http, SUPERUSER_ID\n   12  from openerp.http import request\n   13  \n   ..\n   25          post[\"pspReference\"] = pspReference\n   26          _logger.info('Beginning Adyen form_feedback with post data %s', pprint.pformat(post))  # debug\n   27:         request.registry['payment.transaction'].form_feedback(request.cr, SUPERUSER_ID, post, 'adyen', context=request.context)\n   28          return_url = post.pop('return_url', '')\n   29          if not return_url:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\payment_buckaroo\\controllers\\main.py:\n    9  import werkzeug\n   10  \n   11: from openerp import http, SUPERUSER_ID\n   12  from openerp.http import request\n   13  \n   ..\n   30          \"\"\" Buckaroo.\"\"\"\n   31          _logger.info('Buckaroo: entering form_feedback with post data %s', pprint.pformat(post))  # debug\n   32:         request.registry['payment.transaction'].form_feedback(request.cr, SUPERUSER_ID, post, 'buckaroo', context=request.context)\n   33          return_url = post.pop('return_url', '')\n   34          if not return_url:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\payment_ogone\\controllers\\main.py:\n    4  import werkzeug\n    5  \n    6: from openerp import http, SUPERUSER_ID\n    7  from openerp.http import request\n    8  \n    .\n   25          \"\"\" Ogone contacts using GET, at least for accept \"\"\"\n   26          _logger.info('Ogone: entering form_feedback with post data %s', pprint.pformat(post))  # debug\n   27:         cr, uid, context = request.cr, SUPERUSER_ID, request.context\n   28          request.registry['payment.transaction'].form_feedback(cr, uid, post, 'ogone', context=context)\n   29          return werkzeug.utils.redirect(post.pop('return_url', '/'))\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\payment_paypal\\controllers\\main.py:\n   10  import werkzeug\n   11  \n   12: from openerp import http, SUPERUSER_ID\n   13  from openerp.http import request\n   14  \n   ..\n   55          if resp == 'VERIFIED':\n   56              _logger.info('Paypal: validated data')\n   57:             res = request.registry['payment.transaction'].form_feedback(cr, SUPERUSER_ID, post, 'paypal', context=context)\n   58          elif resp == 'INVALID':\n   59              _logger.warning('Paypal: answered INVALID on data verification')\n   ..\n   80      def paypal_cancel(self, **post):\n   81          \"\"\" When the user cancels its Paypal payment: GET on this route \"\"\"\n   82:         cr, uid, context = request.cr, SUPERUSER_ID, request.context\n   83          _logger.info('Beginning Paypal cancel with post data %s', pprint.pformat(post))  # debug\n   84          return_url = self._get_return_url(**post)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\payment_paypal\\models\\paypal.py:\n   15  from openerp.osv import osv, fields\n   16  from openerp.tools.float_utils import float_compare\n   17: from openerp import SUPERUSER_ID\n   18  \n   19  _logger = logging.getLogger(__name__)\n   ..\n  107  \n  108      def paypal_form_generate_values(self, cr, uid, id, partner_values, tx_values, context=None):\n  109:         base_url = self.pool['ir.config_parameter'].get_param(cr, SUPERUSER_ID, 'web.base.url')\n  110          acquirer = self.browse(cr, uid, id, context=context)\n  111  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\payment_transfer\\controllers\\main.py:\n    4  import werkzeug\n    5  \n    6: from openerp import http, SUPERUSER_ID\n    7  from openerp.http import request\n    8  \n    .\n   17      ], type='http', auth='none')\n   18      def transfer_form_feedback(self, **post):\n   19:         cr, uid, context = request.cr, SUPERUSER_ID, request.context\n   20          _logger.info('Beginning form_feedback with post data %s', pprint.pformat(post))  # debug\n   21          request.registry['payment.transaction'].form_feedback(cr, uid, post, 'transfer', context)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\point_of_sale\\point_of_sale.py:\n  394              jid = jobj.default_get(cr, uid, ['journal_id'], context=context)['journal_id']\n  395              if jid:\n  396:                 jobj.write(cr, openerp.SUPERUSER_ID, [pos_config.id], {'journal_id': jid}, context=context)\n  397              else:\n  398                  raise osv.except_osv( _('error!'),\n  ...\n  408                      cashids = journal_proxy.search(cr, uid, [('journal_user','=',True)], context=context)\n  409  \n  410:             journal_proxy.write(cr, openerp.SUPERUSER_ID, cashids, {'journal_user': True})\n  411:             jobj.write(cr, openerp.SUPERUSER_ID, [pos_config.id], {'journal_ids': [(6,0, cashids)]})\n  412  \n  413  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\portal\\mail_mail.py:\n   20  ##############################################################################\n   21  \n   22: from openerp import SUPERUSER_ID\n   23  from openerp.osv import osv\n   24  from openerp.tools.translate import _\n   ..\n   39          if partner and not partner.user_ids:\n   40              contex_signup = dict(context, signup_valid=True)\n   41:             signup_url = partner_obj._get_signup_url_for_action(cr, SUPERUSER_ID, [partner.id],\n   42                                                                  action='mail.action_mail_redirect',\n   43                                                                  model=mail.model, res_id=mail.res_id,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\portal\\mail_message.py:\n   20  ##############################################################################\n   21  \n   22: from openerp import SUPERUSER_ID\n   23  from openerp.osv import osv, orm\n   24  from openerp.tools.translate import _\n   ..\n   34              all internal notes if uid is a non-employee\n   35          \"\"\"\n   36:         if uid == SUPERUSER_ID:\n   37              return super(mail_message, self)._search(cr, uid, args, offset=offset, limit=limit, order=order,\n   38                  context=context, count=count, access_rights_uid=access_rights_uid)\n   ..\n   50                  - raise if the type is comment and subtype NULL (internal note)\n   51          \"\"\"\n   52:         if uid == SUPERUSER_ID:\n   53              return super(mail_message, self).check_access_rule(cr, uid, ids=ids, operation=operation, context=context)\n   54          group_ids = self.pool.get('res.users').browse(cr, uid, uid, context=context).groups_id\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\portal\\mail_thread.py:\n   20  ##############################################################################\n   21  \n   22: from openerp import SUPERUSER_ID\n   23  from openerp.osv import osv\n   24  \n   ..\n   36              - opens the Inbox with context propagated\n   37          \"\"\"\n   38:         cur_user = self.pool.get('res.users').browse(cr, SUPERUSER_ID, uid, context=context)\n   39          # if uid is a portal user -> action is different\n   40          if any(group.is_portal for group in cur_user.groups_id):\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\portal\\wizard\\portal_wizard.py:\n   25  from openerp.tools.translate import _\n   26  from openerp.tools import email_split\n   27: from openerp import SUPERUSER_ID\n   28  \n   29  _logger = logging.getLogger(__name__)\n   ..\n   88          contact_ids = set()\n   89          user_changes = []\n   90:         for partner in res_partner.browse(cr, SUPERUSER_ID, partner_ids, context):\n   91              for contact in (partner.child_ids or [partner]):\n   92                  # make sure that each contact appears at most once in the list\n   ..\n  130          error_user = []\n  131          ctx = dict(context or {}, active_test=False)\n  132:         for wizard_user in self.browse(cr, SUPERUSER_ID, ids, context):\n  133:             if wizard_user.in_portal and not self._retrieve_user(cr, SUPERUSER_ID, wizard_user, context):\n  134                  email = extract_email(wizard_user.email)\n  135                  if not email:\n  ...\n  137                  elif email in emails and email not in error_emails:\n  138                      error_emails.append(wizard_user.partner_id)\n  139:                 user = res_users.search(cr, SUPERUSER_ID, [('login', '=', email)], context=ctx)\n  140                  if user:\n  141                      error_user.append(wizard_user.partner_id)\n  ...\n  163              raise osv.except_osv(_('Contacts Error'), \"\\n\\n\".join(error_msg))\n  164  \n  165:         for wizard_user in self.browse(cr, SUPERUSER_ID, ids, context):\n  166              portal = wizard_user.wizard_id.portal_id\n  167:             user = self._retrieve_user(cr, SUPERUSER_ID, wizard_user, context)\n  168              if wizard_user.partner_id.email != wizard_user.email:\n  169                  wizard_user.partner_id.write({'email': wizard_user.email})\n  ...\n  171                  # create a user if necessary, and make sure it is in the portal group\n  172                  if not user:\n  173:                     user = self._create_user(cr, SUPERUSER_ID, wizard_user, context)\n  174                  if (not user.active) or (portal not in user.groups_id):\n  175                      user.write({'active': True, 'groups_id': [(4, portal.id)]})\n  ...\n  221          res_partner = self.pool['res.partner']\n  222          this_context = context\n  223:         this_user = self.pool.get('res.users').browse(cr, SUPERUSER_ID, uid, context)\n  224          if not this_user.email:\n  225              raise osv.except_osv(_('Email Required'),\n  ...\n  227  \n  228          # determine subject and body in the portal user's language\n  229:         user = self._retrieve_user(cr, SUPERUSER_ID, wizard_user, context)\n  230          context = dict(this_context or {}, lang=user.lang)\n  231          ctx_portal_url = dict(context, signup_force_type_in_url='')\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\portal_claim\\portal_claim.py:\n   20  ##############################################################################\n   21  \n   22: from openerp import SUPERUSER_ID\n   23  from openerp.osv import osv\n   24  \n   ..\n   35              # Special case for portal users, as they are not allowed to call name_get on res.partner\n   36              # We save this call for the web client by returning it in default get\n   37:             return self.pool['res.partner'].name_get(cr, SUPERUSER_ID, [user.partner_id.id], context=context)[0]\n   38          return False\n   39  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\portal_sale\\portal_sale.py:\n   20  ##############################################################################\n   21  \n   22: from openerp import SUPERUSER_ID\n   23  from openerp.osv import osv, fields\n   24: from openerp import SUPERUSER_ID\n   25  \n   26  \n   ..\n   38          result = dict.fromkeys(ids, False)\n   39          payment_acquirer = self.pool['payment.acquirer']\n   40:         for this in self.browse(cr, SUPERUSER_ID, ids, context=context):\n   41              if this.state not in ('draft', 'cancel') and not this.invoiced:\n   42                  result[this.id] = payment_acquirer.render_payment_block(\n   ..\n   77  \n   78      def get_formview_action(self, cr, uid, id, context=None):\n   79:         user = self.pool['res.users'].browse(cr, SUPERUSER_ID, uid, context=context)\n   80          if user.share:\n   81              document = self.browse(cr, uid, id, context=context)\n   ..\n  136  \n  137      def get_formview_action(self, cr, uid, id, context=None):\n  138:         user = self.pool['res.users'].browse(cr, SUPERUSER_ID, uid, context=context)\n  139          if user.share:\n  140              return self.pool['ir.actions.act_window'].for_xml_id(cr, uid, 'portal_sale', 'portal_action_invoices', context=context)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\procurement\\procurement.py:\n   23  from psycopg2 import OperationalError\n   24  \n   25: from openerp import SUPERUSER_ID\n   26  from openerp.osv import fields, osv\n   27  import openerp.addons.decimal_precision as dp\n   ..\n  289          '''\n  290          Call the scheduler to check the procurement order. This is intented to be done for all existing companies at\n  291:         the same time, so we're running all the methods as SUPERUSER to avoid intercompany and access rights issues.\n  292  \n  293          @param self: The object pointer\n  ...\n  312              prev_ids = []\n  313              while True:\n  314:                 ids = self.search(cr, SUPERUSER_ID, dom, context=context)\n  315                  if not ids or prev_ids == ids:\n  316                      break\n  317                  else:\n  318                      prev_ids = ids\n  319:                 self.run(cr, SUPERUSER_ID, ids, autocommit=use_new_cursor, context=context)\n  320                  if use_new_cursor:\n  321                      cr.commit()\n  ...\n  328              prev_ids = []\n  329              while True:\n  330:                 ids = self.search(cr, SUPERUSER_ID, dom, offset=offset, context=context)\n  331                  if not ids or prev_ids == ids:\n  332                      break\n  333                  else:\n  334                      prev_ids = ids\n  335:                 self.check(cr, SUPERUSER_ID, ids, autocommit=use_new_cursor, context=context)\n  336                  if use_new_cursor:\n  337                      cr.commit()\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\procurement\\wizard\\schedulers_all.py:\n   22  import logging\n   23  import threading\n   24: from openerp import SUPERUSER_ID\n   25  from openerp import tools\n   26  \n   ..\n   47  \n   48              new_cr = self.pool.cursor()\n   49:             scheduler_cron_id = self.pool['ir.model.data'].get_object_reference(new_cr, SUPERUSER_ID, 'procurement', 'ir_cron_scheduler_action')[1]\n   50              # Avoid to run the scheduler multiple times in the same time\n   51              try:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\product\\product.py:\n   25  from _common import ceiling\n   26  \n   27: from openerp import SUPERUSER_ID\n   28  from openerp import tools\n   29  from openerp.osv import osv, fields, expression\n   ..\n  596              # standard_price field can only be seen by users in base.group_user\n  597              # Thus, in order to compute the sale price from the cost price for users not in this group\n  598:             # We fetch the standard price as the superuser\n  599              if ptype != 'standard_price':\n  600                  res[product.id] = product[ptype] or 0.0\n  ...\n 1029  \n 1030          # all user don't have access to seller and partner\n 1031:         # check access and use superuser\n 1032          self.check_access_rights(cr, user, \"read\")\n 1033          self.check_access_rule(cr, user, ids, \"read\", context=context)\n 1034  \n 1035          result = []\n 1036:         for product in self.browse(cr, SUPERUSER_ID, ids, context=context):\n 1037              variant = \", \".join([v.name for v in product.attribute_value_ids])\n 1038              name = variant and \"%s (%s)\" % (product.name, variant) or product.name\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\project\\project.py:\n   24  import time\n   25  \n   26: from openerp import SUPERUSER_ID\n   27  from openerp import tools\n   28  from openerp.addons.resource.faces import task as Task\n   ..\n  846          # read uom as admin to avoid access rights issues, e.g. for portal/share users,\n  847          # this should be safe (no context passed to avoid side-effects)\n  848:         obj_tm = users_obj.browse(cr, SUPERUSER_ID, uid, context=context).company_id.project_time_mode_id\n  849          tm = obj_tm and obj_tm.name or 'Hours'\n  850  \n  ...\n 1084      def message_get_reply_to(self, cr, uid, ids, context=None):\n 1085          \"\"\" Override to get the reply_to of the parent project. \"\"\"\n 1086:         tasks = self.browse(cr, SUPERUSER_ID, ids, context=context)\n 1087          project_ids = set([task.project_id.id for task in tasks if task.project_id])\n 1088          aliases = self.pool['project.project'].message_get_reply_to(cr, uid, list(project_ids), context=context)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\project_issue\\project_issue.py:\n   23  \n   24  from openerp import api\n   25: from openerp import SUPERUSER_ID\n   26  from openerp import tools\n   27  from openerp.osv import fields, osv, orm\n   ..\n  412      def message_get_reply_to(self, cr, uid, ids, context=None):\n  413          \"\"\" Override to get the reply_to of the parent project. \"\"\"\n  414:         issues = self.browse(cr, SUPERUSER_ID, ids, context=context)\n  415          project_ids = set([issue.project_id.id for issue in issues if issue.project_id])\n  416          aliases = self.pool['project.project'].message_get_reply_to(cr, uid, list(project_ids), context=context)\n  ...\n  457          res = super(project_issue, self).message_post(cr, uid, thread_id, body=body, subject=subject, type=type, subtype=subtype, parent_id=parent_id, attachments=attachments, context=context, content_subtype=content_subtype, **kwargs)\n  458          if thread_id and subtype:\n  459:             self.write(cr, SUPERUSER_ID, thread_id, {'date_action_last': fields.datetime.now()}, context=context)\n  460          return res\n  461  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\purchase\\purchase.py:\n   21  \n   22  import pytz\n   23: from openerp import SUPERUSER_ID, workflow\n   24  from datetime import datetime\n   25  from dateutil.relativedelta import relativedelta\n   ..\n 1318      def make_po(self, cr, uid, ids, context=None):\n 1319          \"\"\" Resolve the purchase from procurement, which may result in a new PO creation, a new PO line creation or a quantity change on existing PO line.\n 1320:         Note that some operations (as the PO creation) are made as SUPERUSER because the current user may not have rights to do it (mto product launched by a sale for example)\n 1321  \n 1322          @return: dictionary giving for each procurement its related resolving PO line.\n ....\n 1353                      if available_po_line_ids:\n 1354                          po_line = po_line_obj.browse(cr, uid, available_po_line_ids[0], context=context)\n 1355:                         po_line_obj.write(cr, SUPERUSER_ID, po_line.id, {'product_qty': po_line.product_qty + line_vals['product_qty']}, context=context)\n 1356                          po_line_id = po_line.id\n 1357                          sum_po_line_ids.append(procurement.id)\n 1358                      else:\n 1359                          line_vals.update(order_id=po_id)\n 1360:                         po_line_id = po_line_obj.create(cr, SUPERUSER_ID, line_vals, context=context)\n 1361                          linked_po_ids.append(procurement.id)\n 1362                  else:\n ....\n 1376                          'dest_address_id': procurement.partner_dest_id.id,\n 1377                      }\n 1378:                     po_id = self.create_procurement_purchase_order(cr, SUPERUSER_ID, procurement, po_vals, line_vals, context=context)\n 1379                      po_line_id = po_obj.browse(cr, uid, po_id, context=context).order_line[0].id\n 1380                      pass_ids.append(procurement.id)\n ....\n 1473          # read access on purchase.order object is not required\n 1474          if not purchase_order_obj.check_access_rights(cr, uid, 'read', raise_exception=False):\n 1475:             user_id = SUPERUSER_ID\n 1476          else:\n 1477              user_id = uid\n ....\n 1493          # read access on purchase.order object is not required\n 1494          if not purchase_order_obj.check_access_rights(cr, uid, 'read', raise_exception=False):\n 1495:             user_id = SUPERUSER_ID\n 1496          else:\n 1497              user_id = uid\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\purchase\\stock.py:\n   20  ##############################################################################\n   21  \n   22: from openerp import SUPERUSER_ID\n   23  from openerp.osv import fields, osv\n   24  from openerp.tools.translate import _\n   ..\n   41                  if move.purchase_line_id and move.purchase_line_id.order_id:\n   42                      order_id = move.purchase_line_id.order_id.id\n   43:                     # update linked purchase order as superuser as the warehouse\n   44                      # user may not have rights to access purchase.order\n   45                      if self.pool.get('purchase.order').test_moves_done(cr, uid, [order_id], context=context):\n   46:                         workflow.trg_validate(SUPERUSER_ID, 'purchase.order', order_id, 'picking_done', cr)\n   47                      if self.pool.get('purchase.order').test_moves_except(cr, uid, [order_id], context=context):\n   48:                         workflow.trg_validate(SUPERUSER_ID, 'purchase.order', order_id, 'picking_cancel', cr)\n   49          return res\n   50  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\report\\models\\report.py:\n   21  \n   22  from openerp import api\n   23: from openerp import SUPERUSER_ID\n   24  from openerp.exceptions import AccessError\n   25  from openerp.osv import osv\n   ..\n  205          footerhtml = []\n  206          irconfig_obj = self.pool['ir.config_parameter']\n  207:         base_url = irconfig_obj.get_param(cr, SUPERUSER_ID, 'report.url') or irconfig_obj.get_param(cr, SUPERUSER_ID, 'web.base.url')\n  208  \n  209          # Minimal page renderer\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\report\\models\\report_paperformat.py:\n   22  from functools import partial\n   23  \n   24: from openerp import SUPERUSER_ID\n   25  from openerp.osv import osv, fields\n   26  \n   ..\n  120      def init(self, cr):\n  121          # set a default paperformat based on rml one.\n  122:         ref = partial(self.pool['ir.model.data'].xmlid_to_res_id, cr, SUPERUSER_ID)\n  123  \n  124:         ids = self.search(cr, SUPERUSER_ID, [('paperformat_id', '=', False)])\n  125:         for company in self.browse(cr, SUPERUSER_ID, ids):\n  126              paperformat_id = {\n  127                  'a4': ref('report.paperformat_euro'),\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\report_webkit\\report\\webkit_report_demo.py:\n    2  \n    3  from openerp.addons.report_webkit.webkit_report import webkit_report_extender\n    4: from openerp import SUPERUSER_ID\n    5  \n    6  @webkit_report_extender(\"report_webkit.webkit_demo_report\")\n    7  def extend_demo(pool, cr, uid, localcontext, context):\n    8:     admin = pool.get(\"res.users\").browse(cr, uid, SUPERUSER_ID, context)\n    9      localcontext.update({\n   10          \"admin_name\": admin.name,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\sale_stock\\res_config.py:\n   21  \n   22  import openerp\n   23: from openerp import SUPERUSER_ID\n   24  from openerp.osv import fields, osv\n   25  from openerp.tools.translate import _\n   ..\n   75  \n   76      def set_sale_defaults(self, cr, uid, ids, context=None):\n   77:         if uid != SUPERUSER_ID and not self.pool['res.users'].has_group(cr, uid, 'base.group_erp_manager'):\n   78              raise openerp.exceptions.AccessError(_(\"Only administrators can change the settings\"))\n   79          ir_values = self.pool.get('ir.values')\n   ..\n   81  \n   82          default_picking_policy = 'one' if wizard.default_picking_policy else 'direct'\n   83:         ir_values.set_default(cr, SUPERUSER_ID, 'sale.order', 'picking_policy', default_picking_policy)\n   84          res = super(sale_configuration, self).set_sale_defaults(cr, uid, ids, context)\n   85          return res\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\sale_stock\\sale_stock.py:\n   26  from openerp.tools.translate import _\n   27  import pytz\n   28: from openerp import SUPERUSER_ID\n   29  \n   30  class sale_order(osv.osv):\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\share\\res_users.py:\n   20  ##############################################################################\n   21  from openerp.osv import fields, osv\n   22: from openerp import SUPERUSER_ID\n   23  \n   24  class res_users(osv.osv):\n   ..\n   60      def init(self, cr):\n   61          # force re-generation of the user groups view without the shared groups\n   62:         self.update_user_groups_view(cr, SUPERUSER_ID)\n   63          parent_class = super(res_groups, self)\n   64          if hasattr(parent_class, 'init'):\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\share\\wizard\\share_wizard.py:\n   23  import time\n   24  import uuid\n   25: from openerp import SUPERUSER_ID\n   26  \n   27  import simplejson\n   ..\n  529                          else:\n  530                              # otherwise we can simply link the rule to keep it dynamic\n  531:                             rule_obj.write(cr, SUPERUSER_ID, [rule.id], {\n  532                                      'groups': [(4,group_id)]\n  533                                  })\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock\\procurement.py:\n   24  \n   25  from openerp.tools import DEFAULT_SERVER_DATE_FORMAT, DEFAULT_SERVER_DATETIME_FORMAT, float_compare, float_round\n   26: from openerp import SUPERUSER_ID\n   27  from dateutil.relativedelta import relativedelta\n   28  from datetime import datetime\n   ..\n  201              move_obj = self.pool.get('stock.move')\n  202              move_dict = self._run_move_create(cr, uid, procurement, context=context)\n  203:             #create the move as SUPERUSER because the current user may not have the rights to do it (mto product launched by a sale for example)\n  204:             move_obj.create(cr, SUPERUSER_ID, move_dict, context=context)\n  205              return True\n  206          return super(procurement_order, self)._run(cr, uid, procurement, context=context)\n  ...\n  263          Call the scheduler in order to check the running procurements (super method), to check the minimum stock rules\n  264          and the availability of moves. This function is intended to be run for all the companies at the same time, so\n  265:         we run functions as SUPERUSER to avoid intercompanies and access rights issues.\n  266  \n  267          @param self: The object pointer\n  ...\n  284  \n  285              #Minimum stock rules\n  286:             self._procure_orderpoint_confirm(cr, SUPERUSER_ID, use_new_cursor=use_new_cursor, company_id=company_id, context=context)\n  287  \n  288              #Search all confirmed stock_moves and try to assign them\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock\\stock.py:\n   29  from openerp.tools.translate import _\n   30  from openerp.tools import DEFAULT_SERVER_DATETIME_FORMAT, DEFAULT_SERVER_DATE_FORMAT\n   31: from openerp import SUPERUSER_ID, api\n   32  import openerp.addons.decimal_precision as dp\n   33  from openerp.addons.procurement import procurement\n   ..\n  374          #reserve quants\n  375          if toreserve:\n  376:             self.write(cr, SUPERUSER_ID, toreserve, {'reservation_id': move.id}, context=context)\n  377              #if move has a picking_id, write on that picking that pack_operation might have changed and need to be recomputed\n  378              if move.picking_id:\n  ...\n  421                  'package_id': dest_package_id,\n  422                  'reservation_id': False}\n  423:         self.write(cr, SUPERUSER_ID, [q.id for q in quants], vals, context=context)\n  424  \n  425      def quants_get_prefered_domain(self, cr, uid, location, product, qty, domain=None, prefered_domain_list=[], restrict_lot_id=False, restrict_partner_id=False, context=None):\n  ...\n  510              negative_vals['negative_move_id'] = move.id\n  511              negative_vals['package_id'] = src_package_id\n  512:             negative_quant_id = self.create(cr, SUPERUSER_ID, negative_vals, context=context)\n  513              vals.update({'propagated_from_id': negative_quant_id})\n  514  \n  515:         #create the quant as superuser, because we want to restrict the creation of quant manually: we should always use this method to create quants\n  516:         quant_id = self.create(cr, SUPERUSER_ID, vals, context=context)\n  517          return self.browse(cr, uid, quant_id, context=context)\n  518  \n  ...\n  524          qty_round = float_round(qty, precision_rounding=rounding)\n  525          new_qty_round = float_round(quant.qty - qty, precision_rounding=rounding)\n  526:         new_quant = self.copy(cr, SUPERUSER_ID, quant.id, default={'qty': new_qty_round, 'history_ids': [(4, x.id) for x in quant.history_ids]}, context=context)\n  527:         self.write(cr, SUPERUSER_ID, quant.id, {'qty': qty_round}, context=context)\n  528          return self.browse(cr, uid, new_quant, context=context)\n  529  \n  ...\n  540          for move in solving_quant.history_ids:\n  541              path.append((4, move.id))\n  542:         self.write(cr, SUPERUSER_ID, solved_quant_ids, {'history_ids': path}, context=context)\n  543  \n  544      def _quant_reconcile_negative(self, cr, uid, quant, move, context=None):\n  ...\n  577                  remaining_to_solve_quant_ids = self.search(cr, uid, [('propagated_from_id', '=', quant_neg.id), ('id', 'not in', solved_quant_ids)], context=context)\n  578                  if remaining_to_solve_quant_ids:\n  579:                     self.write(cr, SUPERUSER_ID, remaining_to_solve_quant_ids, {'propagated_from_id': remaining_neg_quant.id}, context=context)\n  580              if solving_quant.propagated_from_id and solved_quant_ids:\n  581                  self.write(cr, uid, solved_quant_ids, {'propagated_from_id': solving_quant.propagated_from_id.id}, context=context)\n  582              #delete the reconciled quants, as it is replaced by the solved quants\n  583:             self.unlink(cr, SUPERUSER_ID, [quant_neg.id], context=context)\n  584              if solved_quant_ids:\n  585                  #price update + accounting entries adjustments\n  ...\n  587                  #merge history (and cost?)\n  588                  self._quants_merge(cr, uid, solved_quant_ids, solving_quant, context=context)\n  589:             self.unlink(cr, SUPERUSER_ID, [solving_quant.id], context=context)\n  590              solving_quant = remaining_solving_quant\n  591  \n  592      def _price_update(self, cr, uid, ids, newprice, context=None):\n  593:         self.write(cr, SUPERUSER_ID, ids, {'cost': newprice}, context=context)\n  594  \n  595      def quants_unreserve(self, cr, uid, move, context=None):\n  ...\n  601              if move.partially_available:\n  602                  self.pool.get(\"stock.move\").write(cr, uid, [move.id], {'partially_available': False}, context=context)\n  603:             self.write(cr, SUPERUSER_ID, related_quants, {'reservation_id': False}, context=context)\n  604  \n  605      def _quants_get_order(self, cr, uid, location, product, quantity, domain=[], orderby='in_date', context=None):\n  ...\n 2349                  # Handle pack in pack\n 2350                  if not ops.product_id and ops.package_id and ops.result_package_id.id != ops.package_id.parent_id.id:\n 2351:                     self.pool.get('stock.quant.package').write(cr, SUPERUSER_ID, [ops.package_id.id], {'parent_id': ops.result_package_id.id}, context=context)\n 2352                  if not move_qty.get(move.id):\n 2353                      raise osv.except_osv(_(\"Error\"), _(\"The roundings of your Unit of Measures %s on the move vs. %s on the product don't allow to do these operations or you are not transferring the picking at once. \") % (move.product_uom.name, move.product_id.uom_id.name))\n ....\n 3222          picking_type_obj = self.pool.get('stock.picking.type')\n 3223          #create new sequences\n 3224:         in_seq_id = seq_obj.create(cr, SUPERUSER_ID, values={'name': warehouse.name + _(' Sequence in'), 'prefix': warehouse.code + '/IN/', 'padding': 5}, context=context)\n 3225:         out_seq_id = seq_obj.create(cr, SUPERUSER_ID, values={'name': warehouse.name + _(' Sequence out'), 'prefix': warehouse.code + '/OUT/', 'padding': 5}, context=context)\n 3226:         pack_seq_id = seq_obj.create(cr, SUPERUSER_ID, values={'name': warehouse.name + _(' Sequence packing'), 'prefix': warehouse.code + '/PACK/', 'padding': 5}, context=context)\n 3227:         pick_seq_id = seq_obj.create(cr, SUPERUSER_ID, values={'name': warehouse.name + _(' Sequence picking'), 'prefix': warehouse.code + '/PICK/', 'padding': 5}, context=context)\n 3228:         int_seq_id = seq_obj.create(cr, SUPERUSER_ID, values={'name': warehouse.name + _(' Sequence internal'), 'prefix': warehouse.code + '/INT/', 'padding': 5}, context=context)\n 3229  \n 3230          wh_stock_loc = warehouse.lot_stock_id\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\stock_account\\stock_account.py:\n   22  from openerp.osv import fields, osv\n   23  from openerp.tools.translate import _\n   24: from openerp import SUPERUSER_ID, api\n   25  import logging\n   26  _logger = logging.getLogger(__name__)\n   ..\n  276              average_valuation_price += q.qty * q.cost\n  277          average_valuation_price = average_valuation_price / move.product_qty\n  278:         # Write the standard price, as SUPERUSER_ID because a warehouse manager may not have the right to write on products\n  279:         product_obj.write(cr, SUPERUSER_ID, [move.product_id.id], {'standard_price': average_valuation_price}, context=context)\n  280          self.write(cr, uid, [move.id], {'price_unit': average_valuation_price}, context=context)\n  281  \n  ...\n  301                      new_std_price = ((amount_unit * product_avail) + (move.price_unit * move.product_qty)) / (product_avail + move.product_qty)\n  302                  tmpl_dict[prod_tmpl_id] += move.product_qty\n  303:                 # Write the standard price, as SUPERUSER_ID because a warehouse manager may not have the right to write on products\n  304:                 product_obj.write(cr, SUPERUSER_ID, [product.id], {'standard_price': new_std_price}, context=context)\n  305  \n  306      def product_price_update_after_done(self, cr, uid, ids, context=None):\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\survey\\controllers\\main.py:\n   27  from math import ceil\n   28  \n   29: from openerp import SUPERUSER_ID\n   30  from openerp.addons.web import http\n   31  from openerp.addons.web.http import request\n   ..\n   42      def _check_bad_cases(self, cr, uid, request, survey_obj, survey, user_input_obj, context=None):\n   43          # In case of bad survey, redirect to surveys list\n   44:         if survey_obj.exists(cr, SUPERUSER_ID, survey.id, context=context) == []:\n   45              return werkzeug.utils.redirect(\"/survey/\")\n   46  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\survey\\survey.py:\n   98          sur_res_obj = self.pool.get('survey.user_input')\n   99          for id in ids:\n  100:             res[id] = sur_res_obj.search(cr, uid,  # SUPERUSER_ID,\n  101                  [('survey_id', '=', id), ('type', '=', 'link')],\n  102                  context=context, count=True)\n  ...\n  109          sur_res_obj = self.pool.get('survey.user_input')\n  110          for id in ids:\n  111:             res[id] = sur_res_obj.search(cr, uid,  # SUPERUSER_ID,\n  112                  ['&', ('survey_id', '=', id), '|', ('state', '=', 'skip'), ('state', '=', 'done')],\n  113                  context=context, count=True)\n  ...\n  119          sur_res_obj = self.pool.get('survey.user_input')\n  120          for id in ids:\n  121:             res[id] = sur_res_obj.search(cr, uid,  # SUPERUSER_ID,\n  122                  [('survey_id', '=', id), ('state', '=', 'done')],\n  123                  context=context, count=True)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\test_impex\\tests\\test_export.py:\n   19  \n   20      def make(self, value):\n   21:         id = self.model.create(self.cr, openerp.SUPERUSER_ID, {'value': value})\n   22:         return self.model.browse(self.cr, openerp.SUPERUSER_ID, [id])[0]\n   23  \n   24      def export(self, value, fields=('value',), context=None):\n   ..\n   45  \n   46      def test_empty(self):\n   47:         self.assertEqual(self.model.search(self.cr, openerp.SUPERUSER_ID, []), [],\n   48                           \"Test model should have no records\")\n   49      def test_0(self):\n   ..\n  239  \n  240      def test_localized_export(self):\n  241:         self.registry('res.lang').create(self.cr, openerp.SUPERUSER_ID, {\n  242              'name': u'Français',\n  243              'code': 'fr_FR',\n  ...\n  249          Translations = self.registry('ir.translation')\n  250          for source, value in self.translations_fr:\n  251:             Translations.create(self.cr, openerp.SUPERUSER_ID, {\n  252                  'name': 'export.selection,value',\n  253                  'lang': 'fr_FR',\n  ...\n  292          \"\"\"\n  293          integer_id = self.registry('export.integer').create(\n  294:             self.cr, openerp.SUPERUSER_ID, {'value': 42})\n  295          name = dict(self.registry('export.integer').name_get(\n  296:             self.cr, openerp.SUPERUSER_ID,[integer_id]))[integer_id]\n  297          self.assertEqual(\n  298              self.export(integer_id),\n  ...\n  302          \"\"\"\n  303          integer_id = self.registry('export.integer').create(\n  304:             self.cr, openerp.SUPERUSER_ID, {'value': 42})\n  305          self.assertEqual(\n  306              self.export(integer_id, fields=['value/.id', 'value/value']),\n  ...\n  308      def test_external_id(self):\n  309          integer_id = self.registry('export.integer').create(\n  310:             self.cr, openerp.SUPERUSER_ID, {'value': 42})\n  311          # Expecting the m2o target model name in the external id,\n  312          # not this model's name\n  ...\n  374          export = self.export(self.commands, fields=['const', 'value/.id'])\n  375          O2M_c = self.registry('export.one2many.child')\n  376:         ids = O2M_c.browse(self.cr, openerp.SUPERUSER_ID,\n  377:                            O2M_c.search(self.cr, openerp.SUPERUSER_ID, []))\n  378          self.assertEqual(\n  379              export,\n  ...\n  431      def make(self, value=None, **values):\n  432          if value is not None: values['value'] = value\n  433:         id = self.model.create(self.cr, openerp.SUPERUSER_ID, values)\n  434:         return self.model.browse(self.cr, openerp.SUPERUSER_ID, [id])[0]\n  435  \n  436      def export(self, value=None, fields=('child1', 'child2',), context=None, **values):\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\test_impex\\tests\\test_import.py:\n   41      def import_(self, fields, rows, context=None):\n   42          return self.model.import_data(\n   43:             self.cr, openerp.SUPERUSER_ID, fields, rows, context=context)\n   44      def read(self, fields=('value',), domain=(), context=None):\n   45          return self.model.read(\n   46:             self.cr, openerp.SUPERUSER_ID,\n   47:             self.model.search(self.cr, openerp.SUPERUSER_ID, domain, context=context),\n   48              fields=fields, context=context)\n   49      def browse(self, domain=(), context=None):\n   50          return self.model.browse(\n   51:             self.cr, openerp.SUPERUSER_ID,\n   52:             self.model.search(self.cr, openerp.SUPERUSER_ID, domain, context=context),\n   53              context=context)\n   54  \n   ..\n   57  \n   58          ids = ModelData.search(\n   59:             self.cr, openerp.SUPERUSER_ID,\n   60              [('model', '=', record._name), ('res_id', '=', record.id)])\n   61          if ids:\n   62              d = ModelData.read(\n   63:                 self.cr, openerp.SUPERUSER_ID, ids, ['name', 'module'])[0]\n   64              if d['module']:\n   65                  return '%s.%s' % (d['module'], d['name'])\n   ..\n   69          # fix dotted name_get results, otherwise xid lookups blow up\n   70          name = name.replace('.', '-')\n   71:         ModelData.create(self.cr, openerp.SUPERUSER_ID, {\n   72              'name': name,\n   73              'model': record._name,\n   ..\n   93  \n   94      def test_update_with_id(self):\n   95:         id = self.model.create(self.cr, openerp.SUPERUSER_ID, {'value': 36})\n   96          self.assertEqual(\n   97              36,\n   98:             self.model.browse(self.cr, openerp.SUPERUSER_ID, id).value)\n   99  \n  100          self.assertEqual(\n  ...\n  386  \n  387      def test_imported_translated(self):\n  388:         self.registry('res.lang').create(self.cr, openerp.SUPERUSER_ID, {\n  389              'name': u'Français',\n  390              'code': 'fr_FR',\n  ...\n  396          Translations = self.registry('ir.translation')\n  397          for source, value in self.translations_fr:\n  398:             Translations.create(self.cr, openerp.SUPERUSER_ID, {\n  399                  'name': 'export.selection,value',\n  400                  'lang': 'fr_FR',\n  ...\n  453          \"\"\" Expects output of selection function returns translated labels\n  454          \"\"\"\n  455:         self.registry('res.lang').create(self.cr, openerp.SUPERUSER_ID, {\n  456              'name': u'Français',\n  457              'code': 'fr_FR',\n  ...\n  463          Translations = self.registry('ir.translation')\n  464          for source, value in self.translations_fr:\n  465:             Translations.create(self.cr, openerp.SUPERUSER_ID, {\n  466                  'name': 'export.selection,value',\n  467                  'lang': 'fr_FR',\n  ...\n  486          # create integer objects\n  487          integer_id1 = self.registry('export.integer').create(\n  488:             self.cr, openerp.SUPERUSER_ID, {'value': 42})\n  489          integer_id2 = self.registry('export.integer').create(\n  490:             self.cr, openerp.SUPERUSER_ID, {'value': 36})\n  491          # get its name\n  492          name1 = dict(self.registry('export.integer').name_get(\n  493:             self.cr, openerp.SUPERUSER_ID,[integer_id1]))[integer_id1]\n  494          name2 = dict(self.registry('export.integer').name_get(\n  495:             self.cr, openerp.SUPERUSER_ID,[integer_id2]))[integer_id2]\n  496  \n  497          self.assertEqual(\n  ...\n  513          ExportInteger = self.registry('export.integer')\n  514          integer_id = ExportInteger.create(\n  515:             self.cr, openerp.SUPERUSER_ID, {'value': 42})\n  516          xid = self.xid(ExportInteger.browse(\n  517:             self.cr, openerp.SUPERUSER_ID, [integer_id])[0])\n  518  \n  519          self.assertEqual(\n  ...\n  525      def test_by_id(self):\n  526          integer_id = self.registry('export.integer').create(\n  527:             self.cr, openerp.SUPERUSER_ID, {'value': 42})\n  528          self.assertEqual(\n  529              self.import_(['value/.id'], [[integer_id]]),\n  ...\n  534      def test_by_names(self):\n  535          integer_id1 = self.registry('export.integer').create(\n  536:             self.cr, openerp.SUPERUSER_ID, {'value': 42})\n  537          integer_id2 = self.registry('export.integer').create(\n  538:             self.cr, openerp.SUPERUSER_ID, {'value': 42})\n  539          name1 = dict(self.registry('export.integer').name_get(\n  540:             self.cr, openerp.SUPERUSER_ID,[integer_id1]))[integer_id1]\n  541          name2 = dict(self.registry('export.integer').name_get(\n  542:             self.cr, openerp.SUPERUSER_ID,[integer_id2]))[integer_id2]\n  543          # names should be the same\n  544          self.assertEqual(name1, name2)\n  ...\n  556          # create integer objects\n  557          integer_id1 = self.registry('export.integer').create(\n  558:             self.cr, openerp.SUPERUSER_ID, {'value': 42})\n  559          integer_id2 = self.registry('export.integer').create(\n  560:             self.cr, openerp.SUPERUSER_ID, {'value': 36})\n  561  \n  562          self.assertEqual(\n  ...\n  598      def test_ids(self):\n  599          id1 = self.registry('export.many2many.other').create(\n  600:                 self.cr, openerp.SUPERUSER_ID, {'value': 3, 'str': 'record0'})\n  601          id2 = self.registry('export.many2many.other').create(\n  602:                 self.cr, openerp.SUPERUSER_ID, {'value': 44, 'str': 'record1'})\n  603          id3 = self.registry('export.many2many.other').create(\n  604:                 self.cr, openerp.SUPERUSER_ID, {'value': 84, 'str': 'record2'})\n  605          id4 = self.registry('export.many2many.other').create(\n  606:                 self.cr, openerp.SUPERUSER_ID, {'value': 9, 'str': 'record3'})\n  607          id5 = self.registry('export.many2many.other').create(\n  608:                 self.cr, openerp.SUPERUSER_ID, {'value': 99, 'str': 'record4'})\n  609  \n  610          self.assertEqual(\n  ...\n  632      def test_xids(self):\n  633          M2O_o = self.registry('export.many2many.other')\n  634:         id1 = M2O_o.create(self.cr, openerp.SUPERUSER_ID, {'value': 3, 'str': 'record0'})\n  635:         id2 = M2O_o.create(self.cr, openerp.SUPERUSER_ID, {'value': 44, 'str': 'record1'})\n  636:         id3 = M2O_o.create(self.cr, openerp.SUPERUSER_ID, {'value': 84, 'str': 'record2'})\n  637:         id4 = M2O_o.create(self.cr, openerp.SUPERUSER_ID, {'value': 9, 'str': 'record3'})\n  638:         records = M2O_o.browse(self.cr, openerp.SUPERUSER_ID, [id1, id2, id3, id4])\n  639  \n  640          self.assertEqual(\n  ...\n  656      def test_names(self):\n  657          M2O_o = self.registry('export.many2many.other')\n  658:         id1 = M2O_o.create(self.cr, openerp.SUPERUSER_ID, {'value': 3, 'str': 'record0'})\n  659:         id2 = M2O_o.create(self.cr, openerp.SUPERUSER_ID, {'value': 44, 'str': 'record1'})\n  660:         id3 = M2O_o.create(self.cr, openerp.SUPERUSER_ID, {'value': 84, 'str': 'record2'})\n  661:         id4 = M2O_o.create(self.cr, openerp.SUPERUSER_ID, {'value': 9, 'str': 'record3'})\n  662:         records = M2O_o.browse(self.cr, openerp.SUPERUSER_ID, [id1, id2, id3, id4])\n  663  \n  664          name = lambda record: record.name_get()[0][1]\n  ...\n  683      def test_import_to_existing(self):\n  684          M2O_o = self.registry('export.many2many.other')\n  685:         id1 = M2O_o.create(self.cr, openerp.SUPERUSER_ID, {'value': 3, 'str': 'record0'})\n  686:         id2 = M2O_o.create(self.cr, openerp.SUPERUSER_ID, {'value': 44, 'str': 'record1'})\n  687:         id3 = M2O_o.create(self.cr, openerp.SUPERUSER_ID, {'value': 84, 'str': 'record2'})\n  688:         id4 = M2O_o.create(self.cr, openerp.SUPERUSER_ID, {'value': 9, 'str': 'record3'})\n  689  \n  690          xid = 'myxid'\n  ...\n  768  \n  769      def test_link_inline(self):\n  770:         id1 = self.registry('export.one2many.child').create(self.cr, openerp.SUPERUSER_ID, {\n  771              'str': 'Bf', 'value': 109\n  772          })\n  773:         id2 = self.registry('export.one2many.child').create(self.cr, openerp.SUPERUSER_ID, {\n  774              'str': 'Me', 'value': 262\n  775          })\n  ...\n  787  \n  788      def test_link(self):\n  789:         id1 = self.registry('export.one2many.child').create(self.cr, openerp.SUPERUSER_ID, {\n  790              'str': 'Bf', 'value': 109\n  791          })\n  792:         id2 = self.registry('export.one2many.child').create(self.cr, openerp.SUPERUSER_ID, {\n  793              'str': 'Me', 'value': 262\n  794          })\n  ...\n  809      def test_link_2(self):\n  810          O2M_c = self.registry('export.one2many.child')\n  811:         id1 = O2M_c.create(self.cr, openerp.SUPERUSER_ID, {\n  812              'str': 'Bf', 'value': 109\n  813          })\n  814:         id2 = O2M_c.create(self.cr, openerp.SUPERUSER_ID, {\n  815              'str': 'Me', 'value': 262\n  816          })\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\test_impex\\tests\\test_load.py:\n   40      def import_(self, fields, rows, context=None):\n   41          return self.model.load(\n   42:             self.cr, openerp.SUPERUSER_ID, fields, rows, context=context)\n   43      def read(self, fields=('value',), domain=(), context=None):\n   44          return self.model.read(\n   45:             self.cr, openerp.SUPERUSER_ID,\n   46:             self.model.search(self.cr, openerp.SUPERUSER_ID, domain, context=context),\n   47              fields=fields, context=context)\n   48      def browse(self, domain=(), context=None):\n   49          return self.model.browse(\n   50:             self.cr, openerp.SUPERUSER_ID,\n   51:             self.model.search(self.cr, openerp.SUPERUSER_ID, domain, context=context),\n   52              context=context)\n   53  \n   ..\n   56  \n   57          ids = ModelData.search(\n   58:             self.cr, openerp.SUPERUSER_ID,\n   59              [('model', '=', record._name), ('res_id', '=', record.id)])\n   60          if ids:\n   61              d = ModelData.read(\n   62:                 self.cr, openerp.SUPERUSER_ID, ids, ['name', 'module'])[0]\n   63              if d['module']:\n   64                  return '%s.%s' % (d['module'], d['name'])\n   ..\n   68          # fix dotted name_get results, otherwise xid lookups blow up\n   69          name = name.replace('.', '-')\n   70:         ModelData.create(self.cr, openerp.SUPERUSER_ID, {\n   71              'name': name,\n   72              'model': record._name,\n   ..\n   78      def add_translations(self, name, type, code, *tnx):\n   79          Lang = self.registry('res.lang')\n   80:         if not Lang.search(self.cr, openerp.SUPERUSER_ID, [('code', '=', code)]):\n   81:             Lang.create(self.cr, openerp.SUPERUSER_ID, {\n   82                  'name': code,\n   83                  'code': code,\n   ..\n   88          Translations = self.registry('ir.translation')\n   89          for source, value in tnx:\n   90:             Translations.create(self.cr, openerp.SUPERUSER_ID, {\n   91                  'name': name,\n   92                  'lang': code,\n   ..\n  119  \n  120      def test_update_with_id(self):\n  121:         id = self.model.create(self.cr, openerp.SUPERUSER_ID, {'value': 36})\n  122          self.assertEqual(\n  123              36,\n  124:             self.model.browse(self.cr, openerp.SUPERUSER_ID, id).value)\n  125  \n  126          result = self.import_(['.id', 'value'], [[str(id), '42']])\n  ...\n  549          # create integer objects\n  550          integer_id1 = self.registry('export.integer').create(\n  551:             self.cr, openerp.SUPERUSER_ID, {'value': 42})\n  552          integer_id2 = self.registry('export.integer').create(\n  553:             self.cr, openerp.SUPERUSER_ID, {'value': 36})\n  554          # get its name\n  555          name1 = dict(self.registry('export.integer').name_get(\n  556:             self.cr, openerp.SUPERUSER_ID,[integer_id1]))[integer_id1]\n  557          name2 = dict(self.registry('export.integer').name_get(\n  558:             self.cr, openerp.SUPERUSER_ID,[integer_id2]))[integer_id2]\n  559  \n  560          result = self.import_(['value'], [\n  ...\n  576          ExportInteger = self.registry('export.integer')\n  577          integer_id = ExportInteger.create(\n  578:             self.cr, openerp.SUPERUSER_ID, {'value': 42})\n  579          xid = self.xid(ExportInteger.browse(\n  580:             self.cr, openerp.SUPERUSER_ID, [integer_id])[0])\n  581  \n  582          result = self.import_(['value/id'], [[xid]])\n  ...\n  588      def test_by_id(self):\n  589          integer_id = self.registry('export.integer').create(\n  590:             self.cr, openerp.SUPERUSER_ID, {'value': 42})\n  591          result = self.import_(['value/.id'], [[integer_id]])\n  592          self.assertFalse(result['messages'])\n  ...\n  597      def test_by_names(self):\n  598          integer_id1 = self.registry('export.integer').create(\n  599:             self.cr, openerp.SUPERUSER_ID, {'value': 42})\n  600          integer_id2 = self.registry('export.integer').create(\n  601:             self.cr, openerp.SUPERUSER_ID, {'value': 42})\n  602          name1 = dict(self.registry('export.integer').name_get(\n  603:             self.cr, openerp.SUPERUSER_ID,[integer_id1]))[integer_id1]\n  604          name2 = dict(self.registry('export.integer').name_get(\n  605:             self.cr, openerp.SUPERUSER_ID,[integer_id2]))[integer_id2]\n  606          # names should be the same\n  607          self.assertEqual(name1, name2)\n  ...\n  622          # create integer objects\n  623          integer_id1 = self.registry('export.integer').create(\n  624:             self.cr, openerp.SUPERUSER_ID, {'value': 42})\n  625          integer_id2 = self.registry('export.integer').create(\n  626:             self.cr, openerp.SUPERUSER_ID, {'value': 36})\n  627  \n  628          # Because name_search all the things. Fallback schmallback\n  ...\n  699      def test_ids(self):\n  700          id1 = self.registry('export.many2many.other').create(\n  701:                 self.cr, openerp.SUPERUSER_ID, {'value': 3, 'str': 'record0'})\n  702          id2 = self.registry('export.many2many.other').create(\n  703:                 self.cr, openerp.SUPERUSER_ID, {'value': 44, 'str': 'record1'})\n  704          id3 = self.registry('export.many2many.other').create(\n  705:                 self.cr, openerp.SUPERUSER_ID, {'value': 84, 'str': 'record2'})\n  706          id4 = self.registry('export.many2many.other').create(\n  707:                 self.cr, openerp.SUPERUSER_ID, {'value': 9, 'str': 'record3'})\n  708          id5 = self.registry('export.many2many.other').create(\n  709:                 self.cr, openerp.SUPERUSER_ID, {'value': 99, 'str': 'record4'})\n  710  \n  711          result = self.import_(['value/.id'], [\n  ...\n  737      def test_xids(self):\n  738          M2O_o = self.registry('export.many2many.other')\n  739:         id1 = M2O_o.create(self.cr, openerp.SUPERUSER_ID, {'value': 3, 'str': 'record0'})\n  740:         id2 = M2O_o.create(self.cr, openerp.SUPERUSER_ID, {'value': 44, 'str': 'record1'})\n  741:         id3 = M2O_o.create(self.cr, openerp.SUPERUSER_ID, {'value': 84, 'str': 'record2'})\n  742:         id4 = M2O_o.create(self.cr, openerp.SUPERUSER_ID, {'value': 9, 'str': 'record3'})\n  743:         records = M2O_o.browse(self.cr, openerp.SUPERUSER_ID, [id1, id2, id3, id4])\n  744  \n  745          result = self.import_(['value/id'], [\n  ...\n  764      def test_names(self):\n  765          M2O_o = self.registry('export.many2many.other')\n  766:         id1 = M2O_o.create(self.cr, openerp.SUPERUSER_ID, {'value': 3, 'str': 'record0'})\n  767:         id2 = M2O_o.create(self.cr, openerp.SUPERUSER_ID, {'value': 44, 'str': 'record1'})\n  768:         id3 = M2O_o.create(self.cr, openerp.SUPERUSER_ID, {'value': 84, 'str': 'record2'})\n  769:         id4 = M2O_o.create(self.cr, openerp.SUPERUSER_ID, {'value': 9, 'str': 'record3'})\n  770:         records = M2O_o.browse(self.cr, openerp.SUPERUSER_ID, [id1, id2, id3, id4])\n  771  \n  772          name = lambda record: record.name_get()[0][1]\n  ...\n  794      def test_import_to_existing(self):\n  795          M2O_o = self.registry('export.many2many.other')\n  796:         id1 = M2O_o.create(self.cr, openerp.SUPERUSER_ID, {'value': 3, 'str': 'record0'})\n  797:         id2 = M2O_o.create(self.cr, openerp.SUPERUSER_ID, {'value': 44, 'str': 'record1'})\n  798:         id3 = M2O_o.create(self.cr, openerp.SUPERUSER_ID, {'value': 84, 'str': 'record2'})\n  799:         id4 = M2O_o.create(self.cr, openerp.SUPERUSER_ID, {'value': 9, 'str': 'record3'})\n  800  \n  801          xid = 'myxid'\n  ...\n  883          \"\"\" m2m-style specification for o2ms\n  884          \"\"\"\n  885:         id1 = self.registry('export.one2many.child').create(self.cr, openerp.SUPERUSER_ID, {\n  886              'str': 'Bf', 'value': 109\n  887          })\n  888:         id2 = self.registry('export.one2many.child').create(self.cr, openerp.SUPERUSER_ID, {\n  889              'str': 'Me', 'value': 262\n  890          })\n  ...\n  906          \"\"\"\n  907          O2M = self.registry('export.one2many.child')\n  908:         id1 = O2M.create(self.cr, openerp.SUPERUSER_ID, {\n  909              'str': 'Bf', 'value': 109\n  910          })\n  911:         id2 = O2M.create(self.cr, openerp.SUPERUSER_ID, {\n  912              'str': 'Me', 'value': 262\n  913          })\n  ...\n  928      def test_link_2(self):\n  929          O2M_c = self.registry('export.one2many.child')\n  930:         id1 = O2M_c.create(self.cr, openerp.SUPERUSER_ID, {\n  931              'str': 'Bf', 'value': 109\n  932          })\n  933:         id2 = O2M_c.create(self.cr, openerp.SUPERUSER_ID, {\n  934              'str': 'Me', 'value': 262\n  935          })\n  ...\n 1002          data = json.loads(pkgutil.get_data(self.__module__, 'contacts_big.json'))\n 1003          result = self.registry('res.partner').load(\n 1004:             self.cr, openerp.SUPERUSER_ID,\n 1005              ['name', 'mobile', 'email', 'image'],\n 1006              data)\n ....\n 1011          data = json.loads(pkgutil.get_data(self.__module__, 'contacts.json'))\n 1012          result = self.registry('res.partner').load(\n 1013:             self.cr, openerp.SUPERUSER_ID,\n 1014              [\"name\", \"type\", \"street\", \"city\", \"country_id\", \"category_id\",\n 1015               \"supplier\", \"customer\", \"is_company\", \"parent_id\"],\n ....\n 1024          self.registry('ir.model.data').clear_caches()\n 1025          Model = self.registry('export.one2many.recursive')\n 1026:         result = Model.load(self.cr, openerp.SUPERUSER_ID,\n 1027              ['value', 'child/const', 'child/child1/str', 'child/child2/value'],\n 1028              [\n ....\n 1039          self.assertEqual(len(result['ids']), 2)\n 1040  \n 1041:         b = Model.browse(self.cr, openerp.SUPERUSER_ID, result['ids'], context=None)\n 1042          self.assertEqual((b[0].value, b[1].value), (4, 5))\n 1043  \n ....\n 1097          # context\n 1098          self.registry('res.users').write(\n 1099:             self.cr, openerp.SUPERUSER_ID, [openerp.SUPERUSER_ID],\n 1100              {'tz': 'Asia/Hovd'})\n 1101  \n ....\n 1122          # UTC +1000\n 1123          self.registry('res.users').write(\n 1124:             self.cr, openerp.SUPERUSER_ID, [openerp.SUPERUSER_ID],\n 1125              {'tz': 'Asia/Yakutsk'})\n 1126  \n ....\n 1137          \"\"\"\n 1138          self.registry('res.users').write(\n 1139:             self.cr, openerp.SUPERUSER_ID, [openerp.SUPERUSER_ID],\n 1140              {'tz': False})\n 1141  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\test_workflow\\tests\\test_workflow.py:\n    1  # -*- coding: utf-8 -*-\n    2  import openerp\n    3: from openerp import SUPERUSER_ID\n    4  from openerp.tests import common\n    5  \n    .\n   15          # Given the workflow instance associated to the record ...\n   16          instance_id = instance.search(\n   17:             self.cr, SUPERUSER_ID,\n   18              [('res_type', '=', model_name), ('res_id', '=', i)])\n   19          self.assertTrue( instance_id, 'A workflow instance is expected.')\n   ..\n   21          # ... get all its workitems ...\n   22          workitem_ids = workitem.search(\n   23:             self.cr, SUPERUSER_ID,\n   24              [('inst_id', '=', instance_id[0])])\n   25          self.assertTrue(\n   ..\n   29          # ... and check the activity the are in against the provided names.\n   30          workitem_records = workitem.browse(\n   31:             self.cr, SUPERUSER_ID, workitem_ids)\n   32          self.assertEqual(\n   33              sorted([item.act_id.name for item in workitem_records]),\n   ..\n   38          \"\"\"\n   39          model = self.registry(model_name)\n   40:         record = model.read(self.cr, SUPERUSER_ID, [i], ['value'])[0]\n   41          self.assertEqual(record['value'], value)\n   42  \n   ..\n   45          trigger = self.registry('test.workflow.trigger')\n   46  \n   47:         i = model.create(self.cr, SUPERUSER_ID, {})\n   48          self.check_activities(model._name, i, ['a'])\n   49  \n   50          # a -> b is just a signal.\n   51:         model.signal_workflow(self.cr, SUPERUSER_ID, [i], 'a-b')\n   52          self.check_activities(model._name, i, ['b'])\n   53  \n   54          # b -> c is a trigger (which is False),\n   55          # so we remain in the b activity.\n   56:         model.trigger(self.cr, SUPERUSER_ID)\n   57          self.check_activities(model._name, i, ['b'])\n   58  \n   59          # b -> c is a trigger (which is set to True).\n   60          # so we go in c when the trigger is called.\n   61:         trigger.write(self.cr, SUPERUSER_ID, [1], {'value': True})\n   62:         model.trigger(self.cr, SUPERUSER_ID)\n   63          self.check_activities(model._name, i, ['c'])\n   64  \n   ..\n   67              True)\n   68  \n   69:         model.unlink(self.cr, SUPERUSER_ID, [i])\n   70  \n   71      def test_workflow_a(self):\n   72          model = self.registry('test.workflow.model.a')\n   73  \n   74:         i = model.create(self.cr, SUPERUSER_ID, {})\n   75          self.check_activities(model._name, i, ['a'])\n   76          self.check_value(model._name, i, 0)\n   77  \n   78:         model.unlink(self.cr, SUPERUSER_ID, [i])\n   79  \n   80      def test_workflow_b(self):\n   81          model = self.registry('test.workflow.model.b')\n   82  \n   83:         i = model.create(self.cr, SUPERUSER_ID, {})\n   84          self.check_activities(model._name, i, ['a'])\n   85          self.check_value(model._name, i, 1)\n   86  \n   87:         model.unlink(self.cr, SUPERUSER_ID, [i])\n   88  \n   89      def test_workflow_c(self):\n   90          model = self.registry('test.workflow.model.c')\n   91  \n   92:         i = model.create(self.cr, SUPERUSER_ID, {})\n   93          self.check_activities(model._name, i, ['a'])\n   94          self.check_value(model._name, i, 0)\n   95  \n   96:         model.unlink(self.cr, SUPERUSER_ID, [i])\n   97  \n   98      def test_workflow_d(self):\n   99          model = self.registry('test.workflow.model.d')\n  100  \n  101:         i = model.create(self.cr, SUPERUSER_ID, {})\n  102          self.check_activities(model._name, i, ['a'])\n  103          self.check_value(model._name, i, 1)\n  104  \n  105:         model.unlink(self.cr, SUPERUSER_ID, [i])\n  106  \n  107      def test_workflow_e(self):\n  108          model = self.registry('test.workflow.model.e')\n  109  \n  110:         i = model.create(self.cr, SUPERUSER_ID, {})\n  111          self.check_activities(model._name, i, ['b'])\n  112          self.check_value(model._name, i, 2)\n  113  \n  114:         model.unlink(self.cr, SUPERUSER_ID, [i])\n  115  \n  116      def test_workflow_f(self):\n  117          model = self.registry('test.workflow.model.f')\n  118  \n  119:         i = model.create(self.cr, SUPERUSER_ID, {})\n  120          self.check_activities(model._name, i, ['a'])\n  121          self.check_value(model._name, i, 1)\n  122  \n  123:         model.signal_workflow(self.cr, SUPERUSER_ID, [i], 'a-b')\n  124          self.check_activities(model._name, i, ['b'])\n  125          self.check_value(model._name, i, 2)\n  126  \n  127:         model.unlink(self.cr, SUPERUSER_ID, [i])\n  128  \n  129      def test_workflow_g(self):\n  130          model = self.registry('test.workflow.model.g')\n  131  \n  132:         i = model.create(self.cr, SUPERUSER_ID, {})\n  133          self.check_activities(model._name, i, ['a'])\n  134          self.check_value(model._name, i, 1)\n  135  \n  136:         model.unlink(self.cr, SUPERUSER_ID, [i])\n  137  \n  138      def test_workflow_h(self):\n  139          model = self.registry('test.workflow.model.h')\n  140  \n  141:         i = model.create(self.cr, SUPERUSER_ID, {})\n  142          self.check_activities(model._name, i, ['b', 'c'])\n  143          self.check_value(model._name, i, 2)\n  144  \n  145:         model.unlink(self.cr, SUPERUSER_ID, [i])\n  146  \n  147      def test_workflow_i(self):\n  148          model = self.registry('test.workflow.model.i')\n  149  \n  150:         i = model.create(self.cr, SUPERUSER_ID, {})\n  151          self.check_activities(model._name, i, ['b'])\n  152          self.check_value(model._name, i, 2)\n  153  \n  154:         model.unlink(self.cr, SUPERUSER_ID, [i])\n  155  \n  156      def test_workflow_j(self):\n  157          model = self.registry('test.workflow.model.j')\n  158  \n  159:         i = model.create(self.cr, SUPERUSER_ID, {})\n  160          self.check_activities(model._name, i, ['a'])\n  161          self.check_value(model._name, i, 1)\n  162  \n  163:         model.unlink(self.cr, SUPERUSER_ID, [i])\n  164  \n  165      def test_workflow_k(self):\n  166          model = self.registry('test.workflow.model.k')\n  167  \n  168:         i = model.create(self.cr, SUPERUSER_ID, {})\n  169          # Non-determinisitic: can be b or c\n  170          # self.check_activities(model._name, i, ['b'])\n  ...\n  172          self.check_value(model._name, i, 2)\n  173  \n  174:         model.unlink(self.cr, SUPERUSER_ID, [i])\n  175  \n  176      def test_workflow_l(self):\n  177          model = self.registry('test.workflow.model.l')\n  178  \n  179:         i = model.create(self.cr, SUPERUSER_ID, {})\n  180          self.check_activities(model._name, i, ['c', 'c', 'd'])\n  181          self.check_value(model._name, i, 3)\n  182  \n  183:         model.unlink(self.cr, SUPERUSER_ID, [i])\n  184  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\web\\controllers\\main.py:\n  492  \n  493          if not request.uid:\n  494:             request.uid = openerp.SUPERUSER_ID\n  495  \n  496          values = request.params.copy()\n  ...\n  594      def translations(self, mods=None, lang=None):\n  595          request.disable_db = False\n  596:         uid = openerp.SUPERUSER_ID\n  597          if mods is None:\n  598              m = request.registry.get('ir.module.module')\n  ...\n 1199  \n 1200          if not uid:\n 1201:             uid = openerp.SUPERUSER_ID\n 1202  \n 1203          if not dbname:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website\\controllers\\main.py:\n   79      @http.route('/sitemap.xml', type='http', auth=\"public\", website=True)\n   80      def sitemap_xml_index(self):\n   81:         cr, uid, context = request.cr, openerp.SUPERUSER_ID, request.context\n   82          ira = request.registry['ir.attachment']\n   83          iuv = request.registry['ir.ui.view']\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website\\models\\ir_http.py:\n   41          # TODO: select user_id from matching website\n   42          if not request.session.uid:\n   43:             request.uid = self.pool['ir.model.data'].xmlid_to_res_id(request.cr, openerp.SUPERUSER_ID, 'base.public_user')\n   44          else:\n   45              request.uid = request.session.uid\n   ..\n  166      def _serve_attachment(self):\n  167          domain = [('type', '=', 'binary'), ('url', '=', request.httprequest.path)]\n  168:         attach = self.pool['ir.attachment'].search_read(request.cr, openerp.SUPERUSER_ID, domain, ['__last_update', 'datas', 'mimetype'], context=request.context)\n  169          if attach:\n  170              wdate = attach[0]['__last_update']\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website\\models\\ir_qweb.py:\n  184          # convert back from user's timezone to UTC\n  185          tz_name = context.get('tz') \\\n  186:             or self.pool['res.users'].read(cr, openerp.SUPERUSER_ID, uid, ['tz'], context=context)['tz']\n  187          if tz_name:\n  188              try:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website\\models\\ir_ui_view.py:\n    4  from lxml import etree, html\n    5  \n    6: from openerp import SUPERUSER_ID, api\n    7  from openerp.addons.website.models import website\n    8  from openerp.http import request\n    .\n  140                  context = {}\n  141  \n  142:             company = self.pool['res.company'].browse(cr, SUPERUSER_ID, request.website.company_id.id, context=context)\n  143  \n  144              qcontext = dict(\n  ...\n  212          }, context=context)\n  213  \n  214:         view = self.browse(cr, SUPERUSER_ID, res_id, context=context)\n  215          if view.model_data_id:\n  216              view.model_data_id.write({'noupdate': True})\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website\\models\\website.py:\n  172  \n  173      _defaults = {\n  174:         'company_id': lambda self,cr,uid,c: self.pool['ir.model.data'].xmlid_to_res_id(cr, openerp.SUPERUSER_ID, 'base.public_user'),\n  175      }\n  176  \n  ...\n  538                             [('id', '=', id)], context=context)\n  539          if not ids and 'website_published' in Model._fields:\n  540:             ids = Model.search(cr, openerp.SUPERUSER_ID,\n  541                                 [('id', '=', id), ('website_published', '=', True)], context=context)\n  542          if not ids:\n  ...\n  544  \n  545          concurrency = '__last_update'\n  546:         [record] = Model.read(cr, openerp.SUPERUSER_ID, [id],\n  547                                [concurrency, field],\n  548                                context=context)\n  ...\n  794      _inherit = \"res.company\"\n  795      def google_map_img(self, cr, uid, ids, zoom=8, width=298, height=298, context=None):\n  796:         partner = self.browse(cr, openerp.SUPERUSER_ID, ids[0], context=context).partner_id\n  797          return partner and partner.google_map_img(zoom, width, height, context=context) or None\n  798      def google_map_link(self, cr, uid, ids, zoom=8, context=None):\n  799:         partner = self.browse(cr, openerp.SUPERUSER_ID, ids[0], context=context).partner_id\n  800          return partner and partner.google_map_link(zoom, context=context) or None\n  801  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_blog\\controllers\\main.py:\n   10  from openerp.osv.orm import browse_record\n   11  from openerp.tools.translate import _\n   12: from openerp import SUPERUSER_ID\n   13  from openerp.tools import html2plaintext\n   14  \n   ..\n  234              request.session[request.session_id].append(blog_post.id)\n  235              # Increase counter\n  236:             blog_post_obj.write(cr, SUPERUSER_ID, [blog_post.id], {\n  237                  'visits': blog_post.visits+1,\n  238              },context=context)\n  ...\n  248          else:\n  249              partner_ids = blog_post._find_partner_from_emails(\n  250:                 cr, SUPERUSER_ID, 0, [post.get('email')], context=context)\n  251              if not partner_ids or not partner_ids[0]:\n  252:                 partner_ids = [partner_obj.create(cr, SUPERUSER_ID, {'name': post.get('name'), 'email': post.get('email')}, context=context)]\n  253  \n  254          message_id = blog_post.message_post(\n  255:             cr, SUPERUSER_ID, int(blog_post_id),\n  256              body=post.get('comment'),\n  257              type='comment',\n  ...\n  276          values = []\n  277          mail_obj = request.registry.get('mail.message')\n  278:         for message in mail_obj.browse(cr, SUPERUSER_ID, ids, context=context):\n  279              values.append({\n  280                  \"id\": message.id,\n  ...\n  335          if not publish:\n  336              domain.append(('website_published', '=', True))\n  337:         ids = mail_obj.search(cr, SUPERUSER_ID, domain, count=count)\n  338          if count:\n  339              return ids\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_blog\\models\\website_blog.py:\n    7  \n    8  from openerp import tools\n    9: from openerp import SUPERUSER_ID\n   10  from openerp.addons.website.models.website import slug\n   11  from openerp.osv import osv, fields\n   ..\n  187              if not old_attribute:\n  188                  continue\n  189:             msg_ids = self.pool['mail.message'].search(cr, SUPERUSER_ID, [('path', '=', old_attribute)], context=context)\n  190:             self.pool['mail.message'].write(cr, SUPERUSER_ID, msg_ids, {'path': new_attribute}, context=context)\n  191          return content\n  192  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_crm\\controllers\\main.py:\n    5  import werkzeug.urls\n    6  \n    7: from openerp import http, SUPERUSER_ID\n    8  from openerp.http import request\n    9  from openerp.tools.translate import _\n   ..\n   30          \"\"\" Allow to be overrided \"\"\"\n   31          cr, context = request.cr, request.context\n   32:         return request.registry['crm.lead'].create(cr, SUPERUSER_ID, values, context=dict(context, mail_create_nosubscribe=True))\n   33  \n   34      def preRenderThanks(self, values, kwargs):\n   ..\n   78              return request.website.render(kwargs.get(\"view_from\", \"website.contactus\"), values)\n   79  \n   80:         values['medium_id']  = request.registry['ir.model.data'].xmlid_to_res_id(request.cr, SUPERUSER_ID, 'crm.crm_medium_website')\n   81:         values['section_id'] = request.registry['ir.model.data'].xmlid_to_res_id(request.cr, SUPERUSER_ID, 'website.salesteam_website_sales')\n   82  \n   83          # description is required, so it is always already initialized\n   ..\n  106                      'datas_fname': field_value.filename,\n  107                  }\n  108:                 request.registry['ir.attachment'].create(request.cr, SUPERUSER_ID, attachment_value, context=request.context)\n  109  \n  110          return self.get_contactus_response(values, kwargs)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_crm_partner_assign\\controllers\\main.py:\n    1  # -*- coding: utf-8 -*-\n    2  import werkzeug\n    3: from openerp import SUPERUSER_ID\n    4  from openerp.addons.web import http\n    5  from openerp.addons.web.http import request\n    .\n   45              grade_domain += [('country_id', '=', country.id)]\n   46          grades = partner_obj.read_group(\n   47:             request.cr, SUPERUSER_ID, grade_domain, [\"id\", \"grade_id\"],\n   48              groupby=\"grade_id\", orderby=\"grade_id DESC\", context=request.context)\n   49          grades_partners = partner_obj.search(\n   50:             request.cr, SUPERUSER_ID, grade_domain,\n   51              context=request.context, count=True)\n   52          # flag active grade\n   ..\n   64              country_domain += [('grade_id', '=', grade.id)]\n   65          countries = partner_obj.read_group(\n   66:             request.cr, SUPERUSER_ID, country_domain, [\"id\", \"country_id\"],\n   67              groupby=\"country_id\", orderby=\"country_id\", context=request.context)\n   68          countries_partners = partner_obj.search(\n   69:             request.cr, SUPERUSER_ID, country_domain,\n   70              context=request.context, count=True)\n   71          # flag active country\n   ..\n  100  \n  101          partner_count = partner_obj.search_count(\n  102:             request.cr, SUPERUSER_ID, base_partner_domain,\n  103              context=request.context)\n  104          pager = request.website.pager(\n  ...\n  108          # search partners matching current search parameters\n  109          partner_ids = partner_obj.search(\n  110:             request.cr, SUPERUSER_ID, base_partner_domain,\n  111              order=\"grade_id DESC\",\n  112              context=request.context)  # todo in trunk: order=\"grade_id DESC, implemented_count DESC\", offset=pager['offset'], limit=self._references_per_page\n  113:         partners = partner_obj.browse(request.cr, SUPERUSER_ID, partner_ids, request.context)\n  114          # remove me in trunk\n  115          partners = sorted(partners, key=lambda x: (x.grade_id.sequence if x.grade_id else 0, len([i for i in x.implemented_partner_ids if i.website_published])), reverse=True)\n  ...\n  131          return request.website.render(\"website_crm_partner_assign.index\", values)\n  132  \n  133:     # Do not use semantic controller due to SUPERUSER_ID\n  134      @http.route(['/partners/<partner_id>'], type='http', auth=\"public\", website=True)\n  135      def partners_detail(self, partner_id, partner_name='', **post):\n  ...\n  147                  current_country = request.registry['res.country'].browse(request.cr, request.uid, country_ids[0], context=request.context)\n  148          if partner_id:\n  149:             partner = request.registry['res.partner'].browse(request.cr, SUPERUSER_ID, partner_id, context=request.context)\n  150              if partner.exists() and partner.website_published:\n  151                  values = {\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_customer\\controllers\\main.py:\n    1  # -*- coding: utf-8 -*-\n    2  import openerp\n    3: from openerp import SUPERUSER_ID\n    4  from openerp.addons.web import http\n    5  from openerp.addons.website.models.website import unslug\n    .\n   35          # group by country, based on customers found with the search(domain)\n   36          countries = partner_obj.read_group(\n   37:             cr, openerp.SUPERUSER_ID, domain, [\"id\", \"country_id\"],\n   38              groupby=\"country_id\", orderby=\"country_id\", context=request.context)\n   39          country_count = partner_obj.search(\n   40:             cr, openerp.SUPERUSER_ID, domain, count=True, context=request.context)\n   41  \n   42          if country_id:\n   ..\n   57  \n   58          # search customers to display\n   59:         partner_count = partner_obj.search_count(cr, openerp.SUPERUSER_ID, domain, context=request.context)\n   60  \n   61          # pager\n   ..\n   68          )\n   69  \n   70:         partner_ids = partner_obj.search(request.cr, openerp.SUPERUSER_ID, domain,\n   71                                           offset=pager['offset'], limit=self._references_per_page,\n   72                                           context=request.context)\n   73          google_map_partner_ids = ','.join(map(str, partner_ids))\n   74:         partners = partner_obj.browse(request.cr, openerp.SUPERUSER_ID, partner_ids, request.context)\n   75  \n   76          values = {\n   ..\n   85          return request.website.render(\"website_customer.index\", values)\n   86  \n   87:     # Do not use semantic controller due to SUPERUSER_ID\n   88      @http.route(['/customers/<partner_id>'], type='http', auth=\"public\", website=True)\n   89      def partners_detail(self, partner_id, **post):\n   90          _, partner_id = unslug(partner_id)\n   91          if partner_id:\n   92:             partner = request.registry['res.partner'].browse(request.cr, SUPERUSER_ID, partner_id, context=request.context)\n   93              if partner.exists() and partner.website_published:\n   94                  values = {}\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_event\\models\\event.py:\n   21  \n   22  from openerp.osv import osv, fields\n   23: from openerp import SUPERUSER_ID\n   24  \n   25  from openerp.tools.translate import _\n   ..\n  118          event = self.browse(cr, uid, ids[0], context=context)\n  119          if event.address_id:\n  120:             return self.browse(cr, SUPERUSER_ID, ids[0], context=context).address_id.google_map_img()\n  121          return None\n  122  \n  ...\n  124          event = self.browse(cr, uid, ids[0], context=context)\n  125          if event.address_id:\n  126:             return self.browse(cr, SUPERUSER_ID, ids[0], context=context).address_id.google_map_link()\n  127          return None\n  128  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_event_sale\\controllers\\main.py:\n   20  ##############################################################################\n   21  \n   22: from openerp import SUPERUSER_ID\n   23  from openerp.addons.web import http\n   24  from openerp.addons.web.http import request\n   ..\n   52              sale = True\n   53              ticket_id = key.split(\"-\")[0] == 'ticket' and int(key.split(\"-\")[1]) or None\n   54:             ticket = ticket_obj.browse(cr, SUPERUSER_ID, ticket_id, context=context)\n   55              order = request.website.sale_get_order(force_create=1)\n   56              order.with_context(event_ticket_id=ticket.id)._cart_update(product_id=ticket.product_id.id, add_qty=quantity)\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_event_sale\\models\\sale_order.py:\n    1  # -*- coding: utf-8 -*-\n    2: from openerp import SUPERUSER_ID\n    3  from openerp.osv import osv, fields\n    4  from openerp.tools.translate import _\n    .\n   17              if context.get(\"event_ticket_id\"):\n   18                  domain += [('event_ticket_id', '=', context.get(\"event_ticket_id\"))]\n   19:             return self.pool.get('sale.order.line').search(cr, SUPERUSER_ID, domain, context=context)\n   20  \n   21      def _website_product_id_change(self, cr, uid, ids, order_id, product_id, qty=0, line_id=None, context=None):\n   ..\n   26              event_ticket_id = context.get(\"event_ticket_id\")\n   27          elif line_id:\n   28:             line = self.pool.get('sale.order.line').browse(cr, SUPERUSER_ID, line_id, context=context)\n   29              if line.event_ticket_id:\n   30                  event_ticket_id = line.event_ticket_id.id\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_event_track\\controllers\\event.py:\n   35      def event_track_view(self, event, track, **post):\n   36          track_obj = request.registry.get('event.track')\n   37:         track = track_obj.browse(request.cr, openerp.SUPERUSER_ID, track.id, context=request.context)\n   38          values = { 'track': track, 'event': track.event_id, 'main_object': track }\n   39          return request.website.render(\"website_event_track.track_view\", values)\n   ..\n   91          cr, uid, context = request.cr, request.uid, request.context\n   92          track_obj = request.registry['event.track']\n   93:         tracks_ids = track_obj.search(cr, openerp.SUPERUSER_ID, [('event_id', '=', event.id)], context=context)\n   94          speakers = dict()\n   95:         for t in track_obj.browse(cr, openerp.SUPERUSER_ID, tracks_ids, context=context):\n   96              acc = \"\"\n   97              for speaker in t.speaker_ids:\n   ..\n  170              e(post['description']), e(post['biography']))\n  171  \n  172:         track_id = tobj.create(cr, openerp.SUPERUSER_ID, {\n  173              'name': post['track_name'],\n  174              'event_id': event.id,\n  ...\n  178          }, context=context)\n  179  \n  180:         tobj.message_post(cr, openerp.SUPERUSER_ID, [track_id], body=\"\"\"Proposed By: %s<br/>\n  181            Mail: <a href=\"mailto:%s\">%s</a><br/>\n  182            Phone: %s\"\"\" % (e(post['partner_name']), e(post['email_from']), \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_forum\\controllers\\main.py:\n    6  \n    7  from openerp import tools\n    8: from openerp import SUPERUSER_ID\n    9  from openerp.addons.web import http\n   10  from openerp.addons.web.controllers.main import login_redirect\n   ..\n  241          cr, uid, context = request.cr, request.uid, request.context\n  242          # increment view counter\n  243:         request.registry['forum.post'].set_viewed(cr, SUPERUSER_ID, [question.id], context=context)\n  244  \n  245          if question.parent_id:\n  ...\n  323              return login_redirect()\n  324          cr, uid, context = request.cr, request.uid, request.context\n  325:         user = request.registry['res.users'].browse(cr, SUPERUSER_ID, uid, context=context)\n  326          if not user.email or not tools.single_email_re.match(user.email):\n  327              return werkzeug.utils.redirect(\"/forum/%s/user/%s/edit?email_required=1\" % (slug(forum), uid))\n  ...\n  457  \n  458          step = 30\n  459:         tag_count = User.search(cr, SUPERUSER_ID, [('karma', '>', 1), ('website_published', '=', True)], count=True, context=context)\n  460          pager = request.website.pager(url=\"/forum/%s/users\" % slug(forum), total=tag_count, page=page, step=step, scope=30)\n  461  \n  462:         obj_ids = User.search(cr, SUPERUSER_ID, [('karma', '>', 1), ('website_published', '=', True)], limit=step, offset=pager['offset'], order='karma DESC', context=context)\n  463          # put the users in block of 3 to display them as a table\n  464          users = [[] for i in range(len(obj_ids)/3+1)]\n  465:         for index, user in enumerate(User.browse(cr, SUPERUSER_ID, obj_ids, context=context)):\n  466              users[index/3].append(user)\n  467          searches['users'] = 'True'\n  ...\n  481          cr, uid, context = request.cr, request.uid, request.context\n  482          if partner_id:\n  483:             partner = request.registry['res.partner'].browse(cr, SUPERUSER_ID, partner_id, context=context)\n  484              if partner.exists() and partner.user_ids:\n  485                  return werkzeug.utils.redirect(\"/forum/%s/user/%d\" % (slug(forum), partner.user_ids[0].id))\n  ...\n  492          User = request.registry['res.users']\n  493          Website = request.registry['website']\n  494:         user = User.browse(cr, SUPERUSER_ID, user_id, context=context)\n  495          if not user.exists() or (user_id != request.session.uid and user.karma < 1):\n  496              return Website._image_placeholder(response)\n  497:         return Website._image(cr, SUPERUSER_ID, 'res.users', user.id, 'image', response)\n  498  \n  499      @http.route(['/forum/<model(\"forum.forum\"):forum>/user/<int:user_id>'], type='http', auth=\"public\", website=True)\n  ...\n  507          Data = request.registry[\"ir.model.data\"]\n  508  \n  509:         user = User.browse(cr, SUPERUSER_ID, user_id, context=context)\n  510:         current_user = User.browse(cr, SUPERUSER_ID, uid, context=context)\n  511  \n  512          # Users with high karma can see users with karma <= 0 for\n  ...\n  544  \n  545          # showing questions which user following\n  546:         obj_ids = Followers.search(cr, SUPERUSER_ID, [('res_model', '=', 'forum.post'), ('partner_id', '=', user.partner_id.id)], context=context)\n  547:         post_ids = [follower.res_id for follower in Followers.browse(cr, SUPERUSER_ID, obj_ids, context=context)]\n  548          que_ids = Post.search(cr, uid, [('id', 'in', post_ids), ('forum_id', '=', forum.id), ('parent_id', '=', False)], context=context)\n  549          followed = Post.browse(cr, uid, que_ids, context=context)\n  ...\n  605      def edit_profile(self, forum, user, **kwargs):\n  606          country = request.registry['res.country']\n  607:         country_ids = country.search(request.cr, SUPERUSER_ID, [], context=request.context)\n  608:         countries = country.browse(request.cr, SUPERUSER_ID, country_ids, context=request.context)\n  609          values = self._prepare_forum_values(forum=forum, searches=kwargs)\n  610          values.update({\n  ...\n  637          cr, uid, context = request.cr, request.uid, request.context\n  638          Badge = request.registry['gamification.badge']\n  639:         badge_ids = Badge.search(cr, SUPERUSER_ID, [('challenge_ids.category', '=', 'forum')], context=context)\n  640          badges = Badge.browse(cr, uid, badge_ids, context=context)\n  641          badges = sorted(badges, key=lambda b: b.stat_count_distinct, reverse=True)\n  ...\n  649      def badge_users(self, forum, badge, **kwargs):\n  650          user_ids = [badge_user.user_id.id for badge_user in badge.owner_ids]\n  651:         users = request.registry['res.users'].browse(request.cr, SUPERUSER_ID, user_ids, context=request.context)\n  652          values = self._prepare_forum_values(forum=forum, searches={'badges': True})\n  653          values.update({\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_forum\\models\\forum.py:\n    9  \n   10  from openerp import api, tools\n   11: from openerp import SUPERUSER_ID\n   12  from openerp.addons.website.models.website import slug\n   13  from openerp.exceptions import Warning\n   ..\n   31      def init(self, cr):\n   32          \"\"\" Add forum uuid for user email validation. \"\"\"\n   33:         forum_uuids = self.pool['ir.config_parameter'].search(cr, SUPERUSER_ID, [('key', '=', 'website_forum.uuid')])\n   34          if not forum_uuids:\n   35:             self.pool['ir.config_parameter'].set_param(cr, SUPERUSER_ID, 'website_forum.uuid', str(uuid.uuid4()), ['base.group_system'])\n   36  \n   37      _columns = {\n   ..\n  187      def _get_post_from_hierarchy(self, cr, uid, ids, context=None):\n  188          post_ids = set(ids)\n  189:         for post in self.browse(cr, SUPERUSER_ID, ids, context=context):\n  190              if post.parent_id:\n  191                  post_ids.add(post.parent_id.id)\n  ...\n  237              }\n  238              res[post.id].update({\n  239:                 'can_ask': uid == SUPERUSER_ID or user.karma >= res[post.id]['karma_ask'],\n  240:                 'can_answer': uid == SUPERUSER_ID or user.karma >= res[post.id]['karma_answer'],\n  241:                 'can_accept': uid == SUPERUSER_ID or user.karma >= res[post.id]['karma_accept'],\n  242:                 'can_edit': uid == SUPERUSER_ID or user.karma >= res[post.id]['karma_edit'],\n  243:                 'can_close': uid == SUPERUSER_ID or user.karma >= res[post.id]['karma_close'],\n  244:                 'can_unlink': uid == SUPERUSER_ID or user.karma >= res[post.id]['karma_unlink'],\n  245:                 'can_upvote': uid == SUPERUSER_ID or user.karma >= res[post.id]['karma_upvote'],\n  246:                 'can_downvote': uid == SUPERUSER_ID or user.karma >= res[post.id]['karma_downvote'],\n  247:                 'can_comment': uid == SUPERUSER_ID or user.karma >= res[post.id]['karma_comment'],\n  248:                 'can_comment_convert': uid == SUPERUSER_ID or user.karma >= res[post.id]['karma_comment_convert'],\n  249              })\n  250          return res\n  ...\n  381              )\n  382              self.message_post(cr, uid, post_id, subject=post.name, body=body, subtype='website_forum.mt_question_new', context=context)\n  383:             self.pool['res.users'].add_karma(cr, SUPERUSER_ID, [uid], post.forum_id.karma_gen_question_new, context=context)\n  384          return post_id\n  385  \n  ...\n  399              for post in self.browse(cr, uid, ids, context=context):\n  400                  if vals['is_correct'] != post.is_correct and post.create_uid.id != uid:\n  401:                     self.pool['res.users'].add_karma(cr, SUPERUSER_ID, [post.create_uid.id], post.forum_id.karma_gen_answer_accepted * mult, context=context)\n  402:                     self.pool['res.users'].add_karma(cr, SUPERUSER_ID, [uid], post.forum_id.karma_gen_answer_accept * mult, context=context)\n  403          if any(key not in ['state', 'active', 'is_correct', 'closed_uid', 'closed_date', 'closed_reason_id'] for key in vals.keys()) and any(not post.can_edit for post in posts):\n  404              raise KarmaError('Not enough karma to edit a post.')\n  ...\n  430                               post.create_uid)\n  431                  # TODO: in master, consider making this a tunable karma parameter\n  432:                 self.pool['res.users'].add_karma(cr, SUPERUSER_ID, [post.create_uid.id],\n  433                                                   post.forum_id.karma_gen_question_downvote * -5,\n  434                                                   context=context)\n  435:         self.pool['forum.post'].write(cr, SUPERUSER_ID, ids, {'state': 'active'}, context=context)\n  436  \n  437      def close(self, cr, uid, ids, reason_id, context=None):\n  ...\n  446                               post.create_uid)\n  447                  # TODO: in master, consider making this a tunable karma parameter\n  448:                 self.pool['res.users'].add_karma(cr, SUPERUSER_ID, [post.create_uid.id],\n  449                                                   post.forum_id.karma_gen_question_downvote * 5,\n  450                                                   context=context)\n  ...\n  464          for post in posts:\n  465              if post.is_correct:\n  466:                 self.pool['res.users'].add_karma(cr, SUPERUSER_ID, [post.create_uid.id], post.forum_id.karma_gen_answer_accepted * -1, context=context)\n  467:                 self.pool['res.users'].add_karma(cr, SUPERUSER_ID, [uid], post.forum_id.karma_gen_answer_accept * -1, context=context)\n  468          return super(Post, self).unlink(cr, uid, ids, context=context)\n  469  \n  ...\n  490          The original post is unlinked and a new comment is posted on the question\n  491          using the post create_uid as the comment's author. \"\"\"\n  492:         post = self.browse(cr, SUPERUSER_ID, id, context=context)\n  493          if not post.parent_id:\n  494              return False\n  ...\n  512              **values)\n  513  \n  514:         # unlink the original answer, using SUPERUSER_ID to avoid karma issues\n  515:         self.pool['forum.post'].unlink(cr, SUPERUSER_ID, [post.id], context=context)\n  516  \n  517          return message_id\n  ...\n  522          is created. Nothing is done if the comment's author already answered the\n  523          question. \"\"\"\n  524:         comment = self.pool['mail.message'].browse(cr, SUPERUSER_ID, message_id, context=context)\n  525          post = self.pool['forum.post'].browse(cr, uid, comment.res_id, context=context)\n  526          user = self.pool['res.users'].browse(cr, uid, uid, context=context)\n  ...\n  530          # karma-based action check: must check the message's author to know if own / all\n  531          karma_convert = comment.author_id.id == user.partner_id.id and post.forum_id.karma_comment_convert_own or post.forum_id.karma_comment_convert_all\n  532:         can_convert = uid == SUPERUSER_ID or user.karma >= karma_convert\n  533          if not can_convert:\n  534              raise KarmaError('Not enough karma to convert a comment to an answer')\n  ...\n  550  \n  551          # delete comment\n  552:         self.pool['mail.message'].unlink(cr, SUPERUSER_ID, [comment.id], context=context)\n  553  \n  554          return new_post_id\n  555  \n  556      def unlink_comment(self, cr, uid, id, message_id, context=None):\n  557:         comment = self.pool['mail.message'].browse(cr, SUPERUSER_ID, message_id, context=context)\n  558          post = self.pool['forum.post'].browse(cr, uid, id, context=context)\n  559:         user = self.pool['res.users'].browse(cr, SUPERUSER_ID, uid, context=context)\n  560          if not comment.model == 'forum.post' or not comment.res_id == id:\n  561              return False\n  ...\n  563          # karma-based action check: must check the message's author to know if own or all\n  564          karma_unlink = comment.author_id.id == user.partner_id.id and post.forum_id.karma_comment_unlink_own or post.forum_id.karma_comment_unlink_all\n  565:         can_unlink = uid == SUPERUSER_ID or user.karma >= karma_unlink\n  566          if not can_unlink:\n  567              raise KarmaError('Not enough karma to unlink a comment')\n  568  \n  569:         return self.pool['mail.message'].unlink(cr, SUPERUSER_ID, [message_id], context=context)\n  570  \n  571      def set_viewed(self, cr, uid, ids, context=None):\n  ...\n  644          else:\n  645              karma_value = self._get_karma_value('0', vote.vote, vote.forum_id.karma_gen_question_upvote, vote.forum_id.karma_gen_question_downvote)\n  646:         self.pool['res.users'].add_karma(cr, SUPERUSER_ID, [vote.recipient_id.id], karma_value, context=context)\n  647          return vote_id\n  648  \n  ...\n  664                  else:\n  665                      karma_value = self._get_karma_value(vote.vote, values['vote'], vote.forum_id.karma_gen_question_upvote, vote.forum_id.karma_gen_question_downvote)\n  666:                 self.pool['res.users'].add_karma(cr, SUPERUSER_ID, [vote.recipient_id.id], karma_value, context=context)\n  667          res = super(Vote, self).write(cr, uid, ids, values, context=context)\n  668          return res\n  ...\n  679      def _get_tag_from_post(self, cr, uid, ids, context=None):\n  680          return list(set(\n  681:             [tag.id for post in self.pool['forum.post'].browse(cr, SUPERUSER_ID, ids, context=context) for tag in post.tag_ids]\n  682          ))\n  683  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_forum\\models\\res_users.py:\n    6  import hashlib\n    7  \n    8: from openerp import SUPERUSER_ID\n    9  from openerp.osv import osv, fields\n   10  \n   ..\n   50          and is a hash based on a (secret) uuid generated by the forum module,\n   51          the user_id, the email and currently the day (to be updated if necessary). \"\"\"\n   52:         forum_uuid = self.pool.get('ir.config_parameter').get_param(cr, SUPERUSER_ID, 'website_forum.uuid')\n   53          return hashlib.sha256('%s-%s-%s-%s' % (\n   54              datetime.now().replace(hour=0, minute=0, second=0, microsecond=0),\n   ..\n   71              token_url = base_url + '/forum/validate_email?%s' % urlencode(params)\n   72              tpl_ctx = dict(context, token_url=token_url)\n   73:             self.pool['email.template'].send_mail(cr, SUPERUSER_ID, activation_template_id, user_id, force_send=True, context=tpl_ctx)\n   74          return True\n   75  \n   76      def process_forum_validation_token(self, cr, uid, token, user_id, email, forum_id=None, context=None):\n   77          validation_token = self.pool['res.users']._generate_forum_token(cr, uid, user_id, email)\n   78:         user = self.pool['res.users'].browse(cr, SUPERUSER_ID, user_id, context=context)\n   79          if token == validation_token and user.karma == 0:\n   80              karma = 3\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_gengo\\controllers\\main.py:\n    2  \n    3  import openerp\n    4: from openerp import http, SUPERUSER_ID\n    5  from openerp.http import request\n    6  import time\n    .\n   21      @http.route('/website/check_gengo_set', type='json', auth='user', website=True)\n   22      def check_gengo_set(self):\n   23:         user = request.registry['res.users'].browse(request.cr, SUPERUSER_ID, request.uid)\n   24          company_flag = 0\n   25          if not user.company_id.gengo_public_key or not user.company_id.gengo_private_key:\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_google_map\\controllers\\main.py:\n    2  \n    3  import json\n    4: from openerp import SUPERUSER_ID\n    5  from openerp.addons.web import http\n    6  from openerp.addons.web.http import request\n    .\n   40          # search for partners that can be displayed on a map\n   41          domain = [(\"id\", \"in\", clean_ids), ('website_published', '=', True), ('is_company', '=', True)]\n   42:         partners_ids = partner_obj.search(cr, SUPERUSER_ID, domain, context=context)\n   43  \n   44          # browse and format data\n   ..\n   48          }\n   49          request.context.update({'show_address': True})\n   50:         for partner in partner_obj.browse(cr, SUPERUSER_ID, partners_ids, context=context):\n   51              partner_data[\"partners\"].append({\n   52                  'id': partner.id,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_hr_recruitment\\controllers\\main.py:\n    2  import base64\n    3  \n    4: from openerp import SUPERUSER_ID\n    5  from openerp import http\n    6  from openerp.tools.translate import _\n    .\n   28          # List jobs available to current UID\n   29          job_ids = Jobs.search([], order=\"website_published desc,no_of_recruitment desc\").ids\n   30:         # Browse jobs as superuser, because address is restricted\n   31          jobs = Jobs.sudo().browse(job_ids)\n   32  \n   ..\n  106  \n  107          # public user can't create applicants (duh)\n  108:         env = request.env(user=SUPERUSER_ID)\n  109          value = {\n  110              'source_id' : env.ref('hr_recruitment.source_website_company').id,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_mail\\controllers\\main.py:\n   20  ##############################################################################\n   21  \n   22: from openerp import SUPERUSER_ID\n   23  from openerp.addons.web import http\n   24  from openerp.addons.web.http import request\n   ..\n   45              # mail_thread method\n   46              partner_ids = _object._find_partner_from_emails(\n   47:                 cr, SUPERUSER_ID, _id, [email], context=context, check_followers=True)\n   48              if not partner_ids or not partner_ids[0]:\n   49:                 partner_ids = [partner_obj.create(cr, SUPERUSER_ID, {'name': email, 'email': email}, context=context)]\n   50  \n   51          # add or remove follower\n   52          if _message_is_follower:\n   53              _object.check_access_rule(cr, uid, [_id], 'read', context)\n   54:             _object.message_unsubscribe(cr, SUPERUSER_ID, [_id], partner_ids, context=context)\n   55              return False\n   56          else:\n   ..\n   58              # add partner to session\n   59              request.session['partner_id'] = partner_ids[0]\n   60:             _object.message_subscribe(cr, SUPERUSER_ID, [_id], partner_ids, context=context)\n   61              return True\n   62  \n   ..\n   73          public_id = request.website.user_id.id\n   74          if uid != public_id:\n   75:             partner_id = users_obj.browse(cr, SUPERUSER_ID, uid, context).partner_id\n   76          elif request.session.get('partner_id'):\n   77:             partner_id = partner_obj.browse(cr, SUPERUSER_ID, request.session.get('partner_id'), context)\n   78          email = partner_id and partner_id.email or \"\"\n   79  \n   ..\n   87          if not obj:\n   88              return values\n   89:         obj_ids = obj.exists(cr, SUPERUSER_ID, [id], context=context)\n   90          if obj_ids:\n   91              if partner_id:\n   92                  values['is_follower'] = len(\n   93                      request.registry['mail.followers'].search(\n   94:                         cr, SUPERUSER_ID, [\n   95                              ('res_model', '=', model),\n   96                              ('res_id', '=', obj_ids[0]),\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_mail\\models\\mail_message.py:\n   20  ##############################################################################\n   21  \n   22: from openerp import SUPERUSER_ID\n   23  from openerp.tools import html2plaintext\n   24  from openerp.tools.translate import _\n   ..\n   64          \"\"\" Override that adds specific access rights of mail.message, to restrict\n   65          messages to published messages for public users. \"\"\"\n   66:         if uid != SUPERUSER_ID:\n   67              group_ids = self.pool.get('res.users').browse(cr, uid, uid, context=context).groups_id\n   68              group_user_id = self.pool.get(\"ir.model.data\").get_object_reference(cr, uid, 'base', 'group_public')[1]\n   ..\n   78                  - raise if the type is comment and subtype NULL (internal note)\n   79          \"\"\"\n   80:         if uid != SUPERUSER_ID:\n   81              group_ids = self.pool.get('res.users').browse(cr, uid, uid, context=context).groups_id\n   82              group_user_id = self.pool.get(\"ir.model.data\").get_object_reference(cr, uid, 'base', 'group_public')[1]\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_mail_group\\controllers\\main.py:\n    4  from dateutil import relativedelta\n    5  \n    6: from openerp import tools, SUPERUSER_ID\n    7  from openerp.addons.web import http\n    8  from openerp.addons.website.models.website import slug\n    .\n   39              group_data[group.id] = {\n   40                  'monthly_message_nbr': mail_message_obj.search(\n   41:                     cr, SUPERUSER_ID,\n   42                      [('model', '=', 'mail.group'), ('res_id', '=', group.id), ('date', '>=', month_date.strftime(tools.DEFAULT_SERVER_DATETIME_FORMAT))],\n   43                      count=True, context=context)}\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_membership\\controllers\\main.py:\n    1  # -*- coding: utf-8 -*-\n    2: from openerp import SUPERUSER_ID\n    3  from openerp.addons.web import http\n    4  from openerp.addons.web.http import request\n    .\n   49  \n   50          # group by country, based on all customers (base domain)\n   51:         membership_line_ids = membership_line_obj.search(cr, SUPERUSER_ID, base_line_domain, context=context)\n   52          countries = partner_obj.read_group(\n   53              cr, uid, [('member_lines', 'in', membership_line_ids), (\"website_published\", \"=\", True)], [\"id\", \"country_id\"],\n   ..\n   78  \n   79          # displayed membership lines\n   80:         membership_line_ids = membership_line_obj.search(cr, SUPERUSER_ID, line_domain, context=context)\n   81          membership_lines = membership_line_obj.browse(cr, uid, membership_line_ids, context=context)\n   82          membership_lines = sorted(membership_lines, key=lambda x: x.membership_id.website_sequence)\n   ..\n   84          google_map_partner_ids = \",\".join(map(str, partner_ids))\n   85  \n   86:         partners = dict((p.id, p) for p in partner_obj.browse(request.cr, SUPERUSER_ID, partner_ids, request.context))\n   87  \n   88          # request pager for lines\n   ..\n  104          return request.website.render(\"website_membership.index\", values)\n  105  \n  106:     # Do not use semantic controller due to SUPERUSER_ID\n  107      @http.route(['/members/<partner_id>'], type='http', auth=\"public\", website=True)\n  108      def partners_detail(self, partner_id, **post):\n  109          _, partner_id = unslug(partner_id)\n  110          if partner_id:\n  111:             partner = request.registry['res.partner'].browse(request.cr, SUPERUSER_ID, partner_id, context=request.context)\n  112              if partner.exists() and partner.website_published:\n  113                  values = {}\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_quote\\controllers\\main.py:\n   20  ##############################################################################\n   21  \n   22: from openerp import SUPERUSER_ID\n   23  from openerp.addons.web import http\n   24  from openerp.addons.web.http import request\n   ..\n   35      ], type='http', auth=\"public\", website=True)\n   36      def view(self, order_id, token=None, message=False, **post):\n   37:         # use SUPERUSER_ID allow to access/view order for public user\n   38          # only if he knows the private token\n   39:         order = request.registry.get('sale.order').browse(request.cr, token and SUPERUSER_ID or request.uid, order_id)\n   40          now = time.strftime('%Y-%m-%d')\n   41          if token:\n   ..\n   62      def accept(self, order_id, token=None, signer=None, sign=None, **post):\n   63          order_obj = request.registry.get('sale.order')\n   64:         order = order_obj.browse(request.cr, SUPERUSER_ID, order_id)\n   65          if token != order.access_token:\n   66              return request.website.render('website.404')\n   67          attachments=sign and [('signature.png', sign.decode('base64'))] or []\n   68:         order_obj.signal_workflow(request.cr, SUPERUSER_ID, [order_id], 'order_confirm', context=request.context)\n   69          message = _('Order signed by %s') % (signer,)\n   70          self.__message_post(message, order_id, type='comment', subtype='mt_comment', attachments=attachments)\n   ..\n   74      def decline(self, order_id, token, **post):\n   75          order_obj = request.registry.get('sale.order')\n   76:         order = order_obj.browse(request.cr, SUPERUSER_ID, order_id)\n   77          if token != order.access_token:\n   78              return request.website.render('website.404')\n   79:         request.registry.get('sale.order').action_cancel(request.cr, SUPERUSER_ID, [order_id])\n   80          message = post.get('decline_message')\n   81          if message:\n   ..\n   85      @http.route(['/quote/<int:order_id>/<token>/post'], type='http', auth=\"public\", website=True)\n   86      def post(self, order_id, token, **post):\n   87:         # use SUPERUSER_ID allow to access/view order for public user\n   88          order_obj = request.registry.get('sale.order')\n   89:         order = order_obj.browse(request.cr, SUPERUSER_ID, order_id)\n   90          message = post.get('comment')\n   91          if token != order.access_token:\n   ..\n   98          request.session.body =  message\n   99          cr, uid, context = request.cr, request.uid, request.context\n  100:         user = request.registry['res.users'].browse(cr, SUPERUSER_ID, uid, context=context)\n  101          if 'body' in request.session and request.session.body:\n  102:             request.registry.get('sale.order').message_post(cr, SUPERUSER_ID, order_id,\n  103                      body=request.session.body,\n  104                      type=type,\n  ...\n  113      @http.route(['/quote/update_line'], type='json', auth=\"public\", website=True)\n  114      def update(self, line_id, remove=False, unlink=False, order_id=None, token=None, **post):\n  115:         order = request.registry.get('sale.order').browse(request.cr, SUPERUSER_ID, int(order_id))\n  116          if token != order.access_token:\n  117              return request.website.render('website.404')\n  ...\n  120          line_id=int(line_id)\n  121          if unlink:\n  122:             request.registry.get('sale.order.line').unlink(request.cr, SUPERUSER_ID, [line_id], context=request.context)\n  123              return False\n  124          number=(remove and -1 or 1)\n  125  \n  126          order_line_obj = request.registry.get('sale.order.line')\n  127:         order_line_val = order_line_obj.read(request.cr, SUPERUSER_ID, [line_id], [], context=request.context)[0]\n  128          quantity = order_line_val['product_uom_qty'] + number\n  129:         order_line_obj.write(request.cr, SUPERUSER_ID, [line_id], {'product_uom_qty': (quantity)}, context=request.context)\n  130          return [str(quantity), str(order.amount_total)]\n  131  \n  ...\n  138      def add(self, option_id, order_id, token, **post):\n  139          vals = {}\n  140:         order = request.registry.get('sale.order').browse(request.cr, SUPERUSER_ID, order_id)\n  141          if token != order.access_token:\n  142              return request.website.render('website.404')\n  143          option_obj = request.registry.get('sale.order.option')\n  144:         option = option_obj.browse(request.cr, SUPERUSER_ID, option_id)\n  145  \n  146:         res = request.registry.get('sale.order.line').product_id_change(request.cr, SUPERUSER_ID, order_id,\n  147              False, option.product_id.id, option.quantity, option.uom_id.id, option.quantity, option.uom_id.id,\n  148              option.name, order.partner_id.id, False, True, time.strftime('%Y-%m-%d'),\n  ...\n  164              'discount': option.discount,\n  165          })\n  166:         line = request.registry.get('sale.order.line').create(request.cr, SUPERUSER_ID, vals, context=request.context)\n  167:         option_obj.write(request.cr, SUPERUSER_ID, [option.id], {'line_id': line}, context=request.context)\n  168          return werkzeug.utils.redirect(\"/quote/%s/%s#pricing\" % (order.id, token))\n  169  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_sale\\controllers\\main.py:\n    2  import werkzeug\n    3  \n    4: from openerp import SUPERUSER_ID\n    5  from openerp import http\n    6  from openerp.http import request\n    .\n  110          pricelist = sale_order.pricelist_id\n  111      else:\n  112:         partner = pool['res.users'].browse(cr, SUPERUSER_ID, uid, context=context).partner_id\n  113          pricelist = partner.property_product_pricelist\n  114      return pricelist\n  ...\n  361          state_orm = registry.get('res.country.state')\n  362  \n  363:         country_ids = orm_country.search(cr, SUPERUSER_ID, [], context=context)\n  364:         countries = orm_country.browse(cr, SUPERUSER_ID, country_ids, context)\n  365:         states_ids = state_orm.search(cr, SUPERUSER_ID, [], context=context)\n  366:         states = state_orm.browse(cr, SUPERUSER_ID, states_ids, context)\n  367:         partner = orm_user.browse(cr, SUPERUSER_ID, request.uid, context).partner_id\n  368  \n  369          order = None\n  ...\n  375              if request.uid != request.website.user_id.id:\n  376                  checkout.update( self.checkout_parse(\"billing\", partner) )\n  377:                 shipping_ids = orm_partner.search(cr, SUPERUSER_ID, [(\"parent_id\", \"=\", partner.id), ('type', \"=\", 'delivery')], context=context)\n  378              else:\n  379                  order = request.website.sale_get_order(force_create=1, context=context)\n  380                  if order.partner_id:\n  381                      domain = [(\"partner_id\", \"=\", order.partner_id.id)]\n  382:                     user_ids = request.registry['res.users'].search(cr, SUPERUSER_ID, domain, context=dict(context or {}, active_test=False))\n  383                      if not user_ids or request.website.user_id.id not in user_ids:\n  384                          checkout.update( self.checkout_parse(\"billing\", order.partner_id) )\n  ...\n  410          shippings = []\n  411          if shipping_ids:\n  412:             shippings = shipping_ids and orm_partner.browse(cr, SUPERUSER_ID, list(shipping_ids), ctx) or []\n  413          if shipping_id > 0:\n  414:             shipping = orm_partner.browse(cr, SUPERUSER_ID, shipping_id, ctx)\n  415              checkout.update( self.checkout_parse(\"shipping\", shipping) )\n  416  \n  ...\n  524          partner_id = None\n  525          if request.uid != request.website.user_id.id:\n  526:             partner_id = orm_user.browse(cr, SUPERUSER_ID, uid, context=context).partner_id.id\n  527          elif order.partner_id:\n  528:             user_ids = request.registry['res.users'].search(cr, SUPERUSER_ID,\n  529                  [(\"partner_id\", \"=\", order.partner_id.id)], context=dict(context or {}, active_test=False))\n  530              if not user_ids or request.website.user_id.id not in user_ids:\n  ...\n  533          # save partner informations\n  534          if partner_id and request.website.partner_id.id != partner_id:\n  535:             orm_partner.write(cr, SUPERUSER_ID, [partner_id], billing_info, context=context)\n  536          else:\n  537              # create partner\n  538:             partner_id = orm_partner.create(cr, SUPERUSER_ID, billing_info, context=context)\n  539  \n  540          # create a new shipping partner\n  ...\n  546              shipping_info['type'] = 'delivery'\n  547              shipping_info['parent_id'] = partner_id\n  548:             checkout['shipping_id'] = orm_partner.create(cr, SUPERUSER_ID, shipping_info, context)\n  549  \n  550          order_info = {\n  ...\n  553              'partner_invoice_id': partner_id,\n  554          }\n  555:         order_info.update(order_obj.onchange_partner_id(cr, SUPERUSER_ID, [], partner_id, context=context)['value'])\n  556:         address_change = order_obj.onchange_delivery_id(cr, SUPERUSER_ID, [], order.company_id.id, partner_id,\n  557                                                          checkout.get('shipping_id'), None, context=context)['value']\n  558          order_info.update(address_change)\n  559          if address_change.get('fiscal_position'):\n  560:             fiscal_update = order_obj.onchange_fiscal_position(cr, SUPERUSER_ID, [], address_change['fiscal_position'],\n  561                                                                 [(4, l.id) for l in order.order_line], context=None)['value']\n  562              order_info.update(fiscal_update)\n  ...\n  565          order_info.update(partner_shipping_id=checkout.get('shipping_id') or partner_id)\n  566  \n  567:         order_obj.write(cr, SUPERUSER_ID, [order.id], order_info, context=context)\n  568  \n  569      @http.route(['/shop/checkout'], type='http', auth=\"public\", website=True)\n  ...\n  640  \n  641          values = {\n  642:             'order': request.registry['sale.order'].browse(cr, SUPERUSER_ID, order.id, context=context)\n  643          }\n  644          values['errors'] = sale_order_obj._get_errors(cr, uid, order, context=context)\n  ...\n  650          # else:\n  651          if not values['errors']:\n  652:             acquirer_ids = payment_obj.search(cr, SUPERUSER_ID, [('website_published', '=', True), ('company_id', '=', order.company_id.id)], context=context)\n  653              values['acquirers'] = list(payment_obj.browse(cr, uid, acquirer_ids, context=context))\n  654              render_ctx = dict(context, submit_class='btn btn-primary', submit_txt=_('Pay Now'))\n  655              for acquirer in values['acquirers']:\n  656                  acquirer.button = payment_obj.render(\n  657:                     cr, SUPERUSER_ID, acquirer.id,\n  658                      order.name,\n  659                      order.amount_total,\n  ...\n  695              tx_id = tx.id\n  696          else:\n  697:             tx_id = transaction_obj.create(cr, SUPERUSER_ID, {\n  698                  'acquirer_id': acquirer_id,\n  699                  'type': 'form',\n  ...\n  709          # update quotation\n  710          request.registry['sale.order'].write(\n  711:             cr, SUPERUSER_ID, [order.id], {\n  712                  'payment_acquirer_id': acquirer_id,\n  713                  'payment_tx_id': request.session['sale_transaction_id']\n  ...\n  720          cr, uid, context = request.cr, request.uid, request.context\n  721  \n  722:         order = request.registry['sale.order'].browse(cr, SUPERUSER_ID, sale_order_id, context=context)\n  723          assert order.id == request.session.get('sale_last_order_id')\n  724  \n  ...\n  730  \n  731          tx_ids = request.registry['payment.transaction'].search(\n  732:             cr, SUPERUSER_ID, [\n  733                  '|', ('sale_order_id', '=', order.id), ('reference', '=', order.name)\n  734              ], context=context)\n  ...\n  745                  validation = None\n  746          else:\n  747:             tx = request.registry['payment.transaction'].browse(cr, SUPERUSER_ID, tx_ids[0], context=context)\n  748              state = tx.state\n  749              if state == 'done':\n  ...\n  784              order = request.website.sale_get_order(context=context)\n  785          else:\n  786:             order = request.registry['sale.order'].browse(cr, SUPERUSER_ID, sale_order_id, context=context)\n  787              assert order.id == request.session.get('sale_last_order_id')\n  788  \n  ...\n  796                  order.action_button_confirm()\n  797              # send by email\n  798:             email_act = sale_order_obj.action_quotation_send(cr, SUPERUSER_ID, [order.id], context=request.context)\n  799          elif tx and tx.state == 'cancel':\n  800              # cancel the quotation\n  801:             sale_order_obj.action_cancel(cr, SUPERUSER_ID, [order.id], context=request.context)\n  802  \n  803          # send the email\n  ...\n  808              if uid == public_id:\n  809                  composer_values['email_from'] = request.website.user_id.company_id.email\n  810:             composer_id = request.registry['mail.compose.message'].create(cr, SUPERUSER_ID, composer_values, context=email_ctx)\n  811:             request.registry['mail.compose.message'].send_mail(cr, SUPERUSER_ID, [composer_id], context=email_ctx)\n  812  \n  813          # clean context and session, then redirect to the confirmation page\n  ...\n  829          sale_order_id = request.session.get('sale_last_order_id')\n  830          if sale_order_id:\n  831:             order = request.registry['sale.order'].browse(cr, SUPERUSER_ID, sale_order_id, context=context)\n  832          else:\n  833              return request.redirect('/shop')\n  ...\n  910          sale_order_id = request.session.get('sale_last_order_id')\n  911          if sale_order_id:\n  912:             order = request.registry['sale.order'].browse(cr, SUPERUSER_ID, sale_order_id, context=context)\n  913              ret['transaction'] = {\n  914                  'id': sale_order_id,\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_sale\\models\\payment.py:\n    1  # -*- coding: utf-8 -*-\n    2  \n    3: from openerp import SUPERUSER_ID\n    4  from openerp.osv import orm, fields\n    5  \n    .\n   24              tx = getattr(self, tx_find_method_name)(cr, uid, data, context=context)\n   25          if tx and tx.state == 'done' and tx.sale_order_id and tx.sale_order_id.state in ['draft', 'sent']:\n   26:             self.pool['sale.order'].action_button_confirm(cr, SUPERUSER_ID, [tx.sale_order_id.id], context=context)\n   27  \n   28          return res\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_sale\\models\\sale_order.py:\n    2  import random\n    3  \n    4: from openerp import SUPERUSER_ID\n    5  from openerp.osv import osv, orm, fields\n    6  from openerp.addons.web.http import request\n    .\n   41              if line_id:\n   42                  domain += [('id', '=', line_id)]\n   43:             return self.pool.get('sale.order.line').search(cr, SUPERUSER_ID, domain, context=context)\n   44  \n   45      def _website_product_id_change(self, cr, uid, ids, order_id, product_id, qty=0, line_id=None, context=None):\n   46          so = self.pool.get('sale.order').browse(cr, uid, order_id, context=context)\n   47  \n   48:         values = self.pool.get('sale.order.line').product_id_change(cr, SUPERUSER_ID, [],\n   49              pricelist=so.pricelist_id.id,\n   50              product=product_id,\n   ..\n   56  \n   57          if line_id:\n   58:             line = self.pool.get('sale.order.line').browse(cr, SUPERUSER_ID, line_id, context=context)\n   59              values['name'] = line.name\n   60          else:\n   ..\n   82              if not line_id:\n   83                  values = self._website_product_id_change(cr, uid, ids, so.id, product_id, qty=1, context=context)\n   84:                 line_id = sol.create(cr, SUPERUSER_ID, values, context=context)\n   85                  if add_qty:\n   86                      add_qty -= 1\n   ..\n   90                  quantity = set_qty\n   91              elif add_qty != None:\n   92:                 quantity = sol.browse(cr, SUPERUSER_ID, line_id, context=context).product_uom_qty + (add_qty or 0)\n   93  \n   94              # Remove zero of negative lines\n   95              if quantity <= 0:\n   96:                 sol.unlink(cr, SUPERUSER_ID, [line_id], context=context)\n   97              else:\n   98                  # update line\n   99                  values = self._website_product_id_change(cr, uid, ids, so.id, product_id, qty=quantity, line_id=line_id, context=context)\n  100                  values['product_uom_qty'] = quantity\n  101:                 sol.write(cr, SUPERUSER_ID, [line_id], values, context=context)\n  102  \n  103          return {'line_id': line_id, 'quantity': quantity}\n  ...\n  130          if not sale_order_id and (force_create or code):  \n  131              # TODO cache partner_id session\n  132:             partner = self.pool['res.users'].browse(cr, SUPERUSER_ID, uid, context=context).partner_id\n  133  \n  134              for w in self.browse(cr, uid, ids):\n  ...\n  139                      'section_id': self.pool.get('ir.model.data').get_object_reference(cr, uid, 'website', 'salesteam_website_sales')[1],\n  140                  }\n  141:                 sale_order_id = sale_order_obj.create(cr, SUPERUSER_ID, values, context=context)\n  142:                 values = sale_order_obj.onchange_partner_id(cr, SUPERUSER_ID, [], partner.id, context=context)['value']\n  143:                 sale_order_obj.write(cr, SUPERUSER_ID, [sale_order_id], values, context=context)\n  144                  request.session['sale_order_id'] = sale_order_id\n  145          if sale_order_id:\n  146              # TODO cache partner_id session\n  147:             partner = self.pool['res.users'].browse(cr, SUPERUSER_ID, uid, context=context).partner_id\n  148  \n  149:             sale_order = sale_order_obj.browse(cr, SUPERUSER_ID, sale_order_id, context=context)\n  150              if not sale_order.exists():\n  151                  request.session['sale_order_id'] = None\n  ...\n  154              # check for change of pricelist with a coupon\n  155              if code and code != sale_order.pricelist_id.code:\n  156:                 pricelist_ids = self.pool['product.pricelist'].search(cr, SUPERUSER_ID, [('code', '=', code)], context=context)\n  157                  if pricelist_ids:\n  158                      pricelist_id = pricelist_ids[0]\n  ...\n  169                  fiscal_position = sale_order.fiscal_position and sale_order.fiscal_position.id or False\n  170  \n  171:                 values = sale_order_obj.onchange_partner_id(cr, SUPERUSER_ID, [sale_order_id], partner.id, context=context)['value']\n  172                  if values.get('fiscal_position'):\n  173                      order_lines = map(int,sale_order.order_line)\n  174:                     values.update(sale_order_obj.onchange_fiscal_position(cr, SUPERUSER_ID, [],\n  175                          values['fiscal_position'], [[6, 0, order_lines]], context=context)['value'])\n  176  \n  177                  values['partner_id'] = partner.id\n  178:                 sale_order_obj.write(cr, SUPERUSER_ID, [sale_order_id], values, context=context)\n  179  \n  180                  if flag_pricelist or values.get('fiscal_position') != fiscal_position:\n  ...\n  191              # update browse record\n  192              if (code and code != sale_order.pricelist_id.code) or sale_order.partner_id.id !=  partner.id:\n  193:                 sale_order = sale_order_obj.browse(cr, SUPERUSER_ID, sale_order.id, context=context)\n  194  \n  195          return sale_order\n  ...\n  199          tx_id = request.session.get('sale_transaction_id')\n  200          if tx_id:\n  201:             tx_ids = transaction_obj.search(cr, SUPERUSER_ID, [('id', '=', tx_id), ('state', 'not in', ['cancel'])], context=context)\n  202              if tx_ids:\n  203:                 return transaction_obj.browse(cr, SUPERUSER_ID, tx_ids[0], context=context)\n  204              else:\n  205                  request.session['sale_transaction_id'] = False\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_sale_delivery\\models\\sale_order.py:\n    2  \n    3  from openerp.osv import orm, fields\n    4: from openerp import SUPERUSER_ID\n    5  from openerp.addons import decimal_precision\n    6  \n    .\n   65          if all(line.product_id.type == \"service\" for line in order.website_order_line):\n   66              order.write({'carrier_id': None})\n   67:             self.pool['sale.order']._delivery_unset(cr, SUPERUSER_ID, [order.id], context=context)\n   68              return True\n   69          else: \n   ..\n   78              if force_carrier_id or not carrier_id or not carrier_id in carrier_ids:\n   79                  for delivery_id in carrier_ids:\n   80:                     grid_id = carrier_obj.grid_get(cr, SUPERUSER_ID, [delivery_id], order.partner_shipping_id.id)\n   81                      if grid_id:\n   82                          carrier_id = delivery_id\n   ..\n   96          # This can surely be done in a more efficient way, but at the moment, it mimics the way it's\n   97          # done in delivery_set method of sale.py, from delivery module\n   98:         for delivery_id in carrier_obj.browse(cr, SUPERUSER_ID, delivery_ids, context=dict(context, order_id=order.id)):\n   99              if not delivery_id.available:\n  100                  delivery_ids.remove(delivery_id.id)\n  ...\n  122          delivery_ids = self._get_delivery_methods(cr, uid, order, context=context)\n  123  \n  124:         values['deliveries'] = DeliveryCarrier.browse(cr, SUPERUSER_ID, delivery_ids, context=delivery_ctx)\n  125          return values\n  126  \n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_sale_options\\controllers\\main.py:\n    1  # -*- coding: utf-8 -*-\n    2  \n    3: from openerp import SUPERUSER_ID\n    4  from openerp.addons.web import http\n    5  from openerp.addons.web.http import request\n\nC:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\website_sale_options\\models\\sale_order.py:\n    1  # -*- coding: utf-8 -*-\n    2  \n    3: from openerp import SUPERUSER_ID\n    4  from openerp.osv import osv, orm, fields\n    5  from openerp.tools.translate import _\n    .\n   29              else:\n   30                  domain += [('option_line_ids', '=', False)]\n   31:             return self.pool.get('sale.order.line').search(cr, SUPERUSER_ID, domain, context=context)\n   32  \n   33      def _cart_update(self, cr, uid, ids, product_id=None, line_id=None, add_qty=0, set_qty=0, context=None, **kwargs):\n   ..\n   37          linked_line_id = kwargs.get('linked_line_id')\n   38          sol = self.pool.get('sale.order.line')\n   39:         line = sol.browse(cr, SUPERUSER_ID, value.get('line_id'), context=context)\n   40  \n   41          for so in self.browse(cr, uid, ids, context=context):\n   42  \n   43              if linked_line_id and linked_line_id in map(int,so.order_line):\n   44:                 linked = sol.browse(cr, SUPERUSER_ID, linked_line_id, context=context)\n   45                  line.write({\n   46                          \"name\": _(\"%s\\nOption for: %s\") % (line.name, linked.product_id.name_get()[0][1]),\n   ..\n   53              if option_ids:\n   54                  # update line\n   55:                 sol.write(cr, SUPERUSER_ID, option_ids, {\n   56                          'product_uom_qty': value.get('quantity')\n   57                      }, context=context)\n\n914 matches across 139 files\n",
			"settings":
			{
				"buffer_size": 1405388,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "akun.py",
			"settings":
			{
				"buffer_size": 65461,
				"line_ending": "Windows"
			}
		},
		{
			"file": "penjualan.py",
			"settings":
			{
				"buffer_size": 73819,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "{u'penjualanfaktur': [[1, 976, {u'hppembelian': 2763000, u'bruto': 2763000, u'pajak': 276300, u'nomorfaktur': u'F0025/MMR/BKT/30/08/2016', u'netto': 3039300, u'diskon': 0}], [1, 988, {u'hppembelian': 270000, u'bruto': 270000, u'pajak': 27000, u'nomorfaktur': u'F0037/MMR/BKT/30/08/2016', u'netto': 297000, u'diskon': 0}]], u'penjualanpodetil': [[1, 2164, {u'harga': 1700000, u'hppembelian': 1700000, u'netto': 1870000, u'bruto': 1700000}], [4, 2165, False], [4, 2167, False], [4, 2168, False], [4, 2212, False]]}\n\n{u'penjualanfaktur': [[1, 976, {u'hppembelian': 2863000, u'bruto': 2863000, u'pajak': 286300, u'nomorfaktur': u'F0025/MMR/BKT/30/08/2016', u'netto': 3149300, u'diskon': 0}], [1, 988, {u'hppembelian': 270000, u'bruto': 270000, u'pajak': 27000, u'nomorfaktur': u'F0037/MMR/BKT/30/08/2016', u'netto': 297000, u'diskon': 0}]], u'penjualanpodetil': [[1, 2164, {u'harga': 1800000, u'hppembelian': 1800000, u'netto': 1980000, u'bruto': 1800000}], [4, 2165, False], [4, 2167, False], [4, 2168, False], [4, 2212, False]]}",
			"settings":
			{
				"buffer_size": 1026,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 150.0,
		"last_filter": "install",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			]
		],
		"width": 464.0
	},
	"console":
	{
		"height": 146.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/.metadata",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/menu",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/report",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/view"
	],
	"file_history":
	[
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/account/account.py",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/menu/menu_master.xml",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/view/akun.xml",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/penjualan.py",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/smart.py",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/akun.py",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/view/pembayaran.xml",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/view/groups.xml",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/view/customer.xml",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/view/pembelian.xml",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/stok.py",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/produk.py",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/pembelian.py",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/view/penjualan.xml",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/account/account_invoice.py",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/base/ir/ir_ui_view.py",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/base/ir/ir_actions.py",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/account/account_installer.xml",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/base/ir/ir_ui_menu_view.xml",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/decimal_precision/decimal_precision.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/account/models/account_invoice.py",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/report/popembelianreporttanpaharga.xml",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/addons/MMR/report/popembelianreport.xml",
		"/C/Program Files (x86)/Odoo 8.0-20150121/server/openerp/osv/fields.py",
		"/G/Software/Work/falinwa_module/fal_convention/wizard/fal_convention_wizard_view.xml",
		"/G/Software/Work/falinwa_module/fal_convention/wizard/fal_convention_wizard.py",
		"/G/Software/Work/falinwa_module/fal_convention/models/fal_convention.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/hr_holidays/hr_holidays.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/base/res/res_company.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/auth_ldap/users_ldap.py",
		"/G/Software/Work/falinwa_module/gleize_field_ext/models/sale.py",
		"/G/Software/Work/falinwa_module/gleize_field_ext/data/scheduler.xml",
		"/G/Software/Work/falinwa_module/gleize_field_ext/data/data.xml",
		"/G/Software/Work/falinwa_module/fal_convention/__openerp__.py",
		"/G/Software/Work/falinwa_branch/fal_convention/__openerp__.py",
		"/G/Software/Work/falinwa_module/gleize_field_ext/models/hr.py",
		"/G/Software/Work/falinwa_branch/fal_convention/__init__.py",
		"/G/Software/Work/falinwa_module/fal_convention/__init__.py",
		"/G/Software/Work/falinwa_module/fal_convention/security/ir.model.access.csv",
		"/G/Software/Work/falinwa_module/fal_weekday/security/ir.model.access.csv",
		"/G/Software/Work/falinwa_module/fal_weekday/__openerp__.py",
		"/G/Software/Work/falinwa_module/fal_convention/views/fal_convention_view.xml",
		"/G/Software/Work/falinwa_module/fal_bom_reader/wizard/bom_reader_wizard.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/sales_team/static/src/xml/sales_team_dashboard.xml",
		"/G/Software/Work/falinwa_module/gleize_field_ext/static/src/xml/gleize_field_ext.xml",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/sales_team/sales_team.py",
		"/G/Software/Work/falinwa_module/gleize_field_ext/security/ir.model.access.csv",
		"/G/Software/Work/falinwa_module/gleize_leave_ext/views/hr_holidays_view.xml",
		"/G/Software/Work/falinwa_module/fal_weekday/models/fal_weekday.py",
		"/G/Software/Work/falinwa_module/gleize_field_ext/views/sale_view.xml",
		"/G/Software/Work/falinwa_module/fal_weekday/data/weekday_data.xml",
		"/G/Software/Work/falinwa_module/fal_convention/wizard/__init__.py",
		"/G/Software/Work/falinwa_module/fal_convention/models/__init__.py",
		"/G/Software/Work/falinwa_module/fal_deduplicate_leads/wizard/fal_deduplicate_leads_wizard.py",
		"/G/Software/Work/falinwa_module/fal_easy_reporting/wizard/easy_exporting_wizard.py",
		"/G/Software/Work/falinwa_module/fal_invoice_balance_date/wizard/invoice_balance_wizard.py",
		"/G/Software/Work/falinwa_module/l10n_cn_fapiao/fapiao.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/account/models/res_config.py",
		"/G/Software/Work/falinwa_module/procurement_request/wizard/procurement_request_wizard.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/hr_holidays/hr_holidays_view.xml",
		"/G/Software/Work/falinwa_module/fal_bom_reader/wizard/bom_reader_wizard_view.xml",
		"/G/Software/Work/falinwa_module/gleize_field_ext/__openerp__.py",
		"/G/Software/Work/falinwa_module/gleize_field_ext/views/hr_view.xml",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/website_sale_options/views/templates.xml",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/website_sale_digital/views/website_sale_digital_view.xml",
		"/G/Software/Work/falinwa_module/gleize_leave_ext/models/hr_holidays.py",
		"/G/Software/Work/falinwa_module/fal_convention/wizard/convention_line_wizard.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/account/models/account.py",
		"/G/Software/Work/falinwa_module/fal_convention_company/__openerp__.py",
		"/G/Software/Work/falinwa_module/fal_convention_company/views/fal_convention_view.xml",
		"/G/Software/Work/falinwa_module/fal_convention_company/models/fal_convention.py",
		"/G/Software/Work/falinwa_module/fal_convention_company/models/__init__.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/account/report/account_invoice_report_view.xml",
		"/G/Software/Work/falinwa_module/fal_weekday/models/__init__.py",
		"/G/Software/Work/falinwa_module/fal_convention/data/scheduler.xml",
		"/G/Software/Work/falinwa_module/gleize_leave_ext/__openerp__.py",
		"/G/Software/Work/falinwa_module/gleize_leave_ext/data/scheduler.xml",
		"/G/Software/Work/falinwa_module/fal_france_leave_ext/__init__.py",
		"/G/Software/Work/falinwa_module/fal_france_leave_ext/__openerp__.py",
		"/G/Software/Work/falinwa_module/fal_france_leave_ext/data/scheduler.xml",
		"/G/Software/Work/falinwa_module/fal_france_leave_ext/models/hr_holidays.py",
		"/G/Software/Work/falinwa_module/fal_france_leave_ext/views/hr_holidays_view.xml",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/analytic/models/analytic.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/account_voucher/account_voucher.py",
		"/G/Software/Work/falinwa_module/fal_france_leave_ext/data/hr_holidays_data.xml",
		"/G/Software/Work/falinwa_module/fal_leave_timesheet/models/hr_holidays.py",
		"/G/Software/Work/falinwa_module/fal_france_leave_ext/models/__init__.py",
		"/G/Software/Work/falinwa_module/fal_crm_probability_ext/models/crm.py",
		"/G/Software/Work/falinwa_branch/gleize_field_ext/views/sale_view.xml",
		"/G/Software/Work/falinwa_module/fal_invoice_reminder/data/cron_configuration.xml",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/hr_holidays/hr_holidays_workflow.xml",
		"/G/Software/Work/falinwa_branch/gleize_field_ext/security/security.xml",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/account/models/partner.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/base/res/res_partner.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/hr/hr.py",
		"/G/Software/Work/falinwa_module/fal_crm_project/models/crm_lead.py",
		"/G/Software/Work/falinwa_module/gleize_field_ext/security/security.xml",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/base/res/res_users.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/hr_contract/hr_contract.py",
		"/G/Software/Work/falinwa_branch/fal_sql_query_field_store/models/account.py",
		"/G/Software/Work/falinwa_branch/analytic_multicurrency/analytic.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/account/models/account_move.py",
		"/G/Software/Work/falinwa_branch/account_budget/account_budget.py",
		"/G/Software/Work/falinwa_module/project_long_term/project_long_term.py",
		"/G/Software/Work/falinwa_module/hpg_field_ext/project.py",
		"/G/Software/Work/falinwa_module/falinwa_field_ext/models/account.py",
		"/G/Software/Work/falinwa_module/fal_project_summary/models/project.py",
		"/G/Software/Work/falinwa_module/fal_project_ext/models/project.py",
		"/G/Software/Work/falinwa_module/fal_parent_account/models/account.py",
		"/G/Software/Work/falinwa_module/fal_hps_sale_project/models/project.py",
		"/G/Software/Work/falinwa_module/fal_crm_project/models/project.py",
		"/G/Software/Work/falinwa_module/fal_analytic_account_multicompany_ext/models/analytic.py",
		"/G/Software/Work/falinwa_module/fal_account_sequence/models/account.py",
		"/G/Software/Work/falinwa_module/analytic_multicurrency/analytic_analysis.py",
		"/G/Software/Work/falinwa_module/analytic_multicurrency/analytic.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/project_issue/project_issue.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/project/project.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/l10n_multilang/account.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/hr_timesheet/hr_timesheet.py",
		"/G/Software/Work/falinwa_module/gleize_field_ext/data/email_template.xml",
		"/G/Software/Work/falinwa_module/project_long_term/project_long_term_workflow.xml",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/hr_timesheet_sheet/hr_timesheet_workflow.xml",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/hr_timesheet_sheet/hr_timesheet_sheet_view.xml",
		"/G/Software/Work/falinwa_module/fal_l10n_cn_payroll/models/hr_payroll.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/mail/models/mail_template.py",
		"/G/Software/Work/falinwa_module/gleize_field_ext/models/mail.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/marketing_campaign/marketing_campaign.py",
		"/C/Program Files (x86)/Odoo 9.0-20160210/server/openerp/addons/mail/wizard/email_template_preview.py"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 91.0,
		"where_history":
		[
			"C:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons,C:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR,*.py,*.xml",
			"C:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR,C:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addonsde,*.py,*.xml",
			"C:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR,*.py,*.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module,*.py,*.xml",
			"C:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons, *.xml, *.py",
			"C:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons, *.xml",
			"C:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons, *.py,*.xml",
			"C:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons, *.py,",
			"C:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons, *.py,*.xml",
			"C:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR, *.py,*.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module,*.py,*.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module,*.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module,*.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module,*.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, G:\\Software\\Work\\falinwa_branch,*.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, G:\\Software\\Work\\falinwa_branch,*.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py, *.xml",
			"C:\\Program Files (x86)\\Odoo 8.0-20160503\\server\\openerp\\addons, C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py,",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py,",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml,",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py,",
			"G:\\Software\\Work\\falinwa_module, *.py,",
			"G:\\Software\\Work\\falinwa_module, *.py, *.xml",
			"G:\\Software\\Work\\falinwa_branch, *.py,",
			"G:\\Software\\Work\\falinwa_branch, *.xml,",
			"G:\\Software\\Work\\falinwa_branch, *.py,",
			"G:\\Software\\Work\\falinwa_branch, *.py, *.xml",
			"G:\\Software\\Work\\falinwa_branch, *.py,",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp, G:\\Software\\Work\\falinwa_module, G:\\Software\\Work\\falinwa_branch, *.py,",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp, G:\\Software\\Work\\falinwa_module, *.py,",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp, G:\\Software\\Work\\falinwa_module, *.xml,",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp, G:\\Software\\Work\\falinwa_module, *.xml, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp, G:\\Software\\Work\\falinwa_module, *.xml, &.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.js",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.js",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server, C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.js",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server, C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server, C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp, C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp, C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp, C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py,",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py, *.xml, *.csv",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.js",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module,",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.js",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.js",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml",
			"xmls",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.js",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.js",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml, *.py",
			"C:\\Program Files (x86)\\Odoo 9.0-20160210\\server\\openerp\\addons, G:\\Software\\Work\\falinwa_module, *.xml, *.oy"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"print",
			"penjualanfaktur",
			"search",
			"'penjualanfaktur'",
			"SUPERUSER",
			"        ",
			",  ",
			",",
			" :",
			"def create",
			"default",
			"	",
			"float",
			"integer",
			"/",
			"*",
			"nilaikredit",
			"self.jurnalpenyesuaian",
			"self.tahun",
			"self.bulan",
			"self.",
			"akundetildummy",
			"mmr.akundummy",
			"self.bulan",
			"tanggal",
			"int",
			"nilaidebit",
			"saldoawal",
			"print",
			"saldoawal",
			"start",
			"semuahasilsearch",
			"start",
			"print",
			"akundetil",
			"akundetillist",
			"listakundetil",
			")",
			"date",
			"strptime",
			"strp",
			"DEFAULT",
			":",
			",",
			"semuaakundetil.kredit",
			"tidak dapat",
			"_ambil_tanggal",
			"field_name",
			":",
			"saldoawal",
			"order",
			"fields.related",
			"idakun",
			"object",
			"idsaveakun",
			"mmr.akundummy",
			"mmr.akun",
			"saldoawal",
			"laporanjurnal",
			"save",
			"multi_action_master_mmr_saveakun",
			"account",
			",  ",
			",",
			"	",
			" :",
			",  ",
			",",
			"sring",
			"group_project_responsible_user",
			"responsible",
			"<field name=\"view_ids\">",
			"ref(",
			"view_ids",
			"\"views\"",
			"ir.actions.act_window",
			"_name",
			"ir.ui.view",
			"form_view\"",
			"form_view",
			"form_view_id",
			"form_view",
			"tree_view_id",
			"view_id",
			"view_type",
			"view_type_tree",
			"view_id",
			"ref(",
			"ref",
			"view_id",
			"default_order",
			"mmr.pembeliansj",
			"	",
			"act_window",
			"	",
			"class mmr_pembelianpodetil",
			"digits_compute",
			"decimal.precision",
			"dp",
			"dp.get_precision",
			"	",
			"round",
			"get_days",
			"check_holidays",
			"_check_holidays",
			"The number of remaining leaves is not sufficient for this leave type.",
			"The number of remaining leaves is not sufficient for this leave type.\nPlease verify also the leaves waiting for validation.",
			"The number of remaining leaves is not sufficient for this leave type.\nPlease verify also the leaves waiting for validation. ",
			"hr.holidays",
			"attrs",
			"res.company",
			"raise",
			"fal_sales_order_consolidation_1",
			"self",
			"fal_is_probation_last_month",
			"check_probation_duration",
			"menu",
			"hr.holidays.status",
			"lambda",
			"default=\"",
			"fal_in_consol",
			"consolidated",
			"is_consolidate",
			"in_consolidate",
			"revenue_source",
			"fal_my",
			"retrieve_sales_dashboard",
			"fal_my"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			", ",
			":",
			"    ",
			"tahun",
			"bulan",
			"akundetil_id",
			").date()",
			"datetime",
			": ",
			"semuaakundetilkredit",
			": ",
			"akun",
			", ",
			"    ",
			":",
			", ",
			"string",
			"    ",
			"fal_net_margin",
			"fal_planned_revenue",
			"fal_gross_margin",
			"    ",
			"'fal_stage_in_qualification'",
			"gleize_website_ext"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1405388,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										253,
										260
									],
									[
										472,
										479
									],
									[
										629,
										636
									],
									[
										846,
										853
									],
									[
										1350,
										1357
									],
									[
										1408,
										1415
									],
									[
										1665,
										1672
									],
									[
										1905,
										1912
									],
									[
										2057,
										2064
									],
									[
										2130,
										2137
									],
									[
										2146,
										2153
									],
									[
										2167,
										2174
									],
									[
										2369,
										2376
									],
									[
										2641,
										2648
									],
									[
										2815,
										2822
									],
									[
										2909,
										2916
									],
									[
										3014,
										3021
									],
									[
										3542,
										3549
									],
									[
										3606,
										3613
									],
									[
										3683,
										3690
									],
									[
										3736,
										3743
									],
									[
										3799,
										3806
									],
									[
										3875,
										3882
									],
									[
										4414,
										4421
									],
									[
										4671,
										4678
									],
									[
										4713,
										4720
									],
									[
										4852,
										4859
									],
									[
										4893,
										4900
									],
									[
										5160,
										5167
									],
									[
										5197,
										5204
									],
									[
										5224,
										5231
									],
									[
										5314,
										5321
									],
									[
										5358,
										5365
									],
									[
										5470,
										5477
									],
									[
										5687,
										5694
									],
									[
										5862,
										5869
									],
									[
										6217,
										6224
									],
									[
										6398,
										6405
									],
									[
										6584,
										6591
									],
									[
										6677,
										6684
									],
									[
										6869,
										6876
									],
									[
										7061,
										7068
									],
									[
										7122,
										7129
									],
									[
										7279,
										7286
									],
									[
										7488,
										7495
									],
									[
										7676,
										7683
									],
									[
										7887,
										7894
									],
									[
										8260,
										8267
									],
									[
										8307,
										8314
									],
									[
										8758,
										8765
									],
									[
										8989,
										8996
									],
									[
										9282,
										9289
									],
									[
										9325,
										9332
									],
									[
										9528,
										9535
									],
									[
										9575,
										9582
									],
									[
										9611,
										9618
									],
									[
										9707,
										9714
									],
									[
										9722,
										9729
									],
									[
										9834,
										9841
									],
									[
										9846,
										9853
									],
									[
										10349,
										10356
									],
									[
										10567,
										10574
									],
									[
										10827,
										10834
									],
									[
										10959,
										10966
									],
									[
										11140,
										11147
									],
									[
										11271,
										11278
									],
									[
										11596,
										11603
									],
									[
										11785,
										11792
									],
									[
										11937,
										11944
									],
									[
										12230,
										12237
									],
									[
										12663,
										12670
									],
									[
										12777,
										12784
									],
									[
										13021,
										13028
									],
									[
										13466,
										13473
									],
									[
										13962,
										13969
									],
									[
										14109,
										14116
									],
									[
										14587,
										14594
									],
									[
										14875,
										14882
									],
									[
										14987,
										14994
									],
									[
										15105,
										15112
									],
									[
										15239,
										15246
									],
									[
										15532,
										15539
									],
									[
										16194,
										16201
									],
									[
										16286,
										16293
									],
									[
										16625,
										16632
									],
									[
										17255,
										17262
									],
									[
										17486,
										17493
									],
									[
										17599,
										17606
									],
									[
										17958,
										17965
									],
									[
										18085,
										18092
									],
									[
										18258,
										18265
									],
									[
										18497,
										18504
									],
									[
										18571,
										18578
									],
									[
										18607,
										18614
									],
									[
										18717,
										18724
									],
									[
										18895,
										18902
									],
									[
										19101,
										19108
									],
									[
										19242,
										19249
									],
									[
										19352,
										19359
									],
									[
										19592,
										19599
									],
									[
										19625,
										19632
									],
									[
										19690,
										19697
									],
									[
										19722,
										19729
									],
									[
										20174,
										20181
									],
									[
										20502,
										20509
									],
									[
										20632,
										20639
									],
									[
										20864,
										20871
									],
									[
										21171,
										21178
									],
									[
										21622,
										21629
									],
									[
										21652,
										21659
									],
									[
										21981,
										21988
									],
									[
										22009,
										22016
									],
									[
										22053,
										22060
									],
									[
										22080,
										22087
									],
									[
										22387,
										22394
									],
									[
										22634,
										22641
									],
									[
										22844,
										22851
									],
									[
										23054,
										23061
									],
									[
										23331,
										23338
									],
									[
										23433,
										23440
									],
									[
										23678,
										23685
									],
									[
										24063,
										24070
									],
									[
										24132,
										24139
									],
									[
										24555,
										24562
									],
									[
										24649,
										24656
									],
									[
										24869,
										24876
									],
									[
										25179,
										25186
									],
									[
										25455,
										25462
									],
									[
										25762,
										25769
									],
									[
										26096,
										26103
									],
									[
										26399,
										26406
									],
									[
										26911,
										26918
									],
									[
										27066,
										27073
									],
									[
										27216,
										27223
									],
									[
										27417,
										27424
									],
									[
										27500,
										27507
									],
									[
										27763,
										27770
									],
									[
										27841,
										27848
									],
									[
										28227,
										28234
									],
									[
										28312,
										28319
									],
									[
										28649,
										28656
									],
									[
										29149,
										29156
									],
									[
										29497,
										29504
									],
									[
										29566,
										29573
									],
									[
										29620,
										29627
									],
									[
										29952,
										29959
									],
									[
										30242,
										30249
									],
									[
										30472,
										30479
									],
									[
										30642,
										30649
									],
									[
										30692,
										30699
									],
									[
										31011,
										31018
									],
									[
										31738,
										31745
									],
									[
										32078,
										32085
									],
									[
										32546,
										32553
									],
									[
										32885,
										32892
									],
									[
										33166,
										33173
									],
									[
										33390,
										33397
									],
									[
										33445,
										33452
									],
									[
										33722,
										33729
									],
									[
										33751,
										33758
									],
									[
										34055,
										34062
									],
									[
										34453,
										34460
									],
									[
										34683,
										34690
									],
									[
										35152,
										35159
									],
									[
										35550,
										35557
									],
									[
										35875,
										35882
									],
									[
										35884,
										35891
									],
									[
										36107,
										36114
									],
									[
										36116,
										36123
									],
									[
										36422,
										36429
									],
									[
										36537,
										36544
									],
									[
										36591,
										36598
									],
									[
										36797,
										36804
									],
									[
										37076,
										37083
									],
									[
										37450,
										37457
									],
									[
										37720,
										37727
									],
									[
										37772,
										37779
									],
									[
										37815,
										37822
									],
									[
										37871,
										37878
									],
									[
										37923,
										37930
									],
									[
										38148,
										38155
									],
									[
										38185,
										38192
									],
									[
										38282,
										38289
									],
									[
										38346,
										38353
									],
									[
										38539,
										38546
									],
									[
										38701,
										38708
									],
									[
										38759,
										38766
									],
									[
										38834,
										38841
									],
									[
										39225,
										39232
									],
									[
										39585,
										39592
									],
									[
										39594,
										39601
									],
									[
										39843,
										39850
									],
									[
										39852,
										39859
									],
									[
										40172,
										40179
									],
									[
										40294,
										40301
									],
									[
										40670,
										40677
									],
									[
										41014,
										41021
									],
									[
										41282,
										41289
									],
									[
										41525,
										41532
									],
									[
										41885,
										41892
									],
									[
										41964,
										41971
									],
									[
										42095,
										42102
									],
									[
										42616,
										42623
									],
									[
										42646,
										42653
									],
									[
										42669,
										42676
									],
									[
										43182,
										43189
									],
									[
										43766,
										43773
									],
									[
										44318,
										44325
									],
									[
										44878,
										44885
									],
									[
										45277,
										45284
									],
									[
										45680,
										45687
									],
									[
										46083,
										46090
									],
									[
										46461,
										46468
									],
									[
										46503,
										46510
									],
									[
										46523,
										46530
									],
									[
										46901,
										46908
									],
									[
										47226,
										47233
									],
									[
										47304,
										47311
									],
									[
										47483,
										47490
									],
									[
										47576,
										47583
									],
									[
										47803,
										47810
									],
									[
										47869,
										47876
									],
									[
										48063,
										48070
									],
									[
										48345,
										48352
									],
									[
										48490,
										48497
									],
									[
										48683,
										48690
									],
									[
										49041,
										49048
									],
									[
										49511,
										49518
									],
									[
										49553,
										49560
									],
									[
										50005,
										50012
									],
									[
										50187,
										50194
									],
									[
										50308,
										50315
									],
									[
										50618,
										50625
									],
									[
										50911,
										50918
									],
									[
										51184,
										51191
									],
									[
										51276,
										51283
									],
									[
										51725,
										51732
									],
									[
										51817,
										51824
									],
									[
										52252,
										52259
									],
									[
										52527,
										52534
									],
									[
										52568,
										52575
									],
									[
										52594,
										52601
									],
									[
										52815,
										52822
									],
									[
										53076,
										53083
									],
									[
										53381,
										53388
									],
									[
										53586,
										53593
									],
									[
										54106,
										54113
									],
									[
										54494,
										54501
									],
									[
										54527,
										54534
									],
									[
										54805,
										54812
									],
									[
										54838,
										54845
									],
									[
										55237,
										55244
									],
									[
										55734,
										55741
									],
									[
										55775,
										55782
									],
									[
										55797,
										55804
									],
									[
										56133,
										56140
									],
									[
										56168,
										56175
									],
									[
										56474,
										56481
									],
									[
										56965,
										56972
									],
									[
										57006,
										57013
									],
									[
										57028,
										57035
									],
									[
										57353,
										57360
									],
									[
										57383,
										57390
									],
									[
										57661,
										57668
									],
									[
										57937,
										57944
									],
									[
										58418,
										58425
									],
									[
										59000,
										59007
									],
									[
										59351,
										59358
									],
									[
										59645,
										59652
									],
									[
										59948,
										59955
									],
									[
										60248,
										60255
									],
									[
										60551,
										60558
									],
									[
										60837,
										60844
									],
									[
										61124,
										61131
									],
									[
										61412,
										61419
									],
									[
										61718,
										61725
									],
									[
										62032,
										62039
									],
									[
										62308,
										62315
									],
									[
										62578,
										62585
									],
									[
										62956,
										62963
									],
									[
										63030,
										63037
									],
									[
										63393,
										63400
									],
									[
										63467,
										63474
									],
									[
										63823,
										63830
									],
									[
										63899,
										63906
									],
									[
										64259,
										64266
									],
									[
										64335,
										64342
									],
									[
										64673,
										64680
									],
									[
										64743,
										64750
									],
									[
										65076,
										65083
									],
									[
										65147,
										65154
									],
									[
										65490,
										65497
									],
									[
										65561,
										65568
									],
									[
										65902,
										65909
									],
									[
										65977,
										65984
									],
									[
										66288,
										66295
									],
									[
										66362,
										66369
									],
									[
										66561,
										66568
									],
									[
										66936,
										66943
									],
									[
										67092,
										67099
									],
									[
										67115,
										67122
									],
									[
										67339,
										67346
									],
									[
										67639,
										67646
									],
									[
										67662,
										67669
									],
									[
										68036,
										68043
									],
									[
										68554,
										68561
									],
									[
										68655,
										68662
									],
									[
										69211,
										69218
									],
									[
										69249,
										69256
									],
									[
										69320,
										69327
									],
									[
										69547,
										69554
									],
									[
										69559,
										69566
									],
									[
										69759,
										69766
									],
									[
										69969,
										69976
									],
									[
										70006,
										70013
									],
									[
										70025,
										70032
									],
									[
										70037,
										70044
									],
									[
										70306,
										70313
									],
									[
										70474,
										70481
									],
									[
										70704,
										70711
									],
									[
										71042,
										71049
									],
									[
										71383,
										71390
									],
									[
										71717,
										71724
									],
									[
										72152,
										72159
									],
									[
										72187,
										72194
									],
									[
										72585,
										72592
									],
									[
										72617,
										72624
									],
									[
										72991,
										72998
									],
									[
										73458,
										73465
									],
									[
										73780,
										73787
									],
									[
										74063,
										74070
									],
									[
										74431,
										74438
									],
									[
										74803,
										74810
									],
									[
										75095,
										75102
									],
									[
										75403,
										75410
									],
									[
										75699,
										75706
									],
									[
										76000,
										76007
									],
									[
										76292,
										76299
									],
									[
										76587,
										76594
									],
									[
										76770,
										76777
									],
									[
										77231,
										77238
									],
									[
										77487,
										77494
									],
									[
										77929,
										77936
									],
									[
										78605,
										78612
									],
									[
										78634,
										78641
									],
									[
										79202,
										79209
									],
									[
										79230,
										79237
									],
									[
										79296,
										79303
									],
									[
										79772,
										79779
									],
									[
										79813,
										79820
									],
									[
										79838,
										79845
									],
									[
										80162,
										80169
									],
									[
										80420,
										80427
									],
									[
										80458,
										80465
									],
									[
										80922,
										80929
									],
									[
										82147,
										82154
									],
									[
										82239,
										82246
									],
									[
										82561,
										82568
									],
									[
										82612,
										82619
									],
									[
										82690,
										82697
									],
									[
										82734,
										82741
									],
									[
										82789,
										82796
									],
									[
										82875,
										82882
									],
									[
										83232,
										83239
									],
									[
										83430,
										83437
									],
									[
										83442,
										83449
									],
									[
										83650,
										83657
									],
									[
										83742,
										83749
									],
									[
										84162,
										84169
									],
									[
										84416,
										84423
									],
									[
										84459,
										84466
									],
									[
										84496,
										84503
									],
									[
										84515,
										84522
									],
									[
										84527,
										84534
									],
									[
										84811,
										84818
									],
									[
										85132,
										85139
									],
									[
										85257,
										85264
									],
									[
										85397,
										85404
									],
									[
										85496,
										85503
									],
									[
										85865,
										85872
									],
									[
										86279,
										86286
									],
									[
										86351,
										86358
									],
									[
										86766,
										86773
									],
									[
										86850,
										86857
									],
									[
										86879,
										86886
									],
									[
										86972,
										86979
									],
									[
										87065,
										87072
									],
									[
										87098,
										87105
									],
									[
										87358,
										87365
									],
									[
										87589,
										87596
									],
									[
										88082,
										88089
									],
									[
										88364,
										88371
									],
									[
										88738,
										88745
									],
									[
										89120,
										89127
									],
									[
										89192,
										89199
									],
									[
										89602,
										89609
									],
									[
										89678,
										89685
									],
									[
										90357,
										90364
									],
									[
										90775,
										90782
									],
									[
										91075,
										91082
									],
									[
										91255,
										91262
									],
									[
										91542,
										91549
									],
									[
										91935,
										91942
									],
									[
										92370,
										92377
									],
									[
										93182,
										93189
									],
									[
										93519,
										93526
									],
									[
										93739,
										93746
									],
									[
										93784,
										93791
									],
									[
										93920,
										93927
									],
									[
										94250,
										94257
									],
									[
										94553,
										94560
									],
									[
										94997,
										95004
									],
									[
										95368,
										95375
									],
									[
										95776,
										95783
									],
									[
										96284,
										96291
									],
									[
										96586,
										96593
									],
									[
										96698,
										96705
									],
									[
										97030,
										97037
									],
									[
										97399,
										97406
									],
									[
										97517,
										97524
									],
									[
										97777,
										97784
									],
									[
										98181,
										98188
									],
									[
										98846,
										98853
									],
									[
										99158,
										99165
									],
									[
										99526,
										99533
									],
									[
										99972,
										99979
									],
									[
										100337,
										100344
									],
									[
										100496,
										100503
									],
									[
										100793,
										100800
									],
									[
										101011,
										101018
									],
									[
										101346,
										101353
									],
									[
										101810,
										101817
									],
									[
										102044,
										102051
									],
									[
										102270,
										102277
									],
									[
										102503,
										102510
									],
									[
										102817,
										102824
									],
									[
										103095,
										103102
									],
									[
										103325,
										103332
									],
									[
										103831,
										103838
									],
									[
										104211,
										104218
									],
									[
										104675,
										104682
									],
									[
										105258,
										105265
									],
									[
										105588,
										105595
									],
									[
										105967,
										105974
									],
									[
										106063,
										106070
									],
									[
										106372,
										106379
									],
									[
										106439,
										106446
									],
									[
										106801,
										106808
									],
									[
										106888,
										106895
									],
									[
										106960,
										106967
									],
									[
										107376,
										107383
									],
									[
										107411,
										107418
									],
									[
										107450,
										107457
									],
									[
										107481,
										107488
									],
									[
										107520,
										107527
									],
									[
										107832,
										107839
									],
									[
										107875,
										107882
									],
									[
										107909,
										107916
									],
									[
										107944,
										107951
									],
									[
										108265,
										108272
									],
									[
										108304,
										108311
									],
									[
										108600,
										108607
									],
									[
										108634,
										108641
									],
									[
										108659,
										108666
									],
									[
										108680,
										108687
									],
									[
										109080,
										109087
									],
									[
										109434,
										109441
									],
									[
										109467,
										109474
									],
									[
										109495,
										109502
									],
									[
										109887,
										109894
									],
									[
										109913,
										109920
									],
									[
										110287,
										110294
									],
									[
										110535,
										110542
									],
									[
										110663,
										110670
									],
									[
										110885,
										110892
									],
									[
										110942,
										110949
									],
									[
										111196,
										111203
									],
									[
										111251,
										111258
									],
									[
										111756,
										111763
									],
									[
										112067,
										112074
									],
									[
										112367,
										112374
									],
									[
										112547,
										112554
									],
									[
										112751,
										112758
									],
									[
										112858,
										112865
									],
									[
										113427,
										113434
									],
									[
										113890,
										113897
									],
									[
										114143,
										114150
									],
									[
										114557,
										114564
									],
									[
										114841,
										114848
									],
									[
										115141,
										115148
									],
									[
										115484,
										115491
									],
									[
										115507,
										115514
									],
									[
										115946,
										115953
									],
									[
										116035,
										116042
									],
									[
										116112,
										116119
									],
									[
										116224,
										116231
									],
									[
										116487,
										116494
									],
									[
										116576,
										116583
									],
									[
										116653,
										116660
									],
									[
										116765,
										116772
									],
									[
										117121,
										117128
									],
									[
										117514,
										117521
									],
									[
										117610,
										117617
									],
									[
										117689,
										117696
									],
									[
										117887,
										117894
									],
									[
										117979,
										117986
									],
									[
										118056,
										118063
									],
									[
										118264,
										118271
									],
									[
										118337,
										118344
									],
									[
										118448,
										118455
									],
									[
										118540,
										118547
									],
									[
										118617,
										118624
									],
									[
										118683,
										118690
									],
									[
										118718,
										118725
									],
									[
										118847,
										118854
									],
									[
										119236,
										119243
									],
									[
										119575,
										119582
									],
									[
										119878,
										119885
									],
									[
										119913,
										119920
									],
									[
										120044,
										120051
									],
									[
										120095,
										120102
									],
									[
										120327,
										120334
									],
									[
										120416,
										120423
									],
									[
										120451,
										120458
									],
									[
										120701,
										120708
									],
									[
										120788,
										120795
									],
									[
										120820,
										120827
									],
									[
										121131,
										121138
									],
									[
										121210,
										121217
									],
									[
										121311,
										121318
									],
									[
										121752,
										121759
									],
									[
										122040,
										122047
									],
									[
										122334,
										122341
									],
									[
										122479,
										122486
									],
									[
										122646,
										122653
									],
									[
										122722,
										122729
									],
									[
										122906,
										122913
									],
									[
										123450,
										123457
									],
									[
										123721,
										123728
									],
									[
										123829,
										123836
									],
									[
										124061,
										124068
									],
									[
										124134,
										124141
									],
									[
										124196,
										124203
									],
									[
										124254,
										124261
									],
									[
										124510,
										124517
									],
									[
										124849,
										124856
									],
									[
										125217,
										125224
									],
									[
										125247,
										125254
									],
									[
										125517,
										125524
									],
									[
										125693,
										125700
									],
									[
										125776,
										125783
									],
									[
										125850,
										125857
									],
									[
										125929,
										125936
									],
									[
										126007,
										126014
									],
									[
										126037,
										126044
									],
									[
										126275,
										126282
									],
									[
										126349,
										126356
									],
									[
										126428,
										126435
									],
									[
										126506,
										126513
									],
									[
										126536,
										126543
									],
									[
										126903,
										126910
									],
									[
										127357,
										127364
									],
									[
										127643,
										127650
									],
									[
										127754,
										127761
									],
									[
										128117,
										128124
									],
									[
										128374,
										128381
									],
									[
										128728,
										128735
									],
									[
										129308,
										129315
									],
									[
										129807,
										129814
									],
									[
										130022,
										130029
									],
									[
										130044,
										130051
									],
									[
										130200,
										130207
									],
									[
										130719,
										130726
									],
									[
										130752,
										130759
									],
									[
										131075,
										131082
									],
									[
										131151,
										131158
									],
									[
										131399,
										131406
									],
									[
										131685,
										131692
									],
									[
										132024,
										132031
									],
									[
										132271,
										132278
									],
									[
										132548,
										132555
									],
									[
										132795,
										132802
									],
									[
										132969,
										132976
									],
									[
										133190,
										133197
									],
									[
										133295,
										133302
									],
									[
										133429,
										133436
									],
									[
										133638,
										133645
									],
									[
										134027,
										134034
									],
									[
										134437,
										134444
									],
									[
										134481,
										134488
									],
									[
										134844,
										134851
									],
									[
										135017,
										135024
									],
									[
										135307,
										135314
									],
									[
										135598,
										135605
									],
									[
										135891,
										135898
									],
									[
										136181,
										136188
									],
									[
										136472,
										136479
									],
									[
										136797,
										136804
									],
									[
										137098,
										137105
									],
									[
										137415,
										137422
									],
									[
										137701,
										137708
									],
									[
										138069,
										138076
									],
									[
										138495,
										138502
									],
									[
										138882,
										138889
									],
									[
										139317,
										139324
									],
									[
										139712,
										139719
									],
									[
										140155,
										140162
									],
									[
										140530,
										140537
									],
									[
										140933,
										140940
									],
									[
										141229,
										141236
									],
									[
										141489,
										141496
									],
									[
										141706,
										141713
									],
									[
										141755,
										141762
									],
									[
										141776,
										141783
									],
									[
										141936,
										141943
									],
									[
										142195,
										142202
									],
									[
										142278,
										142285
									],
									[
										142647,
										142654
									],
									[
										143042,
										143049
									],
									[
										143349,
										143356
									],
									[
										143448,
										143455
									],
									[
										143711,
										143718
									],
									[
										143923,
										143930
									],
									[
										144174,
										144181
									],
									[
										144334,
										144341
									],
									[
										144539,
										144546
									],
									[
										144915,
										144922
									],
									[
										145376,
										145383
									],
									[
										145952,
										145959
									],
									[
										146394,
										146401
									],
									[
										146423,
										146430
									],
									[
										146731,
										146738
									],
									[
										146820,
										146827
									],
									[
										146891,
										146898
									],
									[
										147283,
										147290
									],
									[
										147497,
										147504
									],
									[
										147874,
										147881
									],
									[
										147964,
										147971
									],
									[
										148073,
										148080
									],
									[
										148131,
										148138
									],
									[
										148464,
										148471
									],
									[
										148816,
										148823
									],
									[
										149264,
										149271
									],
									[
										149686,
										149693
									],
									[
										150126,
										150133
									],
									[
										150566,
										150573
									],
									[
										151001,
										151008
									],
									[
										151509,
										151516
									],
									[
										151919,
										151926
									],
									[
										152353,
										152360
									],
									[
										152601,
										152608
									],
									[
										152853,
										152860
									],
									[
										153131,
										153138
									],
									[
										153577,
										153584
									],
									[
										153773,
										153780
									],
									[
										154020,
										154027
									],
									[
										154351,
										154358
									],
									[
										154794,
										154801
									],
									[
										155248,
										155255
									],
									[
										155667,
										155674
									],
									[
										156041,
										156048
									],
									[
										156137,
										156144
									],
									[
										156450,
										156457
									],
									[
										156749,
										156756
									],
									[
										156877,
										156884
									],
									[
										156928,
										156935
									],
									[
										157282,
										157289
									],
									[
										157357,
										157364
									],
									[
										157594,
										157601
									],
									[
										157631,
										157638
									],
									[
										157885,
										157892
									],
									[
										158228,
										158235
									],
									[
										158515,
										158522
									],
									[
										158545,
										158552
									],
									[
										158568,
										158575
									],
									[
										158850,
										158857
									],
									[
										159363,
										159370
									],
									[
										159587,
										159594
									],
									[
										160228,
										160235
									],
									[
										160946,
										160953
									],
									[
										161226,
										161233
									],
									[
										161447,
										161454
									],
									[
										161672,
										161679
									],
									[
										161785,
										161792
									],
									[
										162103,
										162110
									],
									[
										162249,
										162256
									],
									[
										162425,
										162432
									],
									[
										162466,
										162473
									],
									[
										162566,
										162573
									],
									[
										162677,
										162684
									],
									[
										162717,
										162724
									],
									[
										162807,
										162814
									],
									[
										162866,
										162873
									],
									[
										163095,
										163102
									],
									[
										163168,
										163175
									],
									[
										163452,
										163459
									],
									[
										163827,
										163834
									],
									[
										164191,
										164198
									],
									[
										164231,
										164238
									],
									[
										164421,
										164428
									],
									[
										164451,
										164458
									],
									[
										164718,
										164725
									],
									[
										164819,
										164826
									],
									[
										164958,
										164965
									],
									[
										165136,
										165143
									],
									[
										165227,
										165234
									],
									[
										165304,
										165311
									],
									[
										165365,
										165372
									],
									[
										165426,
										165433
									],
									[
										165487,
										165494
									],
									[
										165539,
										165546
									],
									[
										165616,
										165623
									],
									[
										165649,
										165656
									],
									[
										165718,
										165725
									],
									[
										165994,
										166001
									],
									[
										166352,
										166359
									],
									[
										166389,
										166396
									],
									[
										166644,
										166651
									],
									[
										166684,
										166691
									],
									[
										167109,
										167116
									],
									[
										167526,
										167533
									],
									[
										167625,
										167632
									],
									[
										167723,
										167730
									],
									[
										167810,
										167817
									],
									[
										167981,
										167988
									],
									[
										168247,
										168254
									],
									[
										168538,
										168545
									],
									[
										168576,
										168583
									],
									[
										168766,
										168773
									],
									[
										168803,
										168810
									],
									[
										169169,
										169176
									],
									[
										169520,
										169527
									],
									[
										169566,
										169573
									],
									[
										169915,
										169922
									],
									[
										170034,
										170041
									],
									[
										170150,
										170157
									],
									[
										170350,
										170357
									],
									[
										170832,
										170839
									],
									[
										170856,
										170863
									],
									[
										170881,
										170888
									],
									[
										170909,
										170916
									],
									[
										171512,
										171519
									],
									[
										171542,
										171549
									],
									[
										171565,
										171572
									],
									[
										172100,
										172107
									],
									[
										172130,
										172137
									],
									[
										172153,
										172160
									],
									[
										172925,
										172932
									],
									[
										173465,
										173472
									],
									[
										174002,
										174009
									],
									[
										174072,
										174079
									],
									[
										174739,
										174746
									],
									[
										175197,
										175204
									],
									[
										175635,
										175642
									],
									[
										175679,
										175686
									],
									[
										175739,
										175746
									],
									[
										176207,
										176214
									],
									[
										176237,
										176244
									],
									[
										176260,
										176267
									],
									[
										176704,
										176711
									],
									[
										177423,
										177430
									],
									[
										177837,
										177844
									],
									[
										177931,
										177938
									],
									[
										178100,
										178107
									],
									[
										178297,
										178304
									],
									[
										178598,
										178605
									],
									[
										178805,
										178812
									],
									[
										178881,
										178888
									],
									[
										179248,
										179255
									],
									[
										179431,
										179438
									],
									[
										179482,
										179489
									],
									[
										179510,
										179517
									],
									[
										179606,
										179613
									],
									[
										179736,
										179743
									],
									[
										179882,
										179889
									],
									[
										180034,
										180041
									],
									[
										180109,
										180116
									],
									[
										180168,
										180175
									],
									[
										180210,
										180217
									],
									[
										180313,
										180320
									],
									[
										180678,
										180685
									],
									[
										180975,
										180982
									],
									[
										181269,
										181276
									],
									[
										181714,
										181721
									],
									[
										182151,
										182158
									],
									[
										182412,
										182419
									],
									[
										182888,
										182895
									],
									[
										183173,
										183180
									],
									[
										183656,
										183663
									],
									[
										184224,
										184231
									],
									[
										184739,
										184746
									],
									[
										185265,
										185272
									],
									[
										185778,
										185785
									],
									[
										186149,
										186156
									],
									[
										186396,
										186403
									],
									[
										186525,
										186532
									],
									[
										186789,
										186796
									],
									[
										187013,
										187020
									],
									[
										187110,
										187117
									],
									[
										187417,
										187424
									],
									[
										187730,
										187737
									],
									[
										187897,
										187904
									],
									[
										188197,
										188204
									],
									[
										188421,
										188428
									],
									[
										188678,
										188685
									],
									[
										188890,
										188897
									],
									[
										188995,
										189002
									],
									[
										189366,
										189373
									],
									[
										189688,
										189695
									],
									[
										190194,
										190201
									],
									[
										190209,
										190216
									],
									[
										190480,
										190487
									],
									[
										190558,
										190565
									],
									[
										190896,
										190903
									],
									[
										191170,
										191177
									],
									[
										191347,
										191354
									],
									[
										191724,
										191731
									],
									[
										191965,
										191972
									],
									[
										192451,
										192458
									],
									[
										192684,
										192691
									],
									[
										192960,
										192967
									],
									[
										193284,
										193291
									],
									[
										193641,
										193648
									],
									[
										193850,
										193857
									],
									[
										194087,
										194094
									],
									[
										194396,
										194403
									],
									[
										194705,
										194712
									],
									[
										194714,
										194721
									],
									[
										195305,
										195312
									],
									[
										195880,
										195887
									],
									[
										196076,
										196083
									],
									[
										196318,
										196325
									],
									[
										196469,
										196476
									],
									[
										196597,
										196604
									],
									[
										196725,
										196732
									],
									[
										196963,
										196970
									],
									[
										197011,
										197018
									],
									[
										197160,
										197167
									],
									[
										197347,
										197354
									],
									[
										197642,
										197649
									],
									[
										197651,
										197658
									],
									[
										197909,
										197916
									],
									[
										198177,
										198184
									],
									[
										198579,
										198586
									],
									[
										198756,
										198763
									],
									[
										198952,
										198959
									],
									[
										199112,
										199119
									],
									[
										199310,
										199317
									],
									[
										199471,
										199478
									],
									[
										199746,
										199753
									],
									[
										199786,
										199793
									],
									[
										200078,
										200085
									],
									[
										200241,
										200248
									],
									[
										200545,
										200552
									],
									[
										200711,
										200718
									],
									[
										200989,
										200996
									],
									[
										201131,
										201138
									],
									[
										201417,
										201424
									],
									[
										201616,
										201623
									],
									[
										201625,
										201632
									],
									[
										201721,
										201728
									],
									[
										201933,
										201940
									],
									[
										202258,
										202265
									],
									[
										202434,
										202441
									],
									[
										202500,
										202507
									],
									[
										202909,
										202916
									],
									[
										203247,
										203254
									],
									[
										203533,
										203540
									],
									[
										203574,
										203581
									],
									[
										203753,
										203760
									],
									[
										203929,
										203936
									],
									[
										204170,
										204177
									],
									[
										204198,
										204205
									],
									[
										204398,
										204405
									],
									[
										204663,
										204670
									],
									[
										204879,
										204886
									],
									[
										205177,
										205184
									],
									[
										205419,
										205426
									],
									[
										205474,
										205481
									],
									[
										205748,
										205755
									],
									[
										205860,
										205867
									],
									[
										205971,
										205978
									],
									[
										206219,
										206226
									],
									[
										206551,
										206558
									],
									[
										206664,
										206671
									],
									[
										206759,
										206766
									],
									[
										206863,
										206870
									],
									[
										206943,
										206950
									],
									[
										207051,
										207058
									],
									[
										207146,
										207153
									],
									[
										207214,
										207221
									],
									[
										207354,
										207361
									],
									[
										207447,
										207454
									],
									[
										207662,
										207669
									],
									[
										207835,
										207842
									],
									[
										207914,
										207921
									],
									[
										208028,
										208035
									],
									[
										208178,
										208185
									],
									[
										208242,
										208249
									],
									[
										208480,
										208487
									],
									[
										208571,
										208578
									],
									[
										208590,
										208597
									],
									[
										208928,
										208935
									],
									[
										209093,
										209100
									],
									[
										209195,
										209202
									],
									[
										209463,
										209470
									],
									[
										209489,
										209496
									],
									[
										209794,
										209801
									],
									[
										209952,
										209959
									],
									[
										210273,
										210280
									],
									[
										210529,
										210536
									],
									[
										211146,
										211153
									],
									[
										211720,
										211727
									],
									[
										211864,
										211871
									],
									[
										212213,
										212220
									],
									[
										212721,
										212728
									],
									[
										213013,
										213020
									],
									[
										213342,
										213349
									],
									[
										213781,
										213788
									],
									[
										214251,
										214258
									],
									[
										214341,
										214348
									],
									[
										214567,
										214574
									],
									[
										214861,
										214868
									],
									[
										215111,
										215118
									],
									[
										215131,
										215138
									],
									[
										215296,
										215303
									],
									[
										215451,
										215458
									],
									[
										215591,
										215598
									],
									[
										215875,
										215882
									],
									[
										216259,
										216266
									],
									[
										216343,
										216350
									],
									[
										216516,
										216523
									],
									[
										216784,
										216791
									],
									[
										216973,
										216980
									],
									[
										217122,
										217129
									],
									[
										217284,
										217291
									],
									[
										217554,
										217561
									],
									[
										217837,
										217844
									],
									[
										218078,
										218085
									],
									[
										218367,
										218374
									],
									[
										218454,
										218461
									],
									[
										218797,
										218804
									],
									[
										219139,
										219146
									],
									[
										219408,
										219415
									],
									[
										219644,
										219651
									],
									[
										219969,
										219976
									],
									[
										220141,
										220148
									],
									[
										220376,
										220383
									],
									[
										220722,
										220729
									],
									[
										221033,
										221040
									],
									[
										221227,
										221234
									],
									[
										221498,
										221505
									],
									[
										221648,
										221655
									],
									[
										221656,
										221663
									],
									[
										221926,
										221933
									],
									[
										222173,
										222180
									],
									[
										222384,
										222391
									],
									[
										222584,
										222591
									],
									[
										222992,
										222999
									],
									[
										223383,
										223390
									],
									[
										223619,
										223626
									],
									[
										223848,
										223855
									],
									[
										223966,
										223973
									],
									[
										224202,
										224209
									],
									[
										224408,
										224415
									],
									[
										224590,
										224597
									],
									[
										224628,
										224635
									],
									[
										224720,
										224727
									],
									[
										224942,
										224949
									],
									[
										225164,
										225171
									],
									[
										225377,
										225384
									],
									[
										225722,
										225729
									],
									[
										226174,
										226181
									],
									[
										226196,
										226203
									],
									[
										226216,
										226223
									],
									[
										226545,
										226552
									],
									[
										226989,
										226996
									],
									[
										227229,
										227236
									],
									[
										227252,
										227259
									],
									[
										227501,
										227508
									],
									[
										227602,
										227609
									],
									[
										227850,
										227857
									],
									[
										227901,
										227908
									],
									[
										228026,
										228033
									],
									[
										228056,
										228063
									],
									[
										228224,
										228231
									],
									[
										228476,
										228483
									],
									[
										228521,
										228528
									],
									[
										228814,
										228821
									],
									[
										228845,
										228852
									],
									[
										229164,
										229171
									],
									[
										229426,
										229433
									],
									[
										229525,
										229532
									],
									[
										229535,
										229542
									],
									[
										229777,
										229784
									],
									[
										229788,
										229795
									],
									[
										230163,
										230170
									],
									[
										230439,
										230446
									],
									[
										230695,
										230702
									],
									[
										230934,
										230941
									],
									[
										231163,
										231170
									],
									[
										231248,
										231255
									],
									[
										231381,
										231388
									],
									[
										231462,
										231469
									],
									[
										231640,
										231647
									],
									[
										231689,
										231696
									],
									[
										231757,
										231764
									],
									[
										231786,
										231793
									],
									[
										232044,
										232051
									],
									[
										232096,
										232103
									],
									[
										232241,
										232248
									],
									[
										232437,
										232444
									],
									[
										232516,
										232523
									],
									[
										232814,
										232821
									],
									[
										233120,
										233127
									],
									[
										233216,
										233223
									],
									[
										233451,
										233458
									],
									[
										233633,
										233640
									],
									[
										233761,
										233768
									],
									[
										233882,
										233889
									],
									[
										233985,
										233992
									],
									[
										234195,
										234202
									],
									[
										234301,
										234308
									],
									[
										234339,
										234346
									],
									[
										234385,
										234392
									],
									[
										234464,
										234471
									],
									[
										234644,
										234651
									],
									[
										234680,
										234687
									],
									[
										234817,
										234824
									],
									[
										234986,
										234993
									],
									[
										235172,
										235179
									],
									[
										235430,
										235437
									],
									[
										235830,
										235837
									],
									[
										235944,
										235951
									],
									[
										236189,
										236196
									],
									[
										236394,
										236401
									],
									[
										236432,
										236439
									],
									[
										236510,
										236517
									],
									[
										236522,
										236529
									],
									[
										236658,
										236665
									],
									[
										236745,
										236752
									],
									[
										236817,
										236824
									],
									[
										236975,
										236982
									],
									[
										237072,
										237079
									],
									[
										237160,
										237167
									],
									[
										237531,
										237538
									],
									[
										237993,
										238000
									],
									[
										238156,
										238163
									],
									[
										238192,
										238199
									],
									[
										238307,
										238314
									],
									[
										238414,
										238421
									],
									[
										238470,
										238477
									],
									[
										238516,
										238523
									],
									[
										238610,
										238617
									],
									[
										239037,
										239044
									],
									[
										239200,
										239207
									],
									[
										239237,
										239244
									],
									[
										239352,
										239359
									],
									[
										239469,
										239476
									],
									[
										239525,
										239532
									],
									[
										239571,
										239578
									],
									[
										239665,
										239672
									],
									[
										239957,
										239964
									],
									[
										240040,
										240047
									],
									[
										240214,
										240221
									],
									[
										240491,
										240498
									],
									[
										240816,
										240823
									],
									[
										241126,
										241133
									],
									[
										241434,
										241441
									],
									[
										241526,
										241533
									],
									[
										241874,
										241881
									],
									[
										241936,
										241943
									],
									[
										241950,
										241957
									],
									[
										241960,
										241967
									],
									[
										242087,
										242094
									],
									[
										242358,
										242365
									],
									[
										242471,
										242478
									],
									[
										242664,
										242671
									],
									[
										242744,
										242751
									],
									[
										242830,
										242837
									],
									[
										242861,
										242868
									],
									[
										243053,
										243060
									],
									[
										243148,
										243155
									],
									[
										243333,
										243340
									],
									[
										243420,
										243427
									],
									[
										243563,
										243570
									],
									[
										243653,
										243660
									],
									[
										243813,
										243820
									],
									[
										244232,
										244239
									],
									[
										244288,
										244295
									],
									[
										244654,
										244661
									],
									[
										245022,
										245029
									],
									[
										245342,
										245349
									],
									[
										245782,
										245789
									],
									[
										245982,
										245989
									],
									[
										246356,
										246363
									],
									[
										246532,
										246539
									],
									[
										246831,
										246838
									],
									[
										247728,
										247735
									],
									[
										247759,
										247766
									],
									[
										248569,
										248576
									],
									[
										248600,
										248607
									],
									[
										248721,
										248728
									],
									[
										248752,
										248759
									],
									[
										248875,
										248882
									],
									[
										249323,
										249330
									],
									[
										250160,
										250167
									],
									[
										250197,
										250204
									],
									[
										250977,
										250984
									],
									[
										251014,
										251021
									],
									[
										251144,
										251151
									],
									[
										251181,
										251188
									],
									[
										251309,
										251316
									],
									[
										251779,
										251786
									],
									[
										252063,
										252070
									],
									[
										252233,
										252240
									],
									[
										252436,
										252443
									],
									[
										252713,
										252720
									],
									[
										252933,
										252940
									],
									[
										252996,
										253003
									],
									[
										253096,
										253103
									],
									[
										253108,
										253115
									],
									[
										253241,
										253248
									],
									[
										253284,
										253291
									],
									[
										253634,
										253641
									],
									[
										253897,
										253904
									],
									[
										254145,
										254152
									],
									[
										254378,
										254385
									],
									[
										254577,
										254584
									],
									[
										254626,
										254633
									],
									[
										254984,
										254991
									],
									[
										255217,
										255224
									],
									[
										255390,
										255397
									],
									[
										255553,
										255560
									],
									[
										255871,
										255878
									],
									[
										256152,
										256159
									],
									[
										256317,
										256324
									],
									[
										256436,
										256443
									],
									[
										256953,
										256960
									],
									[
										257219,
										257226
									],
									[
										257301,
										257308
									],
									[
										257440,
										257447
									],
									[
										257579,
										257586
									],
									[
										257715,
										257722
									],
									[
										257857,
										257864
									],
									[
										258004,
										258011
									],
									[
										258254,
										258261
									],
									[
										258587,
										258594
									],
									[
										258652,
										258659
									],
									[
										258715,
										258722
									],
									[
										258751,
										258758
									],
									[
										259054,
										259061
									],
									[
										259271,
										259278
									],
									[
										259413,
										259420
									],
									[
										259612,
										259619
									],
									[
										259640,
										259647
									],
									[
										259735,
										259742
									],
									[
										259745,
										259752
									],
									[
										259775,
										259782
									],
									[
										259863,
										259870
									],
									[
										259896,
										259903
									],
									[
										259951,
										259958
									],
									[
										260245,
										260252
									],
									[
										260296,
										260303
									],
									[
										260399,
										260406
									],
									[
										260783,
										260790
									],
									[
										260837,
										260844
									],
									[
										261219,
										261226
									],
									[
										261866,
										261873
									],
									[
										262277,
										262284
									],
									[
										262419,
										262426
									],
									[
										262509,
										262516
									],
									[
										262675,
										262682
									],
									[
										262910,
										262917
									],
									[
										263057,
										263064
									],
									[
										263205,
										263212
									],
									[
										263428,
										263435
									],
									[
										263673,
										263680
									],
									[
										264031,
										264038
									],
									[
										264331,
										264338
									],
									[
										264615,
										264622
									],
									[
										264971,
										264978
									],
									[
										265040,
										265047
									],
									[
										265094,
										265101
									],
									[
										265409,
										265416
									],
									[
										265791,
										265798
									],
									[
										265865,
										265872
									],
									[
										266135,
										266142
									],
									[
										266209,
										266216
									],
									[
										266481,
										266488
									],
									[
										266557,
										266564
									],
									[
										266834,
										266841
									],
									[
										266976,
										266983
									],
									[
										267347,
										267354
									],
									[
										267608,
										267615
									],
									[
										267682,
										267689
									],
									[
										267772,
										267779
									],
									[
										267949,
										267956
									],
									[
										268069,
										268076
									],
									[
										268111,
										268118
									],
									[
										268156,
										268163
									],
									[
										268262,
										268269
									],
									[
										268606,
										268613
									],
									[
										268887,
										268894
									],
									[
										268918,
										268925
									],
									[
										269260,
										269267
									],
									[
										269304,
										269311
									],
									[
										269380,
										269387
									],
									[
										269636,
										269643
									],
									[
										269887,
										269894
									],
									[
										269985,
										269992
									],
									[
										270107,
										270114
									],
									[
										270342,
										270349
									],
									[
										270355,
										270362
									],
									[
										270682,
										270689
									],
									[
										270829,
										270836
									],
									[
										270860,
										270867
									],
									[
										270900,
										270907
									],
									[
										270929,
										270936
									],
									[
										271253,
										271260
									],
									[
										271263,
										271270
									],
									[
										271349,
										271356
									],
									[
										271585,
										271592
									],
									[
										271648,
										271655
									],
									[
										271681,
										271688
									],
									[
										271757,
										271764
									],
									[
										271809,
										271816
									],
									[
										272105,
										272112
									],
									[
										272200,
										272207
									],
									[
										272396,
										272403
									],
									[
										272471,
										272478
									],
									[
										272515,
										272522
									],
									[
										272815,
										272822
									],
									[
										273275,
										273282
									],
									[
										273474,
										273481
									],
									[
										273767,
										273774
									],
									[
										274191,
										274198
									],
									[
										274517,
										274524
									],
									[
										274561,
										274568
									],
									[
										274617,
										274624
									],
									[
										274679,
										274686
									],
									[
										274858,
										274865
									],
									[
										274965,
										274972
									],
									[
										275121,
										275128
									],
									[
										275237,
										275244
									],
									[
										275431,
										275438
									],
									[
										275575,
										275582
									],
									[
										275630,
										275637
									],
									[
										275977,
										275984
									],
									[
										276190,
										276197
									],
									[
										276423,
										276430
									],
									[
										276625,
										276632
									],
									[
										276902,
										276909
									],
									[
										276913,
										276920
									],
									[
										277280,
										277287
									],
									[
										277486,
										277493
									],
									[
										277694,
										277701
									],
									[
										277956,
										277963
									],
									[
										278034,
										278041
									],
									[
										278081,
										278088
									],
									[
										278331,
										278338
									],
									[
										278379,
										278386
									],
									[
										278501,
										278508
									],
									[
										278680,
										278687
									],
									[
										278710,
										278717
									],
									[
										278725,
										278732
									],
									[
										278755,
										278762
									],
									[
										278852,
										278859
									],
									[
										279050,
										279057
									],
									[
										279412,
										279419
									],
									[
										279444,
										279451
									],
									[
										279552,
										279559
									],
									[
										279649,
										279656
									],
									[
										279708,
										279715
									],
									[
										279874,
										279881
									],
									[
										279891,
										279898
									],
									[
										279937,
										279944
									],
									[
										279959,
										279966
									],
									[
										280084,
										280091
									],
									[
										280314,
										280321
									],
									[
										280553,
										280560
									],
									[
										281010,
										281017
									],
									[
										281293,
										281300
									],
									[
										281580,
										281587
									],
									[
										282035,
										282042
									],
									[
										282472,
										282479
									],
									[
										282873,
										282880
									],
									[
										283145,
										283152
									],
									[
										283428,
										283435
									],
									[
										283700,
										283707
									],
									[
										283728,
										283735
									],
									[
										283758,
										283765
									],
									[
										284288,
										284295
									],
									[
										284320,
										284327
									],
									[
										284346,
										284353
									],
									[
										284374,
										284381
									],
									[
										284396,
										284403
									],
									[
										284426,
										284433
									],
									[
										284446,
										284453
									],
									[
										284480,
										284487
									],
									[
										284510,
										284517
									],
									[
										284540,
										284547
									],
									[
										284867,
										284874
									],
									[
										285285,
										285292
									],
									[
										285613,
										285620
									],
									[
										285642,
										285649
									],
									[
										285951,
										285958
									],
									[
										285973,
										285980
									],
									[
										285995,
										286002
									],
									[
										286304,
										286311
									],
									[
										286326,
										286333
									],
									[
										286349,
										286356
									],
									[
										286626,
										286633
									],
									[
										286922,
										286929
									],
									[
										287040,
										287047
									],
									[
										287156,
										287163
									],
									[
										287347,
										287354
									],
									[
										287513,
										287520
									],
									[
										287766,
										287773
									],
									[
										287862,
										287869
									],
									[
										287944,
										287951
									],
									[
										288140,
										288147
									],
									[
										288297,
										288304
									],
									[
										288414,
										288421
									],
									[
										288429,
										288436
									],
									[
										288477,
										288484
									],
									[
										288511,
										288518
									],
									[
										288540,
										288547
									],
									[
										288626,
										288633
									],
									[
										288654,
										288661
									],
									[
										288772,
										288779
									],
									[
										288973,
										288980
									],
									[
										289134,
										289141
									],
									[
										289384,
										289391
									],
									[
										289515,
										289522
									],
									[
										289561,
										289568
									],
									[
										289672,
										289679
									],
									[
										289846,
										289853
									],
									[
										290073,
										290080
									],
									[
										290330,
										290337
									],
									[
										290487,
										290494
									],
									[
										290528,
										290535
									],
									[
										290656,
										290663
									],
									[
										291183,
										291190
									],
									[
										291793,
										291800
									],
									[
										291968,
										291975
									],
									[
										292035,
										292042
									],
									[
										292126,
										292133
									],
									[
										292326,
										292333
									],
									[
										292379,
										292386
									],
									[
										292549,
										292556
									],
									[
										292943,
										292950
									],
									[
										293466,
										293473
									],
									[
										293679,
										293686
									],
									[
										294047,
										294054
									],
									[
										294140,
										294147
									],
									[
										294221,
										294228
									],
									[
										294296,
										294303
									],
									[
										294315,
										294322
									],
									[
										294814,
										294821
									],
									[
										295351,
										295358
									],
									[
										295532,
										295539
									],
									[
										295801,
										295808
									],
									[
										295984,
										295991
									],
									[
										296253,
										296260
									],
									[
										296501,
										296508
									],
									[
										296770,
										296777
									],
									[
										297002,
										297009
									],
									[
										297271,
										297278
									],
									[
										297453,
										297460
									],
									[
										297719,
										297726
									],
									[
										297957,
										297964
									],
									[
										298223,
										298230
									],
									[
										298497,
										298504
									],
									[
										298762,
										298769
									],
									[
										299002,
										299009
									],
									[
										299268,
										299275
									],
									[
										299320,
										299327
									],
									[
										299444,
										299451
									],
									[
										299575,
										299582
									],
									[
										299630,
										299637
									],
									[
										299795,
										299802
									],
									[
										299850,
										299857
									],
									[
										299921,
										299928
									],
									[
										300054,
										300061
									],
									[
										300130,
										300137
									],
									[
										300339,
										300346
									],
									[
										300798,
										300805
									],
									[
										301249,
										301256
									],
									[
										301683,
										301690
									],
									[
										302052,
										302059
									],
									[
										302186,
										302193
									],
									[
										302697,
										302704
									],
									[
										303065,
										303072
									],
									[
										303411,
										303418
									],
									[
										303510,
										303517
									],
									[
										303609,
										303616
									],
									[
										303708,
										303715
									],
									[
										303906,
										303913
									],
									[
										304001,
										304008
									],
									[
										304096,
										304103
									],
									[
										304191,
										304198
									],
									[
										304385,
										304392
									],
									[
										304480,
										304487
									],
									[
										304588,
										304595
									],
									[
										304667,
										304674
									],
									[
										304948,
										304955
									],
									[
										305028,
										305035
									],
									[
										305231,
										305238
									],
									[
										305470,
										305477
									],
									[
										305596,
										305603
									],
									[
										305665,
										305672
									],
									[
										305698,
										305705
									],
									[
										305896,
										305903
									],
									[
										306135,
										306142
									],
									[
										306234,
										306241
									],
									[
										306333,
										306340
									],
									[
										306441,
										306448
									],
									[
										306510,
										306517
									],
									[
										306580,
										306587
									],
									[
										306843,
										306850
									],
									[
										307046,
										307053
									],
									[
										307285,
										307292
									],
									[
										307384,
										307391
									],
									[
										307483,
										307490
									],
									[
										307589,
										307596
									],
									[
										307678,
										307685
									],
									[
										307942,
										307949
									],
									[
										308145,
										308152
									],
									[
										308384,
										308391
									],
									[
										308482,
										308489
									],
									[
										308574,
										308581
									],
									[
										308656,
										308663
									],
									[
										308862,
										308869
									],
									[
										308931,
										308938
									],
									[
										308964,
										308971
									],
									[
										309155,
										309162
									],
									[
										309390,
										309397
									],
									[
										309485,
										309492
									],
									[
										309580,
										309587
									],
									[
										309688,
										309695
									],
									[
										309757,
										309764
									],
									[
										309827,
										309834
									],
									[
										310054,
										310061
									],
									[
										310255,
										310262
									],
									[
										310339,
										310346
									],
									[
										310428,
										310435
									],
									[
										310689,
										310696
									],
									[
										310890,
										310897
									],
									[
										310963,
										310970
									],
									[
										311041,
										311048
									],
									[
										311282,
										311289
									],
									[
										311471,
										311478
									],
									[
										311706,
										311713
									],
									[
										311801,
										311808
									],
									[
										312054,
										312061
									],
									[
										312456,
										312463
									],
									[
										312660,
										312667
									],
									[
										312813,
										312820
									],
									[
										313101,
										313108
									],
									[
										313312,
										313319
									],
									[
										313409,
										313416
									],
									[
										313516,
										313523
									],
									[
										313695,
										313702
									],
									[
										313839,
										313846
									],
									[
										313901,
										313908
									],
									[
										314139,
										314146
									],
									[
										314241,
										314248
									],
									[
										314434,
										314441
									],
									[
										314717,
										314724
									],
									[
										314801,
										314808
									],
									[
										314915,
										314922
									],
									[
										315010,
										315017
									],
									[
										315236,
										315243
									],
									[
										315624,
										315631
									],
									[
										315844,
										315851
									],
									[
										316021,
										316028
									],
									[
										316073,
										316080
									],
									[
										316124,
										316131
									],
									[
										316288,
										316295
									],
									[
										316323,
										316330
									],
									[
										316394,
										316401
									],
									[
										316415,
										316422
									],
									[
										316491,
										316498
									],
									[
										316542,
										316549
									],
									[
										316775,
										316782
									],
									[
										317318,
										317325
									],
									[
										317670,
										317677
									],
									[
										317853,
										317860
									],
									[
										317888,
										317895
									],
									[
										317908,
										317915
									],
									[
										318028,
										318035
									],
									[
										318075,
										318082
									],
									[
										318100,
										318107
									],
									[
										318220,
										318227
									],
									[
										318280,
										318287
									],
									[
										318362,
										318369
									],
									[
										318531,
										318538
									],
									[
										318703,
										318710
									],
									[
										319036,
										319043
									],
									[
										319329,
										319336
									],
									[
										319418,
										319425
									],
									[
										319572,
										319579
									],
									[
										319763,
										319770
									],
									[
										319805,
										319812
									],
									[
										319944,
										319951
									],
									[
										319965,
										319972
									],
									[
										320064,
										320071
									],
									[
										320097,
										320104
									],
									[
										320252,
										320259
									],
									[
										320399,
										320406
									],
									[
										320420,
										320427
									],
									[
										320519,
										320526
									],
									[
										320552,
										320559
									],
									[
										320913,
										320920
									],
									[
										321121,
										321128
									],
									[
										321386,
										321393
									],
									[
										321897,
										321904
									],
									[
										322253,
										322260
									],
									[
										322552,
										322559
									],
									[
										322898,
										322905
									],
									[
										323118,
										323125
									],
									[
										323205,
										323212
									],
									[
										323444,
										323451
									],
									[
										323747,
										323754
									],
									[
										324165,
										324172
									],
									[
										324524,
										324531
									],
									[
										325051,
										325058
									],
									[
										325366,
										325373
									],
									[
										325685,
										325692
									],
									[
										325952,
										325959
									],
									[
										326402,
										326409
									],
									[
										326622,
										326629
									],
									[
										326997,
										327004
									],
									[
										327132,
										327139
									],
									[
										327374,
										327381
									],
									[
										327667,
										327674
									],
									[
										327895,
										327902
									],
									[
										328125,
										328132
									],
									[
										328450,
										328457
									],
									[
										328748,
										328755
									],
									[
										329091,
										329098
									],
									[
										329445,
										329452
									],
									[
										329823,
										329830
									],
									[
										330121,
										330128
									],
									[
										330360,
										330367
									],
									[
										330485,
										330492
									],
									[
										330684,
										330691
									],
									[
										330927,
										330934
									],
									[
										331043,
										331050
									],
									[
										331361,
										331368
									],
									[
										331753,
										331760
									],
									[
										331877,
										331884
									],
									[
										332432,
										332439
									],
									[
										332721,
										332728
									],
									[
										332980,
										332987
									],
									[
										333279,
										333286
									],
									[
										333375,
										333382
									],
									[
										333651,
										333658
									],
									[
										333820,
										333827
									],
									[
										334140,
										334147
									],
									[
										334236,
										334243
									],
									[
										334512,
										334519
									],
									[
										334752,
										334759
									],
									[
										335078,
										335085
									],
									[
										335555,
										335562
									],
									[
										335655,
										335662
									],
									[
										335887,
										335894
									],
									[
										335969,
										335976
									],
									[
										336129,
										336136
									],
									[
										336179,
										336186
									],
									[
										336580,
										336587
									],
									[
										337069,
										337076
									],
									[
										337399,
										337406
									],
									[
										337450,
										337457
									],
									[
										337745,
										337752
									],
									[
										338092,
										338099
									],
									[
										338339,
										338346
									],
									[
										338386,
										338393
									],
									[
										338628,
										338635
									],
									[
										338913,
										338920
									],
									[
										339275,
										339282
									],
									[
										339513,
										339520
									],
									[
										339836,
										339843
									],
									[
										339864,
										339871
									],
									[
										340104,
										340111
									],
									[
										340235,
										340242
									],
									[
										340400,
										340407
									],
									[
										340649,
										340656
									],
									[
										340761,
										340768
									],
									[
										341039,
										341046
									],
									[
										341206,
										341213
									],
									[
										341568,
										341575
									],
									[
										341916,
										341923
									],
									[
										342286,
										342293
									],
									[
										342710,
										342717
									],
									[
										342984,
										342991
									],
									[
										343354,
										343361
									],
									[
										343777,
										343784
									],
									[
										343878,
										343885
									],
									[
										344118,
										344125
									],
									[
										344378,
										344385
									],
									[
										344655,
										344662
									],
									[
										345020,
										345027
									],
									[
										345174,
										345181
									],
									[
										345552,
										345559
									],
									[
										345626,
										345633
									],
									[
										346063,
										346070
									],
									[
										346145,
										346152
									],
									[
										346339,
										346346
									],
									[
										346576,
										346583
									],
									[
										346779,
										346786
									],
									[
										346983,
										346990
									],
									[
										347085,
										347092
									],
									[
										347268,
										347275
									],
									[
										347367,
										347374
									],
									[
										347641,
										347648
									],
									[
										347996,
										348003
									],
									[
										348223,
										348230
									],
									[
										348422,
										348429
									],
									[
										348676,
										348683
									],
									[
										348778,
										348785
									],
									[
										348875,
										348882
									],
									[
										349017,
										349024
									],
									[
										349116,
										349123
									],
									[
										349210,
										349217
									],
									[
										349380,
										349387
									],
									[
										349482,
										349489
									],
									[
										349575,
										349582
									],
									[
										349709,
										349716
									],
									[
										349808,
										349815
									],
									[
										349898,
										349905
									],
									[
										350199,
										350206
									],
									[
										350446,
										350453
									],
									[
										350686,
										350693
									],
									[
										350779,
										350786
									],
									[
										351027,
										351034
									],
									[
										351075,
										351082
									],
									[
										351545,
										351552
									],
									[
										351686,
										351693
									],
									[
										351730,
										351737
									],
									[
										351740,
										351747
									],
									[
										351793,
										351800
									],
									[
										351805,
										351812
									],
									[
										351930,
										351937
									],
									[
										352189,
										352196
									],
									[
										352243,
										352250
									],
									[
										352522,
										352529
									],
									[
										352833,
										352840
									],
									[
										353089,
										353096
									],
									[
										353352,
										353359
									],
									[
										353826,
										353833
									],
									[
										354111,
										354118
									],
									[
										354515,
										354522
									],
									[
										354859,
										354866
									],
									[
										355032,
										355039
									],
									[
										355271,
										355278
									],
									[
										355482,
										355489
									],
									[
										355608,
										355615
									],
									[
										355767,
										355774
									],
									[
										355845,
										355852
									],
									[
										355954,
										355961
									],
									[
										356063,
										356070
									],
									[
										356426,
										356433
									],
									[
										357047,
										357054
									],
									[
										357073,
										357080
									],
									[
										357209,
										357216
									],
									[
										357481,
										357488
									],
									[
										357647,
										357654
									],
									[
										357893,
										357900
									],
									[
										358097,
										358104
									],
									[
										358478,
										358485
									],
									[
										358641,
										358648
									],
									[
										358855,
										358862
									],
									[
										358944,
										358951
									],
									[
										359237,
										359244
									],
									[
										359329,
										359336
									],
									[
										359401,
										359408
									],
									[
										359460,
										359467
									],
									[
										359726,
										359733
									],
									[
										359803,
										359810
									],
									[
										359866,
										359873
									],
									[
										360003,
										360010
									],
									[
										360248,
										360255
									],
									[
										360583,
										360590
									],
									[
										360631,
										360638
									],
									[
										360984,
										360991
									],
									[
										361464,
										361471
									],
									[
										361980,
										361987
									],
									[
										362161,
										362168
									],
									[
										362342,
										362349
									],
									[
										362430,
										362437
									],
									[
										362556,
										362563
									],
									[
										362887,
										362894
									],
									[
										363421,
										363428
									],
									[
										363463,
										363470
									],
									[
										363636,
										363643
									],
									[
										363695,
										363702
									],
									[
										363931,
										363938
									],
									[
										364181,
										364188
									],
									[
										364450,
										364457
									],
									[
										364692,
										364699
									],
									[
										364786,
										364793
									],
									[
										364876,
										364883
									],
									[
										364931,
										364938
									],
									[
										365021,
										365028
									],
									[
										365255,
										365262
									],
									[
										365299,
										365306
									],
									[
										365395,
										365402
									],
									[
										365445,
										365452
									],
									[
										365731,
										365738
									],
									[
										365782,
										365789
									],
									[
										365810,
										365817
									],
									[
										366027,
										366034
									],
									[
										366036,
										366043
									],
									[
										366094,
										366101
									],
									[
										366103,
										366110
									],
									[
										366209,
										366216
									],
									[
										366294,
										366301
									],
									[
										366385,
										366392
									],
									[
										366670,
										366677
									],
									[
										366803,
										366810
									],
									[
										367097,
										367104
									],
									[
										367309,
										367316
									],
									[
										367507,
										367514
									],
									[
										367565,
										367572
									],
									[
										367680,
										367687
									],
									[
										367983,
										367990
									],
									[
										368142,
										368149
									],
									[
										368607,
										368614
									],
									[
										368892,
										368899
									],
									[
										369181,
										369188
									],
									[
										369474,
										369481
									],
									[
										369767,
										369774
									],
									[
										370052,
										370059
									],
									[
										370334,
										370341
									],
									[
										370608,
										370615
									],
									[
										370881,
										370888
									],
									[
										371157,
										371164
									],
									[
										371436,
										371443
									],
									[
										371714,
										371721
									],
									[
										372038,
										372045
									],
									[
										372434,
										372441
									],
									[
										372675,
										372682
									],
									[
										372864,
										372871
									],
									[
										372918,
										372925
									],
									[
										373209,
										373216
									],
									[
										373234,
										373241
									],
									[
										373465,
										373472
									],
									[
										373490,
										373497
									],
									[
										373822,
										373829
									],
									[
										374290,
										374297
									],
									[
										374334,
										374341
									],
									[
										374371,
										374378
									],
									[
										374405,
										374412
									],
									[
										374816,
										374823
									],
									[
										374846,
										374853
									],
									[
										374872,
										374879
									],
									[
										374894,
										374901
									],
									[
										374924,
										374931
									],
									[
										374944,
										374951
									],
									[
										374978,
										374985
									],
									[
										375008,
										375015
									],
									[
										375032,
										375039
									],
									[
										375058,
										375065
									],
									[
										375078,
										375085
									],
									[
										375107,
										375114
									],
									[
										375135,
										375142
									],
									[
										375483,
										375490
									],
									[
										375916,
										375923
									],
									[
										376293,
										376300
									],
									[
										376337,
										376344
									],
									[
										376374,
										376381
									],
									[
										376408,
										376415
									],
									[
										376761,
										376768
									],
									[
										376791,
										376798
									],
									[
										376820,
										376827
									],
									[
										377177,
										377184
									],
									[
										377604,
										377611
									],
									[
										377680,
										377687
									],
									[
										377768,
										377775
									],
									[
										377833,
										377840
									],
									[
										378189,
										378196
									],
									[
										378320,
										378327
									],
									[
										378407,
										378414
									],
									[
										378463,
										378470
									],
									[
										378528,
										378535
									],
									[
										378647,
										378654
									],
									[
										378961,
										378968
									],
									[
										379263,
										379270
									],
									[
										379594,
										379601
									],
									[
										379669,
										379676
									],
									[
										380067,
										380074
									],
									[
										380087,
										380094
									],
									[
										380472,
										380479
									],
									[
										380492,
										380499
									],
									[
										380763,
										380770
									],
									[
										380820,
										380827
									],
									[
										380875,
										380882
									],
									[
										380918,
										380925
									],
									[
										380981,
										380988
									],
									[
										381272,
										381279
									],
									[
										381297,
										381304
									],
									[
										381618,
										381625
									],
									[
										381934,
										381941
									],
									[
										381959,
										381966
									],
									[
										382377,
										382384
									],
									[
										382738,
										382745
									],
									[
										383326,
										383333
									],
									[
										383564,
										383571
									],
									[
										383924,
										383931
									],
									[
										384294,
										384301
									],
									[
										384923,
										384930
									],
									[
										385132,
										385139
									],
									[
										385578,
										385585
									],
									[
										385805,
										385812
									],
									[
										386003,
										386010
									],
									[
										386386,
										386393
									],
									[
										386575,
										386582
									],
									[
										386702,
										386709
									],
									[
										386966,
										386973
									],
									[
										387188,
										387195
									],
									[
										387644,
										387651
									],
									[
										388098,
										388105
									],
									[
										388151,
										388158
									],
									[
										388504,
										388511
									],
									[
										388737,
										388744
									],
									[
										388846,
										388853
									],
									[
										389149,
										389156
									],
									[
										389526,
										389533
									],
									[
										389559,
										389566
									],
									[
										390104,
										390111
									],
									[
										390203,
										390210
									],
									[
										390376,
										390383
									],
									[
										390487,
										390494
									],
									[
										390947,
										390954
									],
									[
										391120,
										391127
									],
									[
										391203,
										391210
									],
									[
										391609,
										391616
									],
									[
										391977,
										391984
									],
									[
										392039,
										392046
									],
									[
										392099,
										392106
									],
									[
										392375,
										392382
									],
									[
										392437,
										392444
									],
									[
										392553,
										392560
									],
									[
										392611,
										392618
									],
									[
										392868,
										392875
									],
									[
										393311,
										393318
									],
									[
										393395,
										393402
									],
									[
										393733,
										393740
									],
									[
										393919,
										393926
									],
									[
										394004,
										394011
									],
									[
										394122,
										394129
									],
									[
										394270,
										394277
									],
									[
										394561,
										394568
									],
									[
										394918,
										394925
									],
									[
										395223,
										395230
									],
									[
										395462,
										395469
									],
									[
										395566,
										395573
									],
									[
										395998,
										396005
									],
									[
										396059,
										396066
									],
									[
										396163,
										396170
									],
									[
										396210,
										396217
									],
									[
										396277,
										396284
									],
									[
										396325,
										396332
									],
									[
										396649,
										396656
									],
									[
										396752,
										396759
									],
									[
										396860,
										396867
									],
									[
										397450,
										397457
									],
									[
										398089,
										398096
									],
									[
										398230,
										398237
									],
									[
										398343,
										398350
									],
									[
										398485,
										398492
									],
									[
										398559,
										398566
									],
									[
										398761,
										398768
									],
									[
										398833,
										398840
									],
									[
										398892,
										398899
									],
									[
										399290,
										399297
									],
									[
										399399,
										399406
									],
									[
										399523,
										399530
									],
									[
										399685,
										399692
									],
									[
										399857,
										399864
									],
									[
										400088,
										400095
									],
									[
										400332,
										400339
									],
									[
										400582,
										400589
									],
									[
										400870,
										400877
									],
									[
										400920,
										400927
									],
									[
										401175,
										401182
									],
									[
										401284,
										401291
									],
									[
										401299,
										401306
									],
									[
										401354,
										401361
									],
									[
										401516,
										401523
									],
									[
										401759,
										401766
									],
									[
										401959,
										401966
									],
									[
										402017,
										402024
									],
									[
										402133,
										402140
									],
									[
										402436,
										402443
									],
									[
										402698,
										402705
									],
									[
										402956,
										402963
									],
									[
										403215,
										403222
									],
									[
										403568,
										403575
									],
									[
										404003,
										404010
									],
									[
										404293,
										404300
									],
									[
										404846,
										404853
									],
									[
										404870,
										404877
									],
									[
										404894,
										404901
									],
									[
										405429,
										405436
									],
									[
										405462,
										405469
									],
									[
										405833,
										405840
									],
									[
										406112,
										406119
									],
									[
										406346,
										406353
									],
									[
										406565,
										406572
									],
									[
										406684,
										406691
									],
									[
										407105,
										407112
									],
									[
										407589,
										407596
									],
									[
										408092,
										408099
									],
									[
										408116,
										408123
									],
									[
										408140,
										408147
									],
									[
										408697,
										408704
									],
									[
										408760,
										408767
									],
									[
										409133,
										409140
									],
									[
										409196,
										409203
									],
									[
										409583,
										409590
									],
									[
										409721,
										409728
									],
									[
										410088,
										410095
									],
									[
										410397,
										410404
									],
									[
										410807,
										410814
									],
									[
										411286,
										411293
									],
									[
										411580,
										411587
									],
									[
										411838,
										411845
									],
									[
										411953,
										411960
									],
									[
										411993,
										412000
									],
									[
										412238,
										412245
									],
									[
										412610,
										412617
									],
									[
										412845,
										412852
									],
									[
										413254,
										413261
									],
									[
										413513,
										413520
									],
									[
										413664,
										413671
									],
									[
										413985,
										413992
									],
									[
										414293,
										414300
									],
									[
										414466,
										414473
									],
									[
										414693,
										414700
									],
									[
										414991,
										414998
									],
									[
										415242,
										415249
									],
									[
										415613,
										415620
									],
									[
										416089,
										416096
									],
									[
										416128,
										416135
									],
									[
										416391,
										416398
									],
									[
										416597,
										416604
									],
									[
										416906,
										416913
									],
									[
										416986,
										416993
									],
									[
										417074,
										417081
									],
									[
										417380,
										417387
									],
									[
										417460,
										417467
									],
									[
										417800,
										417807
									],
									[
										418016,
										418023
									],
									[
										418225,
										418232
									],
									[
										418423,
										418430
									],
									[
										418474,
										418481
									],
									[
										418502,
										418509
									],
									[
										418547,
										418554
									],
									[
										418647,
										418654
									],
									[
										418759,
										418766
									],
									[
										419150,
										419157
									],
									[
										419626,
										419633
									],
									[
										420217,
										420224
									],
									[
										420794,
										420801
									],
									[
										421351,
										421358
									],
									[
										421399,
										421406
									],
									[
										421495,
										421502
									],
									[
										421750,
										421757
									],
									[
										421801,
										421808
									],
									[
										421829,
										421836
									],
									[
										421914,
										421921
									],
									[
										422030,
										422037
									],
									[
										422226,
										422233
									],
									[
										422407,
										422414
									],
									[
										422604,
										422611
									],
									[
										422664,
										422671
									],
									[
										422811,
										422818
									],
									[
										422938,
										422945
									],
									[
										423178,
										423185
									],
									[
										423530,
										423537
									],
									[
										423919,
										423926
									],
									[
										424249,
										424256
									],
									[
										424565,
										424572
									],
									[
										424952,
										424959
									],
									[
										425251,
										425258
									],
									[
										425506,
										425513
									],
									[
										425864,
										425871
									],
									[
										426065,
										426072
									],
									[
										426255,
										426262
									],
									[
										426687,
										426694
									],
									[
										427148,
										427155
									],
									[
										427669,
										427676
									],
									[
										427922,
										427929
									],
									[
										428039,
										428046
									],
									[
										428330,
										428337
									],
									[
										428612,
										428619
									],
									[
										428682,
										428689
									],
									[
										429052,
										429059
									],
									[
										429257,
										429264
									],
									[
										429711,
										429718
									],
									[
										430153,
										430160
									],
									[
										430328,
										430335
									],
									[
										430427,
										430434
									],
									[
										430891,
										430898
									],
									[
										431024,
										431031
									],
									[
										431073,
										431080
									],
									[
										431119,
										431126
									],
									[
										431589,
										431596
									],
									[
										431852,
										431859
									],
									[
										432049,
										432056
									],
									[
										432090,
										432097
									],
									[
										432118,
										432125
									],
									[
										432398,
										432405
									],
									[
										432510,
										432517
									],
									[
										432525,
										432532
									],
									[
										432675,
										432682
									],
									[
										432935,
										432942
									],
									[
										433228,
										433235
									],
									[
										433555,
										433562
									],
									[
										433592,
										433599
									],
									[
										433693,
										433700
									],
									[
										433751,
										433758
									],
									[
										433846,
										433853
									],
									[
										434162,
										434169
									],
									[
										434409,
										434416
									],
									[
										434722,
										434729
									],
									[
										435206,
										435213
									],
									[
										435314,
										435321
									],
									[
										435540,
										435547
									],
									[
										435770,
										435777
									],
									[
										436256,
										436263
									],
									[
										436352,
										436359
									],
									[
										436578,
										436585
									],
									[
										436891,
										436898
									],
									[
										436967,
										436974
									],
									[
										437048,
										437055
									],
									[
										437113,
										437120
									],
									[
										437469,
										437476
									],
									[
										437531,
										437538
									],
									[
										437585,
										437592
									],
									[
										437918,
										437925
									],
									[
										438250,
										438257
									],
									[
										438308,
										438315
									],
									[
										438358,
										438365
									],
									[
										438415,
										438422
									],
									[
										438465,
										438472
									],
									[
										438724,
										438731
									],
									[
										438826,
										438833
									],
									[
										438886,
										438893
									],
									[
										438929,
										438936
									],
									[
										438979,
										438986
									],
									[
										439036,
										439043
									],
									[
										439097,
										439104
									],
									[
										439356,
										439363
									],
									[
										439756,
										439763
									],
									[
										440155,
										440162
									],
									[
										440708,
										440715
									],
									[
										440734,
										440741
									],
									[
										440777,
										440784
									],
									[
										440792,
										440799
									],
									[
										440862,
										440869
									],
									[
										440980,
										440987
									],
									[
										441157,
										441164
									],
									[
										441521,
										441528
									],
									[
										441975,
										441982
									],
									[
										442115,
										442122
									],
									[
										442473,
										442480
									],
									[
										442597,
										442604
									],
									[
										442793,
										442800
									],
									[
										443126,
										443133
									],
									[
										443245,
										443252
									],
									[
										443387,
										443394
									],
									[
										443419,
										443426
									],
									[
										443462,
										443469
									],
									[
										443483,
										443490
									],
									[
										443525,
										443532
									],
									[
										443547,
										443554
									],
									[
										443698,
										443705
									],
									[
										443754,
										443761
									],
									[
										443878,
										443885
									],
									[
										444348,
										444355
									],
									[
										444372,
										444379
									],
									[
										444399,
										444406
									],
									[
										444711,
										444718
									],
									[
										444775,
										444782
									],
									[
										444853,
										444860
									],
									[
										444918,
										444925
									],
									[
										445192,
										445199
									],
									[
										445277,
										445284
									],
									[
										445349,
										445356
									],
									[
										445667,
										445674
									],
									[
										445706,
										445713
									],
									[
										445971,
										445978
									],
									[
										446103,
										446110
									],
									[
										446181,
										446188
									],
									[
										446327,
										446334
									],
									[
										446412,
										446419
									],
									[
										446462,
										446469
									],
									[
										446493,
										446500
									],
									[
										446545,
										446552
									],
									[
										446607,
										446614
									],
									[
										446657,
										446664
									],
									[
										446688,
										446695
									],
									[
										446740,
										446747
									],
									[
										446975,
										446982
									],
									[
										447266,
										447273
									],
									[
										447469,
										447476
									],
									[
										448198,
										448205
									],
									[
										448646,
										448653
									],
									[
										448675,
										448682
									],
									[
										448729,
										448736
									],
									[
										448935,
										448942
									],
									[
										449181,
										449188
									],
									[
										449256,
										449263
									],
									[
										449341,
										449348
									],
									[
										449407,
										449414
									],
									[
										449478,
										449485
									],
									[
										449800,
										449807
									],
									[
										450090,
										450097
									],
									[
										450376,
										450383
									],
									[
										450747,
										450754
									],
									[
										451076,
										451083
									],
									[
										451107,
										451114
									],
									[
										451406,
										451413
									],
									[
										451470,
										451477
									],
									[
										451542,
										451549
									],
									[
										451664,
										451671
									],
									[
										451736,
										451743
									],
									[
										452074,
										452081
									],
									[
										452368,
										452375
									],
									[
										452403,
										452410
									],
									[
										452773,
										452780
									],
									[
										453134,
										453141
									],
									[
										453558,
										453565
									],
									[
										453583,
										453590
									],
									[
										453851,
										453858
									],
									[
										454015,
										454022
									],
									[
										454193,
										454200
									],
									[
										454236,
										454243
									],
									[
										454546,
										454553
									],
									[
										454972,
										454979
									],
									[
										455355,
										455362
									],
									[
										455857,
										455864
									],
									[
										456254,
										456261
									],
									[
										456488,
										456495
									],
									[
										456724,
										456731
									],
									[
										456951,
										456958
									],
									[
										456983,
										456990
									],
									[
										457441,
										457448
									],
									[
										457751,
										457758
									],
									[
										458029,
										458036
									],
									[
										458105,
										458112
									],
									[
										458370,
										458377
									],
									[
										458489,
										458496
									],
									[
										458773,
										458780
									],
									[
										459068,
										459075
									],
									[
										459276,
										459283
									],
									[
										459332,
										459339
									],
									[
										459655,
										459662
									],
									[
										459777,
										459784
									],
									[
										460328,
										460335
									],
									[
										460561,
										460568
									],
									[
										460679,
										460686
									],
									[
										460859,
										460866
									],
									[
										460998,
										461005
									],
									[
										461523,
										461530
									],
									[
										461625,
										461632
									],
									[
										461747,
										461754
									],
									[
										462085,
										462092
									],
									[
										462187,
										462194
									],
									[
										462565,
										462572
									],
									[
										463198,
										463205
									],
									[
										463451,
										463458
									],
									[
										463642,
										463649
									],
									[
										464125,
										464132
									],
									[
										464239,
										464246
									],
									[
										464650,
										464657
									],
									[
										465027,
										465034
									],
									[
										465338,
										465345
									],
									[
										465581,
										465588
									],
									[
										465705,
										465712
									],
									[
										465848,
										465855
									],
									[
										466082,
										466089
									],
									[
										466656,
										466663
									],
									[
										467193,
										467200
									],
									[
										467628,
										467635
									],
									[
										467941,
										467948
									],
									[
										468195,
										468202
									],
									[
										468550,
										468557
									],
									[
										468867,
										468874
									],
									[
										469202,
										469209
									],
									[
										469565,
										469572
									],
									[
										469856,
										469863
									],
									[
										470216,
										470223
									],
									[
										470531,
										470538
									],
									[
										470569,
										470576
									],
									[
										470969,
										470976
									],
									[
										471386,
										471393
									],
									[
										472006,
										472013
									],
									[
										472131,
										472138
									],
									[
										472435,
										472442
									],
									[
										472667,
										472674
									],
									[
										472693,
										472700
									],
									[
										472933,
										472940
									],
									[
										473014,
										473021
									],
									[
										473151,
										473158
									],
									[
										473346,
										473353
									],
									[
										473464,
										473471
									],
									[
										473728,
										473735
									],
									[
										473898,
										473905
									],
									[
										474035,
										474042
									],
									[
										474269,
										474276
									],
									[
										474616,
										474623
									],
									[
										474990,
										474997
									],
									[
										475018,
										475025
									],
									[
										475452,
										475459
									],
									[
										475857,
										475864
									],
									[
										475901,
										475908
									],
									[
										475936,
										475943
									],
									[
										475971,
										475978
									],
									[
										476287,
										476294
									],
									[
										476314,
										476321
									],
									[
										476739,
										476746
									],
									[
										476777,
										476784
									],
									[
										477157,
										477164
									],
									[
										477546,
										477553
									],
									[
										477707,
										477714
									],
									[
										477724,
										477731
									],
									[
										478181,
										478188
									],
									[
										478472,
										478479
									],
									[
										478732,
										478739
									],
									[
										478971,
										478978
									],
									[
										479282,
										479289
									],
									[
										479310,
										479317
									],
									[
										479650,
										479657
									],
									[
										479841,
										479848
									],
									[
										480199,
										480206
									],
									[
										480375,
										480382
									],
									[
										480705,
										480712
									],
									[
										480873,
										480880
									],
									[
										481372,
										481379
									],
									[
										481728,
										481735
									],
									[
										481886,
										481893
									],
									[
										482291,
										482298
									],
									[
										482370,
										482377
									],
									[
										482709,
										482716
									],
									[
										482839,
										482846
									],
									[
										483170,
										483177
									],
									[
										483648,
										483655
									],
									[
										483962,
										483969
									],
									[
										484233,
										484240
									],
									[
										484432,
										484439
									],
									[
										484612,
										484619
									],
									[
										484789,
										484796
									],
									[
										484833,
										484840
									],
									[
										484843,
										484850
									],
									[
										484875,
										484882
									],
									[
										484932,
										484939
									],
									[
										484974,
										484981
									],
									[
										485029,
										485036
									],
									[
										485112,
										485119
									],
									[
										485214,
										485221
									],
									[
										485457,
										485464
									],
									[
										485662,
										485669
									],
									[
										485783,
										485790
									],
									[
										485916,
										485923
									],
									[
										486474,
										486481
									],
									[
										486589,
										486596
									],
									[
										486875,
										486882
									],
									[
										487136,
										487143
									],
									[
										487808,
										487815
									],
									[
										488023,
										488030
									],
									[
										488135,
										488142
									],
									[
										488305,
										488312
									],
									[
										488352,
										488359
									],
									[
										488388,
										488395
									],
									[
										488433,
										488440
									],
									[
										488528,
										488535
									],
									[
										488634,
										488641
									],
									[
										488642,
										488649
									],
									[
										488777,
										488784
									],
									[
										488894,
										488901
									],
									[
										489032,
										489039
									],
									[
										489102,
										489109
									],
									[
										489319,
										489326
									],
									[
										489711,
										489718
									],
									[
										489775,
										489782
									],
									[
										489901,
										489908
									],
									[
										490006,
										490013
									],
									[
										490434,
										490441
									],
									[
										490997,
										491004
									],
									[
										491386,
										491393
									],
									[
										491771,
										491778
									],
									[
										492188,
										492195
									],
									[
										492474,
										492481
									],
									[
										492722,
										492729
									],
									[
										493083,
										493090
									],
									[
										493301,
										493308
									],
									[
										493786,
										493793
									],
									[
										494342,
										494349
									],
									[
										494812,
										494819
									],
									[
										495200,
										495207
									],
									[
										495581,
										495588
									],
									[
										495617,
										495624
									],
									[
										495867,
										495874
									],
									[
										496217,
										496224
									],
									[
										496351,
										496358
									],
									[
										496547,
										496554
									],
									[
										496706,
										496713
									],
									[
										496903,
										496910
									],
									[
										497231,
										497238
									],
									[
										497559,
										497566
									],
									[
										497601,
										497608
									],
									[
										497887,
										497894
									],
									[
										498284,
										498291
									],
									[
										498426,
										498433
									],
									[
										498741,
										498748
									],
									[
										499117,
										499124
									],
									[
										499141,
										499148
									],
									[
										499429,
										499436
									],
									[
										499497,
										499504
									],
									[
										499615,
										499622
									],
									[
										499960,
										499967
									],
									[
										499984,
										499991
									],
									[
										500009,
										500016
									],
									[
										500299,
										500306
									],
									[
										500398,
										500405
									],
									[
										500638,
										500645
									],
									[
										501019,
										501026
									],
									[
										501336,
										501343
									],
									[
										501699,
										501706
									],
									[
										502022,
										502029
									],
									[
										502340,
										502347
									],
									[
										502772,
										502779
									],
									[
										502801,
										502808
									],
									[
										502831,
										502838
									],
									[
										502858,
										502865
									],
									[
										502889,
										502896
									],
									[
										503414,
										503421
									],
									[
										503907,
										503914
									],
									[
										504288,
										504295
									],
									[
										504767,
										504774
									],
									[
										505125,
										505132
									],
									[
										505586,
										505593
									],
									[
										505610,
										505617
									],
									[
										505635,
										505642
									],
									[
										506079,
										506086
									],
									[
										506117,
										506124
									],
									[
										506497,
										506504
									],
									[
										506524,
										506531
									],
									[
										506897,
										506904
									],
									[
										507373,
										507380
									],
									[
										507571,
										507578
									],
									[
										507726,
										507733
									],
									[
										508034,
										508041
									],
									[
										508560,
										508567
									],
									[
										509042,
										509049
									],
									[
										509423,
										509430
									],
									[
										509456,
										509463
									],
									[
										509806,
										509813
									],
									[
										509839,
										509846
									],
									[
										510173,
										510180
									],
									[
										510202,
										510209
									],
									[
										510535,
										510542
									],
									[
										510565,
										510572
									],
									[
										510915,
										510922
									],
									[
										511309,
										511316
									],
									[
										511345,
										511352
									],
									[
										511672,
										511679
									],
									[
										511945,
										511952
									],
									[
										512205,
										512212
									],
									[
										512425,
										512432
									],
									[
										512469,
										512476
									],
									[
										512484,
										512491
									],
									[
										512675,
										512682
									],
									[
										512783,
										512790
									],
									[
										512933,
										512940
									],
									[
										513118,
										513125
									],
									[
										513505,
										513512
									],
									[
										513724,
										513731
									],
									[
										514077,
										514084
									],
									[
										514314,
										514321
									],
									[
										514473,
										514480
									],
									[
										514604,
										514611
									],
									[
										514760,
										514767
									],
									[
										514886,
										514893
									],
									[
										515245,
										515252
									],
									[
										515634,
										515641
									],
									[
										515670,
										515677
									],
									[
										516314,
										516321
									],
									[
										516692,
										516699
									],
									[
										516728,
										516735
									],
									[
										516948,
										516955
									],
									[
										516989,
										516996
									],
									[
										517384,
										517391
									],
									[
										517632,
										517639
									],
									[
										517957,
										517964
									],
									[
										518303,
										518310
									],
									[
										518547,
										518554
									],
									[
										518594,
										518601
									],
									[
										518718,
										518725
									],
									[
										519122,
										519129
									],
									[
										519457,
										519464
									],
									[
										519858,
										519865
									],
									[
										520146,
										520153
									],
									[
										520390,
										520397
									],
									[
										520437,
										520444
									],
									[
										520687,
										520694
									],
									[
										520897,
										520904
									],
									[
										521035,
										521042
									],
									[
										521112,
										521119
									],
									[
										521301,
										521308
									],
									[
										521373,
										521380
									],
									[
										521435,
										521442
									],
									[
										521746,
										521753
									],
									[
										521986,
										521993
									],
									[
										522066,
										522073
									],
									[
										522132,
										522139
									],
									[
										522216,
										522223
									],
									[
										522476,
										522483
									],
									[
										522826,
										522833
									],
									[
										523168,
										523175
									],
									[
										523579,
										523586
									],
									[
										523687,
										523694
									],
									[
										523950,
										523957
									],
									[
										524062,
										524069
									],
									[
										524246,
										524253
									],
									[
										524407,
										524414
									],
									[
										524498,
										524505
									],
									[
										524591,
										524598
									],
									[
										524626,
										524633
									],
									[
										524908,
										524915
									],
									[
										525159,
										525166
									],
									[
										525421,
										525428
									],
									[
										525478,
										525485
									],
									[
										525521,
										525528
									],
									[
										525572,
										525579
									],
									[
										525926,
										525933
									],
									[
										525959,
										525966
									],
									[
										526223,
										526230
									],
									[
										526424,
										526431
									],
									[
										526482,
										526489
									],
									[
										526601,
										526608
									],
									[
										526855,
										526862
									],
									[
										526908,
										526915
									],
									[
										527013,
										527020
									],
									[
										527094,
										527101
									],
									[
										527417,
										527424
									],
									[
										527696,
										527703
									],
									[
										528094,
										528101
									],
									[
										528485,
										528492
									],
									[
										528812,
										528819
									],
									[
										528845,
										528852
									],
									[
										529324,
										529331
									],
									[
										529586,
										529593
									],
									[
										529846,
										529853
									],
									[
										530104,
										530111
									],
									[
										530412,
										530419
									],
									[
										530722,
										530729
									],
									[
										531116,
										531123
									],
									[
										531447,
										531454
									],
									[
										531760,
										531767
									],
									[
										531791,
										531798
									],
									[
										532277,
										532284
									],
									[
										532707,
										532714
									],
									[
										533067,
										533074
									],
									[
										533674,
										533681
									],
									[
										533798,
										533805
									],
									[
										533996,
										534003
									],
									[
										534374,
										534381
									],
									[
										534563,
										534570
									],
									[
										534690,
										534697
									],
									[
										534953,
										534960
									],
									[
										535179,
										535186
									],
									[
										535737,
										535744
									],
									[
										536073,
										536080
									],
									[
										536338,
										536345
									],
									[
										536626,
										536633
									],
									[
										537092,
										537099
									],
									[
										537306,
										537313
									],
									[
										537335,
										537342
									],
									[
										537954,
										537961
									],
									[
										538227,
										538234
									],
									[
										538259,
										538266
									],
									[
										538637,
										538644
									],
									[
										538878,
										538885
									],
									[
										539198,
										539205
									],
									[
										539301,
										539308
									],
									[
										539600,
										539607
									],
									[
										539918,
										539925
									],
									[
										540181,
										540188
									],
									[
										540560,
										540567
									],
									[
										540663,
										540670
									],
									[
										541094,
										541101
									],
									[
										541300,
										541307
									],
									[
										541663,
										541670
									],
									[
										541826,
										541833
									],
									[
										542074,
										542081
									],
									[
										542326,
										542333
									],
									[
										542370,
										542377
									],
									[
										542426,
										542433
									],
									[
										542649,
										542656
									],
									[
										542974,
										542981
									],
									[
										543577,
										543584
									],
									[
										544012,
										544019
									],
									[
										544248,
										544255
									],
									[
										544747,
										544754
									],
									[
										544772,
										544779
									],
									[
										544796,
										544803
									],
									[
										545143,
										545150
									],
									[
										545455,
										545462
									],
									[
										545770,
										545777
									],
									[
										545990,
										545997
									],
									[
										546195,
										546202
									],
									[
										546412,
										546419
									],
									[
										546892,
										546899
									],
									[
										546927,
										546934
									],
									[
										546966,
										546973
									],
									[
										547338,
										547345
									],
									[
										547744,
										547751
									],
									[
										547802,
										547809
									],
									[
										548285,
										548292
									],
									[
										548548,
										548555
									],
									[
										548846,
										548853
									],
									[
										548874,
										548881
									],
									[
										549092,
										549099
									],
									[
										549250,
										549257
									],
									[
										549545,
										549552
									],
									[
										549838,
										549845
									],
									[
										550069,
										550076
									],
									[
										550112,
										550119
									],
									[
										550159,
										550166
									],
									[
										550238,
										550245
									],
									[
										550348,
										550355
									],
									[
										550509,
										550516
									],
									[
										550643,
										550650
									],
									[
										550736,
										550743
									],
									[
										550853,
										550860
									],
									[
										550892,
										550899
									],
									[
										550927,
										550934
									],
									[
										551008,
										551015
									],
									[
										551371,
										551378
									],
									[
										551641,
										551648
									],
									[
										551952,
										551959
									],
									[
										552144,
										552151
									],
									[
										552293,
										552300
									],
									[
										552636,
										552643
									],
									[
										552849,
										552856
									],
									[
										553008,
										553015
									],
									[
										553049,
										553056
									],
									[
										553216,
										553223
									],
									[
										553628,
										553635
									],
									[
										553976,
										553983
									],
									[
										554538,
										554545
									],
									[
										555043,
										555050
									],
									[
										555459,
										555466
									],
									[
										555706,
										555713
									],
									[
										555928,
										555935
									],
									[
										556226,
										556233
									],
									[
										556262,
										556269
									],
									[
										556479,
										556486
									],
									[
										556696,
										556703
									],
									[
										557126,
										557133
									],
									[
										557446,
										557453
									],
									[
										557718,
										557725
									],
									[
										557735,
										557742
									],
									[
										557915,
										557922
									],
									[
										558090,
										558097
									],
									[
										558254,
										558261
									],
									[
										558461,
										558468
									],
									[
										558665,
										558672
									],
									[
										558856,
										558863
									],
									[
										559042,
										559049
									],
									[
										559229,
										559236
									],
									[
										559659,
										559666
									],
									[
										559931,
										559938
									],
									[
										560115,
										560122
									],
									[
										560435,
										560442
									],
									[
										560656,
										560663
									],
									[
										560872,
										560879
									],
									[
										561117,
										561124
									],
									[
										561335,
										561342
									],
									[
										561594,
										561601
									],
									[
										561874,
										561881
									],
									[
										562194,
										562201
									],
									[
										562319,
										562326
									],
									[
										562566,
										562573
									],
									[
										562853,
										562860
									],
									[
										563227,
										563234
									],
									[
										563677,
										563684
									],
									[
										564083,
										564090
									],
									[
										564225,
										564232
									],
									[
										564587,
										564594
									],
									[
										564925,
										564932
									],
									[
										565030,
										565037
									],
									[
										565182,
										565189
									],
									[
										565232,
										565239
									],
									[
										565279,
										565286
									],
									[
										565455,
										565462
									],
									[
										565477,
										565484
									],
									[
										565821,
										565828
									],
									[
										566188,
										566195
									],
									[
										566215,
										566222
									],
									[
										566346,
										566353
									],
									[
										566741,
										566748
									],
									[
										567077,
										567084
									],
									[
										567430,
										567437
									],
									[
										567767,
										567774
									],
									[
										568216,
										568223
									],
									[
										568704,
										568711
									],
									[
										568956,
										568963
									],
									[
										569051,
										569058
									],
									[
										569072,
										569079
									],
									[
										569093,
										569100
									],
									[
										569185,
										569192
									],
									[
										569624,
										569631
									],
									[
										569936,
										569943
									],
									[
										570129,
										570136
									],
									[
										570507,
										570514
									],
									[
										570829,
										570836
									],
									[
										571077,
										571084
									],
									[
										571321,
										571328
									],
									[
										571775,
										571782
									],
									[
										572230,
										572237
									],
									[
										572724,
										572731
									],
									[
										573186,
										573193
									],
									[
										573582,
										573589
									],
									[
										573636,
										573643
									],
									[
										573689,
										573696
									],
									[
										573789,
										573796
									],
									[
										573968,
										573975
									],
									[
										574762,
										574769
									],
									[
										575097,
										575104
									],
									[
										575441,
										575448
									],
									[
										575485,
										575492
									],
									[
										575495,
										575502
									],
									[
										575715,
										575722
									],
									[
										575880,
										575887
									],
									[
										576146,
										576153
									],
									[
										576382,
										576389
									],
									[
										576624,
										576631
									],
									[
										576670,
										576677
									],
									[
										576858,
										576865
									],
									[
										577059,
										577066
									],
									[
										577297,
										577304
									],
									[
										577312,
										577319
									],
									[
										577583,
										577590
									],
									[
										577598,
										577605
									],
									[
										577869,
										577876
									],
									[
										578093,
										578100
									],
									[
										578233,
										578240
									],
									[
										578379,
										578386
									],
									[
										578615,
										578622
									],
									[
										578768,
										578775
									],
									[
										579000,
										579007
									],
									[
										579143,
										579150
									],
									[
										579286,
										579293
									],
									[
										579442,
										579449
									],
									[
										579659,
										579666
									],
									[
										579801,
										579808
									],
									[
										579939,
										579946
									],
									[
										580179,
										580186
									],
									[
										580403,
										580410
									],
									[
										580543,
										580550
									],
									[
										580689,
										580696
									],
									[
										580925,
										580932
									],
									[
										581078,
										581085
									],
									[
										581310,
										581317
									],
									[
										581453,
										581460
									],
									[
										581596,
										581603
									],
									[
										581752,
										581759
									],
									[
										581969,
										581976
									],
									[
										582111,
										582118
									],
									[
										582249,
										582256
									],
									[
										582622,
										582629
									],
									[
										583057,
										583064
									],
									[
										583378,
										583385
									],
									[
										583586,
										583593
									],
									[
										583773,
										583780
									],
									[
										583861,
										583868
									],
									[
										583945,
										583952
									],
									[
										584042,
										584049
									],
									[
										584135,
										584142
									],
									[
										584234,
										584241
									],
									[
										584333,
										584340
									],
									[
										584433,
										584440
									],
									[
										584534,
										584541
									],
									[
										584944,
										584951
									],
									[
										585268,
										585275
									],
									[
										585595,
										585602
									],
									[
										586093,
										586100
									],
									[
										586433,
										586440
									],
									[
										586638,
										586645
									],
									[
										586688,
										586695
									],
									[
										586914,
										586921
									],
									[
										587109,
										587116
									],
									[
										587159,
										587166
									],
									[
										587418,
										587425
									],
									[
										587732,
										587739
									],
									[
										587974,
										587981
									],
									[
										588219,
										588226
									],
									[
										588578,
										588585
									],
									[
										589029,
										589036
									],
									[
										589057,
										589064
									],
									[
										589477,
										589484
									],
									[
										589711,
										589718
									],
									[
										590016,
										590023
									],
									[
										590275,
										590282
									],
									[
										590458,
										590465
									],
									[
										590646,
										590653
									],
									[
										590984,
										590991
									],
									[
										591333,
										591340
									],
									[
										591410,
										591417
									],
									[
										591665,
										591672
									],
									[
										591972,
										591979
									],
									[
										592378,
										592385
									],
									[
										592667,
										592674
									],
									[
										592973,
										592980
									],
									[
										593291,
										593298
									],
									[
										593728,
										593735
									],
									[
										594067,
										594074
									],
									[
										594400,
										594407
									],
									[
										594695,
										594702
									],
									[
										594920,
										594927
									],
									[
										595271,
										595278
									],
									[
										595511,
										595518
									],
									[
										595782,
										595789
									],
									[
										596062,
										596069
									],
									[
										596244,
										596251
									],
									[
										596324,
										596331
									],
									[
										596526,
										596533
									],
									[
										596746,
										596753
									],
									[
										597093,
										597100
									],
									[
										597472,
										597479
									],
									[
										597810,
										597817
									],
									[
										598154,
										598161
									],
									[
										598192,
										598199
									],
									[
										598492,
										598499
									],
									[
										598526,
										598533
									],
									[
										598840,
										598847
									],
									[
										599200,
										599207
									],
									[
										599509,
										599516
									],
									[
										600040,
										600047
									],
									[
										600064,
										600071
									],
									[
										600254,
										600261
									],
									[
										600536,
										600543
									],
									[
										600571,
										600578
									],
									[
										600807,
										600814
									],
									[
										600994,
										601001
									],
									[
										601141,
										601148
									],
									[
										601262,
										601269
									],
									[
										601519,
										601526
									],
									[
										601872,
										601879
									],
									[
										601980,
										601987
									],
									[
										602149,
										602156
									],
									[
										602451,
										602458
									],
									[
										602504,
										602511
									],
									[
										603011,
										603018
									],
									[
										603320,
										603327
									],
									[
										603566,
										603573
									],
									[
										603763,
										603770
									],
									[
										603967,
										603974
									],
									[
										604198,
										604205
									],
									[
										604338,
										604345
									],
									[
										604471,
										604478
									],
									[
										604558,
										604565
									],
									[
										604611,
										604618
									],
									[
										604743,
										604750
									],
									[
										604801,
										604808
									],
									[
										605063,
										605070
									],
									[
										605413,
										605420
									],
									[
										605498,
										605505
									],
									[
										605581,
										605588
									],
									[
										605785,
										605792
									],
									[
										605817,
										605824
									],
									[
										605926,
										605933
									],
									[
										605990,
										605997
									],
									[
										606329,
										606336
									],
									[
										606683,
										606690
									],
									[
										607274,
										607281
									],
									[
										607310,
										607317
									],
									[
										607640,
										607647
									],
									[
										607920,
										607927
									],
									[
										608003,
										608010
									],
									[
										608120,
										608127
									],
									[
										608152,
										608159
									],
									[
										608294,
										608301
									],
									[
										608361,
										608368
									],
									[
										608570,
										608577
									],
									[
										608940,
										608947
									],
									[
										609115,
										609122
									],
									[
										609274,
										609281
									],
									[
										609402,
										609409
									],
									[
										609594,
										609601
									],
									[
										609958,
										609965
									],
									[
										609979,
										609986
									],
									[
										610279,
										610286
									],
									[
										610639,
										610646
									],
									[
										610883,
										610890
									],
									[
										610914,
										610921
									],
									[
										611075,
										611082
									],
									[
										611447,
										611454
									],
									[
										611808,
										611815
									],
									[
										612200,
										612207
									],
									[
										612593,
										612600
									],
									[
										612619,
										612626
									],
									[
										612667,
										612674
									],
									[
										612915,
										612922
									],
									[
										612944,
										612951
									],
									[
										613243,
										613250
									],
									[
										613503,
										613510
									],
									[
										613811,
										613818
									],
									[
										614145,
										614152
									],
									[
										614163,
										614170
									],
									[
										614484,
										614491
									],
									[
										614640,
										614647
									],
									[
										614914,
										614921
									],
									[
										615148,
										615155
									],
									[
										615156,
										615163
									],
									[
										615443,
										615450
									],
									[
										615791,
										615798
									],
									[
										615988,
										615995
									],
									[
										616378,
										616385
									],
									[
										616436,
										616443
									],
									[
										616616,
										616623
									],
									[
										616891,
										616898
									],
									[
										617088,
										617095
									],
									[
										617340,
										617347
									],
									[
										617693,
										617700
									],
									[
										617746,
										617753
									],
									[
										618051,
										618058
									],
									[
										618320,
										618327
									],
									[
										618767,
										618774
									],
									[
										619265,
										619272
									],
									[
										619584,
										619591
									],
									[
										620040,
										620047
									],
									[
										620427,
										620434
									],
									[
										620664,
										620671
									],
									[
										620940,
										620947
									],
									[
										621302,
										621309
									],
									[
										621743,
										621750
									],
									[
										622139,
										622146
									],
									[
										622328,
										622335
									],
									[
										622737,
										622744
									],
									[
										623068,
										623075
									],
									[
										623248,
										623255
									],
									[
										623631,
										623638
									],
									[
										623944,
										623951
									],
									[
										623995,
										624002
									],
									[
										624295,
										624302
									],
									[
										624346,
										624353
									],
									[
										624449,
										624456
									],
									[
										624736,
										624743
									],
									[
										624787,
										624794
									],
									[
										624890,
										624897
									],
									[
										625129,
										625136
									],
									[
										625180,
										625187
									],
									[
										625493,
										625500
									],
									[
										625659,
										625666
									],
									[
										625965,
										625972
									],
									[
										626119,
										626126
									],
									[
										626405,
										626412
									],
									[
										626684,
										626691
									],
									[
										626973,
										626980
									],
									[
										627022,
										627029
									],
									[
										627078,
										627085
									],
									[
										627117,
										627124
									],
									[
										627236,
										627243
									],
									[
										627430,
										627437
									],
									[
										627603,
										627610
									],
									[
										627900,
										627907
									],
									[
										628209,
										628216
									],
									[
										628225,
										628232
									],
									[
										628410,
										628417
									],
									[
										628433,
										628440
									],
									[
										628613,
										628620
									],
									[
										628636,
										628643
									],
									[
										628812,
										628819
									],
									[
										628870,
										628877
									],
									[
										628886,
										628893
									],
									[
										628999,
										629006
									],
									[
										629130,
										629137
									],
									[
										629140,
										629147
									],
									[
										629180,
										629187
									],
									[
										629203,
										629210
									],
									[
										629360,
										629367
									],
									[
										629543,
										629550
									],
									[
										629765,
										629772
									],
									[
										630014,
										630021
									],
									[
										630223,
										630230
									],
									[
										630240,
										630247
									],
									[
										630577,
										630584
									],
									[
										630817,
										630824
									],
									[
										631357,
										631364
									],
									[
										631719,
										631726
									],
									[
										631754,
										631761
									],
									[
										632025,
										632032
									],
									[
										632056,
										632063
									],
									[
										632498,
										632505
									],
									[
										632625,
										632632
									],
									[
										632748,
										632755
									],
									[
										632881,
										632888
									],
									[
										633024,
										633031
									],
									[
										633077,
										633084
									],
									[
										633147,
										633154
									],
									[
										633424,
										633431
									],
									[
										633791,
										633798
									],
									[
										634159,
										634166
									],
									[
										634292,
										634299
									],
									[
										634633,
										634640
									],
									[
										634906,
										634913
									],
									[
										634968,
										634975
									],
									[
										635022,
										635029
									],
									[
										635301,
										635308
									],
									[
										635363,
										635370
									],
									[
										635424,
										635431
									],
									[
										635671,
										635678
									],
									[
										635735,
										635742
									],
									[
										635789,
										635796
									],
									[
										636102,
										636109
									],
									[
										636362,
										636369
									],
									[
										636426,
										636433
									],
									[
										636480,
										636487
									],
									[
										636770,
										636777
									],
									[
										637124,
										637131
									],
									[
										637662,
										637669
									],
									[
										638039,
										638046
									],
									[
										638517,
										638524
									],
									[
										638556,
										638563
									],
									[
										638587,
										638594
									],
									[
										638920,
										638927
									],
									[
										638959,
										638966
									],
									[
										639325,
										639332
									],
									[
										639636,
										639643
									],
									[
										639737,
										639744
									],
									[
										639971,
										639978
									],
									[
										640230,
										640237
									],
									[
										640340,
										640347
									],
									[
										640710,
										640717
									],
									[
										640867,
										640874
									],
									[
										640949,
										640956
									],
									[
										641004,
										641011
									],
									[
										641128,
										641135
									],
									[
										641282,
										641289
									],
									[
										641339,
										641346
									],
									[
										641504,
										641511
									],
									[
										641678,
										641685
									],
									[
										641855,
										641862
									],
									[
										642175,
										642182
									],
									[
										642205,
										642212
									],
									[
										642496,
										642503
									],
									[
										642724,
										642731
									],
									[
										642947,
										642954
									],
									[
										643141,
										643148
									],
									[
										643249,
										643256
									],
									[
										643302,
										643309
									],
									[
										643538,
										643545
									],
									[
										643876,
										643883
									],
									[
										644107,
										644114
									],
									[
										644200,
										644207
									],
									[
										644409,
										644416
									],
									[
										644467,
										644474
									],
									[
										644704,
										644711
									],
									[
										644955,
										644962
									],
									[
										645268,
										645275
									],
									[
										645344,
										645351
									],
									[
										645572,
										645579
									],
									[
										645823,
										645830
									],
									[
										646023,
										646030
									],
									[
										646173,
										646180
									],
									[
										646315,
										646322
									],
									[
										646527,
										646534
									],
									[
										646548,
										646555
									],
									[
										646793,
										646800
									],
									[
										647020,
										647027
									],
									[
										647273,
										647280
									],
									[
										647654,
										647661
									],
									[
										647690,
										647697
									],
									[
										647925,
										647932
									],
									[
										647961,
										647968
									],
									[
										648205,
										648212
									],
									[
										648241,
										648248
									],
									[
										648466,
										648473
									],
									[
										648498,
										648505
									],
									[
										648836,
										648843
									],
									[
										649397,
										649404
									],
									[
										649830,
										649837
									],
									[
										650255,
										650262
									],
									[
										650729,
										650736
									],
									[
										651290,
										651297
									],
									[
										651616,
										651623
									],
									[
										651793,
										651800
									],
									[
										651983,
										651990
									],
									[
										652086,
										652093
									],
									[
										652321,
										652328
									],
									[
										652454,
										652461
									],
									[
										652709,
										652716
									],
									[
										652771,
										652778
									],
									[
										653136,
										653143
									],
									[
										653331,
										653338
									],
									[
										653421,
										653428
									],
									[
										653808,
										653815
									],
									[
										653904,
										653911
									],
									[
										654199,
										654206
									],
									[
										654337,
										654344
									],
									[
										654463,
										654470
									],
									[
										654722,
										654729
									],
									[
										654833,
										654840
									],
									[
										654848,
										654855
									],
									[
										654999,
										655006
									],
									[
										655309,
										655316
									],
									[
										655764,
										655771
									],
									[
										655988,
										655995
									],
									[
										656230,
										656237
									],
									[
										656660,
										656667
									],
									[
										656908,
										656915
									],
									[
										656920,
										656927
									],
									[
										657249,
										657256
									],
									[
										657495,
										657502
									],
									[
										657729,
										657736
									],
									[
										657766,
										657773
									],
									[
										658060,
										658067
									],
									[
										658332,
										658339
									],
									[
										658404,
										658411
									],
									[
										658660,
										658667
									],
									[
										658921,
										658928
									],
									[
										659024,
										659031
									],
									[
										659279,
										659286
									],
									[
										659569,
										659576
									],
									[
										659861,
										659868
									],
									[
										660275,
										660282
									],
									[
										660303,
										660310
									],
									[
										660660,
										660667
									],
									[
										660686,
										660693
									],
									[
										661058,
										661065
									],
									[
										661088,
										661095
									],
									[
										661115,
										661122
									],
									[
										661143,
										661150
									],
									[
										661174,
										661181
									],
									[
										661536,
										661543
									],
									[
										661831,
										661838
									],
									[
										662044,
										662051
									],
									[
										662054,
										662061
									],
									[
										662417,
										662424
									],
									[
										662649,
										662656
									],
									[
										662850,
										662857
									],
									[
										663210,
										663217
									],
									[
										663443,
										663450
									],
									[
										663630,
										663637
									],
									[
										663764,
										663771
									],
									[
										663935,
										663942
									],
									[
										664294,
										664301
									],
									[
										664487,
										664494
									],
									[
										664638,
										664645
									],
									[
										664855,
										664862
									],
									[
										665082,
										665089
									],
									[
										665310,
										665317
									],
									[
										665519,
										665526
									],
									[
										665804,
										665811
									],
									[
										666020,
										666027
									],
									[
										666380,
										666387
									],
									[
										666522,
										666529
									],
									[
										666647,
										666654
									],
									[
										666924,
										666931
									],
									[
										667114,
										667121
									],
									[
										667415,
										667422
									],
									[
										667543,
										667550
									],
									[
										667725,
										667732
									],
									[
										667873,
										667880
									],
									[
										668146,
										668153
									],
									[
										668375,
										668382
									],
									[
										668652,
										668659
									],
									[
										668942,
										668949
									],
									[
										669227,
										669234
									],
									[
										669532,
										669539
									],
									[
										669816,
										669823
									],
									[
										670121,
										670128
									],
									[
										670405,
										670412
									],
									[
										670710,
										670717
									],
									[
										670990,
										670997
									],
									[
										671295,
										671302
									],
									[
										671603,
										671610
									],
									[
										671876,
										671883
									],
									[
										672245,
										672252
									],
									[
										672550,
										672557
									],
									[
										672847,
										672854
									],
									[
										673143,
										673150
									],
									[
										673536,
										673543
									],
									[
										673845,
										673852
									],
									[
										674321,
										674328
									],
									[
										674602,
										674609
									],
									[
										674939,
										674946
									],
									[
										675199,
										675206
									],
									[
										675573,
										675580
									],
									[
										675841,
										675848
									],
									[
										676117,
										676124
									],
									[
										676637,
										676644
									],
									[
										676941,
										676948
									],
									[
										677219,
										677226
									],
									[
										677537,
										677544
									],
									[
										677921,
										677928
									],
									[
										678218,
										678225
									],
									[
										678532,
										678539
									],
									[
										678847,
										678854
									],
									[
										679151,
										679158
									],
									[
										679440,
										679447
									],
									[
										679822,
										679829
									],
									[
										680106,
										680113
									],
									[
										680395,
										680402
									],
									[
										680603,
										680610
									],
									[
										680816,
										680823
									],
									[
										681205,
										681212
									],
									[
										681407,
										681414
									],
									[
										681557,
										681564
									],
									[
										681821,
										681828
									],
									[
										682080,
										682087
									],
									[
										682363,
										682370
									],
									[
										682668,
										682675
									],
									[
										682799,
										682806
									],
									[
										683148,
										683155
									],
									[
										683268,
										683275
									],
									[
										683504,
										683511
									],
									[
										683551,
										683558
									],
									[
										683587,
										683594
									],
									[
										683685,
										683692
									],
									[
										683808,
										683815
									],
									[
										684094,
										684101
									],
									[
										684272,
										684279
									],
									[
										684550,
										684557
									],
									[
										684795,
										684802
									],
									[
										685153,
										685160
									],
									[
										685246,
										685253
									],
									[
										685299,
										685306
									],
									[
										685551,
										685558
									],
									[
										686060,
										686067
									],
									[
										686567,
										686574
									],
									[
										686818,
										686825
									],
									[
										687249,
										687256
									],
									[
										687951,
										687958
									],
									[
										688556,
										688563
									],
									[
										688937,
										688944
									],
									[
										689318,
										689325
									],
									[
										689581,
										689588
									],
									[
										689910,
										689917
									],
									[
										689955,
										689962
									],
									[
										690273,
										690280
									],
									[
										690313,
										690320
									],
									[
										690626,
										690633
									],
									[
										690982,
										690989
									],
									[
										691448,
										691455
									],
									[
										691778,
										691785
									],
									[
										692075,
										692082
									],
									[
										692443,
										692450
									],
									[
										692718,
										692725
									],
									[
										692773,
										692780
									],
									[
										693175,
										693182
									],
									[
										693538,
										693545
									],
									[
										693879,
										693886
									],
									[
										694222,
										694229
									],
									[
										694341,
										694348
									],
									[
										694752,
										694759
									],
									[
										695061,
										695068
									],
									[
										695262,
										695269
									],
									[
										695532,
										695539
									],
									[
										695741,
										695748
									],
									[
										695772,
										695779
									],
									[
										695905,
										695912
									],
									[
										696029,
										696036
									],
									[
										696479,
										696486
									],
									[
										696745,
										696752
									],
									[
										696821,
										696828
									],
									[
										697069,
										697076
									],
									[
										697332,
										697339
									],
									[
										697830,
										697837
									],
									[
										698140,
										698147
									],
									[
										698429,
										698436
									],
									[
										698877,
										698884
									],
									[
										699354,
										699361
									],
									[
										699691,
										699698
									],
									[
										699817,
										699824
									],
									[
										699987,
										699994
									],
									[
										700498,
										700505
									],
									[
										700861,
										700868
									],
									[
										701186,
										701193
									],
									[
										701655,
										701662
									],
									[
										701873,
										701880
									],
									[
										702156,
										702163
									],
									[
										702578,
										702585
									],
									[
										702860,
										702867
									],
									[
										703285,
										703292
									],
									[
										703529,
										703536
									],
									[
										703847,
										703854
									],
									[
										703859,
										703866
									],
									[
										704327,
										704334
									],
									[
										704369,
										704376
									],
									[
										705206,
										705213
									],
									[
										705640,
										705647
									],
									[
										705876,
										705883
									],
									[
										706192,
										706199
									],
									[
										706453,
										706460
									],
									[
										706639,
										706646
									],
									[
										706920,
										706927
									],
									[
										707196,
										707203
									],
									[
										707340,
										707347
									],
									[
										707830,
										707837
									],
									[
										708341,
										708348
									],
									[
										708868,
										708875
									],
									[
										709375,
										709382
									],
									[
										709692,
										709699
									],
									[
										709774,
										709781
									],
									[
										710161,
										710168
									],
									[
										710243,
										710250
									],
									[
										710623,
										710630
									],
									[
										710707,
										710714
									],
									[
										711091,
										711098
									],
									[
										711175,
										711182
									],
									[
										711537,
										711544
									],
									[
										711616,
										711623
									],
									[
										711974,
										711981
									],
									[
										712053,
										712060
									],
									[
										712410,
										712417
									],
									[
										712489,
										712496
									],
									[
										712846,
										712853
									],
									[
										712928,
										712935
									],
									[
										713315,
										713322
									],
									[
										713397,
										713404
									],
									[
										713777,
										713784
									],
									[
										713861,
										713868
									],
									[
										714245,
										714252
									],
									[
										714329,
										714336
									],
									[
										714691,
										714698
									],
									[
										714770,
										714777
									],
									[
										715128,
										715135
									],
									[
										715207,
										715214
									],
									[
										715564,
										715571
									],
									[
										715643,
										715650
									],
									[
										716000,
										716007
									],
									[
										716082,
										716089
									],
									[
										716469,
										716476
									],
									[
										716551,
										716558
									],
									[
										716931,
										716938
									],
									[
										717015,
										717022
									],
									[
										717399,
										717406
									],
									[
										717483,
										717490
									],
									[
										717845,
										717852
									],
									[
										717924,
										717931
									],
									[
										718282,
										718289
									],
									[
										718361,
										718368
									],
									[
										718718,
										718725
									],
									[
										718797,
										718804
									],
									[
										719128,
										719135
									],
									[
										719397,
										719404
									],
									[
										719445,
										719452
									],
									[
										719647,
										719654
									],
									[
										719695,
										719702
									],
									[
										719897,
										719904
									],
									[
										719945,
										719952
									],
									[
										720147,
										720154
									],
									[
										720199,
										720206
									],
									[
										720405,
										720412
									],
									[
										720448,
										720455
									],
									[
										720786,
										720793
									],
									[
										720860,
										720867
									],
									[
										721130,
										721137
									],
									[
										721204,
										721211
									],
									[
										721459,
										721466
									],
									[
										721535,
										721542
									],
									[
										721795,
										721802
									],
									[
										721937,
										721944
									],
									[
										722440,
										722447
									],
									[
										722511,
										722518
									],
									[
										722725,
										722732
									],
									[
										722776,
										722783
									],
									[
										723099,
										723106
									],
									[
										723235,
										723242
									],
									[
										723446,
										723453
									],
									[
										723733,
										723740
									],
									[
										724086,
										724093
									],
									[
										724406,
										724413
									],
									[
										724457,
										724464
									],
									[
										724485,
										724492
									],
									[
										724705,
										724712
									],
									[
										724797,
										724804
									],
									[
										725029,
										725036
									],
									[
										725244,
										725251
									],
									[
										725469,
										725476
									],
									[
										725781,
										725788
									],
									[
										725973,
										725980
									],
									[
										726428,
										726435
									],
									[
										726847,
										726854
									],
									[
										726880,
										726887
									],
									[
										727320,
										727327
									],
									[
										727858,
										727865
									],
									[
										727942,
										727949
									],
									[
										728244,
										728251
									],
									[
										728626,
										728633
									],
									[
										728871,
										728878
									],
									[
										729116,
										729123
									],
									[
										729309,
										729316
									],
									[
										729401,
										729408
									],
									[
										729489,
										729496
									],
									[
										729589,
										729596
									],
									[
										729641,
										729648
									],
									[
										729921,
										729928
									],
									[
										729956,
										729963
									],
									[
										730011,
										730018
									],
									[
										730047,
										730054
									],
									[
										730158,
										730165
									],
									[
										730262,
										730269
									],
									[
										730551,
										730558
									],
									[
										730818,
										730825
									],
									[
										731434,
										731441
									],
									[
										731706,
										731713
									],
									[
										732000,
										732007
									],
									[
										732083,
										732090
									],
									[
										732376,
										732383
									],
									[
										732587,
										732594
									],
									[
										732753,
										732760
									],
									[
										732964,
										732971
									],
									[
										733238,
										733245
									],
									[
										733343,
										733350
									],
									[
										733566,
										733573
									],
									[
										733843,
										733850
									],
									[
										734077,
										734084
									],
									[
										734425,
										734432
									],
									[
										734683,
										734690
									],
									[
										735037,
										735044
									],
									[
										735064,
										735071
									],
									[
										735206,
										735213
									],
									[
										735314,
										735321
									],
									[
										735522,
										735529
									],
									[
										735880,
										735887
									],
									[
										735972,
										735979
									],
									[
										736511,
										736518
									],
									[
										736965,
										736972
									],
									[
										737460,
										737467
									],
									[
										737487,
										737494
									],
									[
										737867,
										737874
									],
									[
										738143,
										738150
									],
									[
										738176,
										738183
									],
									[
										738430,
										738437
									],
									[
										738939,
										738946
									],
									[
										739406,
										739413
									],
									[
										739807,
										739814
									],
									[
										740278,
										740285
									],
									[
										740894,
										740901
									],
									[
										741112,
										741119
									],
									[
										741495,
										741502
									],
									[
										741830,
										741837
									],
									[
										742189,
										742196
									],
									[
										742387,
										742394
									],
									[
										742554,
										742561
									],
									[
										742830,
										742837
									],
									[
										742874,
										742881
									],
									[
										742995,
										743002
									],
									[
										743205,
										743212
									],
									[
										743688,
										743695
									],
									[
										744078,
										744085
									],
									[
										744397,
										744404
									],
									[
										744448,
										744455
									],
									[
										744686,
										744693
									],
									[
										744737,
										744744
									],
									[
										744840,
										744847
									],
									[
										745079,
										745086
									],
									[
										745130,
										745137
									],
									[
										745502,
										745509
									],
									[
										745541,
										745548
									],
									[
										745572,
										745579
									],
									[
										745915,
										745922
									],
									[
										745954,
										745961
									],
									[
										746284,
										746291
									],
									[
										746643,
										746650
									],
									[
										746678,
										746685
									],
									[
										747047,
										747054
									],
									[
										747267,
										747274
									],
									[
										747309,
										747316
									],
									[
										747611,
										747618
									],
									[
										747926,
										747933
									],
									[
										748000,
										748007
									],
									[
										748372,
										748379
									],
									[
										748552,
										748559
									],
									[
										748623,
										748630
									],
									[
										748974,
										748981
									],
									[
										749003,
										749010
									],
									[
										749030,
										749037
									],
									[
										749523,
										749530
									],
									[
										749905,
										749912
									],
									[
										749965,
										749972
									],
									[
										750204,
										750211
									],
									[
										750264,
										750271
									],
									[
										750622,
										750629
									],
									[
										751016,
										751023
									],
									[
										751405,
										751412
									],
									[
										751592,
										751599
									],
									[
										751833,
										751840
									],
									[
										752145,
										752152
									],
									[
										752377,
										752384
									],
									[
										752516,
										752523
									],
									[
										752768,
										752775
									],
									[
										753126,
										753133
									],
									[
										753510,
										753517
									],
									[
										753830,
										753837
									],
									[
										754000,
										754007
									],
									[
										754315,
										754322
									],
									[
										754655,
										754662
									],
									[
										754834,
										754841
									],
									[
										754957,
										754964
									],
									[
										755043,
										755050
									],
									[
										755333,
										755340
									],
									[
										755374,
										755381
									],
									[
										755694,
										755701
									],
									[
										756297,
										756304
									],
									[
										756615,
										756622
									],
									[
										756645,
										756652
									],
									[
										756981,
										756988
									],
									[
										757015,
										757022
									],
									[
										757327,
										757334
									],
									[
										757766,
										757773
									],
									[
										757867,
										757874
									],
									[
										758171,
										758178
									],
									[
										758375,
										758382
									],
									[
										758482,
										758489
									],
									[
										758710,
										758717
									],
									[
										758805,
										758812
									],
									[
										758983,
										758990
									],
									[
										759162,
										759169
									],
									[
										759323,
										759330
									],
									[
										760039,
										760046
									],
									[
										760854,
										760861
									],
									[
										761273,
										761280
									],
									[
										761438,
										761445
									],
									[
										761529,
										761536
									],
									[
										761772,
										761779
									],
									[
										761970,
										761977
									],
									[
										762529,
										762536
									],
									[
										763032,
										763039
									],
									[
										763086,
										763093
									],
									[
										763286,
										763293
									],
									[
										763528,
										763535
									],
									[
										763577,
										763584
									],
									[
										763600,
										763607
									],
									[
										763817,
										763824
									],
									[
										763864,
										763871
									],
									[
										763900,
										763907
									],
									[
										763996,
										764003
									],
									[
										764120,
										764127
									],
									[
										764128,
										764135
									],
									[
										764174,
										764181
									],
									[
										764270,
										764277
									],
									[
										764497,
										764504
									],
									[
										764661,
										764668
									],
									[
										764912,
										764919
									],
									[
										765142,
										765149
									],
									[
										765373,
										765380
									],
									[
										765471,
										765478
									],
									[
										765766,
										765773
									],
									[
										766156,
										766163
									],
									[
										766353,
										766360
									],
									[
										766385,
										766392
									],
									[
										766665,
										766672
									],
									[
										766706,
										766713
									],
									[
										766957,
										766964
									],
									[
										766980,
										766987
									],
									[
										767227,
										767234
									],
									[
										767739,
										767746
									],
									[
										768155,
										768162
									],
									[
										768502,
										768509
									],
									[
										768847,
										768854
									],
									[
										769091,
										769098
									],
									[
										769181,
										769188
									],
									[
										769209,
										769216
									],
									[
										769337,
										769344
									],
									[
										769345,
										769352
									],
									[
										769589,
										769596
									],
									[
										769682,
										769689
									],
									[
										770108,
										770115
									],
									[
										770147,
										770154
									],
									[
										770241,
										770248
									],
									[
										770276,
										770283
									],
									[
										770294,
										770301
									],
									[
										770406,
										770413
									],
									[
										770594,
										770601
									],
									[
										771201,
										771208
									],
									[
										771410,
										771417
									],
									[
										771992,
										771999
									],
									[
										772182,
										772189
									],
									[
										772625,
										772632
									],
									[
										772889,
										772896
									],
									[
										773249,
										773256
									],
									[
										773537,
										773544
									],
									[
										773771,
										773778
									],
									[
										773965,
										773972
									],
									[
										774277,
										774284
									],
									[
										774681,
										774688
									],
									[
										775085,
										775092
									],
									[
										775620,
										775627
									],
									[
										775908,
										775915
									],
									[
										776140,
										776147
									],
									[
										776372,
										776379
									],
									[
										776604,
										776611
									],
									[
										776836,
										776843
									],
									[
										777068,
										777075
									],
									[
										777300,
										777307
									],
									[
										777571,
										777578
									],
									[
										777976,
										777983
									],
									[
										778208,
										778215
									],
									[
										778442,
										778449
									],
									[
										778676,
										778683
									],
									[
										778910,
										778917
									],
									[
										779143,
										779150
									],
									[
										779377,
										779384
									],
									[
										779657,
										779664
									],
									[
										779891,
										779898
									],
									[
										780122,
										780129
									],
									[
										780354,
										780361
									],
									[
										780586,
										780593
									],
									[
										780818,
										780825
									],
									[
										780979,
										780986
									],
									[
										781141,
										781148
									],
									[
										781409,
										781416
									],
									[
										781643,
										781650
									],
									[
										781877,
										781884
									],
									[
										782110,
										782117
									],
									[
										782333,
										782340
									],
									[
										782631,
										782638
									],
									[
										782892,
										782899
									],
									[
										783127,
										783134
									],
									[
										783360,
										783367
									],
									[
										783591,
										783598
									],
									[
										783859,
										783866
									],
									[
										784091,
										784098
									],
									[
										784321,
										784328
									],
									[
										784553,
										784560
									],
									[
										784784,
										784791
									],
									[
										785113,
										785120
									],
									[
										785346,
										785353
									],
									[
										785609,
										785616
									],
									[
										785843,
										785850
									],
									[
										786078,
										786085
									],
									[
										786307,
										786314
									],
									[
										786538,
										786545
									],
									[
										786908,
										786915
									],
									[
										787368,
										787375
									],
									[
										787755,
										787762
									],
									[
										788013,
										788020
									],
									[
										788053,
										788060
									],
									[
										788472,
										788479
									],
									[
										788990,
										788997
									],
									[
										789303,
										789310
									],
									[
										789481,
										789488
									],
									[
										789789,
										789796
									],
									[
										790088,
										790095
									],
									[
										790481,
										790488
									],
									[
										790785,
										790792
									],
									[
										790815,
										790822
									],
									[
										790838,
										790845
									],
									[
										791346,
										791353
									],
									[
										791624,
										791631
									],
									[
										791962,
										791969
									],
									[
										792440,
										792447
									],
									[
										793005,
										793012
									],
									[
										793077,
										793084
									],
									[
										793137,
										793144
									],
									[
										793472,
										793479
									],
									[
										793568,
										793575
									],
									[
										793929,
										793936
									],
									[
										794247,
										794254
									],
									[
										794565,
										794572
									],
									[
										794883,
										794890
									],
									[
										795196,
										795203
									],
									[
										795293,
										795300
									],
									[
										795737,
										795744
									],
									[
										795976,
										795983
									],
									[
										796249,
										796256
									],
									[
										796584,
										796591
									],
									[
										796870,
										796877
									],
									[
										796896,
										796903
									],
									[
										797016,
										797023
									],
									[
										797339,
										797346
									],
									[
										797442,
										797449
									],
									[
										797599,
										797606
									],
									[
										797677,
										797684
									],
									[
										798054,
										798061
									],
									[
										798332,
										798339
									],
									[
										798358,
										798365
									],
									[
										798579,
										798586
									],
									[
										798695,
										798702
									],
									[
										798918,
										798925
									],
									[
										799085,
										799092
									],
									[
										799358,
										799365
									],
									[
										799405,
										799412
									],
									[
										799441,
										799448
									],
									[
										799631,
										799638
									],
									[
										799671,
										799678
									],
									[
										799781,
										799788
									],
									[
										800140,
										800147
									],
									[
										800561,
										800568
									],
									[
										800985,
										800992
									],
									[
										801122,
										801129
									],
									[
										801206,
										801213
									],
									[
										801442,
										801449
									],
									[
										801516,
										801523
									],
									[
										801699,
										801706
									],
									[
										801771,
										801778
									],
									[
										801830,
										801837
									],
									[
										802129,
										802136
									],
									[
										802363,
										802370
									],
									[
										802436,
										802443
									],
									[
										802499,
										802506
									],
									[
										802577,
										802584
									],
									[
										802903,
										802910
									],
									[
										802950,
										802957
									],
									[
										802986,
										802993
									],
									[
										803021,
										803028
									],
									[
										803132,
										803139
									],
									[
										803243,
										803250
									],
									[
										803625,
										803632
									],
									[
										804250,
										804257
									],
									[
										804672,
										804679
									],
									[
										804717,
										804724
									],
									[
										804769,
										804776
									],
									[
										805125,
										805132
									],
									[
										805247,
										805254
									],
									[
										805549,
										805556
									],
									[
										805888,
										805895
									],
									[
										805930,
										805937
									],
									[
										806167,
										806174
									],
									[
										806353,
										806360
									],
									[
										806429,
										806436
									],
									[
										806479,
										806486
									],
									[
										806746,
										806753
									],
									[
										806879,
										806886
									],
									[
										806990,
										806997
									],
									[
										807152,
										807159
									],
									[
										807392,
										807399
									],
									[
										807553,
										807560
									],
									[
										807839,
										807846
									],
									[
										807889,
										807896
									],
									[
										808199,
										808206
									],
									[
										808477,
										808484
									],
									[
										808741,
										808748
									],
									[
										809015,
										809022
									],
									[
										809281,
										809288
									],
									[
										809543,
										809550
									],
									[
										809791,
										809798
									],
									[
										810043,
										810050
									],
									[
										810304,
										810311
									],
									[
										810610,
										810617
									],
									[
										810887,
										810894
									],
									[
										811176,
										811183
									],
									[
										811466,
										811473
									],
									[
										811740,
										811747
									],
									[
										812060,
										812067
									],
									[
										812394,
										812401
									],
									[
										812797,
										812804
									],
									[
										813363,
										813370
									],
									[
										813421,
										813428
									],
									[
										813773,
										813780
									],
									[
										814265,
										814272
									],
									[
										814739,
										814746
									],
									[
										815102,
										815109
									],
									[
										815567,
										815574
									],
									[
										815947,
										815954
									],
									[
										816146,
										816153
									],
									[
										816429,
										816436
									],
									[
										816959,
										816966
									],
									[
										817302,
										817309
									],
									[
										817652,
										817659
									],
									[
										817952,
										817959
									],
									[
										818210,
										818217
									],
									[
										818410,
										818417
									],
									[
										818442,
										818449
									],
									[
										818979,
										818986
									],
									[
										819004,
										819011
									],
									[
										819258,
										819265
									],
									[
										819633,
										819640
									],
									[
										819680,
										819687
									],
									[
										819716,
										819723
									],
									[
										819752,
										819759
									],
									[
										819873,
										819880
									],
									[
										819881,
										819888
									],
									[
										820321,
										820328
									],
									[
										820354,
										820361
									],
									[
										820671,
										820678
									],
									[
										820774,
										820781
									],
									[
										820864,
										820871
									],
									[
										821011,
										821018
									],
									[
										821355,
										821362
									],
									[
										821844,
										821851
									],
									[
										822066,
										822073
									],
									[
										822167,
										822174
									],
									[
										822251,
										822258
									],
									[
										822487,
										822494
									],
									[
										822561,
										822568
									],
									[
										822733,
										822740
									],
									[
										822805,
										822812
									],
									[
										822864,
										822871
									],
									[
										823163,
										823170
									],
									[
										823397,
										823404
									],
									[
										823474,
										823481
									],
									[
										823537,
										823544
									],
									[
										823615,
										823622
									],
									[
										823989,
										823996
									],
									[
										824037,
										824044
									],
									[
										824420,
										824427
									],
									[
										824760,
										824767
									],
									[
										824912,
										824919
									],
									[
										825268,
										825275
									],
									[
										825724,
										825731
									],
									[
										825916,
										825923
									],
									[
										826068,
										826075
									],
									[
										826451,
										826458
									],
									[
										826780,
										826787
									],
									[
										826877,
										826884
									],
									[
										826993,
										827000
									],
									[
										827181,
										827188
									],
									[
										827310,
										827317
									],
									[
										827338,
										827345
									],
									[
										827366,
										827373
									],
									[
										827376,
										827383
									],
									[
										827406,
										827413
									],
									[
										827527,
										827534
									],
									[
										827535,
										827542
									],
									[
										827734,
										827741
									],
									[
										827784,
										827791
									],
									[
										828109,
										828116
									],
									[
										828477,
										828484
									],
									[
										828719,
										828726
									],
									[
										828914,
										828921
									],
									[
										829119,
										829126
									],
									[
										829241,
										829248
									],
									[
										829371,
										829378
									],
									[
										829690,
										829697
									],
									[
										829999,
										830006
									],
									[
										830279,
										830286
									],
									[
										830571,
										830578
									],
									[
										830863,
										830870
									],
									[
										831137,
										831144
									],
									[
										831458,
										831465
									],
									[
										831874,
										831881
									],
									[
										832384,
										832391
									],
									[
										832885,
										832892
									],
									[
										833259,
										833266
									],
									[
										833556,
										833563
									],
									[
										833618,
										833625
									],
									[
										833949,
										833956
									],
									[
										833982,
										833989
									],
									[
										834461,
										834468
									],
									[
										834485,
										834492
									],
									[
										834515,
										834522
									],
									[
										835102,
										835109
									],
									[
										835127,
										835134
									],
									[
										835463,
										835470
									],
									[
										835656,
										835663
									],
									[
										835731,
										835738
									],
									[
										836117,
										836124
									],
									[
										836293,
										836300
									],
									[
										836478,
										836485
									],
									[
										836634,
										836641
									],
									[
										836740,
										836747
									],
									[
										837041,
										837048
									],
									[
										837108,
										837115
									],
									[
										837309,
										837316
									],
									[
										837414,
										837421
									],
									[
										837588,
										837595
									],
									[
										837796,
										837803
									],
									[
										838215,
										838222
									],
									[
										838672,
										838679
									],
									[
										838696,
										838703
									],
									[
										838722,
										838729
									],
									[
										839055,
										839062
									],
									[
										839471,
										839478
									],
									[
										839825,
										839832
									],
									[
										840430,
										840437
									],
									[
										840815,
										840822
									],
									[
										840848,
										840855
									],
									[
										841300,
										841307
									],
									[
										841328,
										841335
									],
									[
										841834,
										841841
									],
									[
										842328,
										842335
									],
									[
										842993,
										843000
									],
									[
										843440,
										843447
									],
									[
										843871,
										843878
									],
									[
										844306,
										844313
									],
									[
										844393,
										844400
									],
									[
										844448,
										844455
									],
									[
										844546,
										844553
									],
									[
										844783,
										844790
									],
									[
										845067,
										845074
									],
									[
										845390,
										845397
									],
									[
										845537,
										845544
									],
									[
										845591,
										845598
									],
									[
										845636,
										845643
									],
									[
										845698,
										845705
									],
									[
										845753,
										845760
									],
									[
										846024,
										846031
									],
									[
										846431,
										846438
									],
									[
										846895,
										846902
									],
									[
										847319,
										847326
									],
									[
										847586,
										847593
									],
									[
										847708,
										847715
									],
									[
										847995,
										848002
									],
									[
										848522,
										848529
									],
									[
										848828,
										848835
									],
									[
										848869,
										848876
									],
									[
										849271,
										849278
									],
									[
										849672,
										849679
									],
									[
										849989,
										849996
									],
									[
										850410,
										850417
									],
									[
										850559,
										850566
									],
									[
										851344,
										851351
									],
									[
										851623,
										851630
									],
									[
										851849,
										851856
									],
									[
										851902,
										851909
									],
									[
										852076,
										852083
									],
									[
										852419,
										852426
									],
									[
										852700,
										852707
									],
									[
										853004,
										853011
									],
									[
										853258,
										853265
									],
									[
										853538,
										853545
									],
									[
										853810,
										853817
									],
									[
										854180,
										854187
									],
									[
										854265,
										854272
									],
									[
										854595,
										854602
									],
									[
										854998,
										855005
									],
									[
										855020,
										855027
									],
									[
										855042,
										855049
									],
									[
										855514,
										855521
									],
									[
										855547,
										855554
									],
									[
										855997,
										856004
									],
									[
										856572,
										856579
									],
									[
										856597,
										856604
									],
									[
										856623,
										856630
									],
									[
										856691,
										856698
									],
									[
										857055,
										857062
									],
									[
										857337,
										857344
									],
									[
										857387,
										857394
									],
									[
										857618,
										857625
									],
									[
										857647,
										857654
									],
									[
										857925,
										857932
									],
									[
										858003,
										858010
									],
									[
										858283,
										858290
									],
									[
										858327,
										858334
									],
									[
										858337,
										858344
									],
									[
										858412,
										858419
									],
									[
										858570,
										858577
									],
									[
										858670,
										858677
									],
									[
										858907,
										858914
									],
									[
										859157,
										859164
									],
									[
										859618,
										859625
									],
									[
										859812,
										859819
									],
									[
										860157,
										860164
									],
									[
										860469,
										860476
									],
									[
										860536,
										860543
									],
									[
										860562,
										860569
									],
									[
										860958,
										860965
									],
									[
										860985,
										860992
									],
									[
										861275,
										861282
									],
									[
										861365,
										861372
									],
									[
										861838,
										861845
									],
									[
										861866,
										861873
									],
									[
										862076,
										862083
									],
									[
										862254,
										862261
									],
									[
										862729,
										862736
									],
									[
										863028,
										863035
									],
									[
										863087,
										863094
									],
									[
										863510,
										863517
									],
									[
										863856,
										863863
									],
									[
										864271,
										864278
									],
									[
										864556,
										864563
									],
									[
										865004,
										865011
									],
									[
										865371,
										865378
									],
									[
										865616,
										865623
									],
									[
										865721,
										865728
									],
									[
										866003,
										866010
									],
									[
										866160,
										866167
									],
									[
										866488,
										866495
									],
									[
										867184,
										867191
									],
									[
										867470,
										867477
									],
									[
										867789,
										867796
									],
									[
										868229,
										868236
									],
									[
										868609,
										868616
									],
									[
										868632,
										868639
									],
									[
										869012,
										869019
									],
									[
										869391,
										869398
									],
									[
										869686,
										869693
									],
									[
										870108,
										870115
									],
									[
										870387,
										870394
									],
									[
										870413,
										870420
									],
									[
										870645,
										870652
									],
									[
										870790,
										870797
									],
									[
										871118,
										871125
									],
									[
										871429,
										871436
									],
									[
										871694,
										871701
									],
									[
										871878,
										871885
									],
									[
										872209,
										872216
									],
									[
										872470,
										872477
									],
									[
										872523,
										872530
									],
									[
										872574,
										872581
									],
									[
										872991,
										872998
									],
									[
										873292,
										873299
									],
									[
										873330,
										873337
									],
									[
										873372,
										873379
									],
									[
										873415,
										873422
									],
									[
										873458,
										873465
									],
									[
										873507,
										873514
									],
									[
										873615,
										873622
									],
									[
										873644,
										873651
									],
									[
										873703,
										873710
									],
									[
										873762,
										873769
									],
									[
										873821,
										873828
									],
									[
										873880,
										873887
									],
									[
										874038,
										874045
									],
									[
										874328,
										874335
									],
									[
										874531,
										874538
									],
									[
										874592,
										874599
									],
									[
										874658,
										874665
									],
									[
										874724,
										874731
									],
									[
										874789,
										874796
									],
									[
										874958,
										874965
									],
									[
										875184,
										875191
									],
									[
										875415,
										875422
									],
									[
										875656,
										875663
									],
									[
										875795,
										875802
									],
									[
										875855,
										875862
									],
									[
										875904,
										875911
									],
									[
										875949,
										875956
									],
									[
										875992,
										875999
									],
									[
										876263,
										876270
									],
									[
										876547,
										876554
									],
									[
										876814,
										876821
									],
									[
										877001,
										877008
									],
									[
										877067,
										877074
									],
									[
										877351,
										877358
									],
									[
										877413,
										877420
									],
									[
										877608,
										877615
									],
									[
										877879,
										877886
									],
									[
										878037,
										878044
									],
									[
										878204,
										878211
									],
									[
										878371,
										878378
									],
									[
										878538,
										878545
									],
									[
										878750,
										878757
									],
									[
										879076,
										879083
									],
									[
										879387,
										879394
									],
									[
										879609,
										879616
									],
									[
										879841,
										879848
									],
									[
										880070,
										880077
									],
									[
										880317,
										880324
									],
									[
										880481,
										880488
									],
									[
										880741,
										880748
									],
									[
										880939,
										880946
									],
									[
										881150,
										881157
									],
									[
										881359,
										881366
									],
									[
										881572,
										881579
									],
									[
										881808,
										881815
									],
									[
										882067,
										882074
									],
									[
										882335,
										882342
									],
									[
										882570,
										882577
									],
									[
										882758,
										882765
									],
									[
										883090,
										883097
									],
									[
										883270,
										883277
									],
									[
										883534,
										883541
									],
									[
										883566,
										883573
									],
									[
										883794,
										883801
									],
									[
										883905,
										883912
									],
									[
										884143,
										884150
									],
									[
										884327,
										884334
									],
									[
										884405,
										884412
									],
									[
										884425,
										884432
									],
									[
										884776,
										884783
									],
									[
										884982,
										884989
									],
									[
										885351,
										885358
									],
									[
										885753,
										885760
									],
									[
										885797,
										885804
									],
									[
										885869,
										885876
									],
									[
										885958,
										885965
									],
									[
										886049,
										886056
									],
									[
										886335,
										886342
									],
									[
										886609,
										886616
									],
									[
										886700,
										886707
									],
									[
										886783,
										886790
									],
									[
										886847,
										886854
									],
									[
										887244,
										887251
									],
									[
										887574,
										887581
									],
									[
										887852,
										887859
									],
									[
										888172,
										888179
									],
									[
										888189,
										888196
									],
									[
										888453,
										888460
									],
									[
										888849,
										888856
									],
									[
										888893,
										888900
									],
									[
										888965,
										888972
									],
									[
										889054,
										889061
									],
									[
										889145,
										889152
									],
									[
										889481,
										889488
									],
									[
										889498,
										889505
									],
									[
										889853,
										889860
									],
									[
										890117,
										890124
									],
									[
										890370,
										890377
									],
									[
										890627,
										890634
									],
									[
										890880,
										890887
									],
									[
										891274,
										891281
									],
									[
										891318,
										891325
									],
									[
										891390,
										891397
									],
									[
										891479,
										891486
									],
									[
										891570,
										891577
									],
									[
										891925,
										891932
									],
									[
										891942,
										891949
									],
									[
										892293,
										892300
									],
									[
										892554,
										892561
									],
									[
										892777,
										892784
									],
									[
										893031,
										893038
									],
									[
										893280,
										893287
									],
									[
										893492,
										893499
									],
									[
										893767,
										893774
									],
									[
										894029,
										894036
									],
									[
										894157,
										894164
									],
									[
										894762,
										894769
									],
									[
										894992,
										894999
									],
									[
										895214,
										895221
									],
									[
										895341,
										895348
									],
									[
										895388,
										895395
									],
									[
										895424,
										895431
									],
									[
										895459,
										895466
									],
									[
										895506,
										895513
									],
									[
										895664,
										895671
									],
									[
										895998,
										896005
									],
									[
										896264,
										896271
									],
									[
										896612,
										896619
									],
									[
										896880,
										896887
									],
									[
										897180,
										897187
									],
									[
										897304,
										897311
									],
									[
										897810,
										897817
									],
									[
										898198,
										898205
									],
									[
										899020,
										899027
									],
									[
										899484,
										899491
									],
									[
										899815,
										899822
									],
									[
										899980,
										899987
									],
									[
										900206,
										900213
									],
									[
										900431,
										900438
									],
									[
										900477,
										900484
									],
									[
										900541,
										900548
									],
									[
										900904,
										900911
									],
									[
										900977,
										900984
									],
									[
										901557,
										901564
									],
									[
										901938,
										901945
									],
									[
										901966,
										901973
									],
									[
										902193,
										902200
									],
									[
										902246,
										902253
									],
									[
										902385,
										902392
									],
									[
										902627,
										902634
									],
									[
										902729,
										902736
									],
									[
										902803,
										902810
									],
									[
										903085,
										903092
									],
									[
										903266,
										903273
									],
									[
										903343,
										903350
									],
									[
										903406,
										903413
									],
									[
										903543,
										903550
									],
									[
										904205,
										904212
									],
									[
										904780,
										904787
									],
									[
										904918,
										904925
									],
									[
										905442,
										905449
									],
									[
										905648,
										905655
									],
									[
										906163,
										906170
									],
									[
										906554,
										906561
									],
									[
										906629,
										906636
									],
									[
										907073,
										907080
									],
									[
										907399,
										907406
									],
									[
										907793,
										907800
									],
									[
										908000,
										908007
									],
									[
										908050,
										908057
									],
									[
										908095,
										908102
									],
									[
										908157,
										908164
									],
									[
										908212,
										908219
									],
									[
										908473,
										908480
									],
									[
										908960,
										908967
									],
									[
										909412,
										909419
									],
									[
										909715,
										909722
									],
									[
										910192,
										910199
									],
									[
										910517,
										910524
									],
									[
										910564,
										910571
									],
									[
										910593,
										910600
									],
									[
										910647,
										910654
									],
									[
										910899,
										910906
									],
									[
										911128,
										911135
									],
									[
										911258,
										911265
									],
									[
										911518,
										911525
									],
									[
										911567,
										911574
									],
									[
										911772,
										911779
									],
									[
										911988,
										911995
									],
									[
										912062,
										912069
									],
									[
										912344,
										912351
									],
									[
										912525,
										912532
									],
									[
										912602,
										912609
									],
									[
										912665,
										912672
									],
									[
										912802,
										912809
									],
									[
										912978,
										912985
									],
									[
										913060,
										913067
									],
									[
										913359,
										913366
									],
									[
										913644,
										913651
									],
									[
										914087,
										914094
									],
									[
										914288,
										914295
									],
									[
										914536,
										914543
									],
									[
										914692,
										914699
									],
									[
										914729,
										914736
									],
									[
										914750,
										914757
									],
									[
										915170,
										915177
									],
									[
										915710,
										915717
									],
									[
										915998,
										916005
									],
									[
										916425,
										916432
									],
									[
										916732,
										916739
									],
									[
										916765,
										916772
									],
									[
										917172,
										917179
									],
									[
										917456,
										917463
									],
									[
										917518,
										917525
									],
									[
										917763,
										917770
									],
									[
										917825,
										917832
									],
									[
										918073,
										918080
									],
									[
										918135,
										918142
									],
									[
										918195,
										918202
									],
									[
										918540,
										918547
									],
									[
										919224,
										919231
									],
									[
										919906,
										919913
									],
									[
										920505,
										920512
									],
									[
										920659,
										920666
									],
									[
										920958,
										920965
									],
									[
										921112,
										921119
									],
									[
										921211,
										921218
									],
									[
										921459,
										921466
									],
									[
										921883,
										921890
									],
									[
										922143,
										922150
									],
									[
										922407,
										922414
									],
									[
										922462,
										922469
									],
									[
										922882,
										922889
									],
									[
										923522,
										923529
									],
									[
										923553,
										923560
									],
									[
										923880,
										923887
									],
									[
										924201,
										924208
									],
									[
										924437,
										924444
									],
									[
										924567,
										924574
									],
									[
										924827,
										924834
									],
									[
										925301,
										925308
									],
									[
										925646,
										925653
									],
									[
										925995,
										926002
									],
									[
										926256,
										926263
									],
									[
										926453,
										926460
									],
									[
										926730,
										926737
									],
									[
										926830,
										926837
									],
									[
										927114,
										927121
									],
									[
										927414,
										927421
									],
									[
										927576,
										927583
									],
									[
										927938,
										927945
									],
									[
										928140,
										928147
									],
									[
										928487,
										928494
									],
									[
										928816,
										928823
									],
									[
										929146,
										929153
									],
									[
										929444,
										929451
									],
									[
										929799,
										929806
									],
									[
										929974,
										929981
									],
									[
										930004,
										930011
									],
									[
										930388,
										930395
									],
									[
										930527,
										930534
									],
									[
										930885,
										930892
									],
									[
										930914,
										930921
									],
									[
										930983,
										930990
									],
									[
										931086,
										931093
									],
									[
										931343,
										931350
									],
									[
										931467,
										931474
									],
									[
										931506,
										931513
									],
									[
										931599,
										931606
									],
									[
										931624,
										931631
									],
									[
										931706,
										931713
									],
									[
										932053,
										932060
									],
									[
										932094,
										932101
									],
									[
										932160,
										932167
									],
									[
										932218,
										932225
									],
									[
										932304,
										932311
									],
									[
										932583,
										932590
									],
									[
										932701,
										932708
									],
									[
										932999,
										933006
									],
									[
										933094,
										933101
									],
									[
										933520,
										933527
									],
									[
										933593,
										933600
									],
									[
										933836,
										933843
									],
									[
										934198,
										934205
									],
									[
										934336,
										934343
									],
									[
										934428,
										934435
									],
									[
										934785,
										934792
									],
									[
										934813,
										934820
									],
									[
										935054,
										935061
									],
									[
										935522,
										935529
									],
									[
										935571,
										935578
									],
									[
										935994,
										936001
									],
									[
										936108,
										936115
									],
									[
										936239,
										936246
									],
									[
										936447,
										936454
									],
									[
										936990,
										936997
									],
									[
										937727,
										937734
									],
									[
										938170,
										938177
									],
									[
										938238,
										938245
									],
									[
										938270,
										938277
									],
									[
										938721,
										938728
									],
									[
										938834,
										938841
									],
									[
										939033,
										939040
									],
									[
										939167,
										939174
									],
									[
										939225,
										939232
									],
									[
										939476,
										939483
									],
									[
										939781,
										939788
									],
									[
										940038,
										940045
									],
									[
										940312,
										940319
									],
									[
										940720,
										940727
									],
									[
										940915,
										940922
									],
									[
										941064,
										941071
									],
									[
										941261,
										941268
									],
									[
										941571,
										941578
									],
									[
										942049,
										942056
									],
									[
										942397,
										942404
									],
									[
										942630,
										942637
									],
									[
										942843,
										942850
									],
									[
										943175,
										943182
									],
									[
										943345,
										943352
									],
									[
										943415,
										943422
									],
									[
										943732,
										943739
									],
									[
										944161,
										944168
									],
									[
										944492,
										944499
									],
									[
										944859,
										944866
									],
									[
										945188,
										945195
									],
									[
										945624,
										945631
									],
									[
										946009,
										946016
									],
									[
										946429,
										946436
									],
									[
										946619,
										946626
									],
									[
										946926,
										946933
									],
									[
										947259,
										947266
									],
									[
										947538,
										947545
									],
									[
										947566,
										947573
									],
									[
										947760,
										947767
									],
									[
										948158,
										948165
									],
									[
										948531,
										948538
									],
									[
										948935,
										948942
									],
									[
										949302,
										949309
									],
									[
										949674,
										949681
									],
									[
										950095,
										950102
									],
									[
										950406,
										950413
									],
									[
										950441,
										950448
									],
									[
										950722,
										950729
									],
									[
										950777,
										950784
									],
									[
										951104,
										951111
									],
									[
										951137,
										951144
									],
									[
										951301,
										951308
									],
									[
										951773,
										951780
									],
									[
										952240,
										952247
									],
									[
										952557,
										952564
									],
									[
										952958,
										952965
									],
									[
										953140,
										953147
									],
									[
										953505,
										953512
									],
									[
										954192,
										954199
									],
									[
										954320,
										954327
									],
									[
										954521,
										954528
									],
									[
										954758,
										954765
									],
									[
										955054,
										955061
									],
									[
										955097,
										955104
									],
									[
										955389,
										955396
									],
									[
										955753,
										955760
									],
									[
										956107,
										956114
									],
									[
										956454,
										956461
									],
									[
										956568,
										956575
									],
									[
										956832,
										956839
									],
									[
										957305,
										957312
									],
									[
										957671,
										957678
									],
									[
										958036,
										958043
									],
									[
										958156,
										958163
									],
									[
										958489,
										958496
									],
									[
										958826,
										958833
									],
									[
										958858,
										958865
									],
									[
										959148,
										959155
									],
									[
										959634,
										959641
									],
									[
										960005,
										960012
									],
									[
										960314,
										960321
									],
									[
										960486,
										960493
									],
									[
										960795,
										960802
									],
									[
										960841,
										960848
									],
									[
										960895,
										960902
									],
									[
										960926,
										960933
									],
									[
										961030,
										961037
									],
									[
										961220,
										961227
									],
									[
										961448,
										961455
									],
									[
										961554,
										961561
									],
									[
										961790,
										961797
									],
									[
										962266,
										962273
									],
									[
										962716,
										962723
									],
									[
										962821,
										962828
									],
									[
										963039,
										963046
									],
									[
										963395,
										963402
									],
									[
										963855,
										963862
									],
									[
										964505,
										964512
									],
									[
										964741,
										964748
									],
									[
										964999,
										965006
									],
									[
										965309,
										965316
									],
									[
										965625,
										965632
									],
									[
										966093,
										966100
									],
									[
										966432,
										966439
									],
									[
										966526,
										966533
									],
									[
										966833,
										966840
									],
									[
										967243,
										967250
									],
									[
										967583,
										967590
									],
									[
										967961,
										967968
									],
									[
										968381,
										968388
									],
									[
										968884,
										968891
									],
									[
										969063,
										969070
									],
									[
										969956,
										969963
									],
									[
										970233,
										970240
									],
									[
										970362,
										970369
									],
									[
										970488,
										970495
									],
									[
										970568,
										970575
									],
									[
										970607,
										970614
									],
									[
										970696,
										970703
									],
									[
										970820,
										970827
									],
									[
										970946,
										970953
									],
									[
										971026,
										971033
									],
									[
										971064,
										971071
									],
									[
										971152,
										971159
									],
									[
										971258,
										971265
									],
									[
										971302,
										971309
									],
									[
										971363,
										971370
									],
									[
										971423,
										971430
									],
									[
										971693,
										971700
									],
									[
										972062,
										972069
									],
									[
										972187,
										972194
									],
									[
										972480,
										972487
									],
									[
										972640,
										972647
									],
									[
										972989,
										972996
									],
									[
										973286,
										973293
									],
									[
										973658,
										973665
									],
									[
										973888,
										973895
									],
									[
										974166,
										974173
									],
									[
										974379,
										974386
									],
									[
										974643,
										974650
									],
									[
										974845,
										974852
									],
									[
										974955,
										974962
									],
									[
										975090,
										975097
									],
									[
										975460,
										975467
									],
									[
										975619,
										975626
									],
									[
										975855,
										975862
									],
									[
										976037,
										976044
									],
									[
										976120,
										976127
									],
									[
										976413,
										976420
									],
									[
										976875,
										976882
									],
									[
										977143,
										977150
									],
									[
										977357,
										977364
									],
									[
										977727,
										977734
									],
									[
										978238,
										978245
									],
									[
										978714,
										978721
									],
									[
										979225,
										979232
									],
									[
										979780,
										979787
									],
									[
										979841,
										979848
									],
									[
										979983,
										979990
									],
									[
										980026,
										980033
									],
									[
										980240,
										980247
									],
									[
										980288,
										980295
									],
									[
										980320,
										980327
									],
									[
										980383,
										980390
									],
									[
										980657,
										980664
									],
									[
										981022,
										981029
									],
									[
										981122,
										981129
									],
									[
										981146,
										981153
									],
									[
										981320,
										981327
									],
									[
										981425,
										981432
									],
									[
										981782,
										981789
									],
									[
										982027,
										982034
									],
									[
										982396,
										982403
									],
									[
										982530,
										982537
									],
									[
										982978,
										982985
									],
									[
										983041,
										983048
									],
									[
										983313,
										983320
									],
									[
										983374,
										983381
									],
									[
										983631,
										983638
									],
									[
										983694,
										983701
									],
									[
										983934,
										983941
									],
									[
										984002,
										984009
									],
									[
										984280,
										984287
									],
									[
										984343,
										984350
									],
									[
										984638,
										984645
									],
									[
										985154,
										985161
									],
									[
										985408,
										985415
									],
									[
										985473,
										985480
									],
									[
										985579,
										985586
									],
									[
										985688,
										985695
									],
									[
										985936,
										985943
									],
									[
										986187,
										986194
									],
									[
										986431,
										986438
									],
									[
										986735,
										986742
									],
									[
										986898,
										986905
									],
									[
										987172,
										987179
									],
									[
										987266,
										987273
									],
									[
										987574,
										987581
									],
									[
										987668,
										987675
									],
									[
										987919,
										987926
									],
									[
										988091,
										988098
									],
									[
										988365,
										988372
									],
									[
										988615,
										988622
									],
									[
										988641,
										988648
									],
									[
										988768,
										988775
									],
									[
										988804,
										988811
									],
									[
										988872,
										988879
									],
									[
										988925,
										988932
									],
									[
										989188,
										989195
									],
									[
										989763,
										989770
									],
									[
										990074,
										990081
									],
									[
										990285,
										990292
									],
									[
										990702,
										990709
									],
									[
										990974,
										990981
									],
									[
										991083,
										991090
									],
									[
										991258,
										991265
									],
									[
										991313,
										991320
									],
									[
										991858,
										991865
									],
									[
										992353,
										992360
									],
									[
										992548,
										992555
									],
									[
										992605,
										992612
									],
									[
										992733,
										992740
									],
									[
										992904,
										992911
									],
									[
										993105,
										993112
									],
									[
										993602,
										993609
									],
									[
										993663,
										993670
									],
									[
										993706,
										993713
									],
									[
										993768,
										993775
									],
									[
										994106,
										994113
									],
									[
										994151,
										994158
									],
									[
										994648,
										994655
									],
									[
										994685,
										994692
									],
									[
										994719,
										994726
									],
									[
										994750,
										994757
									],
									[
										994784,
										994791
									],
									[
										995750,
										995757
									],
									[
										996346,
										996353
									],
									[
										996671,
										996678
									],
									[
										996956,
										996963
									],
									[
										996998,
										997005
									],
									[
										997074,
										997081
									],
									[
										997118,
										997125
									],
									[
										997469,
										997476
									],
									[
										997819,
										997826
									],
									[
										998111,
										998118
									],
									[
										998136,
										998143
									],
									[
										998169,
										998176
									],
									[
										998576,
										998583
									],
									[
										998646,
										998653
									],
									[
										998669,
										998676
									],
									[
										998875,
										998882
									],
									[
										998898,
										998905
									],
									[
										999120,
										999127
									],
									[
										999567,
										999574
									],
									[
										999610,
										999617
									],
									[
										1000102,
										1000109
									],
									[
										1000135,
										1000142
									],
									[
										1000171,
										1000178
									],
									[
										1000516,
										1000523
									],
									[
										1000583,
										1000590
									],
									[
										1000720,
										1000727
									],
									[
										1000920,
										1000927
									],
									[
										1000987,
										1000994
									],
									[
										1001124,
										1001131
									],
									[
										1001329,
										1001336
									],
									[
										1001396,
										1001403
									],
									[
										1001533,
										1001540
									],
									[
										1001754,
										1001761
									],
									[
										1001821,
										1001828
									],
									[
										1001958,
										1001965
									],
									[
										1002161,
										1002168
									],
									[
										1002228,
										1002235
									],
									[
										1002365,
										1002372
									],
									[
										1002418,
										1002425
									],
									[
										1002623,
										1002630
									],
									[
										1002690,
										1002697
									],
									[
										1002827,
										1002834
									],
									[
										1002885,
										1002892
									],
									[
										1003090,
										1003097
									],
									[
										1003157,
										1003164
									],
									[
										1003627,
										1003634
									],
									[
										1003923,
										1003930
									],
									[
										1004048,
										1004055
									],
									[
										1004483,
										1004490
									],
									[
										1004654,
										1004661
									],
									[
										1004689,
										1004696
									],
									[
										1004980,
										1004987
									],
									[
										1005020,
										1005027
									],
									[
										1005352,
										1005359
									],
									[
										1005386,
										1005393
									],
									[
										1005426,
										1005433
									],
									[
										1005722,
										1005729
									],
									[
										1005881,
										1005888
									],
									[
										1005957,
										1005964
									],
									[
										1006205,
										1006212
									],
									[
										1006529,
										1006536
									],
									[
										1007029,
										1007036
									],
									[
										1007353,
										1007360
									],
									[
										1007537,
										1007544
									],
									[
										1007608,
										1007615
									],
									[
										1007860,
										1007867
									],
									[
										1008082,
										1008089
									],
									[
										1008550,
										1008557
									],
									[
										1008582,
										1008589
									],
									[
										1008981,
										1008988
									],
									[
										1009077,
										1009084
									],
									[
										1009150,
										1009157
									],
									[
										1009368,
										1009375
									],
									[
										1009459,
										1009466
									],
									[
										1009621,
										1009628
									],
									[
										1010100,
										1010107
									],
									[
										1010503,
										1010510
									],
									[
										1010595,
										1010602
									],
									[
										1010847,
										1010854
									],
									[
										1010959,
										1010966
									],
									[
										1011171,
										1011178
									],
									[
										1011518,
										1011525
									],
									[
										1011585,
										1011592
									],
									[
										1011635,
										1011642
									],
									[
										1011688,
										1011695
									],
									[
										1011742,
										1011749
									],
									[
										1011792,
										1011799
									],
									[
										1011841,
										1011848
									],
									[
										1012254,
										1012261
									],
									[
										1012706,
										1012713
									],
									[
										1012861,
										1012868
									],
									[
										1013285,
										1013292
									],
									[
										1013788,
										1013795
									],
									[
										1013884,
										1013891
									],
									[
										1014324,
										1014331
									],
									[
										1014420,
										1014427
									],
									[
										1014805,
										1014812
									],
									[
										1015199,
										1015206
									],
									[
										1015720,
										1015727
									],
									[
										1016095,
										1016102
									],
									[
										1016260,
										1016267
									],
									[
										1016374,
										1016381
									],
									[
										1016535,
										1016542
									],
									[
										1016671,
										1016678
									],
									[
										1016943,
										1016950
									],
									[
										1017406,
										1017413
									],
									[
										1017714,
										1017721
									],
									[
										1018077,
										1018084
									],
									[
										1018561,
										1018568
									],
									[
										1018726,
										1018733
									],
									[
										1018769,
										1018776
									],
									[
										1019075,
										1019082
									],
									[
										1019151,
										1019158
									],
									[
										1019403,
										1019410
									],
									[
										1019700,
										1019707
									],
									[
										1020003,
										1020010
									],
									[
										1020256,
										1020263
									],
									[
										1020361,
										1020368
									],
									[
										1020690,
										1020697
									],
									[
										1020903,
										1020910
									],
									[
										1020964,
										1020971
									],
									[
										1021351,
										1021358
									],
									[
										1021447,
										1021454
									],
									[
										1021716,
										1021723
									],
									[
										1021924,
										1021931
									],
									[
										1022156,
										1022163
									],
									[
										1022357,
										1022364
									],
									[
										1022838,
										1022845
									],
									[
										1023398,
										1023405
									],
									[
										1023811,
										1023818
									],
									[
										1024129,
										1024136
									],
									[
										1024494,
										1024501
									],
									[
										1024846,
										1024853
									],
									[
										1025181,
										1025188
									],
									[
										1025622,
										1025629
									],
									[
										1026023,
										1026030
									],
									[
										1026337,
										1026344
									],
									[
										1026368,
										1026375
									],
									[
										1026583,
										1026590
									],
									[
										1026789,
										1026796
									],
									[
										1027113,
										1027120
									],
									[
										1027400,
										1027407
									],
									[
										1027621,
										1027628
									],
									[
										1028182,
										1028189
									],
									[
										1028588,
										1028595
									],
									[
										1028943,
										1028950
									],
									[
										1029206,
										1029213
									],
									[
										1029442,
										1029449
									],
									[
										1029559,
										1029566
									],
									[
										1029773,
										1029780
									],
									[
										1029869,
										1029876
									],
									[
										1030002,
										1030009
									],
									[
										1030200,
										1030207
									],
									[
										1030215,
										1030222
									],
									[
										1030315,
										1030322
									],
									[
										1030445,
										1030452
									],
									[
										1030506,
										1030513
									],
									[
										1030559,
										1030566
									],
									[
										1030615,
										1030622
									],
									[
										1030685,
										1030692
									],
									[
										1030748,
										1030755
									],
									[
										1030905,
										1030912
									],
									[
										1031050,
										1031057
									],
									[
										1031249,
										1031256
									],
									[
										1031264,
										1031271
									],
									[
										1031363,
										1031370
									],
									[
										1031455,
										1031462
									],
									[
										1031652,
										1031659
									],
									[
										1031839,
										1031846
									],
									[
										1031854,
										1031861
									],
									[
										1031963,
										1031970
									],
									[
										1032218,
										1032225
									],
									[
										1032413,
										1032420
									],
									[
										1032583,
										1032590
									],
									[
										1032831,
										1032838
									],
									[
										1032925,
										1032932
									],
									[
										1032987,
										1032994
									],
									[
										1033159,
										1033166
									],
									[
										1033416,
										1033423
									],
									[
										1033815,
										1033822
									],
									[
										1034259,
										1034266
									],
									[
										1034653,
										1034660
									],
									[
										1035074,
										1035081
									],
									[
										1035383,
										1035390
									],
									[
										1035684,
										1035691
									],
									[
										1035852,
										1035859
									],
									[
										1036027,
										1036034
									],
									[
										1036201,
										1036208
									],
									[
										1036759,
										1036766
									],
									[
										1037134,
										1037141
									],
									[
										1037447,
										1037454
									],
									[
										1038100,
										1038107
									],
									[
										1038477,
										1038484
									],
									[
										1038509,
										1038516
									],
									[
										1038877,
										1038884
									],
									[
										1039208,
										1039215
									],
									[
										1039447,
										1039454
									],
									[
										1039481,
										1039488
									],
									[
										1039645,
										1039652
									],
									[
										1039679,
										1039686
									],
									[
										1040050,
										1040057
									],
									[
										1040395,
										1040402
									],
									[
										1040505,
										1040512
									],
									[
										1040535,
										1040542
									],
									[
										1041025,
										1041032
									],
									[
										1041562,
										1041569
									],
									[
										1042001,
										1042008
									],
									[
										1042265,
										1042272
									],
									[
										1042541,
										1042548
									],
									[
										1042581,
										1042588
									],
									[
										1042802,
										1042809
									],
									[
										1043015,
										1043022
									],
									[
										1043127,
										1043134
									],
									[
										1043545,
										1043552
									],
									[
										1043583,
										1043590
									],
									[
										1043664,
										1043671
									],
									[
										1043743,
										1043750
									],
									[
										1043997,
										1044004
									],
									[
										1044306,
										1044313
									],
									[
										1044336,
										1044343
									],
									[
										1044725,
										1044732
									],
									[
										1045101,
										1045108
									],
									[
										1045431,
										1045438
									],
									[
										1045496,
										1045503
									],
									[
										1045772,
										1045779
									],
									[
										1045884,
										1045891
									],
									[
										1046228,
										1046235
									],
									[
										1046402,
										1046409
									],
									[
										1046675,
										1046682
									],
									[
										1046816,
										1046823
									],
									[
										1046998,
										1047005
									],
									[
										1047172,
										1047179
									],
									[
										1047274,
										1047281
									],
									[
										1047335,
										1047342
									],
									[
										1047503,
										1047510
									],
									[
										1047761,
										1047768
									],
									[
										1047830,
										1047837
									],
									[
										1047942,
										1047949
									],
									[
										1048029,
										1048036
									],
									[
										1048315,
										1048322
									],
									[
										1048496,
										1048503
									],
									[
										1048555,
										1048562
									],
									[
										1048712,
										1048719
									],
									[
										1048778,
										1048785
									],
									[
										1049118,
										1049125
									],
									[
										1049257,
										1049264
									],
									[
										1049321,
										1049328
									],
									[
										1049389,
										1049396
									],
									[
										1049516,
										1049523
									],
									[
										1049658,
										1049665
									],
									[
										1049724,
										1049731
									],
									[
										1049794,
										1049801
									],
									[
										1050158,
										1050165
									],
									[
										1050470,
										1050477
									],
									[
										1050759,
										1050766
									],
									[
										1050943,
										1050950
									],
									[
										1051230,
										1051237
									],
									[
										1051451,
										1051458
									],
									[
										1051686,
										1051693
									],
									[
										1051726,
										1051733
									],
									[
										1051826,
										1051833
									],
									[
										1051870,
										1051877
									],
									[
										1051922,
										1051929
									],
									[
										1051981,
										1051988
									],
									[
										1052023,
										1052030
									],
									[
										1052079,
										1052086
									],
									[
										1052315,
										1052322
									],
									[
										1052381,
										1052388
									],
									[
										1052514,
										1052521
									],
									[
										1052801,
										1052808
									],
									[
										1053004,
										1053011
									],
									[
										1053258,
										1053265
									],
									[
										1053403,
										1053410
									],
									[
										1053669,
										1053676
									],
									[
										1053725,
										1053732
									],
									[
										1054126,
										1054133
									],
									[
										1054539,
										1054546
									],
									[
										1054801,
										1054808
									],
									[
										1054965,
										1054972
									],
									[
										1055227,
										1055234
									],
									[
										1055284,
										1055291
									],
									[
										1055510,
										1055517
									],
									[
										1055774,
										1055781
									],
									[
										1056027,
										1056034
									],
									[
										1056366,
										1056373
									],
									[
										1056575,
										1056582
									],
									[
										1056641,
										1056648
									],
									[
										1056749,
										1056756
									],
									[
										1056827,
										1056834
									],
									[
										1057064,
										1057071
									],
									[
										1057226,
										1057233
									],
									[
										1057369,
										1057376
									],
									[
										1057646,
										1057653
									],
									[
										1057687,
										1057694
									],
									[
										1057867,
										1057874
									],
									[
										1057991,
										1057998
									],
									[
										1058228,
										1058235
									],
									[
										1058294,
										1058301
									],
									[
										1058402,
										1058409
									],
									[
										1058480,
										1058487
									],
									[
										1058517,
										1058524
									],
									[
										1058546,
										1058553
									],
									[
										1058785,
										1058792
									],
									[
										1058943,
										1058950
									],
									[
										1059169,
										1059176
									],
									[
										1059379,
										1059386
									],
									[
										1059522,
										1059529
									],
									[
										1059799,
										1059806
									],
									[
										1059840,
										1059847
									],
									[
										1060020,
										1060027
									],
									[
										1060144,
										1060151
									],
									[
										1060461,
										1060468
									],
									[
										1060708,
										1060715
									],
									[
										1061056,
										1061063
									],
									[
										1061308,
										1061315
									],
									[
										1061603,
										1061610
									],
									[
										1062003,
										1062010
									],
									[
										1062363,
										1062370
									],
									[
										1062377,
										1062384
									],
									[
										1062532,
										1062539
									],
									[
										1062735,
										1062742
									],
									[
										1062841,
										1062848
									],
									[
										1063000,
										1063007
									],
									[
										1063259,
										1063266
									],
									[
										1063479,
										1063486
									],
									[
										1063739,
										1063746
									],
									[
										1063873,
										1063880
									],
									[
										1064113,
										1064120
									],
									[
										1064227,
										1064234
									],
									[
										1064499,
										1064506
									],
									[
										1064526,
										1064533
									],
									[
										1064603,
										1064610
									],
									[
										1064808,
										1064815
									],
									[
										1065175,
										1065182
									],
									[
										1065360,
										1065367
									],
									[
										1065728,
										1065735
									],
									[
										1065856,
										1065863
									],
									[
										1065948,
										1065955
									],
									[
										1066141,
										1066148
									],
									[
										1066342,
										1066349
									],
									[
										1066546,
										1066553
									],
									[
										1066806,
										1066813
									],
									[
										1067072,
										1067079
									],
									[
										1067151,
										1067158
									],
									[
										1067167,
										1067174
									],
									[
										1067501,
										1067508
									],
									[
										1067811,
										1067818
									],
									[
										1068130,
										1068137
									],
									[
										1068468,
										1068475
									],
									[
										1068675,
										1068682
									],
									[
										1068885,
										1068892
									],
									[
										1069098,
										1069105
									],
									[
										1069393,
										1069400
									],
									[
										1069596,
										1069603
									],
									[
										1069807,
										1069814
									],
									[
										1070111,
										1070118
									],
									[
										1070290,
										1070297
									],
									[
										1070475,
										1070482
									],
									[
										1070661,
										1070668
									],
									[
										1070928,
										1070935
									],
									[
										1071165,
										1071172
									],
									[
										1071490,
										1071497
									],
									[
										1072002,
										1072009
									],
									[
										1072325,
										1072332
									],
									[
										1072615,
										1072622
									],
									[
										1073048,
										1073055
									],
									[
										1073378,
										1073385
									],
									[
										1073664,
										1073671
									],
									[
										1073976,
										1073983
									],
									[
										1074299,
										1074306
									],
									[
										1074706,
										1074713
									],
									[
										1075131,
										1075138
									],
									[
										1075291,
										1075298
									],
									[
										1075639,
										1075646
									],
									[
										1075927,
										1075934
									],
									[
										1076019,
										1076026
									],
									[
										1076459,
										1076466
									],
									[
										1076763,
										1076770
									],
									[
										1077118,
										1077125
									],
									[
										1077146,
										1077153
									],
									[
										1077388,
										1077395
									],
									[
										1077592,
										1077599
									],
									[
										1077892,
										1077899
									],
									[
										1078104,
										1078111
									],
									[
										1078289,
										1078296
									],
									[
										1078563,
										1078570
									],
									[
										1078851,
										1078858
									],
									[
										1079327,
										1079334
									],
									[
										1079375,
										1079382
									],
									[
										1079439,
										1079446
									],
									[
										1079475,
										1079482
									],
									[
										1079525,
										1079532
									],
									[
										1079566,
										1079573
									],
									[
										1079802,
										1079809
									],
									[
										1080144,
										1080151
									],
									[
										1080246,
										1080253
									],
									[
										1080424,
										1080431
									],
									[
										1080762,
										1080769
									],
									[
										1080816,
										1080823
									],
									[
										1080852,
										1080859
									],
									[
										1080888,
										1080895
									],
									[
										1080935,
										1080942
									],
									[
										1081143,
										1081150
									],
									[
										1081465,
										1081472
									],
									[
										1081696,
										1081703
									],
									[
										1081757,
										1081764
									],
									[
										1082011,
										1082018
									],
									[
										1082216,
										1082223
									],
									[
										1082375,
										1082382
									],
									[
										1082404,
										1082411
									],
									[
										1082430,
										1082437
									],
									[
										1082482,
										1082489
									],
									[
										1082659,
										1082666
									],
									[
										1082887,
										1082894
									],
									[
										1083139,
										1083146
									],
									[
										1083314,
										1083321
									],
									[
										1083557,
										1083564
									],
									[
										1083625,
										1083632
									],
									[
										1083735,
										1083742
									],
									[
										1083867,
										1083874
									],
									[
										1083913,
										1083920
									],
									[
										1084096,
										1084103
									],
									[
										1084129,
										1084136
									],
									[
										1084177,
										1084184
									],
									[
										1084242,
										1084249
									],
									[
										1084625,
										1084632
									],
									[
										1085056,
										1085063
									],
									[
										1085441,
										1085448
									],
									[
										1085473,
										1085480
									],
									[
										1085868,
										1085875
									],
									[
										1086143,
										1086150
									],
									[
										1086423,
										1086430
									],
									[
										1086697,
										1086704
									],
									[
										1086706,
										1086713
									],
									[
										1086978,
										1086985
									],
									[
										1087490,
										1087497
									],
									[
										1087788,
										1087795
									],
									[
										1088128,
										1088135
									],
									[
										1088619,
										1088626
									],
									[
										1089018,
										1089025
									],
									[
										1089350,
										1089357
									],
									[
										1089840,
										1089847
									],
									[
										1090000,
										1090007
									],
									[
										1090170,
										1090177
									],
									[
										1090565,
										1090572
									],
									[
										1090630,
										1090637
									],
									[
										1090747,
										1090754
									],
									[
										1090843,
										1090850
									],
									[
										1091219,
										1091226
									],
									[
										1091603,
										1091610
									],
									[
										1091654,
										1091661
									],
									[
										1091781,
										1091788
									],
									[
										1091975,
										1091982
									],
									[
										1092234,
										1092241
									],
									[
										1092441,
										1092448
									],
									[
										1092888,
										1092895
									],
									[
										1092942,
										1092949
									],
									[
										1093327,
										1093334
									],
									[
										1093546,
										1093553
									],
									[
										1093901,
										1093908
									],
									[
										1094140,
										1094147
									],
									[
										1094355,
										1094362
									],
									[
										1094575,
										1094582
									],
									[
										1094799,
										1094806
									],
									[
										1095238,
										1095245
									],
									[
										1095643,
										1095650
									],
									[
										1095923,
										1095930
									],
									[
										1096249,
										1096256
									],
									[
										1096543,
										1096550
									],
									[
										1096830,
										1096837
									],
									[
										1097182,
										1097189
									],
									[
										1097309,
										1097316
									],
									[
										1097437,
										1097444
									],
									[
										1097550,
										1097557
									],
									[
										1097874,
										1097881
									],
									[
										1098222,
										1098229
									],
									[
										1098529,
										1098536
									],
									[
										1098878,
										1098885
									],
									[
										1099074,
										1099081
									],
									[
										1099405,
										1099412
									],
									[
										1099896,
										1099903
									],
									[
										1100223,
										1100230
									],
									[
										1100255,
										1100262
									],
									[
										1100525,
										1100532
									],
									[
										1100877,
										1100884
									],
									[
										1101179,
										1101186
									],
									[
										1101586,
										1101593
									],
									[
										1101969,
										1101976
									],
									[
										1102380,
										1102387
									],
									[
										1102687,
										1102694
									],
									[
										1102737,
										1102744
									],
									[
										1102787,
										1102794
									],
									[
										1102997,
										1103004
									],
									[
										1103225,
										1103232
									],
									[
										1103330,
										1103337
									],
									[
										1103794,
										1103801
									],
									[
										1104077,
										1104084
									],
									[
										1104342,
										1104349
									],
									[
										1104667,
										1104674
									],
									[
										1104750,
										1104757
									],
									[
										1105010,
										1105017
									],
									[
										1105263,
										1105270
									],
									[
										1105473,
										1105480
									],
									[
										1105658,
										1105665
									],
									[
										1105874,
										1105881
									],
									[
										1106295,
										1106302
									],
									[
										1106674,
										1106681
									],
									[
										1106942,
										1106949
									],
									[
										1107269,
										1107276
									],
									[
										1107618,
										1107625
									],
									[
										1107775,
										1107782
									],
									[
										1108016,
										1108023
									],
									[
										1108231,
										1108238
									],
									[
										1108332,
										1108339
									],
									[
										1108725,
										1108732
									],
									[
										1108756,
										1108763
									],
									[
										1109136,
										1109143
									],
									[
										1109328,
										1109335
									],
									[
										1109740,
										1109747
									],
									[
										1109967,
										1109974
									],
									[
										1110363,
										1110370
									],
									[
										1110646,
										1110653
									],
									[
										1110844,
										1110851
									],
									[
										1111225,
										1111232
									],
									[
										1111666,
										1111673
									],
									[
										1111968,
										1111975
									],
									[
										1112243,
										1112250
									],
									[
										1112519,
										1112526
									],
									[
										1112795,
										1112802
									],
									[
										1113106,
										1113113
									],
									[
										1113395,
										1113402
									],
									[
										1113528,
										1113535
									],
									[
										1113673,
										1113680
									],
									[
										1113828,
										1113835
									],
									[
										1114011,
										1114018
									],
									[
										1114232,
										1114239
									],
									[
										1114465,
										1114472
									],
									[
										1114865,
										1114872
									],
									[
										1115110,
										1115117
									],
									[
										1115386,
										1115393
									],
									[
										1115630,
										1115637
									],
									[
										1116059,
										1116066
									],
									[
										1116372,
										1116379
									],
									[
										1116648,
										1116655
									],
									[
										1116978,
										1116985
									],
									[
										1117294,
										1117301
									],
									[
										1117531,
										1117538
									],
									[
										1117590,
										1117597
									],
									[
										1117865,
										1117872
									],
									[
										1118270,
										1118277
									],
									[
										1118652,
										1118659
									],
									[
										1119013,
										1119020
									],
									[
										1119294,
										1119301
									],
									[
										1119618,
										1119625
									],
									[
										1119935,
										1119942
									],
									[
										1120182,
										1120189
									],
									[
										1120461,
										1120468
									],
									[
										1120747,
										1120754
									],
									[
										1120927,
										1120934
									],
									[
										1120981,
										1120988
									],
									[
										1121148,
										1121155
									],
									[
										1121158,
										1121165
									],
									[
										1121335,
										1121342
									],
									[
										1121684,
										1121691
									],
									[
										1121992,
										1121999
									],
									[
										1122290,
										1122297
									],
									[
										1122594,
										1122601
									],
									[
										1122902,
										1122909
									],
									[
										1123200,
										1123207
									],
									[
										1123504,
										1123511
									],
									[
										1123812,
										1123819
									],
									[
										1124110,
										1124117
									],
									[
										1124414,
										1124421
									],
									[
										1124722,
										1124729
									],
									[
										1125020,
										1125027
									],
									[
										1125324,
										1125331
									],
									[
										1125632,
										1125639
									],
									[
										1125930,
										1125937
									],
									[
										1126234,
										1126241
									],
									[
										1126542,
										1126549
									],
									[
										1126840,
										1126847
									],
									[
										1127163,
										1127170
									],
									[
										1127471,
										1127478
									],
									[
										1127769,
										1127776
									],
									[
										1128160,
										1128167
									],
									[
										1128425,
										1128432
									],
									[
										1128843,
										1128850
									],
									[
										1129294,
										1129301
									],
									[
										1129735,
										1129742
									],
									[
										1130187,
										1130194
									],
									[
										1130636,
										1130643
									],
									[
										1130758,
										1130765
									],
									[
										1131048,
										1131055
									],
									[
										1131118,
										1131125
									],
									[
										1131154,
										1131161
									],
									[
										1131262,
										1131269
									],
									[
										1131288,
										1131295
									],
									[
										1131411,
										1131418
									],
									[
										1131619,
										1131626
									],
									[
										1131631,
										1131638
									],
									[
										1131696,
										1131703
									],
									[
										1132136,
										1132143
									],
									[
										1132590,
										1132597
									],
									[
										1133070,
										1133077
									],
									[
										1133197,
										1133204
									],
									[
										1133325,
										1133332
									],
									[
										1133438,
										1133445
									],
									[
										1133751,
										1133758
									],
									[
										1134185,
										1134192
									],
									[
										1134474,
										1134481
									],
									[
										1134866,
										1134873
									],
									[
										1135161,
										1135168
									],
									[
										1135459,
										1135466
									],
									[
										1135828,
										1135835
									],
									[
										1136085,
										1136092
									],
									[
										1136342,
										1136349
									],
									[
										1136622,
										1136629
									],
									[
										1136798,
										1136805
									],
									[
										1137012,
										1137019
									],
									[
										1137075,
										1137082
									],
									[
										1137285,
										1137292
									],
									[
										1137380,
										1137387
									],
									[
										1137785,
										1137792
									],
									[
										1138210,
										1138217
									],
									[
										1138276,
										1138283
									],
									[
										1138610,
										1138617
									],
									[
										1138663,
										1138670
									],
									[
										1138849,
										1138856
									],
									[
										1139012,
										1139019
									],
									[
										1139333,
										1139340
									],
									[
										1139555,
										1139562
									],
									[
										1139922,
										1139929
									],
									[
										1140398,
										1140405
									],
									[
										1140425,
										1140432
									],
									[
										1140567,
										1140574
									],
									[
										1140675,
										1140682
									],
									[
										1140887,
										1140894
									],
									[
										1141134,
										1141141
									],
									[
										1141255,
										1141262
									],
									[
										1141511,
										1141518
									],
									[
										1141876,
										1141883
									],
									[
										1142041,
										1142048
									],
									[
										1142384,
										1142391
									],
									[
										1142676,
										1142683
									],
									[
										1143048,
										1143055
									],
									[
										1143606,
										1143613
									],
									[
										1144005,
										1144012
									],
									[
										1144020,
										1144027
									],
									[
										1144653,
										1144660
									],
									[
										1145019,
										1145026
									],
									[
										1145236,
										1145243
									],
									[
										1145348,
										1145355
									],
									[
										1145712,
										1145719
									],
									[
										1146196,
										1146203
									],
									[
										1146458,
										1146465
									],
									[
										1146906,
										1146913
									],
									[
										1147292,
										1147299
									],
									[
										1147811,
										1147818
									],
									[
										1148106,
										1148113
									],
									[
										1148319,
										1148326
									],
									[
										1148329,
										1148336
									],
									[
										1148692,
										1148699
									],
									[
										1148924,
										1148931
									],
									[
										1149125,
										1149132
									],
									[
										1149485,
										1149492
									],
									[
										1149718,
										1149725
									],
									[
										1149905,
										1149912
									],
									[
										1150039,
										1150046
									],
									[
										1150210,
										1150217
									],
									[
										1150569,
										1150576
									],
									[
										1150762,
										1150769
									],
									[
										1150913,
										1150920
									],
									[
										1151130,
										1151137
									],
									[
										1151357,
										1151364
									],
									[
										1151585,
										1151592
									],
									[
										1151794,
										1151801
									],
									[
										1152079,
										1152086
									],
									[
										1152295,
										1152302
									],
									[
										1152655,
										1152662
									],
									[
										1152797,
										1152804
									],
									[
										1152922,
										1152929
									],
									[
										1153199,
										1153206
									],
									[
										1153389,
										1153396
									],
									[
										1153690,
										1153697
									],
									[
										1153818,
										1153825
									],
									[
										1154000,
										1154007
									],
									[
										1154148,
										1154155
									],
									[
										1154421,
										1154428
									],
									[
										1154650,
										1154657
									],
									[
										1154927,
										1154934
									],
									[
										1155217,
										1155224
									],
									[
										1155502,
										1155509
									],
									[
										1155807,
										1155814
									],
									[
										1156091,
										1156098
									],
									[
										1156396,
										1156403
									],
									[
										1156680,
										1156687
									],
									[
										1156985,
										1156992
									],
									[
										1157265,
										1157272
									],
									[
										1157570,
										1157577
									],
									[
										1157878,
										1157885
									],
									[
										1158151,
										1158158
									],
									[
										1158520,
										1158527
									],
									[
										1158825,
										1158832
									],
									[
										1159122,
										1159129
									],
									[
										1159418,
										1159425
									],
									[
										1159811,
										1159818
									],
									[
										1160120,
										1160127
									],
									[
										1160596,
										1160603
									],
									[
										1160877,
										1160884
									],
									[
										1161214,
										1161221
									],
									[
										1161474,
										1161481
									],
									[
										1161848,
										1161855
									],
									[
										1162116,
										1162123
									],
									[
										1162392,
										1162399
									],
									[
										1162912,
										1162919
									],
									[
										1163216,
										1163223
									],
									[
										1163494,
										1163501
									],
									[
										1163812,
										1163819
									],
									[
										1164196,
										1164203
									],
									[
										1164493,
										1164500
									],
									[
										1164807,
										1164814
									],
									[
										1165122,
										1165129
									],
									[
										1165426,
										1165433
									],
									[
										1165715,
										1165722
									],
									[
										1166097,
										1166104
									],
									[
										1166411,
										1166420
									],
									[
										1166722,
										1166731
									],
									[
										1167006,
										1167015
									],
									[
										1167226,
										1167235
									],
									[
										1167660,
										1167669
									],
									[
										1167892,
										1167901
									],
									[
										1168221,
										1168230
									],
									[
										1168516,
										1168525
									],
									[
										1168869,
										1168878
									],
									[
										1169075,
										1169084
									],
									[
										1169502,
										1169511
									],
									[
										1169796,
										1169805
									],
									[
										1170054,
										1170063
									],
									[
										1170223,
										1170232
									],
									[
										1170423,
										1170432
									],
									[
										1170686,
										1170695
									],
									[
										1170943,
										1170952
									],
									[
										1171374,
										1171383
									],
									[
										1171655,
										1171664
									],
									[
										1171974,
										1171983
									],
									[
										1172167,
										1172176
									],
									[
										1172259,
										1172268
									],
									[
										1172582,
										1172591
									],
									[
										1172836,
										1172845
									],
									[
										1173123,
										1173132
									],
									[
										1173435,
										1173444
									],
									[
										1173723,
										1173732
									],
									[
										1173931,
										1173940
									],
									[
										1174095,
										1174104
									],
									[
										1174571,
										1174580
									],
									[
										1174914,
										1174923
									],
									[
										1175049,
										1175058
									],
									[
										1175401,
										1175410
									],
									[
										1175712,
										1175721
									],
									[
										1176079,
										1176088
									],
									[
										1176288,
										1176297
									],
									[
										1176691,
										1176700
									],
									[
										1176967,
										1176976
									],
									[
										1177375,
										1177384
									],
									[
										1177616,
										1177625
									],
									[
										1177833,
										1177842
									],
									[
										1177961,
										1177970
									],
									[
										1178142,
										1178151
									],
									[
										1178494,
										1178503
									],
									[
										1178821,
										1178830
									],
									[
										1178973,
										1178982
									],
									[
										1179171,
										1179180
									],
									[
										1179604,
										1179613
									],
									[
										1179927,
										1179936
									],
									[
										1180189,
										1180198
									],
									[
										1180600,
										1180609
									],
									[
										1180824,
										1180833
									],
									[
										1180944,
										1180953
									],
									[
										1181081,
										1181090
									],
									[
										1181296,
										1181305
									],
									[
										1181474,
										1181483
									],
									[
										1181758,
										1181767
									],
									[
										1182092,
										1182101
									],
									[
										1182545,
										1182554
									],
									[
										1182877,
										1182886
									],
									[
										1183022,
										1183031
									],
									[
										1183154,
										1183163
									],
									[
										1183515,
										1183524
									],
									[
										1183853,
										1183862
									],
									[
										1184030,
										1184039
									],
									[
										1184177,
										1184186
									],
									[
										1184462,
										1184471
									],
									[
										1184748,
										1184757
									],
									[
										1184917,
										1184926
									],
									[
										1185178,
										1185187
									],
									[
										1185404,
										1185413
									],
									[
										1185758,
										1185767
									],
									[
										1186094,
										1186103
									],
									[
										1186446,
										1186455
									],
									[
										1186745,
										1186754
									],
									[
										1186920,
										1186929
									],
									[
										1187271,
										1187280
									],
									[
										1187612,
										1187621
									],
									[
										1187773,
										1187782
									],
									[
										1188130,
										1188139
									],
									[
										1188456,
										1188465
									],
									[
										1188647,
										1188656
									],
									[
										1189005,
										1189014
									],
									[
										1189299,
										1189308
									],
									[
										1189453,
										1189462
									],
									[
										1189694,
										1189703
									],
									[
										1189903,
										1189912
									],
									[
										1190051,
										1190060
									],
									[
										1190327,
										1190336
									],
									[
										1190588,
										1190597
									],
									[
										1190901,
										1190910
									],
									[
										1191153,
										1191162
									],
									[
										1191472,
										1191481
									],
									[
										1191744,
										1191753
									],
									[
										1191960,
										1191969
									],
									[
										1192164,
										1192173
									],
									[
										1192479,
										1192488
									],
									[
										1192798,
										1192807
									],
									[
										1192952,
										1192961
									],
									[
										1193171,
										1193180
									],
									[
										1193320,
										1193329
									],
									[
										1193537,
										1193546
									],
									[
										1193688,
										1193697
									],
									[
										1193922,
										1193931
									],
									[
										1194151,
										1194160
									],
									[
										1194219,
										1194228
									],
									[
										1194485,
										1194494
									],
									[
										1194751,
										1194760
									],
									[
										1195071,
										1195080
									],
									[
										1195325,
										1195334
									],
									[
										1195638,
										1195647
									],
									[
										1195996,
										1196005
									],
									[
										1196193,
										1196202
									],
									[
										1196275,
										1196284
									],
									[
										1196486,
										1196495
									],
									[
										1196928,
										1196937
									],
									[
										1196989,
										1196998
									],
									[
										1197211,
										1197220
									],
									[
										1197491,
										1197500
									],
									[
										1197871,
										1197880
									],
									[
										1198169,
										1198178
									],
									[
										1198476,
										1198485
									],
									[
										1198846,
										1198855
									],
									[
										1199081,
										1199090
									],
									[
										1199199,
										1199208
									],
									[
										1199580,
										1199589
									],
									[
										1199954,
										1199963
									],
									[
										1200059,
										1200068
									],
									[
										1200653,
										1200662
									],
									[
										1200822,
										1200831
									],
									[
										1201107,
										1201116
									],
									[
										1201277,
										1201286
									],
									[
										1201557,
										1201566
									],
									[
										1201829,
										1201838
									],
									[
										1202009,
										1202018
									],
									[
										1202336,
										1202345
									],
									[
										1202532,
										1202541
									],
									[
										1202879,
										1202888
									],
									[
										1203171,
										1203180
									],
									[
										1203272,
										1203281
									],
									[
										1203575,
										1203584
									],
									[
										1203801,
										1203810
									],
									[
										1204164,
										1204173
									],
									[
										1204557,
										1204566
									],
									[
										1204736,
										1204745
									],
									[
										1205209,
										1205218
									],
									[
										1205482,
										1205491
									],
									[
										1205634,
										1205643
									],
									[
										1205933,
										1205942
									],
									[
										1206386,
										1206395
									],
									[
										1206597,
										1206606
									],
									[
										1206885,
										1206894
									],
									[
										1207143,
										1207152
									],
									[
										1207290,
										1207299
									],
									[
										1207702,
										1207711
									],
									[
										1207953,
										1207962
									],
									[
										1208301,
										1208310
									],
									[
										1208516,
										1208525
									],
									[
										1208837,
										1208846
									],
									[
										1209133,
										1209142
									],
									[
										1209435,
										1209444
									],
									[
										1209693,
										1209702
									],
									[
										1209939,
										1209948
									],
									[
										1210161,
										1210170
									],
									[
										1210572,
										1210581
									],
									[
										1210957,
										1210966
									],
									[
										1211279,
										1211288
									],
									[
										1211443,
										1211452
									],
									[
										1211736,
										1211745
									],
									[
										1212110,
										1212119
									],
									[
										1212421,
										1212430
									],
									[
										1212721,
										1212730
									],
									[
										1212948,
										1212957
									],
									[
										1213307,
										1213316
									],
									[
										1213575,
										1213584
									],
									[
										1213839,
										1213848
									],
									[
										1214064,
										1214073
									],
									[
										1214517,
										1214526
									],
									[
										1214936,
										1214945
									],
									[
										1215242,
										1215251
									],
									[
										1215606,
										1215615
									],
									[
										1215796,
										1215805
									],
									[
										1216026,
										1216035
									],
									[
										1216204,
										1216213
									],
									[
										1216497,
										1216506
									],
									[
										1216826,
										1216835
									],
									[
										1216916,
										1216925
									],
									[
										1217090,
										1217099
									],
									[
										1217406,
										1217415
									],
									[
										1217503,
										1217512
									],
									[
										1217889,
										1217898
									],
									[
										1218161,
										1218170
									],
									[
										1218212,
										1218221
									],
									[
										1218557,
										1218566
									],
									[
										1218927,
										1218936
									],
									[
										1219236,
										1219245
									],
									[
										1219545,
										1219554
									],
									[
										1219647,
										1219656
									],
									[
										1219752,
										1219761
									],
									[
										1220009,
										1220018
									],
									[
										1220103,
										1220112
									],
									[
										1220251,
										1220260
									],
									[
										1220569,
										1220578
									],
									[
										1220804,
										1220813
									],
									[
										1221145,
										1221154
									],
									[
										1221421,
										1221430
									],
									[
										1221669,
										1221678
									],
									[
										1221975,
										1221984
									],
									[
										1222362,
										1222371
									],
									[
										1222620,
										1222629
									],
									[
										1222873,
										1222882
									],
									[
										1223243,
										1223252
									],
									[
										1223665,
										1223674
									],
									[
										1223773,
										1223782
									],
									[
										1224126,
										1224135
									],
									[
										1224490,
										1224499
									],
									[
										1224953,
										1224962
									],
									[
										1225211,
										1225220
									],
									[
										1225408,
										1225417
									],
									[
										1225639,
										1225648
									],
									[
										1225887,
										1225896
									],
									[
										1226153,
										1226162
									],
									[
										1226356,
										1226365
									],
									[
										1226649,
										1226658
									],
									[
										1226946,
										1226955
									],
									[
										1227413,
										1227422
									],
									[
										1227624,
										1227633
									],
									[
										1228050,
										1228059
									],
									[
										1228463,
										1228472
									],
									[
										1228549,
										1228558
									],
									[
										1228814,
										1228823
									],
									[
										1229213,
										1229222
									],
									[
										1229643,
										1229652
									],
									[
										1229924,
										1229933
									],
									[
										1230208,
										1230217
									],
									[
										1230586,
										1230595
									],
									[
										1230955,
										1230964
									],
									[
										1231413,
										1231422
									],
									[
										1231811,
										1231820
									],
									[
										1232192,
										1232201
									],
									[
										1232491,
										1232500
									],
									[
										1232759,
										1232768
									],
									[
										1233067,
										1233076
									],
									[
										1233392,
										1233401
									],
									[
										1233666,
										1233675
									],
									[
										1233892,
										1233901
									],
									[
										1234291,
										1234300
									],
									[
										1234390,
										1234399
									],
									[
										1234862,
										1234871
									],
									[
										1235083,
										1235092
									],
									[
										1235391,
										1235400
									],
									[
										1235632,
										1235641
									],
									[
										1235864,
										1235873
									],
									[
										1236114,
										1236123
									],
									[
										1236222,
										1236231
									],
									[
										1236526,
										1236535
									],
									[
										1236721,
										1236730
									],
									[
										1236981,
										1236990
									],
									[
										1237109,
										1237118
									],
									[
										1237524,
										1237533
									],
									[
										1237673,
										1237682
									],
									[
										1237967,
										1237976
									],
									[
										1238213,
										1238222
									],
									[
										1238550,
										1238559
									],
									[
										1238791,
										1238800
									],
									[
										1238882,
										1238891
									],
									[
										1239126,
										1239135
									],
									[
										1239511,
										1239520
									],
									[
										1239836,
										1239845
									],
									[
										1239968,
										1239977
									],
									[
										1240319,
										1240328
									],
									[
										1240653,
										1240662
									],
									[
										1240967,
										1240976
									],
									[
										1241332,
										1241341
									],
									[
										1241636,
										1241645
									],
									[
										1241966,
										1241975
									],
									[
										1242229,
										1242238
									],
									[
										1242542,
										1242551
									],
									[
										1242686,
										1242695
									],
									[
										1243074,
										1243083
									],
									[
										1243373,
										1243382
									],
									[
										1243702,
										1243711
									],
									[
										1244066,
										1244075
									],
									[
										1244396,
										1244405
									],
									[
										1244517,
										1244526
									],
									[
										1244692,
										1244701
									],
									[
										1244824,
										1244833
									],
									[
										1245132,
										1245141
									],
									[
										1245385,
										1245394
									],
									[
										1245627,
										1245636
									],
									[
										1245900,
										1245909
									],
									[
										1246236,
										1246245
									],
									[
										1246428,
										1246437
									],
									[
										1246820,
										1246829
									],
									[
										1247082,
										1247091
									],
									[
										1247289,
										1247298
									],
									[
										1247612,
										1247621
									],
									[
										1248041,
										1248050
									],
									[
										1248313,
										1248322
									],
									[
										1248618,
										1248627
									],
									[
										1248748,
										1248757
									],
									[
										1249044,
										1249053
									],
									[
										1249347,
										1249356
									],
									[
										1249672,
										1249681
									],
									[
										1250029,
										1250038
									],
									[
										1250376,
										1250385
									],
									[
										1250683,
										1250692
									],
									[
										1250825,
										1250834
									],
									[
										1251092,
										1251101
									],
									[
										1251244,
										1251253
									],
									[
										1251525,
										1251534
									],
									[
										1251902,
										1251911
									],
									[
										1252024,
										1252033
									],
									[
										1252217,
										1252226
									],
									[
										1252689,
										1252698
									],
									[
										1253045,
										1253054
									],
									[
										1253444,
										1253453
									],
									[
										1253665,
										1253674
									],
									[
										1254072,
										1254081
									],
									[
										1254526,
										1254535
									],
									[
										1254911,
										1254920
									],
									[
										1255384,
										1255393
									],
									[
										1255746,
										1255755
									],
									[
										1255786,
										1255795
									],
									[
										1256114,
										1256123
									],
									[
										1256490,
										1256499
									],
									[
										1256825,
										1256834
									],
									[
										1257193,
										1257202
									],
									[
										1257626,
										1257635
									],
									[
										1257932,
										1257941
									],
									[
										1258202,
										1258211
									],
									[
										1258496,
										1258505
									],
									[
										1258996,
										1259005
									],
									[
										1259268,
										1259277
									],
									[
										1259675,
										1259684
									],
									[
										1259813,
										1259822
									],
									[
										1260225,
										1260234
									],
									[
										1260397,
										1260406
									],
									[
										1260703,
										1260712
									],
									[
										1261079,
										1261088
									],
									[
										1261319,
										1261328
									],
									[
										1261573,
										1261582
									],
									[
										1261912,
										1261921
									],
									[
										1262215,
										1262224
									],
									[
										1262576,
										1262585
									],
									[
										1262754,
										1262763
									],
									[
										1263248,
										1263257
									],
									[
										1263669,
										1263678
									],
									[
										1263994,
										1264003
									],
									[
										1264296,
										1264305
									],
									[
										1264658,
										1264667
									],
									[
										1264769,
										1264778
									],
									[
										1265004,
										1265013
									],
									[
										1265232,
										1265241
									],
									[
										1265528,
										1265537
									],
									[
										1265826,
										1265835
									],
									[
										1265840,
										1265849
									],
									[
										1265906,
										1265915
									],
									[
										1266235,
										1266244
									],
									[
										1266441,
										1266450
									],
									[
										1266712,
										1266721
									],
									[
										1267044,
										1267053
									],
									[
										1267282,
										1267291
									],
									[
										1267623,
										1267632
									],
									[
										1267782,
										1267791
									],
									[
										1268055,
										1268064
									],
									[
										1268234,
										1268243
									],
									[
										1268494,
										1268503
									],
									[
										1268668,
										1268677
									],
									[
										1268896,
										1268905
									],
									[
										1269144,
										1269153
									],
									[
										1269461,
										1269470
									],
									[
										1269641,
										1269650
									],
									[
										1269805,
										1269814
									],
									[
										1270145,
										1270154
									],
									[
										1270393,
										1270402
									],
									[
										1270820,
										1270829
									],
									[
										1271059,
										1271068
									],
									[
										1271232,
										1271241
									],
									[
										1271559,
										1271568
									],
									[
										1271800,
										1271809
									],
									[
										1272076,
										1272085
									],
									[
										1272422,
										1272431
									],
									[
										1272708,
										1272717
									],
									[
										1272974,
										1272983
									],
									[
										1273344,
										1273353
									],
									[
										1273665,
										1273674
									],
									[
										1274090,
										1274099
									],
									[
										1274360,
										1274369
									],
									[
										1274452,
										1274461
									],
									[
										1274609,
										1274618
									],
									[
										1274896,
										1274905
									],
									[
										1275314,
										1275323
									],
									[
										1275588,
										1275597
									],
									[
										1275736,
										1275745
									],
									[
										1275992,
										1276001
									],
									[
										1276237,
										1276246
									],
									[
										1276478,
										1276487
									],
									[
										1276787,
										1276796
									],
									[
										1277096,
										1277105
									],
									[
										1277389,
										1277398
									],
									[
										1277698,
										1277707
									],
									[
										1277990,
										1277999
									],
									[
										1278369,
										1278378
									],
									[
										1278615,
										1278624
									],
									[
										1278964,
										1278973
									],
									[
										1279381,
										1279390
									],
									[
										1279638,
										1279647
									],
									[
										1279910,
										1279919
									],
									[
										1280116,
										1280125
									],
									[
										1280622,
										1280631
									],
									[
										1280952,
										1280961
									],
									[
										1281041,
										1281050
									],
									[
										1281329,
										1281338
									],
									[
										1281623,
										1281632
									],
									[
										1282076,
										1282085
									],
									[
										1282287,
										1282296
									],
									[
										1282644,
										1282653
									],
									[
										1283094,
										1283103
									],
									[
										1283300,
										1283309
									],
									[
										1283685,
										1283694
									],
									[
										1283878,
										1283887
									],
									[
										1284216,
										1284225
									],
									[
										1284321,
										1284330
									],
									[
										1284662,
										1284671
									],
									[
										1284964,
										1284973
									],
									[
										1285103,
										1285112
									],
									[
										1285485,
										1285494
									],
									[
										1285850,
										1285859
									],
									[
										1286112,
										1286121
									],
									[
										1286504,
										1286513
									],
									[
										1286827,
										1286836
									],
									[
										1287132,
										1287141
									],
									[
										1287215,
										1287224
									],
									[
										1287407,
										1287416
									],
									[
										1287746,
										1287755
									],
									[
										1288023,
										1288032
									],
									[
										1288400,
										1288409
									],
									[
										1288724,
										1288733
									],
									[
										1288952,
										1288961
									],
									[
										1289182,
										1289191
									],
									[
										1289441,
										1289450
									],
									[
										1289688,
										1289697
									],
									[
										1290007,
										1290016
									],
									[
										1290217,
										1290226
									],
									[
										1290535,
										1290544
									],
									[
										1290895,
										1290904
									],
									[
										1291135,
										1291144
									],
									[
										1291362,
										1291371
									],
									[
										1291713,
										1291722
									],
									[
										1292046,
										1292055
									],
									[
										1292367,
										1292376
									],
									[
										1292777,
										1292786
									],
									[
										1293063,
										1293072
									],
									[
										1293639,
										1293648
									],
									[
										1293900,
										1293909
									],
									[
										1294316,
										1294325
									],
									[
										1294751,
										1294760
									],
									[
										1295148,
										1295157
									],
									[
										1295482,
										1295491
									],
									[
										1295916,
										1295925
									],
									[
										1296190,
										1296199
									],
									[
										1296461,
										1296470
									],
									[
										1296785,
										1296794
									],
									[
										1297061,
										1297070
									],
									[
										1297295,
										1297304
									],
									[
										1297548,
										1297557
									],
									[
										1297799,
										1297808
									],
									[
										1297857,
										1297866
									],
									[
										1298107,
										1298116
									],
									[
										1298346,
										1298355
									],
									[
										1298405,
										1298414
									],
									[
										1298499,
										1298508
									],
									[
										1298846,
										1298855
									],
									[
										1299053,
										1299062
									],
									[
										1299297,
										1299306
									],
									[
										1299505,
										1299514
									],
									[
										1299903,
										1299912
									],
									[
										1300274,
										1300283
									],
									[
										1300569,
										1300578
									],
									[
										1300795,
										1300804
									],
									[
										1301071,
										1301080
									],
									[
										1301308,
										1301317
									],
									[
										1301686,
										1301695
									],
									[
										1301987,
										1301996
									],
									[
										1302139,
										1302148
									],
									[
										1302601,
										1302610
									],
									[
										1302826,
										1302835
									],
									[
										1303239,
										1303248
									],
									[
										1303468,
										1303477
									],
									[
										1303849,
										1303858
									],
									[
										1304290,
										1304299
									],
									[
										1304454,
										1304463
									],
									[
										1304617,
										1304626
									],
									[
										1304941,
										1304950
									],
									[
										1305099,
										1305108
									],
									[
										1305374,
										1305383
									],
									[
										1305815,
										1305824
									],
									[
										1306264,
										1306273
									],
									[
										1306613,
										1306622
									],
									[
										1306835,
										1306844
									],
									[
										1307181,
										1307190
									],
									[
										1307635,
										1307644
									],
									[
										1308222,
										1308231
									],
									[
										1308402,
										1308411
									],
									[
										1308585,
										1308594
									],
									[
										1308773,
										1308782
									],
									[
										1308960,
										1308969
									],
									[
										1309372,
										1309381
									],
									[
										1309654,
										1309663
									],
									[
										1309776,
										1309785
									],
									[
										1310264,
										1310273
									],
									[
										1310394,
										1310403
									],
									[
										1310720,
										1310729
									],
									[
										1311045,
										1311054
									],
									[
										1311400,
										1311409
									],
									[
										1311698,
										1311707
									],
									[
										1312031,
										1312040
									],
									[
										1312364,
										1312373
									],
									[
										1312453,
										1312462
									],
									[
										1312667,
										1312676
									],
									[
										1312911,
										1312920
									],
									[
										1313185,
										1313194
									],
									[
										1313427,
										1313436
									],
									[
										1313561,
										1313570
									],
									[
										1313807,
										1313816
									],
									[
										1314099,
										1314108
									],
									[
										1314441,
										1314450
									],
									[
										1314519,
										1314528
									],
									[
										1314769,
										1314778
									],
									[
										1314848,
										1314857
									],
									[
										1315211,
										1315220
									],
									[
										1315402,
										1315411
									],
									[
										1315470,
										1315479
									],
									[
										1315692,
										1315701
									],
									[
										1315760,
										1315769
									],
									[
										1315933,
										1315942
									],
									[
										1316128,
										1316137
									],
									[
										1316446,
										1316455
									],
									[
										1316648,
										1316657
									],
									[
										1316787,
										1316796
									],
									[
										1316979,
										1316988
									],
									[
										1317253,
										1317262
									],
									[
										1317538,
										1317547
									],
									[
										1317812,
										1317821
									],
									[
										1318076,
										1318085
									],
									[
										1318210,
										1318219
									],
									[
										1318375,
										1318384
									],
									[
										1318523,
										1318532
									],
									[
										1318761,
										1318770
									],
									[
										1318878,
										1318887
									],
									[
										1319094,
										1319103
									],
									[
										1319367,
										1319376
									],
									[
										1319501,
										1319510
									],
									[
										1319636,
										1319645
									],
									[
										1319784,
										1319793
									],
									[
										1320065,
										1320074
									],
									[
										1320199,
										1320208
									],
									[
										1320415,
										1320424
									],
									[
										1320570,
										1320579
									],
									[
										1320726,
										1320735
									],
									[
										1320882,
										1320891
									],
									[
										1321037,
										1321046
									],
									[
										1321277,
										1321286
									],
									[
										1321374,
										1321383
									],
									[
										1321472,
										1321481
									],
									[
										1321570,
										1321579
									],
									[
										1321671,
										1321680
									],
									[
										1321901,
										1321910
									],
									[
										1321998,
										1322007
									],
									[
										1322096,
										1322105
									],
									[
										1322194,
										1322203
									],
									[
										1322295,
										1322304
									],
									[
										1322566,
										1322575
									],
									[
										1322663,
										1322672
									],
									[
										1322761,
										1322770
									],
									[
										1322859,
										1322868
									],
									[
										1323079,
										1323088
									],
									[
										1323242,
										1323251
									],
									[
										1323451,
										1323460
									],
									[
										1323614,
										1323623
									],
									[
										1323846,
										1323855
									],
									[
										1323976,
										1323985
									],
									[
										1324283,
										1324292
									],
									[
										1324474,
										1324483
									],
									[
										1324542,
										1324551
									],
									[
										1324764,
										1324773
									],
									[
										1324832,
										1324841
									],
									[
										1325005,
										1325014
									],
									[
										1325200,
										1325209
									],
									[
										1325518,
										1325527
									],
									[
										1325777,
										1325786
									],
									[
										1325863,
										1325872
									],
									[
										1326118,
										1326127
									],
									[
										1326319,
										1326328
									],
									[
										1326458,
										1326467
									],
									[
										1326716,
										1326725
									],
									[
										1326850,
										1326859
									],
									[
										1327015,
										1327024
									],
									[
										1327163,
										1327172
									],
									[
										1327418,
										1327427
									],
									[
										1327535,
										1327544
									],
									[
										1327778,
										1327787
									],
									[
										1328074,
										1328083
									],
									[
										1328208,
										1328217
									],
									[
										1328343,
										1328352
									],
									[
										1328491,
										1328500
									],
									[
										1328772,
										1328781
									],
									[
										1328906,
										1328915
									],
									[
										1329163,
										1329172
									],
									[
										1329318,
										1329327
									],
									[
										1329474,
										1329483
									],
									[
										1329630,
										1329639
									],
									[
										1329785,
										1329794
									],
									[
										1330046,
										1330055
									],
									[
										1330143,
										1330152
									],
									[
										1330241,
										1330250
									],
									[
										1330339,
										1330348
									],
									[
										1330440,
										1330449
									],
									[
										1330690,
										1330699
									],
									[
										1330787,
										1330796
									],
									[
										1330885,
										1330894
									],
									[
										1330983,
										1330992
									],
									[
										1331084,
										1331093
									],
									[
										1331355,
										1331364
									],
									[
										1331452,
										1331461
									],
									[
										1331550,
										1331559
									],
									[
										1331648,
										1331657
									],
									[
										1331892,
										1331901
									],
									[
										1332055,
										1332064
									],
									[
										1332268,
										1332277
									],
									[
										1332396,
										1332405
									],
									[
										1332628,
										1332637
									],
									[
										1332758,
										1332767
									],
									[
										1333027,
										1333036
									],
									[
										1333309,
										1333318
									],
									[
										1333663,
										1333672
									],
									[
										1333903,
										1333912
									],
									[
										1334136,
										1334145
									],
									[
										1334159,
										1334168
									],
									[
										1334340,
										1334349
									],
									[
										1334363,
										1334372
									],
									[
										1334539,
										1334548
									],
									[
										1334562,
										1334571
									],
									[
										1334801,
										1334810
									],
									[
										1335016,
										1335025
									],
									[
										1335311,
										1335320
									],
									[
										1335580,
										1335589
									],
									[
										1335835,
										1335844
									],
									[
										1336051,
										1336060
									],
									[
										1336225,
										1336234
									],
									[
										1336461,
										1336470
									],
									[
										1336701,
										1336710
									],
									[
										1336775,
										1336784
									],
									[
										1336933,
										1336942
									],
									[
										1337109,
										1337118
									],
									[
										1337283,
										1337292
									],
									[
										1337459,
										1337468
									],
									[
										1337633,
										1337642
									],
									[
										1337809,
										1337818
									],
									[
										1337983,
										1337992
									],
									[
										1338159,
										1338168
									],
									[
										1338333,
										1338342
									],
									[
										1338509,
										1338518
									],
									[
										1338683,
										1338692
									],
									[
										1338859,
										1338868
									],
									[
										1339042,
										1339051
									],
									[
										1339224,
										1339233
									],
									[
										1339400,
										1339409
									],
									[
										1339574,
										1339583
									],
									[
										1339750,
										1339759
									],
									[
										1339929,
										1339938
									],
									[
										1340105,
										1340114
									],
									[
										1340279,
										1340288
									],
									[
										1340455,
										1340464
									],
									[
										1340629,
										1340638
									],
									[
										1340805,
										1340814
									],
									[
										1341038,
										1341047
									],
									[
										1341214,
										1341223
									],
									[
										1341398,
										1341407
									],
									[
										1341598,
										1341607
									],
									[
										1341799,
										1341808
									],
									[
										1341982,
										1341991
									],
									[
										1342301,
										1342310
									],
									[
										1342728,
										1342737
									],
									[
										1343055,
										1343064
									],
									[
										1343478,
										1343487
									],
									[
										1343744,
										1343753
									],
									[
										1343974,
										1343983
									],
									[
										1344167,
										1344176
									],
									[
										1344538,
										1344547
									],
									[
										1344788,
										1344797
									],
									[
										1345045,
										1345054
									],
									[
										1345365,
										1345374
									],
									[
										1345641,
										1345650
									],
									[
										1346007,
										1346016
									],
									[
										1346239,
										1346248
									],
									[
										1346486,
										1346495
									],
									[
										1346663,
										1346672
									],
									[
										1346834,
										1346843
									],
									[
										1347093,
										1347102
									],
									[
										1347351,
										1347360
									],
									[
										1347610,
										1347619
									],
									[
										1347873,
										1347882
									],
									[
										1347991,
										1348000
									],
									[
										1348260,
										1348269
									],
									[
										1348528,
										1348537
									],
									[
										1348882,
										1348891
									],
									[
										1349022,
										1349031
									],
									[
										1349328,
										1349337
									],
									[
										1349652,
										1349661
									],
									[
										1349913,
										1349922
									],
									[
										1350134,
										1350143
									],
									[
										1350408,
										1350417
									],
									[
										1350635,
										1350644
									],
									[
										1350860,
										1350869
									],
									[
										1351139,
										1351148
									],
									[
										1351438,
										1351447
									],
									[
										1351855,
										1351864
									],
									[
										1352298,
										1352307
									],
									[
										1352635,
										1352644
									],
									[
										1352927,
										1352936
									],
									[
										1353141,
										1353150
									],
									[
										1353365,
										1353374
									],
									[
										1353542,
										1353551
									],
									[
										1353879,
										1353888
									],
									[
										1354101,
										1354110
									],
									[
										1354426,
										1354435
									],
									[
										1354755,
										1354764
									],
									[
										1354974,
										1354983
									],
									[
										1355229,
										1355238
									],
									[
										1355557,
										1355566
									],
									[
										1355847,
										1355856
									],
									[
										1356255,
										1356264
									],
									[
										1356578,
										1356587
									],
									[
										1356918,
										1356927
									],
									[
										1357357,
										1357366
									],
									[
										1357780,
										1357789
									],
									[
										1357928,
										1357937
									],
									[
										1358178,
										1358187
									],
									[
										1358376,
										1358385
									],
									[
										1358735,
										1358744
									],
									[
										1359043,
										1359052
									],
									[
										1359322,
										1359331
									],
									[
										1359635,
										1359644
									],
									[
										1359913,
										1359922
									],
									[
										1360248,
										1360257
									],
									[
										1360562,
										1360571
									],
									[
										1360930,
										1360939
									],
									[
										1361166,
										1361175
									],
									[
										1361462,
										1361471
									],
									[
										1361548,
										1361557
									],
									[
										1361781,
										1361790
									],
									[
										1361969,
										1361978
									],
									[
										1362405,
										1362414
									],
									[
										1362502,
										1362511
									],
									[
										1362853,
										1362862
									],
									[
										1363312,
										1363321
									],
									[
										1363651,
										1363660
									],
									[
										1363947,
										1363956
									],
									[
										1364100,
										1364109
									],
									[
										1364369,
										1364378
									],
									[
										1364608,
										1364617
									],
									[
										1364709,
										1364718
									],
									[
										1364813,
										1364822
									],
									[
										1364915,
										1364924
									],
									[
										1365016,
										1365025
									],
									[
										1365119,
										1365128
									],
									[
										1365223,
										1365232
									],
									[
										1365329,
										1365338
									],
									[
										1365436,
										1365445
									],
									[
										1365550,
										1365559
									],
									[
										1365893,
										1365902
									],
									[
										1366247,
										1366256
									],
									[
										1366412,
										1366421
									],
									[
										1366962,
										1366971
									],
									[
										1367224,
										1367233
									],
									[
										1367564,
										1367573
									],
									[
										1367915,
										1367924
									],
									[
										1368074,
										1368083
									],
									[
										1368445,
										1368454
									],
									[
										1368644,
										1368653
									],
									[
										1368729,
										1368738
									],
									[
										1368997,
										1369006
									],
									[
										1369517,
										1369526
									],
									[
										1369784,
										1369793
									],
									[
										1370017,
										1370026
									],
									[
										1370199,
										1370208
									],
									[
										1370644,
										1370653
									],
									[
										1370864,
										1370873
									],
									[
										1371212,
										1371221
									],
									[
										1371587,
										1371596
									],
									[
										1371946,
										1371955
									],
									[
										1372189,
										1372198
									],
									[
										1372517,
										1372526
									],
									[
										1372914,
										1372923
									],
									[
										1373304,
										1373313
									],
									[
										1373600,
										1373609
									],
									[
										1373878,
										1373887
									],
									[
										1374192,
										1374201
									],
									[
										1374537,
										1374546
									],
									[
										1374762,
										1374771
									],
									[
										1375066,
										1375075
									],
									[
										1375346,
										1375355
									],
									[
										1375556,
										1375565
									],
									[
										1375900,
										1375909
									],
									[
										1376148,
										1376157
									],
									[
										1376337,
										1376346
									],
									[
										1376619,
										1376628
									],
									[
										1376888,
										1376897
									],
									[
										1377127,
										1377136
									],
									[
										1377276,
										1377285
									],
									[
										1377509,
										1377518
									],
									[
										1377764,
										1377773
									],
									[
										1378128,
										1378137
									],
									[
										1378423,
										1378432
									],
									[
										1378803,
										1378812
									],
									[
										1379234,
										1379243
									],
									[
										1379504,
										1379513
									],
									[
										1379898,
										1379907
									],
									[
										1380159,
										1380168
									],
									[
										1380516,
										1380525
									],
									[
										1380942,
										1380951
									],
									[
										1381182,
										1381191
									],
									[
										1381505,
										1381514
									],
									[
										1381881,
										1381890
									],
									[
										1382143,
										1382152
									],
									[
										1382338,
										1382347
									],
									[
										1382652,
										1382661
									],
									[
										1382925,
										1382934
									],
									[
										1383346,
										1383355
									],
									[
										1383557,
										1383566
									],
									[
										1383847,
										1383856
									],
									[
										1384017,
										1384026
									],
									[
										1384324,
										1384333
									],
									[
										1384501,
										1384510
									],
									[
										1384890,
										1384899
									],
									[
										1385176,
										1385185
									],
									[
										1385445,
										1385454
									],
									[
										1385619,
										1385628
									],
									[
										1385943,
										1385952
									],
									[
										1386202,
										1386211
									],
									[
										1386326,
										1386335
									],
									[
										1386714,
										1386723
									],
									[
										1386803,
										1386812
									],
									[
										1387128,
										1387137
									],
									[
										1387341,
										1387350
									],
									[
										1387605,
										1387614
									],
									[
										1387690,
										1387699
									],
									[
										1387775,
										1387784
									],
									[
										1387855,
										1387864
									],
									[
										1387935,
										1387944
									],
									[
										1388232,
										1388241
									],
									[
										1388646,
										1388655
									],
									[
										1389044,
										1389053
									],
									[
										1389177,
										1389186
									],
									[
										1389449,
										1389458
									],
									[
										1389608,
										1389617
									],
									[
										1389987,
										1389996
									],
									[
										1390158,
										1390167
									],
									[
										1390445,
										1390454
									],
									[
										1390664,
										1390673
									],
									[
										1390788,
										1390797
									],
									[
										1391143,
										1391152
									],
									[
										1391525,
										1391534
									],
									[
										1391783,
										1391792
									],
									[
										1392061,
										1392070
									],
									[
										1392527,
										1392536
									],
									[
										1392754,
										1392763
									],
									[
										1392976,
										1392985
									],
									[
										1393296,
										1393305
									],
									[
										1393535,
										1393544
									],
									[
										1393826,
										1393835
									],
									[
										1394114,
										1394123
									],
									[
										1394414,
										1394423
									],
									[
										1394608,
										1394617
									],
									[
										1394926,
										1394935
									],
									[
										1395050,
										1395059
									],
									[
										1395370,
										1395379
									],
									[
										1395670,
										1395679
									],
									[
										1395964,
										1395973
									],
									[
										1396308,
										1396317
									],
									[
										1396551,
										1396560
									],
									[
										1396826,
										1396835
									],
									[
										1397171,
										1397180
									],
									[
										1397388,
										1397397
									],
									[
										1397705,
										1397714
									],
									[
										1397957,
										1397966
									],
									[
										1398164,
										1398173
									],
									[
										1398510,
										1398519
									],
									[
										1398819,
										1398828
									],
									[
										1399169,
										1399178
									],
									[
										1399279,
										1399288
									],
									[
										1399383,
										1399392
									],
									[
										1399658,
										1399667
									],
									[
										1399771,
										1399780
									],
									[
										1400148,
										1400157
									],
									[
										1400498,
										1400507
									],
									[
										1400781,
										1400790
									],
									[
										1401020,
										1401029
									],
									[
										1401402,
										1401411
									],
									[
										1401641,
										1401650
									],
									[
										1401814,
										1401823
									],
									[
										1402137,
										1402146
									],
									[
										1402427,
										1402436
									],
									[
										1402737,
										1402746
									],
									[
										1403140,
										1403149
									],
									[
										1403488,
										1403497
									],
									[
										1403747,
										1403756
									],
									[
										1404027,
										1404036
									],
									[
										1404301,
										1404310
									],
									[
										1404632,
										1404641
									],
									[
										1404900,
										1404909
									],
									[
										1405211,
										1405220
									],
									[
										1405388,
										1405388
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								1166417,
								1166417
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"default_dir": "C:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR",
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 40,
							"result_base_dir": "",
							"result_file_regex": "^([^ 	].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 419400.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "akun.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 65461,
						"regions":
						{
						},
						"selection":
						[
							[
								16367,
								16367
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										16373,
										16374
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/single_quote.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										16328,
										16329
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 4337.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "penjualan.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 73819,
						"regions":
						{
						},
						"selection":
						[
							[
								22352,
								22352
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 7451.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1026,
						"regions":
						{
						},
						"selection":
						[
							[
								1026,
								1026
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1025,
										1026
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										514,
										515
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"default_dir": "C:\\Program Files (x86)\\Odoo 8.0-20150121\\server\\openerp\\addons\\MMR",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "MMR.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"fal_leave_timesheethr_holida",
				"falinwa_module\\fal_leave_timesheet\\models\\hr_holidays.py"
			],
			[
				"fal_total_amount_hkd_storemodelsaccount_invoice",
				"falinwa_branch\\fal_total_amount_hkd_store\\models\\account_invoice.py"
			],
			[
				"gleize",
				"falinwa_module\\gleize_field_ext\\static\\src\\js\\gleize_field_ext.js"
			],
			[
				"sale_timesheetsale_timesheet.py",
				"addons\\sale_timesheet\\models\\sale_timesheet.py"
			],
			[
				"crmcrm_lead_view",
				"addons\\crm\\crm_lead_view.xml"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 287.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
